   1               		.file	"nrk_cpu.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 320               	.global	nrk_battery_save
 322               	nrk_battery_save:
 323               		.stabd	46,0,0
   1:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** /******************************************************************************
   2:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  All rights reserved.
   5:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
   6:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  10:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  14:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  GNU General Public License for more details.
  18:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  19:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  22:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Anthony Rowe
  24:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Zane Starr
  25:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Anand Eswaren
  26:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *******************************************************************************/
  27:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  28:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <include.h>
  29:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk.h>
  30:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <avr/sleep.h>
  31:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_stack_check.h>
  32:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_task.h>
  33:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_defs.h>
  34:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_cfg.h>
  35:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_timer.h>
  36:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_error.h>
  37:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  38:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #define BUILD_DATE "Date: " __DATE__ "\n"
  39:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** /*
  40:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** ***************************************************************************************************
  41:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                                        INITIALIZE A TASK'S STACK
  42:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  43:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** * Description: This function is highly processor specific.
  44:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  45:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** * Arguments  : task          is a pointer to the task code
  46:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  47:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *              pdata         is a pointer to a user supplied data area that will be passed to the t
  48:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                            when the task first executes.
  49:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  50:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
  51:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                            a 'free' entry on the task stack.  
  52:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                            'ptos' contains the HIGHEST valid address of the stack.  
  53:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  54:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *              opt           specifies options that can be used to alter the behavior of OSTaskStkI
  55:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                            We don't use have any option implemented for this project. You can jus
  56:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                            set opt to 0
  57:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  58:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** * Returns    : Always returns the location of the new top-of-stack' once the processor registers ha
  59:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *              been placed on the stack in the proper order.
  60:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  61:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** * Note(s)    : 
  62:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** ***************************************************************************************************
  63:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** */
  64:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  65:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  66:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_battery_save()
  67:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 325               	.LM0:
 326               	.LFBB1:
 327               	/* prologue: function */
 328               	/* frame size = 0 */
 329               	/* stack size = 0 */
 330               	.L__stack_usage = 0
 331 0000 0895      		ret
 333               	.Lscope1:
 335               		.stabd	78,0,0
 337               	.global	nrk_sleep
 339               	nrk_sleep:
 340               		.stabd	46,0,0
  68:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #ifdef NRK_BATTERY_SAVE
  69:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****  	_nrk_stop_os_timer();
  70:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         _nrk_set_next_wakeup(250);
  71:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_led_clr(0);
  72:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_led_set(1);
  73:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_led_clr(2);
  74:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_led_clr(3);
  75:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         SET_VREG_INACTIVE();
  76:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_sleep();
  77:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #endif
  78:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
  79:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  80:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_sleep()
  81:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 342               	.LM1:
 343               	.LFBB2:
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
  82:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     //PRR0 = 0xff;
  83:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     //PRR1 = 0xff;
  84:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     set_sleep_mode (SLEEP_MODE_PWR_SAVE);
 349               	.LM2:
 350 0002 83B7      		in r24,0x33
 351 0004 817F      		andi r24,lo8(-15)
 352 0006 8660      		ori r24,lo8(6)
 353 0008 83BF      		out 0x33,r24
  85:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     sleep_mode ();
 355               	.LM3:
 356 000a 83B7      		in r24,0x33
 357 000c 8160      		ori r24,lo8(1)
 358 000e 83BF      		out 0x33,r24
 359               	/* #APP */
 360               	 ;  85 "../../src/kernel/hal/atmega128rfa1/nrk_cpu.c" 1
 361 0010 8895      		sleep
 362               		
 363               	 ;  0 "" 2
 364               	/* #NOAPP */
 365 0012 83B7      		in r24,0x33
 366 0014 8E7F      		andi r24,lo8(-2)
 367 0016 83BF      		out 0x33,r24
 368 0018 0895      		ret
 370               	.Lscope2:
 372               		.stabd	78,0,0
 374               	.global	nrk_idle
 376               	nrk_idle:
 377               		.stabd	46,0,0
  86:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  87:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
  88:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  89:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_idle()
  90:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 379               	.LM4:
 380               	.LFBB3:
 381               	/* prologue: function */
 382               	/* frame size = 0 */
 383               	/* stack size = 0 */
 384               	.L__stack_usage = 0
  91:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  92:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     set_sleep_mode( SLEEP_MODE_IDLE);
 386               	.LM5:
 387 001a 83B7      		in r24,0x33
 388 001c 817F      		andi r24,lo8(-15)
 389 001e 83BF      		out 0x33,r24
  93:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     sleep_mode ();
 391               	.LM6:
 392 0020 83B7      		in r24,0x33
 393 0022 8160      		ori r24,lo8(1)
 394 0024 83BF      		out 0x33,r24
 395               	/* #APP */
 396               	 ;  93 "../../src/kernel/hal/atmega128rfa1/nrk_cpu.c" 1
 397 0026 8895      		sleep
 398               		
 399               	 ;  0 "" 2
 400               	/* #NOAPP */
 401 0028 83B7      		in r24,0x33
 402 002a 8E7F      		andi r24,lo8(-2)
 403 002c 83BF      		out 0x33,r24
 404 002e 0895      		ret
 406               	.Lscope3:
 408               		.stabd	78,0,0
 412               	.global	nrk_task_set_entry_function
 414               	nrk_task_set_entry_function:
 415               		.stabd	46,0,0
  94:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  95:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
  96:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  97:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_task_set_entry_function( nrk_task_type *task, void *func )
  98:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 417               	.LM7:
 418               	.LFBB4:
 419               	/* prologue: function */
 420               	/* frame size = 0 */
 421               	/* stack size = 0 */
 422               	.L__stack_usage = 0
  99:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** task->task=func;
 424               	.LM8:
 425 0030 FC01      		movw r30,r24
 426 0032 7683      		std Z+6,r23
 427 0034 6583      		std Z+5,r22
 428 0036 0895      		ret
 430               	.Lscope4:
 432               		.stabd	78,0,0
 437               	.global	nrk_task_set_stk
 439               	nrk_task_set_stk:
 440               		.stabd	46,0,0
 100:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 101:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 102:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
 103:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 442               	.LM9:
 443               	.LFBB5:
 444 0038 EF92      		push r14
 445 003a FF92      		push r15
 446 003c 0F93      		push r16
 447 003e 1F93      		push r17
 448 0040 CF93      		push r28
 449 0042 DF93      		push r29
 450               	/* prologue: function */
 451               	/* frame size = 0 */
 452               	/* stack size = 6 */
 453               	.L__stack_usage = 6
 454 0044 8C01      		movw r16,r24
 455 0046 7B01      		movw r14,r22
 456 0048 EA01      		movw r28,r20
 104:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 105:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
 458               	.LM10:
 459 004a 4032      		cpi r20,32
 460 004c 5105      		cpc r21,__zero_reg__
 461 004e 00F4      		brsh .L6
 463               	.LM11:
 464 0050 81E1      		ldi r24,lo8(17)
 465 0052 0E94 0000 		call nrk_error_add
 466               	.L6:
 106:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** task->Ptos = (void *) &stk_base[stk_size-1];
 468               	.LM12:
 469 0056 2197      		sbiw r28,1
 470 0058 CE0D      		add r28,r14
 471 005a DF1D      		adc r29,r15
 472 005c F801      		movw r30,r16
 473 005e D283      		std Z+2,r29
 474 0060 C183      		std Z+1,r28
 107:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** task->Pbos = (void *) &stk_base[0];
 476               	.LM13:
 477 0062 F482      		std Z+4,r15
 478 0064 E382      		std Z+3,r14
 479               	/* epilogue start */
 108:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 109:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 481               	.LM14:
 482 0066 DF91      		pop r29
 483 0068 CF91      		pop r28
 484 006a 1F91      		pop r17
 485 006c 0F91      		pop r16
 486 006e FF90      		pop r15
 487 0070 EF90      		pop r14
 488 0072 0895      		ret
 490               	.Lscope5:
 492               		.stabd	78,0,0
 496               	.global	nrk_task_stk_init
 498               	nrk_task_stk_init:
 499               		.stabd	46,0,0
 110:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 111:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void *nrk_task_stk_init (void (*task)(), void *ptos, void *pbos)
 112:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 501               	.LM15:
 502               	.LFBB6:
 503               	/* prologue: function */
 504               	/* frame size = 0 */
 505               	/* stack size = 0 */
 506               	.L__stack_usage = 0
 113:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     uint16_t *stk ;  // 2 bytes
 114:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     uint8_t *stkc; // 1 byte
 115:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 116:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
 117:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     stkc = (unsigned char*)stk;
 118:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
 508               	.LM16:
 509 0074 25E5      		ldi r18,lo8(85)
 510 0076 FA01      		movw r30,r20
 511 0078 2083      		st Z,r18
 119:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     stk    = (unsigned int *)ptos;          /* Load stack pointer */
 120:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     /* build a context for the new task */
 121:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     /* Where do these numbers come from? */
 122:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****    /* *(--stk) = 0x4f50;   // O P 
 123:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4d4e;   // M N 
 124:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4b4c;   // K L                      
 125:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x494a;   // I J                      
 126:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4748;   // G H                      
 127:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4546;   // E F                    
 128:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4344;   // C D    	
 129:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4142;   // A B
 130:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** */
 131:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     --stk;
 132:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     stkc = (unsigned char*)stk;	
 133:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
 513               	.LM17:
 514 007a FB01      		movw r30,r22
 515 007c 3297      		sbiw r30,2
 516 007e 9083      		st Z,r25
 134:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *stkc = (unsigned char)((unsigned int)(task)%256);
 518               	.LM18:
 519 0080 3196      		adiw r30,1
 520 0082 8083      		st Z,r24
 135:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 	
 136:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;
 522               	.LM19:
 523 0084 3397      		sbiw r30,3
 524 0086 1182      		std Z+1,__zero_reg__
 525 0088 1082      		st Z,__zero_reg__
 137:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;       
 527               	.LM20:
 528 008a 3297      		sbiw r30,2
 529 008c 1182      		std Z+1,__zero_reg__
 530 008e 1082      		st Z,__zero_reg__
 138:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;                        
 532               	.LM21:
 533 0090 3297      		sbiw r30,2
 534 0092 1182      		std Z+1,__zero_reg__
 535 0094 1082      		st Z,__zero_reg__
 139:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;                        
 537               	.LM22:
 538 0096 3297      		sbiw r30,2
 539 0098 1182      		std Z+1,__zero_reg__
 540 009a 1082      		st Z,__zero_reg__
 140:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;                         
 542               	.LM23:
 543 009c 3297      		sbiw r30,2
 544 009e 1182      		std Z+1,__zero_reg__
 545 00a0 1082      		st Z,__zero_reg__
 141:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;                         
 547               	.LM24:
 548 00a2 3297      		sbiw r30,2
 549 00a4 1182      		std Z+1,__zero_reg__
 550 00a6 1082      		st Z,__zero_reg__
 142:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;                        
 552               	.LM25:
 553 00a8 3297      		sbiw r30,2
 554 00aa 1182      		std Z+1,__zero_reg__
 555 00ac 1082      		st Z,__zero_reg__
 143:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 557               	.LM26:
 558 00ae 3297      		sbiw r30,2
 559 00b0 1182      		std Z+1,__zero_reg__
 560 00b2 1082      		st Z,__zero_reg__
 144:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 145:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 562               	.LM27:
 563 00b4 3297      		sbiw r30,2
 564 00b6 1182      		std Z+1,__zero_reg__
 565 00b8 1082      		st Z,__zero_reg__
 146:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 567               	.LM28:
 568 00ba 3297      		sbiw r30,2
 569 00bc 1182      		std Z+1,__zero_reg__
 570 00be 1082      		st Z,__zero_reg__
 147:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 572               	.LM29:
 573 00c0 3297      		sbiw r30,2
 574 00c2 1182      		std Z+1,__zero_reg__
 575 00c4 1082      		st Z,__zero_reg__
 148:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 577               	.LM30:
 578 00c6 3297      		sbiw r30,2
 579 00c8 1182      		std Z+1,__zero_reg__
 580 00ca 1082      		st Z,__zero_reg__
 149:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 582               	.LM31:
 583 00cc 3297      		sbiw r30,2
 584 00ce 1182      		std Z+1,__zero_reg__
 585 00d0 1082      		st Z,__zero_reg__
 150:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 587               	.LM32:
 588 00d2 3297      		sbiw r30,2
 589 00d4 1182      		std Z+1,__zero_reg__
 590 00d6 1082      		st Z,__zero_reg__
 151:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 592               	.LM33:
 593 00d8 3297      		sbiw r30,2
 594 00da 1182      		std Z+1,__zero_reg__
 595 00dc 1082      		st Z,__zero_reg__
 152:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 597               	.LM34:
 598 00de 3297      		sbiw r30,2
 599 00e0 1182      		std Z+1,__zero_reg__
 600 00e2 1082      		st Z,__zero_reg__
 153:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;
 602               	.LM35:
 603 00e4 CB01      		movw r24,r22
 604 00e6 8497      		sbiw r24,36
 605 00e8 FC01      		movw r30,r24
 606 00ea 1182      		std Z+1,__zero_reg__
 607 00ec 1082      		st Z,__zero_reg__
 154:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 155:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 156:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     return ((void *)stk);
 157:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 609               	.LM36:
 610 00ee 0895      		ret
 612               	.Lscope6:
 614               		.stabd	78,0,0
 616               	.global	nrk_stack_pointer_init
 618               	nrk_stack_pointer_init:
 619               		.stabd	46,0,0
 158:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 159:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** inline void nrk_stack_pointer_init()
 160:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 621               	.LM37:
 622               	.LFBB7:
 623               	/* prologue: function */
 624               	/* frame size = 0 */
 625               	/* stack size = 0 */
 626               	.L__stack_usage = 0
 161:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** unsigned char *stkc;
 162:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #ifdef KERNEL_STK_ARRAY
 163:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 164:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_kernel_stk[0]=STK_CANARY_VAL;
 165:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 166:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     #else
 167:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
 168:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         *stkc = STK_CANARY_VAL;
 628               	.LM38:
 629 00f0 85E5      		ldi r24,lo8(85)
 630 00f2 8093 FE40 		sts 16638,r24
 169:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
 170:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
 632               	.LM39:
 633 00f6 EEEF      		ldi r30,lo8(-2)
 634 00f8 F1E4      		ldi r31,lo8(65)
 635 00fa F093 0000 		sts nrk_kernel_stk_ptr+1,r31
 636 00fe E093 0000 		sts nrk_kernel_stk_ptr,r30
 171:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     #endif
 172:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 638               	.LM40:
 639 0102 80E0      		ldi r24,lo8(gs(_nrk_timer_tick))
 640 0104 90E0      		ldi r25,hi8(gs(_nrk_timer_tick))
 641 0106 9083      		st Z,r25
 173:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 643               	.LM41:
 644 0108 8093 FF41 		sts 16895,r24
 645 010c 0895      		ret
 647               	.Lscope7:
 649               		.stabd	78,0,0
 651               	.global	nrk_stack_pointer_restore
 653               	nrk_stack_pointer_restore:
 654               		.stabd	46,0,0
 174:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 175:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 176:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 177:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 178:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** inline void nrk_stack_pointer_restore()
 179:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 656               	.LM42:
 657               	.LFBB8:
 658               	/* prologue: function */
 659               	/* frame size = 0 */
 660               	/* stack size = 0 */
 661               	.L__stack_usage = 0
 180:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** unsigned char *stkc;
 181:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 182:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #ifdef KERNEL_STK_ARRAY
 183:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 184:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #else
 185:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
 186:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #endif
 187:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 663               	.LM43:
 664 010e 80E0      		ldi r24,lo8(gs(_nrk_timer_tick))
 665 0110 90E0      		ldi r25,hi8(gs(_nrk_timer_tick))
 666 0112 9093 FE41 		sts 16894,r25
 188:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 668               	.LM44:
 669 0116 8093 FF41 		sts 16895,r24
 670 011a 0895      		ret
 672               	.Lscope8:
 674               		.stabd	78,0,0
 676               	.global	nrk_target_start
 678               	nrk_target_start:
 679               		.stabd	46,0,0
 189:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 190:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 191:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** /* start the target running */
 192:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_target_start(void)
 193:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 681               	.LM45:
 682               	.LFBB9:
 683               	/* prologue: function */
 684               	/* frame size = 0 */
 685               	/* stack size = 0 */
 686               	.L__stack_usage = 0
 194:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 195:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****   _nrk_setup_timer();
 688               	.LM46:
 689 011c 0E94 0000 		call _nrk_setup_timer
 196:../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****   nrk_int_enable();  
 691               	.LM47:
 692 0120 0C94 0000 		jmp nrk_int_enable
 694               	.Lscope9:
 696               		.stabd	78,0,0
 697               		.comm	error_num,1,1
 698               		.comm	error_task,1,1
 699               		.comm	app_timer0_prescale,1,1
 700               		.comm	app_timer0_callback,2,1
 701               		.comm	_nrk_time_trigger,1,1
 702               		.comm	_nrk_prev_timer_val,1,1
 703               		.comm	nrk_system_time,8,1
 704               		.comm	nrk_sem_list,6,1
 705               		.comm	_nrk_resource_cnt,1,1
 706               		.comm	nrk_high_ready_TCB,2,1
 707               		.comm	nrk_high_ready_prio,1,1
 708               		.comm	nrk_cur_task_TCB,2,1
 709               		.comm	nrk_cur_task_prio,1,1
 710               		.comm	nrk_wakeup_signal,1,1
 711               		.comm	_head_node,2,1
 712               		.comm	_free_node,2,1
 713               		.comm	_nrk_readyQ,30,1
 714               		.comm	nrk_task_TCB,215,1
 715               		.comm	nrk_kernel_stk_ptr,2,1
 716               		.comm	nrk_idle_task_stk,128,1
 717               		.comm	_nrk_signal_list,4,1
 740               	.Letext0:
 741               		.ident	"GCC: (GNU) 4.9.1"
 742               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk_cpu.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:322    .text:0000000000000000 nrk_battery_save
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:339    .text:0000000000000002 nrk_sleep
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:376    .text:000000000000001a nrk_idle
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:414    .text:0000000000000030 nrk_task_set_entry_function
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:439    .text:0000000000000038 nrk_task_set_stk
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:498    .text:0000000000000074 nrk_task_stk_init
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:618    .text:00000000000000f0 nrk_stack_pointer_init
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:653    .text:000000000000010e nrk_stack_pointer_restore
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccLHGEOv.s:678    .text:000000000000011c nrk_target_start
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000008 nrk_system_time
                            *COM*:0000000000000006 nrk_sem_list
                            *COM*:0000000000000001 _nrk_resource_cnt
                            *COM*:0000000000000002 nrk_high_ready_TCB
                            *COM*:0000000000000001 nrk_high_ready_prio
                            *COM*:0000000000000002 nrk_cur_task_TCB
                            *COM*:0000000000000001 nrk_cur_task_prio
                            *COM*:0000000000000001 nrk_wakeup_signal
                            *COM*:0000000000000002 _head_node
                            *COM*:0000000000000002 _free_node
                            *COM*:000000000000001e _nrk_readyQ
                            *COM*:00000000000000d7 nrk_task_TCB
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_error_add
_nrk_timer_tick
_nrk_setup_timer
nrk_int_enable
__do_clear_bss
