   1               		.file	"nrk_scheduler.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 322               	.global	_nrk_scheduler
 324               	_nrk_scheduler:
 325               		.stabd	46,0,0
   1:../../src/kernel/source/nrk_scheduler.c **** /******************************************************************************
   2:../../src/kernel/source/nrk_scheduler.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk_scheduler.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk_scheduler.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk_scheduler.c **** *
   6:../../src/kernel/source/nrk_scheduler.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk_scheduler.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk_scheduler.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk_scheduler.c **** *
  10:../../src/kernel/source/nrk_scheduler.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk_scheduler.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk_scheduler.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk_scheduler.c **** *
  14:../../src/kernel/source/nrk_scheduler.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk_scheduler.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk_scheduler.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk_scheduler.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk_scheduler.c **** *
  19:../../src/kernel/source/nrk_scheduler.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk_scheduler.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk_scheduler.c **** *
  22:../../src/kernel/source/nrk_scheduler.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk_scheduler.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk_scheduler.c **** *  Zane Starr
  25:../../src/kernel/source/nrk_scheduler.c **** *  Anand Eswaren
  26:../../src/kernel/source/nrk_scheduler.c **** *******************************************************************************/
  27:../../src/kernel/source/nrk_scheduler.c **** 
  28:../../src/kernel/source/nrk_scheduler.c **** #include <nrk.h>
  29:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_task.h>
  30:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_defs.h>
  31:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_error.h>
  32:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_events.h>
  33:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_scheduler.h>
  34:../../src/kernel/source/nrk_scheduler.c **** #include <include.h>
  35:../../src/kernel/source/nrk_scheduler.c **** #include <ulib.h>
  36:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_timer.h>
  37:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_time.h>
  38:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_cfg.h>
  39:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_cpu.h>
  40:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_watchdog.h>
  41:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_platform_time.h>
  42:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_stats.h>
  43:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_sw_wdt.h>
  44:../../src/kernel/source/nrk_scheduler.c **** 
  45:../../src/kernel/source/nrk_scheduler.c **** 
  46:../../src/kernel/source/nrk_scheduler.c **** // This define was moved into nrk_platform_time.h since it needs to be different based on the clk s
  47:../../src/kernel/source/nrk_scheduler.c **** // 750 measure to 100uS
  48:../../src/kernel/source/nrk_scheduler.c **** // 800 * .125 = 100us
  49:../../src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    750
  50:../../src/kernel/source/nrk_scheduler.c **** // For rfa1:
  51:../../src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    1500 
  52:../../src/kernel/source/nrk_scheduler.c **** 
  53:../../src/kernel/source/nrk_scheduler.c **** uint8_t t;
  54:../../src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
  55:../../src/kernel/source/nrk_scheduler.c **** {
 327               	.LM0:
 328               	.LFBB1:
 329 0000 2F92      		push r2
 330 0002 3F92      		push r3
 331 0004 4F92      		push r4
 332 0006 5F92      		push r5
 333 0008 6F92      		push r6
 334 000a 7F92      		push r7
 335 000c 8F92      		push r8
 336 000e 9F92      		push r9
 337 0010 AF92      		push r10
 338 0012 BF92      		push r11
 339 0014 CF92      		push r12
 340 0016 DF92      		push r13
 341 0018 EF92      		push r14
 342 001a FF92      		push r15
 343 001c 0F93      		push r16
 344 001e 1F93      		push r17
 345 0020 CF93      		push r28
 346 0022 DF93      		push r29
 347 0024 00D0      		rcall .
 348 0026 1F92      		push __zero_reg__
 349 0028 CDB7      		in r28,__SP_L__
 350 002a DEB7      		in r29,__SP_H__
 351               	/* prologue: function */
 352               	/* frame size = 3 */
 353               	/* stack size = 21 */
 354               	.L__stack_usage = 21
  56:../../src/kernel/source/nrk_scheduler.c ****     int8_t task_ID;
  57:../../src/kernel/source/nrk_scheduler.c ****     uint16_t next_wake;
  58:../../src/kernel/source/nrk_scheduler.c ****     uint16_t start_time_stamp;
  59:../../src/kernel/source/nrk_scheduler.c **** 
  60:../../src/kernel/source/nrk_scheduler.c ****     nrk_int_enable();   // this should be removed...  Not needed
 356               	.LM1:
 357 002c 0E94 0000 		call nrk_int_enable
  61:../../src/kernel/source/nrk_scheduler.c **** 
  62:../../src/kernel/source/nrk_scheduler.c **** 
  63:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
  64:../../src/kernel/source/nrk_scheduler.c ****     _nrk_precision_os_timer_reset();
 359               	.LM2:
 360 0030 0E94 0000 		call _nrk_precision_os_timer_reset
  65:../../src/kernel/source/nrk_scheduler.c ****     _nrk_high_speed_timer_reset();
 362               	.LM3:
 363 0034 0E94 0000 		call _nrk_high_speed_timer_reset
  66:../../src/kernel/source/nrk_scheduler.c ****     start_time_stamp=_nrk_high_speed_timer_get();
 365               	.LM4:
 366 0038 0E94 0000 		call _nrk_high_speed_timer_get
 367 003c 1C01      		movw r2,r24
  67:../../src/kernel/source/nrk_scheduler.c **** #endif
  68:../../src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
 369               	.LM5:
 370 003e 8AEF      		ldi r24,lo8(-6)
 371 0040 0E94 0000 		call _nrk_set_next_wakeup
  69:../../src/kernel/source/nrk_scheduler.c ****     // Set to huge number which will later get set to min
  70:../../src/kernel/source/nrk_scheduler.c **** 
  71:../../src/kernel/source/nrk_scheduler.c ****     next_wake=60000;
  72:../../src/kernel/source/nrk_scheduler.c ****     // Safety zone starts here....
  73:../../src/kernel/source/nrk_scheduler.c **** 
  74:../../src/kernel/source/nrk_scheduler.c **** 
  75:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_WATCHDOG
  76:../../src/kernel/source/nrk_scheduler.c ****     nrk_watchdog_reset();
  77:../../src/kernel/source/nrk_scheduler.c **** #endif
  78:../../src/kernel/source/nrk_scheduler.c **** 
  79:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_SW_WDT
  80:../../src/kernel/source/nrk_scheduler.c ****     _nrk_sw_wdt_check();
  81:../../src/kernel/source/nrk_scheduler.c **** #endif
  82:../../src/kernel/source/nrk_scheduler.c **** 
  83:../../src/kernel/source/nrk_scheduler.c **** //printf( "last run: %d\n",nrk_cur_task_TCB->task_ID );
  84:../../src/kernel/source/nrk_scheduler.c **** //for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
  85:../../src/kernel/source/nrk_scheduler.c **** //{
  86:../../src/kernel/source/nrk_scheduler.c **** //printf( "%d nw:%lu\n",task_ID,nrk_task_TCB[task_ID].next_wakeup );
  87:../../src/kernel/source/nrk_scheduler.c **** //}
  88:../../src/kernel/source/nrk_scheduler.c **** 
  89:../../src/kernel/source/nrk_scheduler.c **** 
  90:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
  91:../../src/kernel/source/nrk_scheduler.c ****     //nrk_kprintf( PSTR("*"));
  92:../../src/kernel/source/nrk_scheduler.c ****     //Check if OS tick was delayed...
  93:../../src/kernel/source/nrk_scheduler.c ****     // if(_nrk_cpu_state!=CPU_SLEEP && _nrk_os_timer_get()!=0) {
  94:../../src/kernel/source/nrk_scheduler.c ****     //		nrk_kprintf( PSTR("X" ));
  95:../../src/kernel/source/nrk_scheduler.c ****     //printf( "%u ",_nrk_os_timer_get());
  96:../../src/kernel/source/nrk_scheduler.c ****     //	}
  97:../../src/kernel/source/nrk_scheduler.c ****     //printf( "%u\r\n",_nrk_prev_timer_val);
  98:../../src/kernel/source/nrk_scheduler.c ****     if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
  99:../../src/kernel/source/nrk_scheduler.c ****         nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
 100:../../src/kernel/source/nrk_scheduler.c **** #endif
 101:../../src/kernel/source/nrk_scheduler.c ****     //while(_nrk_time_trigger>0)
 102:../../src/kernel/source/nrk_scheduler.c ****     //{
 103:../../src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
 373               	.LM6:
 374 0044 A091 0000 		lds r26,_nrk_prev_timer_val
 375 0048 B0E0      		ldi r27,0
 376 004a 23EB      		ldi r18,lo8(-77)
 377 004c 36EE      		ldi r19,lo8(-26)
 378 004e 4EE0      		ldi r20,lo8(14)
 379 0050 50E0      		ldi r21,0
 380 0052 0E94 0000 		call __muluhisi3
 381 0056 0091 0000 		lds r16,nrk_system_time+4
 382 005a 1091 0000 		lds r17,nrk_system_time+4+1
 383 005e 2091 0000 		lds r18,nrk_system_time+4+2
 384 0062 3091 0000 		lds r19,nrk_system_time+4+3
 385 0066 6B01      		movw r12,r22
 386 0068 7C01      		movw r14,r24
 387 006a C00E      		add r12,r16
 388 006c D11E      		adc r13,r17
 389 006e E21E      		adc r14,r18
 390 0070 F31E      		adc r15,r19
 104:../../src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 392               	.LM7:
 393 0072 C701      		movw r24,r14
 394 0074 B601      		movw r22,r12
 395 0076 23EB      		ldi r18,lo8(-77)
 396 0078 36EE      		ldi r19,lo8(-26)
 397 007a 4EE0      		ldi r20,lo8(14)
 398 007c 50E0      		ldi r21,0
 399 007e 0E94 0000 		call __udivmodsi4
 400 0082 2601      		movw r4,r12
 401 0084 3701      		movw r6,r14
 402 0086 461A      		sub r4,r22
 403 0088 570A      		sbc r5,r23
 404 008a 680A      		sbc r6,r24
 405 008c 790A      		sbc r7,r25
 406 008e D301      		movw r26,r6
 407 0090 C201      		movw r24,r4
 408 0092 0091 0000 		lds r16,nrk_system_time
 409 0096 1091 0000 		lds r17,nrk_system_time+1
 410 009a 2091 0000 		lds r18,nrk_system_time+2
 411 009e 3091 0000 		lds r19,nrk_system_time+3
 105:../../src/kernel/source/nrk_scheduler.c **** 
 106:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 107:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
 108:../../src/kernel/source/nrk_scheduler.c ****     {
 109:../../src/kernel/source/nrk_scheduler.c ****         if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
 110:../../src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 111:../../src/kernel/source/nrk_scheduler.c ****         // Add 0 time since the preempted call before set the correct value
 112:../../src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
 113:../../src/kernel/source/nrk_scheduler.c ****     }
 114:../../src/kernel/source/nrk_scheduler.c ****     else
 115:../../src/kernel/source/nrk_scheduler.c ****     {
 116:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->suspend_flag==1)
 117:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 118:../../src/kernel/source/nrk_scheduler.c ****         else
 119:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 120:../../src/kernel/source/nrk_scheduler.c ****     }
 121:../../src/kernel/source/nrk_scheduler.c **** #endif
 122:../../src/kernel/source/nrk_scheduler.c **** 
 123:../../src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 124:../../src/kernel/source/nrk_scheduler.c ****     {
 125:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 126:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 127:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 413               	.LM8:
 414 00a2 43EB      		ldi r20,lo8(-77)
 415 00a4 842E      		mov r8,r20
 416 00a6 46EE      		ldi r20,lo8(-26)
 417 00a8 942E      		mov r9,r20
 418 00aa 4EE0      		ldi r20,lo8(14)
 419 00ac A42E      		mov r10,r20
 420 00ae B12C      		mov r11,__zero_reg__
 421               	.L2:
 422 00b0 6801      		movw r12,r16
 423 00b2 7901      		movw r14,r18
 424 00b4 4FEF      		ldi r20,-1
 425 00b6 C41A      		sub r12,r20
 426 00b8 D40A      		sbc r13,r20
 427 00ba E40A      		sbc r14,r20
 428 00bc F40A      		sbc r15,r20
 123:../../src/kernel/source/nrk_scheduler.c ****     {
 430               	.LM9:
 431 00be 8115      		cp r24,__zero_reg__
 432 00c0 5AEC      		ldi r21,-54
 433 00c2 9507      		cpc r25,r21
 434 00c4 5AE9      		ldi r21,-102
 435 00c6 A507      		cpc r26,r21
 436 00c8 5BE3      		ldi r21,59
 437 00ca B507      		cpc r27,r21
 438 00cc 00F0      		brlo .L79
 125:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 440               	.LM10:
 441 00ce 2C01      		movw r4,r24
 442 00d0 3D01      		movw r6,r26
 443 00d2 2AEC      		ldi r18,-54
 444 00d4 521A      		sub r5,r18
 445 00d6 2AE9      		ldi r18,-102
 446 00d8 620A      		sbc r6,r18
 447 00da 2BE3      		ldi r18,59
 448 00dc 720A      		sbc r7,r18
 450               	.LM11:
 451 00de C301      		movw r24,r6
 452 00e0 B201      		movw r22,r4
 453 00e2 A501      		movw r20,r10
 454 00e4 9401      		movw r18,r8
 455 00e6 0E94 0000 		call __udivmodsi4
 456 00ea A301      		movw r20,r6
 457 00ec 9201      		movw r18,r4
 458 00ee 261B      		sub r18,r22
 459 00f0 370B      		sbc r19,r23
 460 00f2 480B      		sbc r20,r24
 461 00f4 590B      		sbc r21,r25
 462 00f6 DA01      		movw r26,r20
 463 00f8 C901      		movw r24,r18
 464 00fa 9701      		movw r18,r14
 465 00fc 8601      		movw r16,r12
 466 00fe 00C0      		rjmp .L2
 467               	.L79:
 468 0100 8093 0000 		sts nrk_system_time+4,r24
 469 0104 9093 0000 		sts nrk_system_time+4+1,r25
 470 0108 A093 0000 		sts nrk_system_time+4+2,r26
 471 010c B093 0000 		sts nrk_system_time+4+3,r27
 472 0110 0093 0000 		sts nrk_system_time,r16
 473 0114 1093 0000 		sts nrk_system_time+1,r17
 474 0118 2093 0000 		sts nrk_system_time+2,r18
 475 011c 3093 0000 		sts nrk_system_time+3,r19
 128:../../src/kernel/source/nrk_scheduler.c ****     }
 129:../../src/kernel/source/nrk_scheduler.c ****     //  _nrk_time_trigger--;
 130:../../src/kernel/source/nrk_scheduler.c ****     //}
 131:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
 477               	.LM12:
 478 0120 E091 0000 		lds r30,nrk_cur_task_TCB
 479 0124 F091 0000 		lds r31,nrk_cur_task_TCB+1
 480 0128 8581      		ldd r24,Z+5
 481 012a 8823      		tst r24
 482 012c 01F0      		breq .L4
 484               	.LM13:
 485 012e 8185      		ldd r24,Z+9
 486 0130 8430      		cpi r24,lo8(4)
 487 0132 01F0      		breq .L4
 132:../../src/kernel/source/nrk_scheduler.c ****     {
 133:../../src/kernel/source/nrk_scheduler.c ****         //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 134:../../src/kernel/source/nrk_scheduler.c **** 
 135:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
 489               	.LM14:
 490 0134 8781      		ldd r24,Z+7
 491 0136 8230      		cpi r24,lo8(2)
 492 0138 01F0      		breq .L75
 136:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 137:../../src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
 494               	.LM15:
 495 013a 8823      		tst r24
 496 013c 01F0      		breq .L7
 498               	.LM16:
 499 013e 8681      		ldd r24,Z+6
 500 0140 8111      		cpse r24,__zero_reg__
 501 0142 00C0      		rjmp .L8
 502               	.L75:
 138:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 504               	.LM17:
 505 0144 85E0      		ldi r24,lo8(5)
 506 0146 00C0      		rjmp .L76
 507               	.L8:
 139:../../src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
 140:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 509               	.LM18:
 510 0148 83E0      		ldi r24,lo8(3)
 511               	.L76:
 512 014a 8187      		std Z+9,r24
 513 014c 00C0      		rjmp .L6
 514               	.L7:
 141:../../src/kernel/source/nrk_scheduler.c ****         else
 142:../../src/kernel/source/nrk_scheduler.c ****         {
 143:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 516               	.LM19:
 517 014e 83E0      		ldi r24,lo8(3)
 518 0150 8187      		std Z+9,r24
 144:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->event_suspend=0;
 520               	.LM20:
 521 0152 1782      		std Z+7,__zero_reg__
 145:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->nw_flag=0;
 523               	.LM21:
 524 0154 1682      		std Z+6,__zero_reg__
 146:../../src/kernel/source/nrk_scheduler.c **** 	    // agr added to fix initial startup scheduling problem
 147:../../src/kernel/source/nrk_scheduler.c ****             if(nrk_cur_task_TCB->next_wakeup==0) {
 526               	.LM22:
 527 0156 8589      		ldd r24,Z+21
 528 0158 9689      		ldd r25,Z+22
 529 015a A789      		ldd r26,Z+23
 530 015c B08D      		ldd r27,Z+24
 531 015e 892B      		or r24,r25
 532 0160 8A2B      		or r24,r26
 533 0162 8B2B      		or r24,r27
 534 0164 01F4      		brne .L6
 148:../../src/kernel/source/nrk_scheduler.c **** 		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
 536               	.LM23:
 537 0166 818D      		ldd r24,Z+25
 538 0168 928D      		ldd r25,Z+26
 539 016a A38D      		ldd r26,Z+27
 540 016c B48D      		ldd r27,Z+28
 541 016e 858B      		std Z+21,r24
 542 0170 968B      		std Z+22,r25
 543 0172 A78B      		std Z+23,r26
 544 0174 B08F      		std Z+24,r27
 545               	.L6:
 149:../../src/kernel/source/nrk_scheduler.c **** 		}
 150:../../src/kernel/source/nrk_scheduler.c ****         }
 151:../../src/kernel/source/nrk_scheduler.c ****         nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
 547               	.LM24:
 548 0176 8085      		ldd r24,Z+8
 549 0178 0E94 0000 		call nrk_rem_from_readyQ
 550               	.L4:
 152:../../src/kernel/source/nrk_scheduler.c ****     }
 153:../../src/kernel/source/nrk_scheduler.c ****     // nrk_print_readyQ();
 154:../../src/kernel/source/nrk_scheduler.c **** 
 155:../../src/kernel/source/nrk_scheduler.c ****     // Update cpu used value for ended task
 156:../../src/kernel/source/nrk_scheduler.c ****     // If the task has used its reserve, suspend task
 157:../../src/kernel/source/nrk_scheduler.c ****     // Don't disable IdleTask which is 0
 158:../../src/kernel/source/nrk_scheduler.c ****     // Don't decrease cpu_remaining if reserve is 0 and hence disabled
 159:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_t
 552               	.LM25:
 553 017c E091 0000 		lds r30,nrk_cur_task_TCB
 554 0180 F091 0000 		lds r31,nrk_cur_task_TCB+1
 555 0184 85A1      		ldd r24,Z+37
 556 0186 96A1      		ldd r25,Z+38
 557 0188 A7A1      		ldd r26,Z+39
 558 018a B0A5      		ldd r27,Z+40
 559 018c 892B      		or r24,r25
 560 018e 8A2B      		or r24,r26
 561 0190 8B2B      		or r24,r27
 562 0192 01F4      		brne .+2
 563 0194 00C0      		rjmp .L10
 565               	.LM26:
 566 0196 2085      		ldd r18,Z+8
 567 0198 2223      		tst r18
 568 019a 01F4      		brne .+2
 569 019c 00C0      		rjmp .L10
 571               	.LM27:
 572 019e 8185      		ldd r24,Z+9
 573 01a0 8430      		cpi r24,lo8(4)
 574 01a2 01F0      		breq .L10
 160:../../src/kernel/source/nrk_scheduler.c ****     {
 161:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
 576               	.LM28:
 577 01a4 858D      		ldd r24,Z+29
 578 01a6 968D      		ldd r25,Z+30
 579 01a8 A78D      		ldd r26,Z+31
 580 01aa B0A1      		ldd r27,Z+32
 581 01ac 4091 0000 		lds r20,_nrk_prev_timer_val
 582 01b0 50E0      		ldi r21,0
 583 01b2 60E0      		ldi r22,0
 584 01b4 70E0      		ldi r23,0
 585 01b6 8417      		cp r24,r20
 586 01b8 9507      		cpc r25,r21
 587 01ba A607      		cpc r26,r22
 588 01bc B707      		cpc r27,r23
 589 01be 00F4      		brsh .L12
 162:../../src/kernel/source/nrk_scheduler.c ****         {
 163:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 164:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 165:../../src/kernel/source/nrk_scheduler.c **** #endif
 166:../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
 591               	.LM29:
 592 01c0 622F      		mov r22,r18
 593 01c2 82E0      		ldi r24,lo8(2)
 594 01c4 0E94 0000 		call nrk_kernel_error_add
 167:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining=0;
 596               	.LM30:
 597 01c8 E091 0000 		lds r30,nrk_cur_task_TCB
 598 01cc F091 0000 		lds r31,nrk_cur_task_TCB+1
 599 01d0 158E      		std Z+29,__zero_reg__
 600 01d2 168E      		std Z+30,__zero_reg__
 601 01d4 178E      		std Z+31,__zero_reg__
 602 01d6 10A2      		std Z+32,__zero_reg__
 603 01d8 00C0      		rjmp .L13
 604               	.L12:
 168:../../src/kernel/source/nrk_scheduler.c ****         }
 169:../../src/kernel/source/nrk_scheduler.c ****         else
 170:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
 606               	.LM31:
 607 01da 841B      		sub r24,r20
 608 01dc 950B      		sbc r25,r21
 609 01de A60B      		sbc r26,r22
 610 01e0 B70B      		sbc r27,r23
 611 01e2 858F      		std Z+29,r24
 612 01e4 968F      		std Z+30,r25
 613 01e6 A78F      		std Z+31,r26
 614 01e8 B0A3      		std Z+32,r27
 615               	.L13:
 171:../../src/kernel/source/nrk_scheduler.c **** 
 172:../../src/kernel/source/nrk_scheduler.c ****         task_ID= nrk_cur_task_TCB->task_ID;
 617               	.LM32:
 618 01ea E091 0000 		lds r30,nrk_cur_task_TCB
 619 01ee F091 0000 		lds r31,nrk_cur_task_TCB+1
 620 01f2 1085      		ldd r17,Z+8
 173:../../src/kernel/source/nrk_scheduler.c **** 
 174:../../src/kernel/source/nrk_scheduler.c ****         if (nrk_cur_task_TCB->cpu_remaining ==0 )
 622               	.LM33:
 623 01f4 858D      		ldd r24,Z+29
 624 01f6 968D      		ldd r25,Z+30
 625 01f8 A78D      		ldd r26,Z+31
 626 01fa B0A1      		ldd r27,Z+32
 627 01fc 892B      		or r24,r25
 628 01fe 8A2B      		or r24,r26
 629 0200 8B2B      		or r24,r27
 630 0202 01F4      		brne .L10
 175:../../src/kernel/source/nrk_scheduler.c ****         {
 176:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 177:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 178:../../src/kernel/source/nrk_scheduler.c **** #endif
 179:../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
 632               	.LM34:
 633 0204 612F      		mov r22,r17
 634 0206 83E0      		ldi r24,lo8(3)
 635 0208 0E94 0000 		call nrk_kernel_error_add
 180:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 637               	.LM35:
 638 020c E091 0000 		lds r30,nrk_cur_task_TCB
 639 0210 F091 0000 		lds r31,nrk_cur_task_TCB+1
 640 0214 83E0      		ldi r24,lo8(3)
 641 0216 8187      		std Z+9,r24
 181:../../src/kernel/source/nrk_scheduler.c ****             nrk_rem_from_readyQ(task_ID);
 643               	.LM36:
 644 0218 812F      		mov r24,r17
 645 021a 0E94 0000 		call nrk_rem_from_readyQ
 646               	.L10:
 647 021e 80E0      		ldi r24,lo8(nrk_task_TCB+9)
 648 0220 90E0      		ldi r25,hi8(nrk_task_TCB+9)
 649 0222 9B83      		std Y+3,r25
 650 0224 8A83      		std Y+2,r24
 127:../../src/kernel/source/nrk_scheduler.c ****     }
 652               	.LM37:
 653 0226 00E6      		ldi r16,lo8(96)
 654 0228 1AEE      		ldi r17,lo8(-22)
 655 022a 1982      		std Y+1,__zero_reg__
 182:../../src/kernel/source/nrk_scheduler.c ****         }
 183:../../src/kernel/source/nrk_scheduler.c ****     }
 184:../../src/kernel/source/nrk_scheduler.c **** 
 185:../../src/kernel/source/nrk_scheduler.c ****     // Check I/O nrk_queues to add tasks with remaining cpu back...
 186:../../src/kernel/source/nrk_scheduler.c **** 
 187:../../src/kernel/source/nrk_scheduler.c ****     // Add eligable tasks back to the ready Queue
 188:../../src/kernel/source/nrk_scheduler.c ****     // At the same time find the next earliest wakeup
 189:../../src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 190:../../src/kernel/source/nrk_scheduler.c ****     {
 191:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 192:../../src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 193:../../src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 194:../../src/kernel/source/nrk_scheduler.c ****         {
 195:../../src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 196:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 197:../../src/kernel/source/nrk_scheduler.c ****             else
 198:../../src/kernel/source/nrk_scheduler.c ****             {
 199:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 200:../../src/kernel/source/nrk_scheduler.c ****             }
 201:../../src/kernel/source/nrk_scheduler.c ****             // Do next period book keeping.
 202:../../src/kernel/source/nrk_scheduler.c ****             // next_period needs to be set such that the period is kept consistent even if other
 203:../../src/kernel/source/nrk_scheduler.c ****             // wait until functions are called.
 204:../../src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 205:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 206:../../src/kernel/source/nrk_scheduler.c ****             else
 207:../../src/kernel/source/nrk_scheduler.c ****             {
 208:../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 209:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 210:../../src/kernel/source/nrk_scheduler.c ****                 else
 211:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 212:../../src/kernel/source/nrk_scheduler.c ****             }
 213:../../src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 214:../../src/kernel/source/nrk_scheduler.c **** 
 215:../../src/kernel/source/nrk_scheduler.c ****         }
 216:../../src/kernel/source/nrk_scheduler.c **** 
 217:../../src/kernel/source/nrk_scheduler.c **** 
 218:../../src/kernel/source/nrk_scheduler.c ****         // Look for Next Task that Might Wakeup to interrupt current task
 219:../../src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 220:../../src/kernel/source/nrk_scheduler.c ****         {
 221:../../src/kernel/source/nrk_scheduler.c ****              //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
 222:../../src/kernel/source/nrk_scheduler.c ****             // If a task needs to become READY, make it ready
 223:../../src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 224:../../src/kernel/source/nrk_scheduler.c ****             {
 225:../../src/kernel/source/nrk_scheduler.c ****                 // printf( "Adding back %d\n",task_ID );
 226:../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 227:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 228:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 229:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 230:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 231:../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 232:../../src/kernel/source/nrk_scheduler.c ****                 {
 233:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 234:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 235:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 236:../../src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 237:../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 238:../../src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 239:../../src/kernel/source/nrk_scheduler.c ****                 }
 240:../../src/kernel/source/nrk_scheduler.c ****                 else
 241:../../src/kernel/source/nrk_scheduler.c ****                 {
 242:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 243:../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 244:../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].num_periods--;
 245:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 246:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 247:../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 657               	.LM38:
 658 022c 2AEF      		ldi r18,lo8(-6)
 659 022e C22E      		mov r12,r18
 660 0230 D12C      		mov r13,__zero_reg__
 661 0232 E12C      		mov r14,__zero_reg__
 662 0234 F12C      		mov r15,__zero_reg__
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 664               	.LM39:
 665 0236 812C      		mov r8,__zero_reg__
 666 0238 912C      		mov r9,__zero_reg__
 667 023a 5401      		movw r10,r8
 668 023c 8394      		inc r8
 669               	.L28:
 670 023e EA81      		ldd r30,Y+2
 671 0240 FB81      		ldd r31,Y+3
 672 0242 3197      		sbiw r30,1
 191:../../src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 674               	.LM40:
 675 0244 8081      		ld r24,Z
 676 0246 8F3F      		cpi r24,lo8(-1)
 677 0248 01F4      		brne .+2
 678 024a 00C0      		rjmp .L14
 679 024c EA81      		ldd r30,Y+2
 680 024e FB81      		ldd r31,Y+3
 681 0250 3497      		sbiw r30,4
 192:../../src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 683               	.LM41:
 684 0252 1082      		st Z,__zero_reg__
 193:../../src/kernel/source/nrk_scheduler.c ****         {
 686               	.LM42:
 687 0254 8823      		tst r24
 688 0256 01F4      		brne .+2
 689 0258 00C0      		rjmp .L16
 193:../../src/kernel/source/nrk_scheduler.c ****         {
 691               	.LM43:
 692 025a EA81      		ldd r30,Y+2
 693 025c FB81      		ldd r31,Y+3
 694 025e 8081      		ld r24,Z
 695 0260 8430      		cpi r24,lo8(4)
 696 0262 01F4      		brne .+2
 697 0264 00C0      		rjmp .L16
 195:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 699               	.LM44:
 700 0266 4484      		ldd r4,Z+12
 701 0268 5584      		ldd r5,Z+13
 702 026a 6684      		ldd r6,Z+14
 703 026c 7784      		ldd r7,Z+15
 704 026e 6091 0000 		lds r22,_nrk_prev_timer_val
 705 0272 70E0      		ldi r23,0
 706 0274 80E0      		ldi r24,0
 707 0276 90E0      		ldi r25,0
 708 0278 4616      		cp r4,r22
 709 027a 5706      		cpc r5,r23
 710 027c 6806      		cpc r6,r24
 711 027e 7906      		cpc r7,r25
 712 0280 00F0      		brlo .L18
 196:../../src/kernel/source/nrk_scheduler.c ****             else
 714               	.LM45:
 715 0282 461A      		sub r4,r22
 716 0284 570A      		sbc r5,r23
 717 0286 680A      		sbc r6,r24
 718 0288 790A      		sbc r7,r25
 719 028a 4486      		std Z+12,r4
 720 028c 5586      		std Z+13,r5
 721 028e 6686      		std Z+14,r6
 722 0290 7786      		std Z+15,r7
 723 0292 00C0      		rjmp .L19
 724               	.L18:
 199:../../src/kernel/source/nrk_scheduler.c ****             }
 726               	.LM46:
 727 0294 EA81      		ldd r30,Y+2
 728 0296 FB81      		ldd r31,Y+3
 729 0298 1486      		std Z+12,__zero_reg__
 730 029a 1586      		std Z+13,__zero_reg__
 731 029c 1686      		std Z+14,__zero_reg__
 732 029e 1786      		std Z+15,__zero_reg__
 733               	.L19:
 204:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 735               	.LM47:
 736 02a0 EA81      		ldd r30,Y+2
 737 02a2 FB81      		ldd r31,Y+3
 738 02a4 4088      		ldd r4,Z+16
 739 02a6 5188      		ldd r5,Z+17
 740 02a8 6288      		ldd r6,Z+18
 741 02aa 7388      		ldd r7,Z+19
 742 02ac 4616      		cp r4,r22
 743 02ae 5706      		cpc r5,r23
 744 02b0 6806      		cpc r6,r24
 745 02b2 7906      		cpc r7,r25
 746 02b4 00F0      		brlo .L20
 205:../../src/kernel/source/nrk_scheduler.c ****             else
 748               	.LM48:
 749 02b6 461A      		sub r4,r22
 750 02b8 570A      		sbc r5,r23
 751 02ba 680A      		sbc r6,r24
 752 02bc 790A      		sbc r7,r25
 753 02be 408A      		std Z+16,r4
 754 02c0 518A      		std Z+17,r5
 755 02c2 628A      		std Z+18,r6
 756 02c4 738A      		std Z+19,r7
 757 02c6 00C0      		rjmp .L21
 758               	.L20:
 208:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 760               	.LM49:
 761 02c8 EA81      		ldd r30,Y+2
 762 02ca FB81      		ldd r31,Y+3
 763 02cc 208D      		ldd r18,Z+24
 764 02ce 318D      		ldd r19,Z+25
 765 02d0 428D      		ldd r20,Z+26
 766 02d2 538D      		ldd r21,Z+27
 767 02d4 6217      		cp r22,r18
 768 02d6 7307      		cpc r23,r19
 769 02d8 8407      		cpc r24,r20
 770 02da 9507      		cpc r25,r21
 771 02dc 00F4      		brsh .L22
 209:../../src/kernel/source/nrk_scheduler.c ****                 else
 773               	.LM50:
 774 02de 2901      		movw r4,r18
 775 02e0 3A01      		movw r6,r20
 776 02e2 461A      		sub r4,r22
 777 02e4 570A      		sbc r5,r23
 778 02e6 680A      		sbc r6,r24
 779 02e8 790A      		sbc r7,r25
 780 02ea 408A      		std Z+16,r4
 781 02ec 518A      		std Z+17,r5
 782 02ee 628A      		std Z+18,r6
 783 02f0 738A      		std Z+19,r7
 784 02f2 00C0      		rjmp .L21
 785               	.L22:
 211:../../src/kernel/source/nrk_scheduler.c ****             }
 787               	.LM51:
 788 02f4 0E94 0000 		call __udivmodsi4
 789 02f8 EA81      		ldd r30,Y+2
 790 02fa FB81      		ldd r31,Y+3
 791 02fc 608B      		std Z+16,r22
 792 02fe 718B      		std Z+17,r23
 793 0300 828B      		std Z+18,r24
 794 0302 938B      		std Z+19,r25
 795               	.L21:
 213:../../src/kernel/source/nrk_scheduler.c **** 
 797               	.LM52:
 798 0304 EA81      		ldd r30,Y+2
 799 0306 FB81      		ldd r31,Y+3
 800 0308 8089      		ldd r24,Z+16
 801 030a 9189      		ldd r25,Z+17
 802 030c A289      		ldd r26,Z+18
 803 030e B389      		ldd r27,Z+19
 804 0310 892B      		or r24,r25
 805 0312 8A2B      		or r24,r26
 806 0314 8B2B      		or r24,r27
 807 0316 01F4      		brne .L16
 213:../../src/kernel/source/nrk_scheduler.c **** 
 809               	.LM53:
 810 0318 808D      		ldd r24,Z+24
 811 031a 918D      		ldd r25,Z+25
 812 031c A28D      		ldd r26,Z+26
 813 031e B38D      		ldd r27,Z+27
 814 0320 808B      		std Z+16,r24
 815 0322 918B      		std Z+17,r25
 816 0324 A28B      		std Z+18,r26
 817 0326 B38B      		std Z+19,r27
 818               	.L16:
 219:../../src/kernel/source/nrk_scheduler.c ****         {
 820               	.LM54:
 821 0328 EA81      		ldd r30,Y+2
 822 032a FB81      		ldd r31,Y+3
 823 032c 8081      		ld r24,Z
 824 032e 8330      		cpi r24,lo8(3)
 825 0330 01F0      		breq .+2
 826 0332 00C0      		rjmp .L14
 223:../../src/kernel/source/nrk_scheduler.c ****             {
 828               	.LM55:
 829 0334 8485      		ldd r24,Z+12
 830 0336 9585      		ldd r25,Z+13
 831 0338 A685      		ldd r26,Z+14
 832 033a B785      		ldd r27,Z+15
 833 033c 892B      		or r24,r25
 834 033e 8A2B      		or r24,r26
 835 0340 8B2B      		or r24,r27
 836 0342 01F0      		breq .+2
 837 0344 00C0      		rjmp .L23
 838 0346 DF01      		movw r26,r30
 839 0348 1297      		sbiw r26,2
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 841               	.LM56:
 842 034a 8C91      		ld r24,X
 843 034c 9F01      		movw r18,r30
 844 034e 2350      		subi r18,3
 845 0350 3109      		sbc r19,__zero_reg__
 846 0352 8823      		tst r24
 847 0354 01F0      		breq .L24
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 849               	.LM57:
 850 0356 F901      		movw r30,r18
 851 0358 8081      		ld r24,Z
 852 035a 8823      		tst r24
 853 035c 01F0      		breq .L24
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 855               	.LM58:
 856 035e B501      		movw r22,r10
 857 0360 A401      		movw r20,r8
 858 0362 0090 0000 		lds r0,nrk_wakeup_signal
 859 0366 00C0      		rjmp 2f
 860               		1:
 861 0368 440F      		lsl r20
 862 036a 551F      		rol r21
 863 036c 661F      		rol r22
 864 036e 771F      		rol r23
 865               		2:
 866 0370 0A94      		dec r0
 867 0372 02F4      		brpl 1b
 868 0374 EA81      		ldd r30,Y+2
 869 0376 FB81      		ldd r31,Y+3
 870 0378 4087      		std Z+8,r20
 871 037a 5187      		std Z+9,r21
 872 037c 6287      		std Z+10,r22
 873 037e 7387      		std Z+11,r23
 874               	.L24:
 228:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 876               	.LM59:
 877 0380 1C92      		st X,__zero_reg__
 229:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 879               	.LM60:
 880 0382 F901      		movw r30,r18
 881 0384 1082      		st Z,__zero_reg__
 231:../../src/kernel/source/nrk_scheduler.c ****                 {
 883               	.LM61:
 884 0386 EA81      		ldd r30,Y+2
 885 0388 FB81      		ldd r31,Y+3
 886 038a A0A1      		ldd r26,Z+32
 887 038c B1A1      		ldd r27,Z+33
 888 038e A130      		cpi r26,1
 889 0390 B105      		cpc r27,__zero_reg__
 890 0392 01F4      		brne .L25
 233:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 892               	.LM62:
 893 0394 848D      		ldd r24,Z+28
 894 0396 958D      		ldd r25,Z+29
 895 0398 A68D      		ldd r26,Z+30
 896 039a B78D      		ldd r27,Z+31
 897 039c 848B      		std Z+20,r24
 898 039e 958B      		std Z+21,r25
 899 03a0 A68B      		std Z+22,r26
 900 03a2 B78B      		std Z+23,r27
 234:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 902               	.LM63:
 903 03a4 92E0      		ldi r25,lo8(2)
 904 03a6 492E      		mov r4,r25
 905 03a8 4082      		st Z,r4
 235:../../src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 907               	.LM64:
 908 03aa 8089      		ldd r24,Z+16
 909 03ac 9189      		ldd r25,Z+17
 910 03ae A289      		ldd r26,Z+18
 911 03b0 B389      		ldd r27,Z+19
 912 03b2 8487      		std Z+12,r24
 913 03b4 9587      		std Z+13,r25
 914 03b6 A687      		std Z+14,r26
 915 03b8 B787      		std Z+15,r27
 237:../../src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 917               	.LM65:
 918 03ba 808D      		ldd r24,Z+24
 919 03bc 918D      		ldd r25,Z+25
 920 03be A28D      		ldd r26,Z+26
 921 03c0 B38D      		ldd r27,Z+27
 922 03c2 892B      		or r24,r25
 923 03c4 8A2B      		or r24,r26
 924 03c6 8B2B      		or r24,r27
 925 03c8 01F4      		brne .L26
 237:../../src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 927               	.LM66:
 928 03ca C486      		std Z+12,r12
 929 03cc D586      		std Z+13,r13
 930 03ce E686      		std Z+14,r14
 931 03d0 F786      		std Z+15,r15
 932               	.L26:
 238:../../src/kernel/source/nrk_scheduler.c ****                 }
 934               	.LM67:
 935 03d2 8981      		ldd r24,Y+1
 936 03d4 0E94 0000 		call nrk_add_to_readyQ
 937 03d8 00C0      		rjmp .L23
 938               	.L25:
 242:../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 940               	.LM68:
 941 03da EA81      		ldd r30,Y+2
 942 03dc FB81      		ldd r31,Y+3
 943 03de 448D      		ldd r20,Z+28
 944 03e0 558D      		ldd r21,Z+29
 945 03e2 668D      		ldd r22,Z+30
 946 03e4 778D      		ldd r23,Z+31
 947 03e6 448B      		std Z+20,r20
 948 03e8 558B      		std Z+21,r21
 949 03ea 668B      		std Z+22,r22
 950 03ec 778B      		std Z+23,r23
 245:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 952               	.LM69:
 953 03ee 408C      		ldd r4,Z+24
 954 03f0 518C      		ldd r5,Z+25
 955 03f2 628C      		ldd r6,Z+26
 956 03f4 738C      		ldd r7,Z+27
 957 03f6 1197      		sbiw r26,1
 958 03f8 A301      		movw r20,r6
 959 03fa 9201      		movw r18,r4
 960 03fc 0E94 0000 		call __muluhisi3
 961 0400 6487      		std Z+12,r22
 962 0402 7587      		std Z+13,r23
 963 0404 8687      		std Z+14,r24
 964 0406 9787      		std Z+15,r25
 246:../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 966               	.LM70:
 967 0408 608B      		std Z+16,r22
 968 040a 718B      		std Z+17,r23
 969 040c 828B      		std Z+18,r24
 970 040e 938B      		std Z+19,r25
 972               	.LM71:
 973 0410 4528      		or r4,r5
 974 0412 4628      		or r4,r6
 975 0414 4728      		or r4,r7
 976 0416 01F4      		brne .L27
 978               	.LM72:
 979 0418 C486      		std Z+12,r12
 980 041a D586      		std Z+13,r13
 981 041c E686      		std Z+14,r14
 982 041e F786      		std Z+15,r15
 983               	.L27:
 248:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].num_periods=1;
 985               	.LM73:
 986 0420 4424      		clr r4
 987 0422 4394      		inc r4
 988 0424 512C      		mov r5,__zero_reg__
 989 0426 EA81      		ldd r30,Y+2
 990 0428 FB81      		ldd r31,Y+3
 991 042a 51A2      		std Z+33,r5
 992 042c 40A2      		std Z+32,r4
 993               	.L23:
 249:../../src/kernel/source/nrk_scheduler.c ****                     //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
 250:../../src/kernel/source/nrk_scheduler.c ****                     //			nrk_task_TCB[task_ID].num_periods=1;
 251:../../src/kernel/source/nrk_scheduler.c ****                 }
 252:../../src/kernel/source/nrk_scheduler.c ****             }
 253:../../src/kernel/source/nrk_scheduler.c **** 
 254:../../src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
 995               	.LM74:
 996 042e EA81      		ldd r30,Y+2
 997 0430 FB81      		ldd r31,Y+3
 998 0432 8485      		ldd r24,Z+12
 999 0434 9585      		ldd r25,Z+13
 1000 0436 A685      		ldd r26,Z+14
 1001 0438 B785      		ldd r27,Z+15
 1002 043a 0097      		sbiw r24,0
 1003 043c A105      		cpc r26,__zero_reg__
 1004 043e B105      		cpc r27,__zero_reg__
 1005 0440 01F0      		breq .L14
 255:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 1007               	.LM75:
 1008 0442 A801      		movw r20,r16
 1009 0444 60E0      		ldi r22,0
 1010 0446 70E0      		ldi r23,0
 254:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 1012               	.LM76:
 1013 0448 8417      		cp r24,r20
 1014 044a 9507      		cpc r25,r21
 1015 044c A607      		cpc r26,r22
 1016 044e B707      		cpc r27,r23
 1017 0450 00F4      		brsh .L14
 256:../../src/kernel/source/nrk_scheduler.c ****             {
 257:../../src/kernel/source/nrk_scheduler.c ****                 // Find closest next_wake task
 258:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].next_wakeup;
 1019               	.LM77:
 1020 0452 8C01      		movw r16,r24
 1021               	.L14:
 1022 0454 F981      		ldd r31,Y+1
 1023 0456 FF5F      		subi r31,lo8(-(1))
 1024 0458 F983      		std Y+1,r31
 1025 045a 2A81      		ldd r18,Y+2
 1026 045c 3B81      		ldd r19,Y+3
 1027 045e 255D      		subi r18,-43
 1028 0460 3F4F      		sbci r19,-1
 1029 0462 3B83      		std Y+3,r19
 1030 0464 2A83      		std Y+2,r18
 189:../../src/kernel/source/nrk_scheduler.c ****     {
 1032               	.LM78:
 1033 0466 F430      		cpi r31,lo8(4)
 1034 0468 01F0      		breq .+2
 1035 046a 00C0      		rjmp .L28
 259:../../src/kernel/source/nrk_scheduler.c ****             }
 260:../../src/kernel/source/nrk_scheduler.c **** 
 261:../../src/kernel/source/nrk_scheduler.c ****         }
 262:../../src/kernel/source/nrk_scheduler.c ****     }
 263:../../src/kernel/source/nrk_scheduler.c **** 
 264:../../src/kernel/source/nrk_scheduler.c **** 
 265:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 266:../../src/kernel/source/nrk_scheduler.c ****     _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
 267:../../src/kernel/source/nrk_scheduler.c **** #endif
 268:../../src/kernel/source/nrk_scheduler.c ****     task_ID = nrk_get_high_ready_task_ID();
 1037               	.LM79:
 1038 046c 0E94 0000 		call nrk_get_high_ready_task_ID
 1039 0470 F82E      		mov r15,r24
 269:../../src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 1041               	.LM80:
 1042 0472 3BE2      		ldi r19,lo8(43)
 1043 0474 8302      		muls r24,r19
 1044 0476 F001      		movw r30,r0
 1045 0478 1124      		clr __zero_reg__
 1046 047a E050      		subi r30,lo8(-(nrk_task_TCB))
 1047 047c F040      		sbci r31,hi8(-(nrk_task_TCB))
 1048 047e 2285      		ldd r18,Z+10
 1049 0480 2093 0000 		sts nrk_high_ready_prio,r18
 270:../../src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
 1051               	.LM81:
 1052 0484 F093 0000 		sts nrk_high_ready_TCB+1,r31
 1053 0488 E093 0000 		sts nrk_high_ready_TCB,r30
 271:../../src/kernel/source/nrk_scheduler.c **** 
 272:../../src/kernel/source/nrk_scheduler.c ****     // next_wake should hold next time when a suspended task might get run
 273:../../src/kernel/source/nrk_scheduler.c ****     // task_ID holds the highest priority READY task ID
 274:../../src/kernel/source/nrk_scheduler.c ****     // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time
 275:../../src/kernel/source/nrk_scheduler.c **** 
 276:../../src/kernel/source/nrk_scheduler.c ****     // Now we pick the next wakeup (either the end of the current task, or the possible resume
 277:../../src/kernel/source/nrk_scheduler.c ****     // of a suspended task)
 278:../../src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID)
 1055               	.LM82:
 1056 048c 8823      		tst r24
 1057 048e 01F0      		breq .L29
 279:../../src/kernel/source/nrk_scheduler.c ****     {
 280:../../src/kernel/source/nrk_scheduler.c ****         // You are a non-Idle Task
 281:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WA
 1059               	.LM83:
 1060 0490 85A1      		ldd r24,Z+37
 1061 0492 96A1      		ldd r25,Z+38
 1062 0494 A7A1      		ldd r26,Z+39
 1063 0496 B0A5      		ldd r27,Z+40
 1064 0498 892B      		or r24,r25
 1065 049a 8A2B      		or r24,r26
 1066 049c 8B2B      		or r24,r27
 1067 049e 01F0      		breq .L29
 1069               	.LM84:
 1070 04a0 858D      		ldd r24,Z+29
 1071 04a2 968D      		ldd r25,Z+30
 1072 04a4 A78D      		ldd r26,Z+31
 1073 04a6 B0A1      		ldd r27,Z+32
 1074 04a8 8A3F      		cpi r24,-6
 1075 04aa 9105      		cpc r25,__zero_reg__
 1076 04ac A105      		cpc r26,__zero_reg__
 1077 04ae B105      		cpc r27,__zero_reg__
 1078 04b0 00F4      		brsh .L29
 282:../../src/kernel/source/nrk_scheduler.c ****         {
 283:../../src/kernel/source/nrk_scheduler.c ****             if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
 1080               	.LM85:
 1081 04b2 A801      		movw r20,r16
 1082 04b4 60E0      		ldi r22,0
 1083 04b6 70E0      		ldi r23,0
 1084 04b8 8417      		cp r24,r20
 1085 04ba 9507      		cpc r25,r21
 1086 04bc A607      		cpc r26,r22
 1087 04be B707      		cpc r27,r23
 1088 04c0 00F4      		brsh .L29
 284:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].cpu_remaining;
 1090               	.LM86:
 1091 04c2 8C01      		movw r16,r24
 1092 04c4 00C0      		rjmp .L33
 1093               	.L29:
 285:../../src/kernel/source/nrk_scheduler.c ****         }
 286:../../src/kernel/source/nrk_scheduler.c ****         else
 287:../../src/kernel/source/nrk_scheduler.c ****         {
 288:../../src/kernel/source/nrk_scheduler.c ****             if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 289:../../src/kernel/source/nrk_scheduler.c ****         }
 290:../../src/kernel/source/nrk_scheduler.c ****     }
 291:../../src/kernel/source/nrk_scheduler.c ****     else
 292:../../src/kernel/source/nrk_scheduler.c ****     {
 293:../../src/kernel/source/nrk_scheduler.c ****         // This is the idle task
 294:../../src/kernel/source/nrk_scheduler.c ****         // Make sure you wake up from the idle task a little earlier
 295:../../src/kernel/source/nrk_scheduler.c ****         // if you would go into deep sleep...
 296:../../src/kernel/source/nrk_scheduler.c ****         // After waking from deep sleep, the next context swap must be at least
 297:../../src/kernel/source/nrk_scheduler.c ****         // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
 298:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_POWER_DOWN
 299:../../src/kernel/source/nrk_scheduler.c ****         if(next_wake>NRK_SLEEP_WAKEUP_TIME)
 300:../../src/kernel/source/nrk_scheduler.c ****         {
 301:../../src/kernel/source/nrk_scheduler.c ****             if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
 302:../../src/kernel/source/nrk_scheduler.c ****             {
 303:../../src/kernel/source/nrk_scheduler.c ****                 if(next_wake-NRK_SLEEP_WAKEUP_TIME<NRK_SLEEP_WAKEUP_TIME)
 304:../../src/kernel/source/nrk_scheduler.c ****                 {
 305:../../src/kernel/source/nrk_scheduler.c ****                     next_wake=NRK_SLEEP_WAKEUP_TIME-1;
 306:../../src/kernel/source/nrk_scheduler.c ****                 }
 307:../../src/kernel/source/nrk_scheduler.c ****                 else
 308:../../src/kernel/source/nrk_scheduler.c ****                 {
 309:../../src/kernel/source/nrk_scheduler.c ****                     next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
 310:../../src/kernel/source/nrk_scheduler.c ****                 }
 311:../../src/kernel/source/nrk_scheduler.c ****             }
 312:../../src/kernel/source/nrk_scheduler.c ****             else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
 313:../../src/kernel/source/nrk_scheduler.c ****             {
 314:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME;
 315:../../src/kernel/source/nrk_scheduler.c ****             }
 316:../../src/kernel/source/nrk_scheduler.c ****             else
 317:../../src/kernel/source/nrk_scheduler.c ****             {
 318:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
 319:../../src/kernel/source/nrk_scheduler.c ****             }
 320:../../src/kernel/source/nrk_scheduler.c ****         }
 321:../../src/kernel/source/nrk_scheduler.c **** #endif
 322:../../src/kernel/source/nrk_scheduler.c ****     }
 323:../../src/kernel/source/nrk_scheduler.c **** 
 324:../../src/kernel/source/nrk_scheduler.c ****     /*
 325:../../src/kernel/source/nrk_scheduler.c ****     // Some code to catch the case when the scheduler wakes up
 326:../../src/kernel/source/nrk_scheduler.c ****     // from deep sleep and has to execute again before NRK_SLEEP_WAKEUP_TIME-1
 327:../../src/kernel/source/nrk_scheduler.c ****     if(_nrk_cpu_state==2 && next_wake<NRK_SLEEP_WAKEUP_TIME-1)
 328:../../src/kernel/source/nrk_scheduler.c ****     {
 329:../../src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();
 330:../../src/kernel/source/nrk_scheduler.c ****     while(1)
 331:../../src/kernel/source/nrk_scheduler.c ****     	{
 332:../../src/kernel/source/nrk_scheduler.c ****     	nrk_spin_wait_us(60000);
 333:../../src/kernel/source/nrk_scheduler.c ****     	nrk_led_toggle(RED_LED);
 334:../../src/kernel/source/nrk_scheduler.c ****     	nrk_spin_wait_us(60000);
 335:../../src/kernel/source/nrk_scheduler.c ****     	nrk_led_toggle(GREEN_LED);
 336:../../src/kernel/source/nrk_scheduler.c ****     	printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
 337:../../src/kernel/source/nrk_scheduler.c ****     	}
 338:../../src/kernel/source/nrk_scheduler.c ****     }*/
 339:../../src/kernel/source/nrk_scheduler.c **** 
 340:../../src/kernel/source/nrk_scheduler.c **** 
 341:../../src/kernel/source/nrk_scheduler.c **** //  If we disable power down, we still need to wakeup before the overflow
 342:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_NO_POWER_DOWN
 343:../../src/kernel/source/nrk_scheduler.c ****     if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 1095               	.LM87:
 1096 04c6 0B3F      		cpi r16,-5
 1097 04c8 1105      		cpc r17,__zero_reg__
 1098 04ca 00F0      		brlo .L33
 1099 04cc 0AEF      		ldi r16,lo8(-6)
 1100 04ce 10E0      		ldi r17,0
 1101               	.L33:
 344:../../src/kernel/source/nrk_scheduler.c **** #endif
 345:../../src/kernel/source/nrk_scheduler.c ****     //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
 346:../../src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 1103               	.LM88:
 1104 04d0 2093 0000 		sts nrk_cur_task_prio,r18
 347:../../src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_TCB  = nrk_high_ready_TCB;
 1106               	.LM89:
 1107 04d4 F093 0000 		sts nrk_cur_task_TCB+1,r31
 1108 04d8 E093 0000 		sts nrk_cur_task_TCB,r30
 348:../../src/kernel/source/nrk_scheduler.c **** 
 349:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 350:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_high_ready_TCB==NULL)
 351:../../src/kernel/source/nrk_scheduler.c ****     {
 352:../../src/kernel/source/nrk_scheduler.c ****         nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
 353:../../src/kernel/source/nrk_scheduler.c ****     }
 354:../../src/kernel/source/nrk_scheduler.c **** #endif
 355:../../src/kernel/source/nrk_scheduler.c ****     //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());
 356:../../src/kernel/source/nrk_scheduler.c **** 
 357:../../src/kernel/source/nrk_scheduler.c ****     _nrk_prev_timer_val=next_wake;
 1110               	.LM90:
 1111 04dc 0093 0000 		sts _nrk_prev_timer_val,r16
 358:../../src/kernel/source/nrk_scheduler.c **** 
 359:../../src/kernel/source/nrk_scheduler.c ****     // Maybe the signals are triggering this problem?
 360:../../src/kernel/source/nrk_scheduler.c ****     if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
 1113               	.LM91:
 1114 04e0 0E94 0000 		call _nrk_os_timer_get
 1115 04e4 282F      		mov r18,r24
 1116 04e6 30E0      		ldi r19,0
 1117 04e8 2F5F      		subi r18,-1
 1118 04ea 3F4F      		sbci r19,-1
 1119 04ec 2017      		cp r18,r16
 1120 04ee 3107      		cpc r19,r17
 1121 04f0 00F0      		brlo .L34
 361:../../src/kernel/source/nrk_scheduler.c ****     {
 362:../../src/kernel/source/nrk_scheduler.c ****         // FIXME: Terrible Terrible...
 363:../../src/kernel/source/nrk_scheduler.c ****         // Need to find out why this is happening...
 364:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 365:../../src/kernel/source/nrk_scheduler.c ****         // Ignore if you are the idle task coming from deep sleep
 366:../../src/kernel/source/nrk_scheduler.c ****         if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
 367:../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
 368:../../src/kernel/source/nrk_scheduler.c **** #endif
 369:../../src/kernel/source/nrk_scheduler.c ****         // This is bad news, but keeps things running
 370:../../src/kernel/source/nrk_scheduler.c ****         // +2 just in case we are on the edge of the last tick
 371:../../src/kernel/source/nrk_scheduler.c ****         next_wake=_nrk_os_timer_get()+2;
 1123               	.LM92:
 1124 04f2 0E94 0000 		call _nrk_os_timer_get
 1125 04f6 082F      		mov r16,r24
 1126 04f8 10E0      		ldi r17,0
 1127 04fa 0E5F      		subi r16,-2
 1128 04fc 1F4F      		sbci r17,-1
 372:../../src/kernel/source/nrk_scheduler.c ****         _nrk_prev_timer_val=next_wake;
 1130               	.LM93:
 1131 04fe 0093 0000 		sts _nrk_prev_timer_val,r16
 1132               	.L34:
 373:../../src/kernel/source/nrk_scheduler.c ****     }
 374:../../src/kernel/source/nrk_scheduler.c **** 
 375:../../src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
 1134               	.LM94:
 1135 0502 F110      		cpse r15,__zero_reg__
 1137               	.LM95:
 1138 0504 1092 0000 		sts _nrk_cpu_state,__zero_reg__
 1139               	.L35:
 376:../../src/kernel/source/nrk_scheduler.c **** 
 377:../../src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(next_wake);
 1141               	.LM96:
 1142 0508 802F      		mov r24,r16
 1143 050a 0E94 0000 		call _nrk_set_next_wakeup
 378:../../src/kernel/source/nrk_scheduler.c **** 
 379:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
 380:../../src/kernel/source/nrk_scheduler.c ****     // Bound Context Swap to 100us
 381:../../src/kernel/source/nrk_scheduler.c ****     nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
 1145               	.LM97:
 1146 050e 6CED      		ldi r22,lo8(-36)
 1147 0510 75E0      		ldi r23,lo8(5)
 1148 0512 C101      		movw r24,r2
 1149 0514 0E94 0000 		call nrk_high_speed_timer_wait
 382:../../src/kernel/source/nrk_scheduler.c **** #endif
 383:../../src/kernel/source/nrk_scheduler.c ****     nrk_stack_pointer_restore();
 1151               	.LM98:
 1152 0518 0E94 0000 		call nrk_stack_pointer_restore
 1153               	/* epilogue start */
 384:../../src/kernel/source/nrk_scheduler.c ****     //nrk_int_enable();
 385:../../src/kernel/source/nrk_scheduler.c ****     nrk_start_high_ready_task();
 386:../../src/kernel/source/nrk_scheduler.c **** 
 387:../../src/kernel/source/nrk_scheduler.c **** }
 1155               	.LM99:
 1156 051c 0F90      		pop __tmp_reg__
 1157 051e 0F90      		pop __tmp_reg__
 1158 0520 0F90      		pop __tmp_reg__
 1159 0522 DF91      		pop r29
 1160 0524 CF91      		pop r28
 1161 0526 1F91      		pop r17
 1162 0528 0F91      		pop r16
 1163 052a FF90      		pop r15
 1164 052c EF90      		pop r14
 1165 052e DF90      		pop r13
 1166 0530 CF90      		pop r12
 1167 0532 BF90      		pop r11
 1168 0534 AF90      		pop r10
 1169 0536 9F90      		pop r9
 1170 0538 8F90      		pop r8
 1171 053a 7F90      		pop r7
 1172 053c 6F90      		pop r6
 1173 053e 5F90      		pop r5
 1174 0540 4F90      		pop r4
 1175 0542 3F90      		pop r3
 1176 0544 2F90      		pop r2
 385:../../src/kernel/source/nrk_scheduler.c **** 
 1178               	.LM100:
 1179 0546 0C94 0000 		jmp nrk_start_high_ready_task
 1184               	.Lscope1:
 1186               		.stabd	78,0,0
 1187               		.comm	t,1,1
 1188               		.comm	app_timer0_prescale,1,1
 1189               		.comm	app_timer0_callback,2,1
 1190               		.comm	_nrk_time_trigger,1,1
 1191               		.comm	_nrk_prev_timer_val,1,1
 1192               		.comm	next_next_wakeup,2,1
 1193               		.comm	_nrk_cpu_state,1,1
 1194               		.comm	error_num,1,1
 1195               		.comm	error_task,1,1
 1196               		.comm	nrk_system_time,8,1
 1197               		.comm	nrk_sem_list,6,1
 1198               		.comm	_nrk_resource_cnt,1,1
 1199               		.comm	nrk_high_ready_TCB,2,1
 1200               		.comm	nrk_high_ready_prio,1,1
 1201               		.comm	nrk_cur_task_TCB,2,1
 1202               		.comm	nrk_cur_task_prio,1,1
 1203               		.comm	nrk_wakeup_signal,1,1
 1204               		.comm	_head_node,2,1
 1205               		.comm	_free_node,2,1
 1206               		.comm	_nrk_readyQ,25,1
 1207               		.comm	nrk_task_TCB,172,1
 1208               		.comm	nrk_kernel_stk_ptr,2,1
 1209               		.comm	nrk_idle_task_stk,128,1
 1210               		.comm	_nrk_signal_list,4,1
 1236               	.Letext0:
 1237               		.ident	"GCC: (GNU) 4.9.1"
 1238               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk_scheduler.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccFP7DGN.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccFP7DGN.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccFP7DGN.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccFP7DGN.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccFP7DGN.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccFP7DGN.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccFP7DGN.s:324    .text:0000000000000000 _nrk_scheduler
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000008 nrk_system_time
                            *COM*:0000000000000002 nrk_cur_task_TCB
                            *COM*:00000000000000ac nrk_task_TCB
                            *COM*:0000000000000001 nrk_wakeup_signal
                            *COM*:0000000000000001 nrk_high_ready_prio
                            *COM*:0000000000000002 nrk_high_ready_TCB
                            *COM*:0000000000000001 nrk_cur_task_prio
                            *COM*:0000000000000001 _nrk_cpu_state
                            *COM*:0000000000000001 t
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000002 next_next_wakeup
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000006 nrk_sem_list
                            *COM*:0000000000000001 _nrk_resource_cnt
                            *COM*:0000000000000002 _head_node
                            *COM*:0000000000000002 _free_node
                            *COM*:0000000000000019 _nrk_readyQ
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_int_enable
_nrk_precision_os_timer_reset
_nrk_high_speed_timer_reset
_nrk_high_speed_timer_get
_nrk_set_next_wakeup
__muluhisi3
__udivmodsi4
nrk_rem_from_readyQ
nrk_kernel_error_add
nrk_add_to_readyQ
nrk_get_high_ready_task_ID
_nrk_os_timer_get
nrk_high_speed_timer_wait
nrk_stack_pointer_restore
nrk_start_high_ready_task
__do_clear_bss
