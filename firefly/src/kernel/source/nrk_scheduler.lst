   1               		.file	"nrk_scheduler.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 330               	.global	_nrk_scheduler
 332               	_nrk_scheduler:
 333               		.stabd	46,0,0
   1:../../src/kernel/source/nrk_scheduler.c **** /******************************************************************************
   2:../../src/kernel/source/nrk_scheduler.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk_scheduler.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk_scheduler.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk_scheduler.c **** *
   6:../../src/kernel/source/nrk_scheduler.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk_scheduler.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk_scheduler.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk_scheduler.c **** *
  10:../../src/kernel/source/nrk_scheduler.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk_scheduler.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk_scheduler.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk_scheduler.c **** *
  14:../../src/kernel/source/nrk_scheduler.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk_scheduler.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk_scheduler.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk_scheduler.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk_scheduler.c **** *
  19:../../src/kernel/source/nrk_scheduler.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk_scheduler.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk_scheduler.c **** *
  22:../../src/kernel/source/nrk_scheduler.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk_scheduler.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk_scheduler.c **** *  Zane Starr
  25:../../src/kernel/source/nrk_scheduler.c **** *  Anand Eswaren
  26:../../src/kernel/source/nrk_scheduler.c **** *******************************************************************************/
  27:../../src/kernel/source/nrk_scheduler.c **** 
  28:../../src/kernel/source/nrk_scheduler.c **** #include <nrk.h>
  29:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_task.h>
  30:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_defs.h>
  31:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_error.h>
  32:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_events.h>
  33:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_scheduler.h>
  34:../../src/kernel/source/nrk_scheduler.c **** #include <include.h>
  35:../../src/kernel/source/nrk_scheduler.c **** #include <ulib.h>
  36:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_timer.h>
  37:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_time.h>
  38:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_cfg.h>
  39:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_cpu.h>
  40:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_watchdog.h>
  41:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_platform_time.h>
  42:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_stats.h>
  43:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_sw_wdt.h>
  44:../../src/kernel/source/nrk_scheduler.c **** 
  45:../../src/kernel/source/nrk_scheduler.c **** 
  46:../../src/kernel/source/nrk_scheduler.c **** // This define was moved into nrk_platform_time.h since it needs to be different based on the clk s
  47:../../src/kernel/source/nrk_scheduler.c **** // 750 measure to 100uS
  48:../../src/kernel/source/nrk_scheduler.c **** // 800 * .125 = 100us
  49:../../src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    750
  50:../../src/kernel/source/nrk_scheduler.c **** // For rfa1:
  51:../../src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    1500 
  52:../../src/kernel/source/nrk_scheduler.c **** 
  53:../../src/kernel/source/nrk_scheduler.c **** uint8_t t;
  54:../../src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
  55:../../src/kernel/source/nrk_scheduler.c **** {
 335               	.LM0:
 336               	.LFBB1:
 337 0000 2F92      		push r2
 338 0002 3F92      		push r3
 339 0004 4F92      		push r4
 340 0006 5F92      		push r5
 341 0008 6F92      		push r6
 342 000a 7F92      		push r7
 343 000c 8F92      		push r8
 344 000e 9F92      		push r9
 345 0010 AF92      		push r10
 346 0012 BF92      		push r11
 347 0014 CF92      		push r12
 348 0016 DF92      		push r13
 349 0018 EF92      		push r14
 350 001a FF92      		push r15
 351 001c 0F93      		push r16
 352 001e 1F93      		push r17
 353 0020 CF93      		push r28
 354 0022 DF93      		push r29
 355 0024 00D0      		rcall .
 356 0026 1F92      		push __zero_reg__
 357 0028 CDB7      		in r28,__SP_L__
 358 002a DEB7      		in r29,__SP_H__
 359               	/* prologue: function */
 360               	/* frame size = 3 */
 361               	/* stack size = 21 */
 362               	.L__stack_usage = 21
  56:../../src/kernel/source/nrk_scheduler.c ****     int8_t task_ID;
  57:../../src/kernel/source/nrk_scheduler.c ****     uint16_t next_wake;
  58:../../src/kernel/source/nrk_scheduler.c ****     uint16_t start_time_stamp;
  59:../../src/kernel/source/nrk_scheduler.c **** 
  60:../../src/kernel/source/nrk_scheduler.c ****     nrk_int_enable();   // this should be removed...  Not needed
 364               	.LM1:
 365 002c 0E94 0000 		call nrk_int_enable
  61:../../src/kernel/source/nrk_scheduler.c **** 
  62:../../src/kernel/source/nrk_scheduler.c **** 
  63:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
  64:../../src/kernel/source/nrk_scheduler.c ****     _nrk_precision_os_timer_reset();
 367               	.LM2:
 368 0030 0E94 0000 		call _nrk_precision_os_timer_reset
  65:../../src/kernel/source/nrk_scheduler.c ****     _nrk_high_speed_timer_reset();
 370               	.LM3:
 371 0034 0E94 0000 		call _nrk_high_speed_timer_reset
  66:../../src/kernel/source/nrk_scheduler.c ****     start_time_stamp=_nrk_high_speed_timer_get();
 373               	.LM4:
 374 0038 0E94 0000 		call _nrk_high_speed_timer_get
 375 003c 1C01      		movw r2,r24
  67:../../src/kernel/source/nrk_scheduler.c **** #endif
  68:../../src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
 377               	.LM5:
 378 003e 8AEF      		ldi r24,lo8(-6)
 379 0040 0E94 0000 		call _nrk_set_next_wakeup
  69:../../src/kernel/source/nrk_scheduler.c ****     // Set to huge number which will later get set to min
  70:../../src/kernel/source/nrk_scheduler.c **** 
  71:../../src/kernel/source/nrk_scheduler.c ****     next_wake=60000;
  72:../../src/kernel/source/nrk_scheduler.c ****     // Safety zone starts here....
  73:../../src/kernel/source/nrk_scheduler.c **** 
  74:../../src/kernel/source/nrk_scheduler.c **** 
  75:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_WATCHDOG
  76:../../src/kernel/source/nrk_scheduler.c ****     nrk_watchdog_reset();
 381               	.LM6:
 382 0044 0E94 0000 		call nrk_watchdog_reset
  77:../../src/kernel/source/nrk_scheduler.c **** #endif
  78:../../src/kernel/source/nrk_scheduler.c **** 
  79:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_SW_WDT
  80:../../src/kernel/source/nrk_scheduler.c ****     _nrk_sw_wdt_check();
 384               	.LM7:
 385 0048 0E94 0000 		call _nrk_sw_wdt_check
  81:../../src/kernel/source/nrk_scheduler.c **** #endif
  82:../../src/kernel/source/nrk_scheduler.c **** 
  83:../../src/kernel/source/nrk_scheduler.c **** //printf( "last run: %d\n",nrk_cur_task_TCB->task_ID );
  84:../../src/kernel/source/nrk_scheduler.c **** //for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
  85:../../src/kernel/source/nrk_scheduler.c **** //{
  86:../../src/kernel/source/nrk_scheduler.c **** //printf( "%d nw:%lu\n",task_ID,nrk_task_TCB[task_ID].next_wakeup );
  87:../../src/kernel/source/nrk_scheduler.c **** //}
  88:../../src/kernel/source/nrk_scheduler.c **** 
  89:../../src/kernel/source/nrk_scheduler.c **** 
  90:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
  91:../../src/kernel/source/nrk_scheduler.c ****     //nrk_kprintf( PSTR("*"));
  92:../../src/kernel/source/nrk_scheduler.c ****     //Check if OS tick was delayed...
  93:../../src/kernel/source/nrk_scheduler.c ****     // if(_nrk_cpu_state!=CPU_SLEEP && _nrk_os_timer_get()!=0) {
  94:../../src/kernel/source/nrk_scheduler.c ****     //		nrk_kprintf( PSTR("X" ));
  95:../../src/kernel/source/nrk_scheduler.c ****     //printf( "%u ",_nrk_os_timer_get());
  96:../../src/kernel/source/nrk_scheduler.c ****     //	}
  97:../../src/kernel/source/nrk_scheduler.c ****     //printf( "%u\r\n",_nrk_prev_timer_val);
  98:../../src/kernel/source/nrk_scheduler.c ****     if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
  99:../../src/kernel/source/nrk_scheduler.c ****         nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
 100:../../src/kernel/source/nrk_scheduler.c **** #endif
 101:../../src/kernel/source/nrk_scheduler.c ****     //while(_nrk_time_trigger>0)
 102:../../src/kernel/source/nrk_scheduler.c ****     //{
 103:../../src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
 387               	.LM8:
 388 004c B090 0000 		lds r11,_nrk_prev_timer_val
 389 0050 AB2D      		mov r26,r11
 390 0052 B0E0      		ldi r27,0
 391 0054 23EB      		ldi r18,lo8(-77)
 392 0056 36EE      		ldi r19,lo8(-26)
 393 0058 4EE0      		ldi r20,lo8(14)
 394 005a 50E0      		ldi r21,0
 395 005c 0E94 0000 		call __muluhisi3
 396 0060 0091 0000 		lds r16,nrk_system_time+4
 397 0064 1091 0000 		lds r17,nrk_system_time+4+1
 398 0068 2091 0000 		lds r18,nrk_system_time+4+2
 399 006c 3091 0000 		lds r19,nrk_system_time+4+3
 400 0070 6B01      		movw r12,r22
 401 0072 7C01      		movw r14,r24
 402 0074 C00E      		add r12,r16
 403 0076 D11E      		adc r13,r17
 404 0078 E21E      		adc r14,r18
 405 007a F31E      		adc r15,r19
 104:../../src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 407               	.LM9:
 408 007c C701      		movw r24,r14
 409 007e B601      		movw r22,r12
 410 0080 23EB      		ldi r18,lo8(-77)
 411 0082 36EE      		ldi r19,lo8(-26)
 412 0084 4EE0      		ldi r20,lo8(14)
 413 0086 50E0      		ldi r21,0
 414 0088 0E94 0000 		call __udivmodsi4
 415 008c C61A      		sub r12,r22
 416 008e D70A      		sbc r13,r23
 417 0090 E80A      		sbc r14,r24
 418 0092 F90A      		sbc r15,r25
 419 0094 C092 0000 		sts nrk_system_time+4,r12
 420 0098 D092 0000 		sts nrk_system_time+4+1,r13
 421 009c E092 0000 		sts nrk_system_time+4+2,r14
 422 00a0 F092 0000 		sts nrk_system_time+4+3,r15
 105:../../src/kernel/source/nrk_scheduler.c **** 
 106:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 107:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
 424               	.LM10:
 425 00a4 E091 0000 		lds r30,nrk_cur_task_TCB
 426 00a8 F091 0000 		lds r31,nrk_cur_task_TCB+1
 427 00ac 8085      		ldd r24,Z+8
 428 00ae 8111      		cpse r24,__zero_reg__
 429 00b0 00C0      		rjmp .L2
 108:../../src/kernel/source/nrk_scheduler.c ****     {
 109:../../src/kernel/source/nrk_scheduler.c ****         if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
 431               	.LM11:
 432 00b2 8091 0000 		lds r24,_nrk_cpu_state
 433 00b6 8230      		cpi r24,lo8(2)
 434 00b8 01F4      		brne .L3
 436               	.LM12:
 437 00ba 8B2D      		mov r24,r11
 438 00bc 0E94 0000 		call _nrk_stats_sleep
 439               	.L3:
 110:../../src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 441               	.LM13:
 442 00c0 E091 0000 		lds r30,nrk_cur_task_TCB
 443 00c4 F091 0000 		lds r31,nrk_cur_task_TCB+1
 444 00c8 6091 0000 		lds r22,_nrk_prev_timer_val
 445 00cc 8085      		ldd r24,Z+8
 446 00ce 0E94 0000 		call _nrk_stats_task_preempted
 111:../../src/kernel/source/nrk_scheduler.c ****         // Add 0 time since the preempted call before set the correct value
 112:../../src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
 448               	.LM14:
 449 00d2 E091 0000 		lds r30,nrk_cur_task_TCB
 450 00d6 F091 0000 		lds r31,nrk_cur_task_TCB+1
 451 00da 60E0      		ldi r22,0
 452 00dc 8085      		ldd r24,Z+8
 453               	.L76:
 454 00de 0E94 0000 		call _nrk_stats_task_suspend
 455               	.L6:
 456 00e2 8091 0000 		lds r24,nrk_system_time+4
 457 00e6 9091 0000 		lds r25,nrk_system_time+4+1
 458 00ea A091 0000 		lds r26,nrk_system_time+4+2
 459 00ee B091 0000 		lds r27,nrk_system_time+4+3
 460 00f2 0091 0000 		lds r16,nrk_system_time
 461 00f6 1091 0000 		lds r17,nrk_system_time+1
 462 00fa 2091 0000 		lds r18,nrk_system_time+2
 463 00fe 3091 0000 		lds r19,nrk_system_time+3
 113:../../src/kernel/source/nrk_scheduler.c ****     }
 114:../../src/kernel/source/nrk_scheduler.c ****     else
 115:../../src/kernel/source/nrk_scheduler.c ****     {
 116:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->suspend_flag==1)
 117:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 118:../../src/kernel/source/nrk_scheduler.c ****         else
 119:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 120:../../src/kernel/source/nrk_scheduler.c ****     }
 121:../../src/kernel/source/nrk_scheduler.c **** #endif
 122:../../src/kernel/source/nrk_scheduler.c **** 
 123:../../src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 124:../../src/kernel/source/nrk_scheduler.c ****     {
 125:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 126:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 127:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 465               	.LM15:
 466 0102 43EB      		ldi r20,lo8(-77)
 467 0104 842E      		mov r8,r20
 468 0106 46EE      		ldi r20,lo8(-26)
 469 0108 942E      		mov r9,r20
 470 010a 4EE0      		ldi r20,lo8(14)
 471 010c A42E      		mov r10,r20
 472 010e B12C      		mov r11,__zero_reg__
 473 0110 00C0      		rjmp .L4
 474               	.L2:
 116:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 476               	.LM16:
 477 0112 9581      		ldd r25,Z+5
 117:../../src/kernel/source/nrk_scheduler.c ****         else
 479               	.LM17:
 480 0114 6B2D      		mov r22,r11
 116:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 482               	.LM18:
 483 0116 9111      		cpse r25,__zero_reg__
 484 0118 00C0      		rjmp .L76
 119:../../src/kernel/source/nrk_scheduler.c ****     }
 486               	.LM19:
 487 011a 0E94 0000 		call _nrk_stats_task_preempted
 488 011e 00C0      		rjmp .L6
 489               	.L4:
 490 0120 6801      		movw r12,r16
 491 0122 7901      		movw r14,r18
 492 0124 4FEF      		ldi r20,-1
 493 0126 C41A      		sub r12,r20
 494 0128 D40A      		sbc r13,r20
 495 012a E40A      		sbc r14,r20
 496 012c F40A      		sbc r15,r20
 123:../../src/kernel/source/nrk_scheduler.c ****     {
 498               	.LM20:
 499 012e 8115      		cp r24,__zero_reg__
 500 0130 5AEC      		ldi r21,-54
 501 0132 9507      		cpc r25,r21
 502 0134 5AE9      		ldi r21,-102
 503 0136 A507      		cpc r26,r21
 504 0138 5BE3      		ldi r21,59
 505 013a B507      		cpc r27,r21
 506 013c 00F0      		brlo .L81
 125:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 508               	.LM21:
 509 013e 2C01      		movw r4,r24
 510 0140 3D01      		movw r6,r26
 511 0142 2AEC      		ldi r18,-54
 512 0144 521A      		sub r5,r18
 513 0146 2AE9      		ldi r18,-102
 514 0148 620A      		sbc r6,r18
 515 014a 2BE3      		ldi r18,59
 516 014c 720A      		sbc r7,r18
 518               	.LM22:
 519 014e C301      		movw r24,r6
 520 0150 B201      		movw r22,r4
 521 0152 A501      		movw r20,r10
 522 0154 9401      		movw r18,r8
 523 0156 0E94 0000 		call __udivmodsi4
 524 015a A301      		movw r20,r6
 525 015c 9201      		movw r18,r4
 526 015e 261B      		sub r18,r22
 527 0160 370B      		sbc r19,r23
 528 0162 480B      		sbc r20,r24
 529 0164 590B      		sbc r21,r25
 530 0166 DA01      		movw r26,r20
 531 0168 C901      		movw r24,r18
 532 016a 9701      		movw r18,r14
 533 016c 8601      		movw r16,r12
 534 016e 00C0      		rjmp .L4
 535               	.L81:
 536 0170 8093 0000 		sts nrk_system_time+4,r24
 537 0174 9093 0000 		sts nrk_system_time+4+1,r25
 538 0178 A093 0000 		sts nrk_system_time+4+2,r26
 539 017c B093 0000 		sts nrk_system_time+4+3,r27
 540 0180 0093 0000 		sts nrk_system_time,r16
 541 0184 1093 0000 		sts nrk_system_time+1,r17
 542 0188 2093 0000 		sts nrk_system_time+2,r18
 543 018c 3093 0000 		sts nrk_system_time+3,r19
 128:../../src/kernel/source/nrk_scheduler.c ****     }
 129:../../src/kernel/source/nrk_scheduler.c ****     //  _nrk_time_trigger--;
 130:../../src/kernel/source/nrk_scheduler.c ****     //}
 131:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
 545               	.LM23:
 546 0190 E091 0000 		lds r30,nrk_cur_task_TCB
 547 0194 F091 0000 		lds r31,nrk_cur_task_TCB+1
 548 0198 8581      		ldd r24,Z+5
 549 019a 8823      		tst r24
 550 019c 01F0      		breq .L8
 552               	.LM24:
 553 019e 8185      		ldd r24,Z+9
 554 01a0 8430      		cpi r24,lo8(4)
 555 01a2 01F0      		breq .L8
 132:../../src/kernel/source/nrk_scheduler.c ****     {
 133:../../src/kernel/source/nrk_scheduler.c ****         //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 134:../../src/kernel/source/nrk_scheduler.c **** 
 135:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
 557               	.LM25:
 558 01a4 8781      		ldd r24,Z+7
 559 01a6 8230      		cpi r24,lo8(2)
 560 01a8 01F0      		breq .L77
 136:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 137:../../src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
 562               	.LM26:
 563 01aa 8823      		tst r24
 564 01ac 01F0      		breq .L11
 566               	.LM27:
 567 01ae 8681      		ldd r24,Z+6
 568 01b0 8111      		cpse r24,__zero_reg__
 569 01b2 00C0      		rjmp .L12
 570               	.L77:
 138:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 572               	.LM28:
 573 01b4 85E0      		ldi r24,lo8(5)
 574 01b6 00C0      		rjmp .L78
 575               	.L12:
 139:../../src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
 140:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 577               	.LM29:
 578 01b8 83E0      		ldi r24,lo8(3)
 579               	.L78:
 580 01ba 8187      		std Z+9,r24
 581 01bc 00C0      		rjmp .L10
 582               	.L11:
 141:../../src/kernel/source/nrk_scheduler.c ****         else
 142:../../src/kernel/source/nrk_scheduler.c ****         {
 143:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 584               	.LM30:
 585 01be 83E0      		ldi r24,lo8(3)
 586 01c0 8187      		std Z+9,r24
 144:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->event_suspend=0;
 588               	.LM31:
 589 01c2 1782      		std Z+7,__zero_reg__
 145:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->nw_flag=0;
 591               	.LM32:
 592 01c4 1682      		std Z+6,__zero_reg__
 146:../../src/kernel/source/nrk_scheduler.c **** 	    // agr added to fix initial startup scheduling problem
 147:../../src/kernel/source/nrk_scheduler.c ****             if(nrk_cur_task_TCB->next_wakeup==0) {
 594               	.LM33:
 595 01c6 8589      		ldd r24,Z+21
 596 01c8 9689      		ldd r25,Z+22
 597 01ca A789      		ldd r26,Z+23
 598 01cc B08D      		ldd r27,Z+24
 599 01ce 892B      		or r24,r25
 600 01d0 8A2B      		or r24,r26
 601 01d2 8B2B      		or r24,r27
 602 01d4 01F4      		brne .L10
 148:../../src/kernel/source/nrk_scheduler.c **** 		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
 604               	.LM34:
 605 01d6 818D      		ldd r24,Z+25
 606 01d8 928D      		ldd r25,Z+26
 607 01da A38D      		ldd r26,Z+27
 608 01dc B48D      		ldd r27,Z+28
 609 01de 858B      		std Z+21,r24
 610 01e0 968B      		std Z+22,r25
 611 01e2 A78B      		std Z+23,r26
 612 01e4 B08F      		std Z+24,r27
 613               	.L10:
 149:../../src/kernel/source/nrk_scheduler.c **** 		}
 150:../../src/kernel/source/nrk_scheduler.c ****         }
 151:../../src/kernel/source/nrk_scheduler.c ****         nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
 615               	.LM35:
 616 01e6 8085      		ldd r24,Z+8
 617 01e8 0E94 0000 		call nrk_rem_from_readyQ
 618               	.L8:
 152:../../src/kernel/source/nrk_scheduler.c ****     }
 153:../../src/kernel/source/nrk_scheduler.c ****     // nrk_print_readyQ();
 154:../../src/kernel/source/nrk_scheduler.c **** 
 155:../../src/kernel/source/nrk_scheduler.c ****     // Update cpu used value for ended task
 156:../../src/kernel/source/nrk_scheduler.c ****     // If the task has used its reserve, suspend task
 157:../../src/kernel/source/nrk_scheduler.c ****     // Don't disable IdleTask which is 0
 158:../../src/kernel/source/nrk_scheduler.c ****     // Don't decrease cpu_remaining if reserve is 0 and hence disabled
 159:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_t
 620               	.LM36:
 621 01ec E091 0000 		lds r30,nrk_cur_task_TCB
 622 01f0 F091 0000 		lds r31,nrk_cur_task_TCB+1
 623 01f4 85A1      		ldd r24,Z+37
 624 01f6 96A1      		ldd r25,Z+38
 625 01f8 A7A1      		ldd r26,Z+39
 626 01fa B0A5      		ldd r27,Z+40
 627 01fc 892B      		or r24,r25
 628 01fe 8A2B      		or r24,r26
 629 0200 8B2B      		or r24,r27
 630 0202 01F4      		brne .+2
 631 0204 00C0      		rjmp .L14
 633               	.LM37:
 634 0206 8085      		ldd r24,Z+8
 635 0208 8823      		tst r24
 636 020a 01F4      		brne .+2
 637 020c 00C0      		rjmp .L14
 639               	.LM38:
 640 020e 9185      		ldd r25,Z+9
 641 0210 9430      		cpi r25,lo8(4)
 642 0212 01F4      		brne .+2
 643 0214 00C0      		rjmp .L14
 160:../../src/kernel/source/nrk_scheduler.c ****     {
 161:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
 645               	.LM39:
 646 0216 458D      		ldd r20,Z+29
 647 0218 568D      		ldd r21,Z+30
 648 021a 678D      		ldd r22,Z+31
 649 021c 70A1      		ldd r23,Z+32
 650 021e 0091 0000 		lds r16,_nrk_prev_timer_val
 651 0222 10E0      		ldi r17,0
 652 0224 20E0      		ldi r18,0
 653 0226 30E0      		ldi r19,0
 654 0228 4017      		cp r20,r16
 655 022a 5107      		cpc r21,r17
 656 022c 6207      		cpc r22,r18
 657 022e 7307      		cpc r23,r19
 658 0230 00F4      		brsh .L16
 162:../../src/kernel/source/nrk_scheduler.c ****         {
 163:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 164:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 660               	.LM40:
 661 0232 0E94 0000 		call _nrk_stats_add_violation
 165:../../src/kernel/source/nrk_scheduler.c **** #endif
 166:../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
 663               	.LM41:
 664 0236 E091 0000 		lds r30,nrk_cur_task_TCB
 665 023a F091 0000 		lds r31,nrk_cur_task_TCB+1
 666 023e 6085      		ldd r22,Z+8
 667 0240 82E0      		ldi r24,lo8(2)
 668 0242 0E94 0000 		call nrk_kernel_error_add
 167:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining=0;
 670               	.LM42:
 671 0246 E091 0000 		lds r30,nrk_cur_task_TCB
 672 024a F091 0000 		lds r31,nrk_cur_task_TCB+1
 673 024e 158E      		std Z+29,__zero_reg__
 674 0250 168E      		std Z+30,__zero_reg__
 675 0252 178E      		std Z+31,__zero_reg__
 676 0254 10A2      		std Z+32,__zero_reg__
 677 0256 00C0      		rjmp .L17
 678               	.L16:
 168:../../src/kernel/source/nrk_scheduler.c ****         }
 169:../../src/kernel/source/nrk_scheduler.c ****         else
 170:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
 680               	.LM43:
 681 0258 401B      		sub r20,r16
 682 025a 510B      		sbc r21,r17
 683 025c 620B      		sbc r22,r18
 684 025e 730B      		sbc r23,r19
 685 0260 458F      		std Z+29,r20
 686 0262 568F      		std Z+30,r21
 687 0264 678F      		std Z+31,r22
 688 0266 70A3      		std Z+32,r23
 689               	.L17:
 171:../../src/kernel/source/nrk_scheduler.c **** 
 172:../../src/kernel/source/nrk_scheduler.c ****         task_ID= nrk_cur_task_TCB->task_ID;
 691               	.LM44:
 692 0268 E091 0000 		lds r30,nrk_cur_task_TCB
 693 026c F091 0000 		lds r31,nrk_cur_task_TCB+1
 694 0270 1085      		ldd r17,Z+8
 173:../../src/kernel/source/nrk_scheduler.c **** 
 174:../../src/kernel/source/nrk_scheduler.c ****         if (nrk_cur_task_TCB->cpu_remaining ==0 )
 696               	.LM45:
 697 0272 858D      		ldd r24,Z+29
 698 0274 968D      		ldd r25,Z+30
 699 0276 A78D      		ldd r26,Z+31
 700 0278 B0A1      		ldd r27,Z+32
 701 027a 892B      		or r24,r25
 702 027c 8A2B      		or r24,r26
 703 027e 8B2B      		or r24,r27
 704 0280 01F4      		brne .L14
 175:../../src/kernel/source/nrk_scheduler.c ****         {
 176:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 177:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 706               	.LM46:
 707 0282 812F      		mov r24,r17
 708 0284 0E94 0000 		call _nrk_stats_add_violation
 178:../../src/kernel/source/nrk_scheduler.c **** #endif
 179:../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
 710               	.LM47:
 711 0288 612F      		mov r22,r17
 712 028a 83E0      		ldi r24,lo8(3)
 713 028c 0E94 0000 		call nrk_kernel_error_add
 180:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 715               	.LM48:
 716 0290 E091 0000 		lds r30,nrk_cur_task_TCB
 717 0294 F091 0000 		lds r31,nrk_cur_task_TCB+1
 718 0298 83E0      		ldi r24,lo8(3)
 719 029a 8187      		std Z+9,r24
 181:../../src/kernel/source/nrk_scheduler.c ****             nrk_rem_from_readyQ(task_ID);
 721               	.LM49:
 722 029c 812F      		mov r24,r17
 723 029e 0E94 0000 		call nrk_rem_from_readyQ
 724               	.L14:
 725 02a2 80E0      		ldi r24,lo8(nrk_task_TCB+9)
 726 02a4 90E0      		ldi r25,hi8(nrk_task_TCB+9)
 727 02a6 9B83      		std Y+3,r25
 728 02a8 8A83      		std Y+2,r24
 127:../../src/kernel/source/nrk_scheduler.c ****     }
 730               	.LM50:
 731 02aa 00E6      		ldi r16,lo8(96)
 732 02ac 1AEE      		ldi r17,lo8(-22)
 733 02ae 1982      		std Y+1,__zero_reg__
 182:../../src/kernel/source/nrk_scheduler.c ****         }
 183:../../src/kernel/source/nrk_scheduler.c ****     }
 184:../../src/kernel/source/nrk_scheduler.c **** 
 185:../../src/kernel/source/nrk_scheduler.c ****     // Check I/O nrk_queues to add tasks with remaining cpu back...
 186:../../src/kernel/source/nrk_scheduler.c **** 
 187:../../src/kernel/source/nrk_scheduler.c ****     // Add eligable tasks back to the ready Queue
 188:../../src/kernel/source/nrk_scheduler.c ****     // At the same time find the next earliest wakeup
 189:../../src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 190:../../src/kernel/source/nrk_scheduler.c ****     {
 191:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 192:../../src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 193:../../src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 194:../../src/kernel/source/nrk_scheduler.c ****         {
 195:../../src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 196:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 197:../../src/kernel/source/nrk_scheduler.c ****             else
 198:../../src/kernel/source/nrk_scheduler.c ****             {
 199:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 200:../../src/kernel/source/nrk_scheduler.c ****             }
 201:../../src/kernel/source/nrk_scheduler.c ****             // Do next period book keeping.
 202:../../src/kernel/source/nrk_scheduler.c ****             // next_period needs to be set such that the period is kept consistent even if other
 203:../../src/kernel/source/nrk_scheduler.c ****             // wait until functions are called.
 204:../../src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 205:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 206:../../src/kernel/source/nrk_scheduler.c ****             else
 207:../../src/kernel/source/nrk_scheduler.c ****             {
 208:../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 209:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 210:../../src/kernel/source/nrk_scheduler.c ****                 else
 211:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 212:../../src/kernel/source/nrk_scheduler.c ****             }
 213:../../src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 214:../../src/kernel/source/nrk_scheduler.c **** 
 215:../../src/kernel/source/nrk_scheduler.c ****         }
 216:../../src/kernel/source/nrk_scheduler.c **** 
 217:../../src/kernel/source/nrk_scheduler.c **** 
 218:../../src/kernel/source/nrk_scheduler.c ****         // Look for Next Task that Might Wakeup to interrupt current task
 219:../../src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 220:../../src/kernel/source/nrk_scheduler.c ****         {
 221:../../src/kernel/source/nrk_scheduler.c ****              //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
 222:../../src/kernel/source/nrk_scheduler.c ****             // If a task needs to become READY, make it ready
 223:../../src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 224:../../src/kernel/source/nrk_scheduler.c ****             {
 225:../../src/kernel/source/nrk_scheduler.c ****                 // printf( "Adding back %d\n",task_ID );
 226:../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 227:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 228:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 229:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 230:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 231:../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 232:../../src/kernel/source/nrk_scheduler.c ****                 {
 233:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 234:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 235:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 236:../../src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 237:../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 238:../../src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 239:../../src/kernel/source/nrk_scheduler.c ****                 }
 240:../../src/kernel/source/nrk_scheduler.c ****                 else
 241:../../src/kernel/source/nrk_scheduler.c ****                 {
 242:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 243:../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 244:../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].num_periods--;
 245:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 246:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 247:../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 735               	.LM51:
 736 02b0 2AEF      		ldi r18,lo8(-6)
 737 02b2 C22E      		mov r12,r18
 738 02b4 D12C      		mov r13,__zero_reg__
 739 02b6 E12C      		mov r14,__zero_reg__
 740 02b8 F12C      		mov r15,__zero_reg__
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 742               	.LM52:
 743 02ba 812C      		mov r8,__zero_reg__
 744 02bc 912C      		mov r9,__zero_reg__
 745 02be 5401      		movw r10,r8
 746 02c0 8394      		inc r8
 747               	.L32:
 748 02c2 EA81      		ldd r30,Y+2
 749 02c4 FB81      		ldd r31,Y+3
 750 02c6 3197      		sbiw r30,1
 191:../../src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 752               	.LM53:
 753 02c8 8081      		ld r24,Z
 754 02ca 8F3F      		cpi r24,lo8(-1)
 755 02cc 01F4      		brne .+2
 756 02ce 00C0      		rjmp .L18
 757 02d0 EA81      		ldd r30,Y+2
 758 02d2 FB81      		ldd r31,Y+3
 759 02d4 3497      		sbiw r30,4
 192:../../src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 761               	.LM54:
 762 02d6 1082      		st Z,__zero_reg__
 193:../../src/kernel/source/nrk_scheduler.c ****         {
 764               	.LM55:
 765 02d8 8823      		tst r24
 766 02da 01F4      		brne .+2
 767 02dc 00C0      		rjmp .L20
 193:../../src/kernel/source/nrk_scheduler.c ****         {
 769               	.LM56:
 770 02de EA81      		ldd r30,Y+2
 771 02e0 FB81      		ldd r31,Y+3
 772 02e2 8081      		ld r24,Z
 773 02e4 8430      		cpi r24,lo8(4)
 774 02e6 01F4      		brne .+2
 775 02e8 00C0      		rjmp .L20
 195:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 777               	.LM57:
 778 02ea 4484      		ldd r4,Z+12
 779 02ec 5584      		ldd r5,Z+13
 780 02ee 6684      		ldd r6,Z+14
 781 02f0 7784      		ldd r7,Z+15
 782 02f2 6091 0000 		lds r22,_nrk_prev_timer_val
 783 02f6 70E0      		ldi r23,0
 784 02f8 80E0      		ldi r24,0
 785 02fa 90E0      		ldi r25,0
 786 02fc 4616      		cp r4,r22
 787 02fe 5706      		cpc r5,r23
 788 0300 6806      		cpc r6,r24
 789 0302 7906      		cpc r7,r25
 790 0304 00F0      		brlo .L22
 196:../../src/kernel/source/nrk_scheduler.c ****             else
 792               	.LM58:
 793 0306 461A      		sub r4,r22
 794 0308 570A      		sbc r5,r23
 795 030a 680A      		sbc r6,r24
 796 030c 790A      		sbc r7,r25
 797 030e 4486      		std Z+12,r4
 798 0310 5586      		std Z+13,r5
 799 0312 6686      		std Z+14,r6
 800 0314 7786      		std Z+15,r7
 801 0316 00C0      		rjmp .L23
 802               	.L22:
 199:../../src/kernel/source/nrk_scheduler.c ****             }
 804               	.LM59:
 805 0318 EA81      		ldd r30,Y+2
 806 031a FB81      		ldd r31,Y+3
 807 031c 1486      		std Z+12,__zero_reg__
 808 031e 1586      		std Z+13,__zero_reg__
 809 0320 1686      		std Z+14,__zero_reg__
 810 0322 1786      		std Z+15,__zero_reg__
 811               	.L23:
 204:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 813               	.LM60:
 814 0324 EA81      		ldd r30,Y+2
 815 0326 FB81      		ldd r31,Y+3
 816 0328 4088      		ldd r4,Z+16
 817 032a 5188      		ldd r5,Z+17
 818 032c 6288      		ldd r6,Z+18
 819 032e 7388      		ldd r7,Z+19
 820 0330 4616      		cp r4,r22
 821 0332 5706      		cpc r5,r23
 822 0334 6806      		cpc r6,r24
 823 0336 7906      		cpc r7,r25
 824 0338 00F0      		brlo .L24
 205:../../src/kernel/source/nrk_scheduler.c ****             else
 826               	.LM61:
 827 033a 461A      		sub r4,r22
 828 033c 570A      		sbc r5,r23
 829 033e 680A      		sbc r6,r24
 830 0340 790A      		sbc r7,r25
 831 0342 408A      		std Z+16,r4
 832 0344 518A      		std Z+17,r5
 833 0346 628A      		std Z+18,r6
 834 0348 738A      		std Z+19,r7
 835 034a 00C0      		rjmp .L25
 836               	.L24:
 208:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 838               	.LM62:
 839 034c EA81      		ldd r30,Y+2
 840 034e FB81      		ldd r31,Y+3
 841 0350 208D      		ldd r18,Z+24
 842 0352 318D      		ldd r19,Z+25
 843 0354 428D      		ldd r20,Z+26
 844 0356 538D      		ldd r21,Z+27
 845 0358 6217      		cp r22,r18
 846 035a 7307      		cpc r23,r19
 847 035c 8407      		cpc r24,r20
 848 035e 9507      		cpc r25,r21
 849 0360 00F4      		brsh .L26
 209:../../src/kernel/source/nrk_scheduler.c ****                 else
 851               	.LM63:
 852 0362 2901      		movw r4,r18
 853 0364 3A01      		movw r6,r20
 854 0366 461A      		sub r4,r22
 855 0368 570A      		sbc r5,r23
 856 036a 680A      		sbc r6,r24
 857 036c 790A      		sbc r7,r25
 858 036e 408A      		std Z+16,r4
 859 0370 518A      		std Z+17,r5
 860 0372 628A      		std Z+18,r6
 861 0374 738A      		std Z+19,r7
 862 0376 00C0      		rjmp .L25
 863               	.L26:
 211:../../src/kernel/source/nrk_scheduler.c ****             }
 865               	.LM64:
 866 0378 0E94 0000 		call __udivmodsi4
 867 037c EA81      		ldd r30,Y+2
 868 037e FB81      		ldd r31,Y+3
 869 0380 608B      		std Z+16,r22
 870 0382 718B      		std Z+17,r23
 871 0384 828B      		std Z+18,r24
 872 0386 938B      		std Z+19,r25
 873               	.L25:
 213:../../src/kernel/source/nrk_scheduler.c **** 
 875               	.LM65:
 876 0388 EA81      		ldd r30,Y+2
 877 038a FB81      		ldd r31,Y+3
 878 038c 8089      		ldd r24,Z+16
 879 038e 9189      		ldd r25,Z+17
 880 0390 A289      		ldd r26,Z+18
 881 0392 B389      		ldd r27,Z+19
 882 0394 892B      		or r24,r25
 883 0396 8A2B      		or r24,r26
 884 0398 8B2B      		or r24,r27
 885 039a 01F4      		brne .L20
 213:../../src/kernel/source/nrk_scheduler.c **** 
 887               	.LM66:
 888 039c 808D      		ldd r24,Z+24
 889 039e 918D      		ldd r25,Z+25
 890 03a0 A28D      		ldd r26,Z+26
 891 03a2 B38D      		ldd r27,Z+27
 892 03a4 808B      		std Z+16,r24
 893 03a6 918B      		std Z+17,r25
 894 03a8 A28B      		std Z+18,r26
 895 03aa B38B      		std Z+19,r27
 896               	.L20:
 219:../../src/kernel/source/nrk_scheduler.c ****         {
 898               	.LM67:
 899 03ac EA81      		ldd r30,Y+2
 900 03ae FB81      		ldd r31,Y+3
 901 03b0 8081      		ld r24,Z
 902 03b2 8330      		cpi r24,lo8(3)
 903 03b4 01F0      		breq .+2
 904 03b6 00C0      		rjmp .L18
 223:../../src/kernel/source/nrk_scheduler.c ****             {
 906               	.LM68:
 907 03b8 8485      		ldd r24,Z+12
 908 03ba 9585      		ldd r25,Z+13
 909 03bc A685      		ldd r26,Z+14
 910 03be B785      		ldd r27,Z+15
 911 03c0 892B      		or r24,r25
 912 03c2 8A2B      		or r24,r26
 913 03c4 8B2B      		or r24,r27
 914 03c6 01F0      		breq .+2
 915 03c8 00C0      		rjmp .L27
 916 03ca DF01      		movw r26,r30
 917 03cc 1297      		sbiw r26,2
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 919               	.LM69:
 920 03ce 8C91      		ld r24,X
 921 03d0 9F01      		movw r18,r30
 922 03d2 2350      		subi r18,3
 923 03d4 3109      		sbc r19,__zero_reg__
 924 03d6 8823      		tst r24
 925 03d8 01F0      		breq .L28
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 927               	.LM70:
 928 03da F901      		movw r30,r18
 929 03dc 8081      		ld r24,Z
 930 03de 8823      		tst r24
 931 03e0 01F0      		breq .L28
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 933               	.LM71:
 934 03e2 B501      		movw r22,r10
 935 03e4 A401      		movw r20,r8
 936 03e6 0090 0000 		lds r0,nrk_wakeup_signal
 937 03ea 00C0      		rjmp 2f
 938               		1:
 939 03ec 440F      		lsl r20
 940 03ee 551F      		rol r21
 941 03f0 661F      		rol r22
 942 03f2 771F      		rol r23
 943               		2:
 944 03f4 0A94      		dec r0
 945 03f6 02F4      		brpl 1b
 946 03f8 EA81      		ldd r30,Y+2
 947 03fa FB81      		ldd r31,Y+3
 948 03fc 4087      		std Z+8,r20
 949 03fe 5187      		std Z+9,r21
 950 0400 6287      		std Z+10,r22
 951 0402 7387      		std Z+11,r23
 952               	.L28:
 228:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 954               	.LM72:
 955 0404 1C92      		st X,__zero_reg__
 229:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 957               	.LM73:
 958 0406 F901      		movw r30,r18
 959 0408 1082      		st Z,__zero_reg__
 231:../../src/kernel/source/nrk_scheduler.c ****                 {
 961               	.LM74:
 962 040a EA81      		ldd r30,Y+2
 963 040c FB81      		ldd r31,Y+3
 964 040e A0A1      		ldd r26,Z+32
 965 0410 B1A1      		ldd r27,Z+33
 966 0412 A130      		cpi r26,1
 967 0414 B105      		cpc r27,__zero_reg__
 968 0416 01F4      		brne .L29
 233:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 970               	.LM75:
 971 0418 848D      		ldd r24,Z+28
 972 041a 958D      		ldd r25,Z+29
 973 041c A68D      		ldd r26,Z+30
 974 041e B78D      		ldd r27,Z+31
 975 0420 848B      		std Z+20,r24
 976 0422 958B      		std Z+21,r25
 977 0424 A68B      		std Z+22,r26
 978 0426 B78B      		std Z+23,r27
 234:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 980               	.LM76:
 981 0428 92E0      		ldi r25,lo8(2)
 982 042a 492E      		mov r4,r25
 983 042c 4082      		st Z,r4
 235:../../src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 985               	.LM77:
 986 042e 8089      		ldd r24,Z+16
 987 0430 9189      		ldd r25,Z+17
 988 0432 A289      		ldd r26,Z+18
 989 0434 B389      		ldd r27,Z+19
 990 0436 8487      		std Z+12,r24
 991 0438 9587      		std Z+13,r25
 992 043a A687      		std Z+14,r26
 993 043c B787      		std Z+15,r27
 237:../../src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 995               	.LM78:
 996 043e 808D      		ldd r24,Z+24
 997 0440 918D      		ldd r25,Z+25
 998 0442 A28D      		ldd r26,Z+26
 999 0444 B38D      		ldd r27,Z+27
 1000 0446 892B      		or r24,r25
 1001 0448 8A2B      		or r24,r26
 1002 044a 8B2B      		or r24,r27
 1003 044c 01F4      		brne .L30
 237:../../src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 1005               	.LM79:
 1006 044e C486      		std Z+12,r12
 1007 0450 D586      		std Z+13,r13
 1008 0452 E686      		std Z+14,r14
 1009 0454 F786      		std Z+15,r15
 1010               	.L30:
 238:../../src/kernel/source/nrk_scheduler.c ****                 }
 1012               	.LM80:
 1013 0456 8981      		ldd r24,Y+1
 1014 0458 0E94 0000 		call nrk_add_to_readyQ
 1015 045c 00C0      		rjmp .L27
 1016               	.L29:
 242:../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 1018               	.LM81:
 1019 045e EA81      		ldd r30,Y+2
 1020 0460 FB81      		ldd r31,Y+3
 1021 0462 448D      		ldd r20,Z+28
 1022 0464 558D      		ldd r21,Z+29
 1023 0466 668D      		ldd r22,Z+30
 1024 0468 778D      		ldd r23,Z+31
 1025 046a 448B      		std Z+20,r20
 1026 046c 558B      		std Z+21,r21
 1027 046e 668B      		std Z+22,r22
 1028 0470 778B      		std Z+23,r23
 245:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 1030               	.LM82:
 1031 0472 408C      		ldd r4,Z+24
 1032 0474 518C      		ldd r5,Z+25
 1033 0476 628C      		ldd r6,Z+26
 1034 0478 738C      		ldd r7,Z+27
 1035 047a 1197      		sbiw r26,1
 1036 047c A301      		movw r20,r6
 1037 047e 9201      		movw r18,r4
 1038 0480 0E94 0000 		call __muluhisi3
 1039 0484 6487      		std Z+12,r22
 1040 0486 7587      		std Z+13,r23
 1041 0488 8687      		std Z+14,r24
 1042 048a 9787      		std Z+15,r25
 246:../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 1044               	.LM83:
 1045 048c 608B      		std Z+16,r22
 1046 048e 718B      		std Z+17,r23
 1047 0490 828B      		std Z+18,r24
 1048 0492 938B      		std Z+19,r25
 1050               	.LM84:
 1051 0494 4528      		or r4,r5
 1052 0496 4628      		or r4,r6
 1053 0498 4728      		or r4,r7
 1054 049a 01F4      		brne .L31
 1056               	.LM85:
 1057 049c C486      		std Z+12,r12
 1058 049e D586      		std Z+13,r13
 1059 04a0 E686      		std Z+14,r14
 1060 04a2 F786      		std Z+15,r15
 1061               	.L31:
 248:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].num_periods=1;
 1063               	.LM86:
 1064 04a4 4424      		clr r4
 1065 04a6 4394      		inc r4
 1066 04a8 512C      		mov r5,__zero_reg__
 1067 04aa EA81      		ldd r30,Y+2
 1068 04ac FB81      		ldd r31,Y+3
 1069 04ae 51A2      		std Z+33,r5
 1070 04b0 40A2      		std Z+32,r4
 1071               	.L27:
 249:../../src/kernel/source/nrk_scheduler.c ****                     //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
 250:../../src/kernel/source/nrk_scheduler.c ****                     //			nrk_task_TCB[task_ID].num_periods=1;
 251:../../src/kernel/source/nrk_scheduler.c ****                 }
 252:../../src/kernel/source/nrk_scheduler.c ****             }
 253:../../src/kernel/source/nrk_scheduler.c **** 
 254:../../src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
 1073               	.LM87:
 1074 04b2 EA81      		ldd r30,Y+2
 1075 04b4 FB81      		ldd r31,Y+3
 1076 04b6 8485      		ldd r24,Z+12
 1077 04b8 9585      		ldd r25,Z+13
 1078 04ba A685      		ldd r26,Z+14
 1079 04bc B785      		ldd r27,Z+15
 1080 04be 0097      		sbiw r24,0
 1081 04c0 A105      		cpc r26,__zero_reg__
 1082 04c2 B105      		cpc r27,__zero_reg__
 1083 04c4 01F0      		breq .L18
 255:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 1085               	.LM88:
 1086 04c6 A801      		movw r20,r16
 1087 04c8 60E0      		ldi r22,0
 1088 04ca 70E0      		ldi r23,0
 254:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 1090               	.LM89:
 1091 04cc 8417      		cp r24,r20
 1092 04ce 9507      		cpc r25,r21
 1093 04d0 A607      		cpc r26,r22
 1094 04d2 B707      		cpc r27,r23
 1095 04d4 00F4      		brsh .L18
 256:../../src/kernel/source/nrk_scheduler.c ****             {
 257:../../src/kernel/source/nrk_scheduler.c ****                 // Find closest next_wake task
 258:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].next_wakeup;
 1097               	.LM90:
 1098 04d6 8C01      		movw r16,r24
 1099               	.L18:
 1100 04d8 F981      		ldd r31,Y+1
 1101 04da FF5F      		subi r31,lo8(-(1))
 1102 04dc F983      		std Y+1,r31
 1103 04de 2A81      		ldd r18,Y+2
 1104 04e0 3B81      		ldd r19,Y+3
 1105 04e2 255D      		subi r18,-43
 1106 04e4 3F4F      		sbci r19,-1
 1107 04e6 3B83      		std Y+3,r19
 1108 04e8 2A83      		std Y+2,r18
 189:../../src/kernel/source/nrk_scheduler.c ****     {
 1110               	.LM91:
 1111 04ea F530      		cpi r31,lo8(5)
 1112 04ec 01F0      		breq .+2
 1113 04ee 00C0      		rjmp .L32
 259:../../src/kernel/source/nrk_scheduler.c ****             }
 260:../../src/kernel/source/nrk_scheduler.c **** 
 261:../../src/kernel/source/nrk_scheduler.c ****         }
 262:../../src/kernel/source/nrk_scheduler.c ****     }
 263:../../src/kernel/source/nrk_scheduler.c **** 
 264:../../src/kernel/source/nrk_scheduler.c **** 
 265:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 266:../../src/kernel/source/nrk_scheduler.c ****     _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
 1115               	.LM92:
 1116 04f0 E091 0000 		lds r30,nrk_cur_task_TCB
 1117 04f4 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1118 04f8 8085      		ldd r24,Z+8
 1119 04fa 0E94 0000 		call _nrk_stats_task_start
 267:../../src/kernel/source/nrk_scheduler.c **** #endif
 268:../../src/kernel/source/nrk_scheduler.c ****     task_ID = nrk_get_high_ready_task_ID();
 1121               	.LM93:
 1122 04fe 0E94 0000 		call nrk_get_high_ready_task_ID
 1123 0502 F82E      		mov r15,r24
 269:../../src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 1125               	.LM94:
 1126 0504 3BE2      		ldi r19,lo8(43)
 1127 0506 8302      		muls r24,r19
 1128 0508 F001      		movw r30,r0
 1129 050a 1124      		clr __zero_reg__
 1130 050c E050      		subi r30,lo8(-(nrk_task_TCB))
 1131 050e F040      		sbci r31,hi8(-(nrk_task_TCB))
 1132 0510 2285      		ldd r18,Z+10
 1133 0512 2093 0000 		sts nrk_high_ready_prio,r18
 270:../../src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
 1135               	.LM95:
 1136 0516 F093 0000 		sts nrk_high_ready_TCB+1,r31
 1137 051a E093 0000 		sts nrk_high_ready_TCB,r30
 271:../../src/kernel/source/nrk_scheduler.c **** 
 272:../../src/kernel/source/nrk_scheduler.c ****     // next_wake should hold next time when a suspended task might get run
 273:../../src/kernel/source/nrk_scheduler.c ****     // task_ID holds the highest priority READY task ID
 274:../../src/kernel/source/nrk_scheduler.c ****     // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time
 275:../../src/kernel/source/nrk_scheduler.c **** 
 276:../../src/kernel/source/nrk_scheduler.c ****     // Now we pick the next wakeup (either the end of the current task, or the possible resume
 277:../../src/kernel/source/nrk_scheduler.c ****     // of a suspended task)
 278:../../src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID)
 1139               	.LM96:
 1140 051e 8823      		tst r24
 1141 0520 01F0      		breq .L33
 279:../../src/kernel/source/nrk_scheduler.c ****     {
 280:../../src/kernel/source/nrk_scheduler.c ****         // You are a non-Idle Task
 281:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WA
 1143               	.LM97:
 1144 0522 85A1      		ldd r24,Z+37
 1145 0524 96A1      		ldd r25,Z+38
 1146 0526 A7A1      		ldd r26,Z+39
 1147 0528 B0A5      		ldd r27,Z+40
 1148 052a 892B      		or r24,r25
 1149 052c 8A2B      		or r24,r26
 1150 052e 8B2B      		or r24,r27
 1151 0530 01F0      		breq .L34
 1153               	.LM98:
 1154 0532 858D      		ldd r24,Z+29
 1155 0534 968D      		ldd r25,Z+30
 1156 0536 A78D      		ldd r26,Z+31
 1157 0538 B0A1      		ldd r27,Z+32
 1158 053a 8A3F      		cpi r24,-6
 1159 053c 9105      		cpc r25,__zero_reg__
 1160 053e A105      		cpc r26,__zero_reg__
 1161 0540 B105      		cpc r27,__zero_reg__
 1162 0542 00F4      		brsh .L34
 282:../../src/kernel/source/nrk_scheduler.c ****         {
 283:../../src/kernel/source/nrk_scheduler.c ****             if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
 1164               	.LM99:
 1165 0544 A801      		movw r20,r16
 1166 0546 60E0      		ldi r22,0
 1167 0548 70E0      		ldi r23,0
 1168 054a 8417      		cp r24,r20
 1169 054c 9507      		cpc r25,r21
 1170 054e A607      		cpc r26,r22
 1171 0550 B707      		cpc r27,r23
 1172 0552 00F4      		brsh .L35
 284:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].cpu_remaining;
 1174               	.LM100:
 1175 0554 8C01      		movw r16,r24
 1176 0556 00C0      		rjmp .L35
 1177               	.L34:
 1178 0558 0B3F      		cpi r16,-5
 1179 055a 1105      		cpc r17,__zero_reg__
 1180 055c 00F0      		brlo .L35
 1181 055e 00C0      		rjmp .L79
 1182               	.L33:
 285:../../src/kernel/source/nrk_scheduler.c ****         }
 286:../../src/kernel/source/nrk_scheduler.c ****         else
 287:../../src/kernel/source/nrk_scheduler.c ****         {
 288:../../src/kernel/source/nrk_scheduler.c ****             if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 289:../../src/kernel/source/nrk_scheduler.c ****         }
 290:../../src/kernel/source/nrk_scheduler.c ****     }
 291:../../src/kernel/source/nrk_scheduler.c ****     else
 292:../../src/kernel/source/nrk_scheduler.c ****     {
 293:../../src/kernel/source/nrk_scheduler.c ****         // This is the idle task
 294:../../src/kernel/source/nrk_scheduler.c ****         // Make sure you wake up from the idle task a little earlier
 295:../../src/kernel/source/nrk_scheduler.c ****         // if you would go into deep sleep...
 296:../../src/kernel/source/nrk_scheduler.c ****         // After waking from deep sleep, the next context swap must be at least
 297:../../src/kernel/source/nrk_scheduler.c ****         // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
 298:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_POWER_DOWN
 299:../../src/kernel/source/nrk_scheduler.c ****         if(next_wake>NRK_SLEEP_WAKEUP_TIME)
 1184               	.LM101:
 1185 0560 0430      		cpi r16,4
 1186 0562 1105      		cpc r17,__zero_reg__
 1187 0564 00F0      		brlo .L35
 300:../../src/kernel/source/nrk_scheduler.c ****         {
 301:../../src/kernel/source/nrk_scheduler.c ****             if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
 1189               	.LM102:
 1190 0566 C801      		movw r24,r16
 1191 0568 0397      		sbiw r24,3
 1192 056a 8A3F      		cpi r24,-6
 1193 056c 9105      		cpc r25,__zero_reg__
 1194 056e 00F4      		brsh .L37
 1195 0570 8C01      		movw r16,r24
 1196 0572 8230      		cpi r24,2
 1197 0574 9105      		cpc r25,__zero_reg__
 1198 0576 00F4      		brsh .L35
 1199 0578 02E0      		ldi r16,lo8(2)
 1200 057a 10E0      		ldi r17,0
 1201 057c 00C0      		rjmp .L35
 1202               	.L37:
 302:../../src/kernel/source/nrk_scheduler.c ****             {
 303:../../src/kernel/source/nrk_scheduler.c ****                 if(next_wake-NRK_SLEEP_WAKEUP_TIME<NRK_SLEEP_WAKEUP_TIME)
 304:../../src/kernel/source/nrk_scheduler.c ****                 {
 305:../../src/kernel/source/nrk_scheduler.c ****                     next_wake=NRK_SLEEP_WAKEUP_TIME-1;
 306:../../src/kernel/source/nrk_scheduler.c ****                 }
 307:../../src/kernel/source/nrk_scheduler.c ****                 else
 308:../../src/kernel/source/nrk_scheduler.c ****                 {
 309:../../src/kernel/source/nrk_scheduler.c ****                     next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
 310:../../src/kernel/source/nrk_scheduler.c ****                 }
 311:../../src/kernel/source/nrk_scheduler.c ****             }
 312:../../src/kernel/source/nrk_scheduler.c ****             else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
 1204               	.LM103:
 1205 057e 0D3F      		cpi r16,-3
 1206 0580 1105      		cpc r17,__zero_reg__
 1207 0582 01F0      		breq .L41
 1208               	.L79:
 313:../../src/kernel/source/nrk_scheduler.c ****             {
 314:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME;
 1210               	.LM104:
 1211 0584 0AEF      		ldi r16,lo8(-6)
 1212 0586 10E0      		ldi r17,0
 1213 0588 00C0      		rjmp .L35
 1214               	.L41:
 315:../../src/kernel/source/nrk_scheduler.c ****             }
 316:../../src/kernel/source/nrk_scheduler.c ****             else
 317:../../src/kernel/source/nrk_scheduler.c ****             {
 318:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
 1216               	.LM105:
 1217 058a 07EF      		ldi r16,lo8(-9)
 1218 058c 10E0      		ldi r17,0
 1219               	.L35:
 319:../../src/kernel/source/nrk_scheduler.c ****             }
 320:../../src/kernel/source/nrk_scheduler.c ****         }
 321:../../src/kernel/source/nrk_scheduler.c **** #endif
 322:../../src/kernel/source/nrk_scheduler.c ****     }
 323:../../src/kernel/source/nrk_scheduler.c **** 
 324:../../src/kernel/source/nrk_scheduler.c ****     /*
 325:../../src/kernel/source/nrk_scheduler.c ****     // Some code to catch the case when the scheduler wakes up
 326:../../src/kernel/source/nrk_scheduler.c ****     // from deep sleep and has to execute again before NRK_SLEEP_WAKEUP_TIME-1
 327:../../src/kernel/source/nrk_scheduler.c ****     if(_nrk_cpu_state==2 && next_wake<NRK_SLEEP_WAKEUP_TIME-1)
 328:../../src/kernel/source/nrk_scheduler.c ****     {
 329:../../src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();
 330:../../src/kernel/source/nrk_scheduler.c ****     while(1)
 331:../../src/kernel/source/nrk_scheduler.c ****     	{
 332:../../src/kernel/source/nrk_scheduler.c ****     	nrk_spin_wait_us(60000);
 333:../../src/kernel/source/nrk_scheduler.c ****     	nrk_led_toggle(RED_LED);
 334:../../src/kernel/source/nrk_scheduler.c ****     	nrk_spin_wait_us(60000);
 335:../../src/kernel/source/nrk_scheduler.c ****     	nrk_led_toggle(GREEN_LED);
 336:../../src/kernel/source/nrk_scheduler.c ****     	printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
 337:../../src/kernel/source/nrk_scheduler.c ****     	}
 338:../../src/kernel/source/nrk_scheduler.c ****     }*/
 339:../../src/kernel/source/nrk_scheduler.c **** 
 340:../../src/kernel/source/nrk_scheduler.c **** 
 341:../../src/kernel/source/nrk_scheduler.c **** //  If we disable power down, we still need to wakeup before the overflow
 342:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_NO_POWER_DOWN
 343:../../src/kernel/source/nrk_scheduler.c ****     if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 344:../../src/kernel/source/nrk_scheduler.c **** #endif
 345:../../src/kernel/source/nrk_scheduler.c ****     //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
 346:../../src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 1221               	.LM106:
 1222 058e 2093 0000 		sts nrk_cur_task_prio,r18
 347:../../src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_TCB  = nrk_high_ready_TCB;
 1224               	.LM107:
 1225 0592 F093 0000 		sts nrk_cur_task_TCB+1,r31
 1226 0596 E093 0000 		sts nrk_cur_task_TCB,r30
 348:../../src/kernel/source/nrk_scheduler.c **** 
 349:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 350:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_high_ready_TCB==NULL)
 351:../../src/kernel/source/nrk_scheduler.c ****     {
 352:../../src/kernel/source/nrk_scheduler.c ****         nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
 353:../../src/kernel/source/nrk_scheduler.c ****     }
 354:../../src/kernel/source/nrk_scheduler.c **** #endif
 355:../../src/kernel/source/nrk_scheduler.c ****     //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());
 356:../../src/kernel/source/nrk_scheduler.c **** 
 357:../../src/kernel/source/nrk_scheduler.c ****     _nrk_prev_timer_val=next_wake;
 1228               	.LM108:
 1229 059a 0093 0000 		sts _nrk_prev_timer_val,r16
 358:../../src/kernel/source/nrk_scheduler.c **** 
 359:../../src/kernel/source/nrk_scheduler.c ****     // Maybe the signals are triggering this problem?
 360:../../src/kernel/source/nrk_scheduler.c ****     if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
 1231               	.LM109:
 1232 059e 0E94 0000 		call _nrk_os_timer_get
 1233 05a2 282F      		mov r18,r24
 1234 05a4 30E0      		ldi r19,0
 1235 05a6 2F5F      		subi r18,-1
 1236 05a8 3F4F      		sbci r19,-1
 1237 05aa 2017      		cp r18,r16
 1238 05ac 3107      		cpc r19,r17
 1239 05ae 00F0      		brlo .L39
 361:../../src/kernel/source/nrk_scheduler.c ****     {
 362:../../src/kernel/source/nrk_scheduler.c ****         // FIXME: Terrible Terrible...
 363:../../src/kernel/source/nrk_scheduler.c ****         // Need to find out why this is happening...
 364:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 365:../../src/kernel/source/nrk_scheduler.c ****         // Ignore if you are the idle task coming from deep sleep
 366:../../src/kernel/source/nrk_scheduler.c ****         if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
 367:../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
 368:../../src/kernel/source/nrk_scheduler.c **** #endif
 369:../../src/kernel/source/nrk_scheduler.c ****         // This is bad news, but keeps things running
 370:../../src/kernel/source/nrk_scheduler.c ****         // +2 just in case we are on the edge of the last tick
 371:../../src/kernel/source/nrk_scheduler.c ****         next_wake=_nrk_os_timer_get()+2;
 1241               	.LM110:
 1242 05b0 0E94 0000 		call _nrk_os_timer_get
 1243 05b4 082F      		mov r16,r24
 1244 05b6 10E0      		ldi r17,0
 1245 05b8 0E5F      		subi r16,-2
 1246 05ba 1F4F      		sbci r17,-1
 372:../../src/kernel/source/nrk_scheduler.c ****         _nrk_prev_timer_val=next_wake;
 1248               	.LM111:
 1249 05bc 0093 0000 		sts _nrk_prev_timer_val,r16
 1250               	.L39:
 373:../../src/kernel/source/nrk_scheduler.c ****     }
 374:../../src/kernel/source/nrk_scheduler.c **** 
 375:../../src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
 1252               	.LM112:
 1253 05c0 F110      		cpse r15,__zero_reg__
 1255               	.LM113:
 1256 05c2 1092 0000 		sts _nrk_cpu_state,__zero_reg__
 1257               	.L40:
 376:../../src/kernel/source/nrk_scheduler.c **** 
 377:../../src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(next_wake);
 1259               	.LM114:
 1260 05c6 802F      		mov r24,r16
 1261 05c8 0E94 0000 		call _nrk_set_next_wakeup
 378:../../src/kernel/source/nrk_scheduler.c **** 
 379:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
 380:../../src/kernel/source/nrk_scheduler.c ****     // Bound Context Swap to 100us
 381:../../src/kernel/source/nrk_scheduler.c ****     nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
 1263               	.LM115:
 1264 05cc 6CED      		ldi r22,lo8(-36)
 1265 05ce 75E0      		ldi r23,lo8(5)
 1266 05d0 C101      		movw r24,r2
 1267 05d2 0E94 0000 		call nrk_high_speed_timer_wait
 382:../../src/kernel/source/nrk_scheduler.c **** #endif
 383:../../src/kernel/source/nrk_scheduler.c ****     nrk_stack_pointer_restore();
 1269               	.LM116:
 1270 05d6 0E94 0000 		call nrk_stack_pointer_restore
 1271               	/* epilogue start */
 384:../../src/kernel/source/nrk_scheduler.c ****     //nrk_int_enable();
 385:../../src/kernel/source/nrk_scheduler.c ****     nrk_start_high_ready_task();
 386:../../src/kernel/source/nrk_scheduler.c **** 
 387:../../src/kernel/source/nrk_scheduler.c **** }
 1273               	.LM117:
 1274 05da 0F90      		pop __tmp_reg__
 1275 05dc 0F90      		pop __tmp_reg__
 1276 05de 0F90      		pop __tmp_reg__
 1277 05e0 DF91      		pop r29
 1278 05e2 CF91      		pop r28
 1279 05e4 1F91      		pop r17
 1280 05e6 0F91      		pop r16
 1281 05e8 FF90      		pop r15
 1282 05ea EF90      		pop r14
 1283 05ec DF90      		pop r13
 1284 05ee CF90      		pop r12
 1285 05f0 BF90      		pop r11
 1286 05f2 AF90      		pop r10
 1287 05f4 9F90      		pop r9
 1288 05f6 8F90      		pop r8
 1289 05f8 7F90      		pop r7
 1290 05fa 6F90      		pop r6
 1291 05fc 5F90      		pop r5
 1292 05fe 4F90      		pop r4
 1293 0600 3F90      		pop r3
 1294 0602 2F90      		pop r2
 385:../../src/kernel/source/nrk_scheduler.c **** 
 1296               	.LM118:
 1297 0604 0C94 0000 		jmp nrk_start_high_ready_task
 1302               	.Lscope1:
 1304               		.stabd	78,0,0
 1305               		.comm	t,1,1
 1306               		.comm	sw_wdts,57,1
 1307               		.comm	_nrk_stats_sleep_time,8,1
 1308               		.comm	cur_task_stats,150,1
 1309               		.comm	app_timer0_prescale,1,1
 1310               		.comm	app_timer0_callback,2,1
 1311               		.comm	_nrk_time_trigger,1,1
 1312               		.comm	_nrk_prev_timer_val,1,1
 1313               		.comm	next_next_wakeup,2,1
 1314               		.comm	_nrk_cpu_state,1,1
 1315               		.comm	error_num,1,1
 1316               		.comm	error_task,1,1
 1317               		.comm	nrk_system_time,8,1
 1318               		.comm	nrk_sem_list,3,1
 1319               		.comm	_nrk_resource_cnt,1,1
 1320               		.comm	nrk_high_ready_TCB,2,1
 1321               		.comm	nrk_high_ready_prio,1,1
 1322               		.comm	nrk_cur_task_TCB,2,1
 1323               		.comm	nrk_cur_task_prio,1,1
 1324               		.comm	nrk_wakeup_signal,1,1
 1325               		.comm	_head_node,2,1
 1326               		.comm	_free_node,2,1
 1327               		.comm	_nrk_readyQ,30,1
 1328               		.comm	nrk_task_TCB,215,1
 1329               		.comm	nrk_kernel_stk_ptr,2,1
 1330               		.comm	nrk_idle_task_stk,128,1
 1331               		.comm	_nrk_signal_list,4,1
 1360               	.Letext0:
 1361               		.ident	"GCC: (GNU) 4.9.1"
 1362               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk_scheduler.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccHUoBJb.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccHUoBJb.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccHUoBJb.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccHUoBJb.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccHUoBJb.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccHUoBJb.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccHUoBJb.s:332    .text:0000000000000000 _nrk_scheduler
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000008 nrk_system_time
                            *COM*:0000000000000002 nrk_cur_task_TCB
                            *COM*:0000000000000001 _nrk_cpu_state
                            *COM*:00000000000000d7 nrk_task_TCB
                            *COM*:0000000000000001 nrk_wakeup_signal
                            *COM*:0000000000000001 nrk_high_ready_prio
                            *COM*:0000000000000002 nrk_high_ready_TCB
                            *COM*:0000000000000001 nrk_cur_task_prio
                            *COM*:0000000000000001 t
                            *COM*:0000000000000039 sw_wdts
                            *COM*:0000000000000008 _nrk_stats_sleep_time
                            *COM*:0000000000000096 cur_task_stats
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000002 next_next_wakeup
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000003 nrk_sem_list
                            *COM*:0000000000000001 _nrk_resource_cnt
                            *COM*:0000000000000002 _head_node
                            *COM*:0000000000000002 _free_node
                            *COM*:000000000000001e _nrk_readyQ
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_int_enable
_nrk_precision_os_timer_reset
_nrk_high_speed_timer_reset
_nrk_high_speed_timer_get
_nrk_set_next_wakeup
nrk_watchdog_reset
_nrk_sw_wdt_check
__muluhisi3
__udivmodsi4
_nrk_stats_sleep
_nrk_stats_task_preempted
_nrk_stats_task_suspend
nrk_rem_from_readyQ
_nrk_stats_add_violation
nrk_kernel_error_add
nrk_add_to_readyQ
_nrk_stats_task_start
nrk_get_high_ready_task_ID
_nrk_os_timer_get
nrk_high_speed_timer_wait
nrk_stack_pointer_restore
nrk_start_high_ready_task
__do_clear_bss
