   1               		.file	"nrk_scheduler.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 330               	.global	_nrk_scheduler
 332               	_nrk_scheduler:
 333               		.stabd	46,0,0
   1:../../src/kernel/source/nrk_scheduler.c **** /******************************************************************************
   2:../../src/kernel/source/nrk_scheduler.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk_scheduler.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk_scheduler.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk_scheduler.c **** *
   6:../../src/kernel/source/nrk_scheduler.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk_scheduler.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk_scheduler.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk_scheduler.c **** *
  10:../../src/kernel/source/nrk_scheduler.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk_scheduler.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk_scheduler.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk_scheduler.c **** *
  14:../../src/kernel/source/nrk_scheduler.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk_scheduler.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk_scheduler.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk_scheduler.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk_scheduler.c **** *
  19:../../src/kernel/source/nrk_scheduler.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk_scheduler.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk_scheduler.c **** *
  22:../../src/kernel/source/nrk_scheduler.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk_scheduler.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk_scheduler.c **** *  Zane Starr
  25:../../src/kernel/source/nrk_scheduler.c **** *  Anand Eswaren
  26:../../src/kernel/source/nrk_scheduler.c **** *******************************************************************************/
  27:../../src/kernel/source/nrk_scheduler.c **** 
  28:../../src/kernel/source/nrk_scheduler.c **** #include <nrk.h>
  29:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_task.h>
  30:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_defs.h>
  31:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_error.h>
  32:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_events.h>
  33:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_scheduler.h>
  34:../../src/kernel/source/nrk_scheduler.c **** #include <include.h>
  35:../../src/kernel/source/nrk_scheduler.c **** #include <ulib.h>
  36:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_timer.h>
  37:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_time.h>
  38:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_cfg.h>
  39:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_cpu.h>
  40:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_watchdog.h>
  41:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_platform_time.h>
  42:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_stats.h>
  43:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_sw_wdt.h>
  44:../../src/kernel/source/nrk_scheduler.c **** 
  45:../../src/kernel/source/nrk_scheduler.c **** 
  46:../../src/kernel/source/nrk_scheduler.c **** // This define was moved into nrk_platform_time.h since it needs to be different based on the clk s
  47:../../src/kernel/source/nrk_scheduler.c **** // 750 measure to 100uS
  48:../../src/kernel/source/nrk_scheduler.c **** // 800 * .125 = 100us
  49:../../src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    750
  50:../../src/kernel/source/nrk_scheduler.c **** // For rfa1:
  51:../../src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    1500 
  52:../../src/kernel/source/nrk_scheduler.c **** 
  53:../../src/kernel/source/nrk_scheduler.c **** uint8_t t;
  54:../../src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
  55:../../src/kernel/source/nrk_scheduler.c **** {
 335               	.LM0:
 336               	.LFBB1:
 337 0000 2F92      		push r2
 338 0002 3F92      		push r3
 339 0004 4F92      		push r4
 340 0006 5F92      		push r5
 341 0008 6F92      		push r6
 342 000a 7F92      		push r7
 343 000c 8F92      		push r8
 344 000e 9F92      		push r9
 345 0010 AF92      		push r10
 346 0012 BF92      		push r11
 347 0014 CF92      		push r12
 348 0016 DF92      		push r13
 349 0018 EF92      		push r14
 350 001a FF92      		push r15
 351 001c 0F93      		push r16
 352 001e 1F93      		push r17
 353 0020 CF93      		push r28
 354 0022 DF93      		push r29
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 18 */
 358               	.L__stack_usage = 18
  56:../../src/kernel/source/nrk_scheduler.c ****     int8_t task_ID;
  57:../../src/kernel/source/nrk_scheduler.c ****     uint16_t next_wake;
  58:../../src/kernel/source/nrk_scheduler.c ****     uint16_t start_time_stamp;
  59:../../src/kernel/source/nrk_scheduler.c **** 
  60:../../src/kernel/source/nrk_scheduler.c ****     nrk_int_enable();   // this should be removed...  Not needed
 360               	.LM1:
 361 0024 0E94 0000 		call nrk_int_enable
  61:../../src/kernel/source/nrk_scheduler.c **** 
  62:../../src/kernel/source/nrk_scheduler.c **** 
  63:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
  64:../../src/kernel/source/nrk_scheduler.c ****     _nrk_precision_os_timer_reset();
  65:../../src/kernel/source/nrk_scheduler.c ****     _nrk_high_speed_timer_reset();
  66:../../src/kernel/source/nrk_scheduler.c ****     start_time_stamp=_nrk_high_speed_timer_get();
  67:../../src/kernel/source/nrk_scheduler.c **** #endif
  68:../../src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
 363               	.LM2:
 364 0028 8AEF      		ldi r24,lo8(-6)
 365 002a 0E94 0000 		call _nrk_set_next_wakeup
  69:../../src/kernel/source/nrk_scheduler.c ****     // Set to huge number which will later get set to min
  70:../../src/kernel/source/nrk_scheduler.c **** 
  71:../../src/kernel/source/nrk_scheduler.c ****     next_wake=60000;
  72:../../src/kernel/source/nrk_scheduler.c ****     // Safety zone starts here....
  73:../../src/kernel/source/nrk_scheduler.c **** 
  74:../../src/kernel/source/nrk_scheduler.c **** 
  75:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_WATCHDOG
  76:../../src/kernel/source/nrk_scheduler.c ****     nrk_watchdog_reset();
 367               	.LM3:
 368 002e 0E94 0000 		call nrk_watchdog_reset
  77:../../src/kernel/source/nrk_scheduler.c **** #endif
  78:../../src/kernel/source/nrk_scheduler.c **** 
  79:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_SW_WDT
  80:../../src/kernel/source/nrk_scheduler.c ****     _nrk_sw_wdt_check();
 370               	.LM4:
 371 0032 0E94 0000 		call _nrk_sw_wdt_check
  81:../../src/kernel/source/nrk_scheduler.c **** #endif
  82:../../src/kernel/source/nrk_scheduler.c **** 
  83:../../src/kernel/source/nrk_scheduler.c **** //printf( "last run: %d\n",nrk_cur_task_TCB->task_ID );
  84:../../src/kernel/source/nrk_scheduler.c **** //for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
  85:../../src/kernel/source/nrk_scheduler.c **** //{
  86:../../src/kernel/source/nrk_scheduler.c **** //printf( "%d nw:%lu\n",task_ID,nrk_task_TCB[task_ID].next_wakeup );
  87:../../src/kernel/source/nrk_scheduler.c **** //}
  88:../../src/kernel/source/nrk_scheduler.c **** 
  89:../../src/kernel/source/nrk_scheduler.c **** 
  90:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
  91:../../src/kernel/source/nrk_scheduler.c ****     //nrk_kprintf( PSTR("*"));
  92:../../src/kernel/source/nrk_scheduler.c ****     //Check if OS tick was delayed...
  93:../../src/kernel/source/nrk_scheduler.c ****     // if(_nrk_cpu_state!=CPU_SLEEP && _nrk_os_timer_get()!=0) {
  94:../../src/kernel/source/nrk_scheduler.c ****     //		nrk_kprintf( PSTR("X" ));
  95:../../src/kernel/source/nrk_scheduler.c ****     //printf( "%u ",_nrk_os_timer_get());
  96:../../src/kernel/source/nrk_scheduler.c ****     //	}
  97:../../src/kernel/source/nrk_scheduler.c ****     //printf( "%u\r\n",_nrk_prev_timer_val);
  98:../../src/kernel/source/nrk_scheduler.c ****     if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
  99:../../src/kernel/source/nrk_scheduler.c ****         nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
 100:../../src/kernel/source/nrk_scheduler.c **** #endif
 101:../../src/kernel/source/nrk_scheduler.c ****     //while(_nrk_time_trigger>0)
 102:../../src/kernel/source/nrk_scheduler.c ****     //{
 103:../../src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
 373               	.LM5:
 374 0036 C091 0000 		lds r28,_nrk_prev_timer_val
 375 003a AC2F      		mov r26,r28
 376 003c B0E0      		ldi r27,0
 377 003e 23EB      		ldi r18,lo8(-77)
 378 0040 36EE      		ldi r19,lo8(-26)
 379 0042 4EE0      		ldi r20,lo8(14)
 380 0044 50E0      		ldi r21,0
 381 0046 0E94 0000 		call __muluhisi3
 382 004a 0091 0000 		lds r16,nrk_system_time+4
 383 004e 1091 0000 		lds r17,nrk_system_time+4+1
 384 0052 2091 0000 		lds r18,nrk_system_time+4+2
 385 0056 3091 0000 		lds r19,nrk_system_time+4+3
 386 005a 6B01      		movw r12,r22
 387 005c 7C01      		movw r14,r24
 388 005e C00E      		add r12,r16
 389 0060 D11E      		adc r13,r17
 390 0062 E21E      		adc r14,r18
 391 0064 F31E      		adc r15,r19
 104:../../src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 393               	.LM6:
 394 0066 C701      		movw r24,r14
 395 0068 B601      		movw r22,r12
 396 006a 23EB      		ldi r18,lo8(-77)
 397 006c 36EE      		ldi r19,lo8(-26)
 398 006e 4EE0      		ldi r20,lo8(14)
 399 0070 50E0      		ldi r21,0
 400 0072 0E94 0000 		call __udivmodsi4
 401 0076 C61A      		sub r12,r22
 402 0078 D70A      		sbc r13,r23
 403 007a E80A      		sbc r14,r24
 404 007c F90A      		sbc r15,r25
 405 007e C092 0000 		sts nrk_system_time+4,r12
 406 0082 D092 0000 		sts nrk_system_time+4+1,r13
 407 0086 E092 0000 		sts nrk_system_time+4+2,r14
 408 008a F092 0000 		sts nrk_system_time+4+3,r15
 105:../../src/kernel/source/nrk_scheduler.c **** 
 106:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 107:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
 410               	.LM7:
 411 008e E091 0000 		lds r30,nrk_cur_task_TCB
 412 0092 F091 0000 		lds r31,nrk_cur_task_TCB+1
 413 0096 8085      		ldd r24,Z+8
 414 0098 8111      		cpse r24,__zero_reg__
 415 009a 00C0      		rjmp .L2
 108:../../src/kernel/source/nrk_scheduler.c ****     {
 109:../../src/kernel/source/nrk_scheduler.c ****         if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
 417               	.LM8:
 418 009c 8091 0000 		lds r24,_nrk_cpu_state
 419 00a0 8230      		cpi r24,lo8(2)
 420 00a2 01F4      		brne .L3
 422               	.LM9:
 423 00a4 8C2F      		mov r24,r28
 424 00a6 0E94 0000 		call _nrk_stats_sleep
 425               	.L3:
 110:../../src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 427               	.LM10:
 428 00aa E091 0000 		lds r30,nrk_cur_task_TCB
 429 00ae F091 0000 		lds r31,nrk_cur_task_TCB+1
 430 00b2 6091 0000 		lds r22,_nrk_prev_timer_val
 431 00b6 8085      		ldd r24,Z+8
 432 00b8 0E94 0000 		call _nrk_stats_task_preempted
 111:../../src/kernel/source/nrk_scheduler.c ****         // Add 0 time since the preempted call before set the correct value
 112:../../src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
 434               	.LM11:
 435 00bc E091 0000 		lds r30,nrk_cur_task_TCB
 436 00c0 F091 0000 		lds r31,nrk_cur_task_TCB+1
 437 00c4 60E0      		ldi r22,0
 438 00c6 8085      		ldd r24,Z+8
 439               	.L79:
 440 00c8 0E94 0000 		call _nrk_stats_task_suspend
 441               	.L6:
 442 00cc 8091 0000 		lds r24,nrk_system_time+4
 443 00d0 9091 0000 		lds r25,nrk_system_time+4+1
 444 00d4 A091 0000 		lds r26,nrk_system_time+4+2
 445 00d8 B091 0000 		lds r27,nrk_system_time+4+3
 446 00dc 0091 0000 		lds r16,nrk_system_time
 447 00e0 1091 0000 		lds r17,nrk_system_time+1
 448 00e4 2091 0000 		lds r18,nrk_system_time+2
 449 00e8 3091 0000 		lds r19,nrk_system_time+3
 113:../../src/kernel/source/nrk_scheduler.c ****     }
 114:../../src/kernel/source/nrk_scheduler.c ****     else
 115:../../src/kernel/source/nrk_scheduler.c ****     {
 116:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->suspend_flag==1)
 117:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 118:../../src/kernel/source/nrk_scheduler.c ****         else
 119:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 120:../../src/kernel/source/nrk_scheduler.c ****     }
 121:../../src/kernel/source/nrk_scheduler.c **** #endif
 122:../../src/kernel/source/nrk_scheduler.c **** 
 123:../../src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 124:../../src/kernel/source/nrk_scheduler.c ****     {
 125:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 126:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 127:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 451               	.LM12:
 452 00ec 53EB      		ldi r21,lo8(-77)
 453 00ee 452E      		mov r4,r21
 454 00f0 56EE      		ldi r21,lo8(-26)
 455 00f2 552E      		mov r5,r21
 456 00f4 5EE0      		ldi r21,lo8(14)
 457 00f6 652E      		mov r6,r21
 458 00f8 712C      		mov r7,__zero_reg__
 459 00fa 00C0      		rjmp .L4
 460               	.L2:
 116:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 462               	.LM13:
 463 00fc 9581      		ldd r25,Z+5
 117:../../src/kernel/source/nrk_scheduler.c ****         else
 465               	.LM14:
 466 00fe 6C2F      		mov r22,r28
 116:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 468               	.LM15:
 469 0100 9111      		cpse r25,__zero_reg__
 470 0102 00C0      		rjmp .L79
 119:../../src/kernel/source/nrk_scheduler.c ****     }
 472               	.LM16:
 473 0104 0E94 0000 		call _nrk_stats_task_preempted
 474 0108 00C0      		rjmp .L6
 475               	.L4:
 476 010a 4801      		movw r8,r16
 477 010c 5901      		movw r10,r18
 478 010e 4FEF      		ldi r20,-1
 479 0110 841A      		sub r8,r20
 480 0112 940A      		sbc r9,r20
 481 0114 A40A      		sbc r10,r20
 482 0116 B40A      		sbc r11,r20
 123:../../src/kernel/source/nrk_scheduler.c ****     {
 484               	.LM17:
 485 0118 8115      		cp r24,__zero_reg__
 486 011a 5AEC      		ldi r21,-54
 487 011c 9507      		cpc r25,r21
 488 011e 5AE9      		ldi r21,-102
 489 0120 A507      		cpc r26,r21
 490 0122 5BE3      		ldi r21,59
 491 0124 B507      		cpc r27,r21
 492 0126 00F0      		brlo .L84
 125:../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 494               	.LM18:
 495 0128 6C01      		movw r12,r24
 496 012a 7D01      		movw r14,r26
 497 012c 2AEC      		ldi r18,-54
 498 012e D21A      		sub r13,r18
 499 0130 2AE9      		ldi r18,-102
 500 0132 E20A      		sbc r14,r18
 501 0134 2BE3      		ldi r18,59
 502 0136 F20A      		sbc r15,r18
 504               	.LM19:
 505 0138 C701      		movw r24,r14
 506 013a B601      		movw r22,r12
 507 013c A301      		movw r20,r6
 508 013e 9201      		movw r18,r4
 509 0140 0E94 0000 		call __udivmodsi4
 510 0144 A701      		movw r20,r14
 511 0146 9601      		movw r18,r12
 512 0148 261B      		sub r18,r22
 513 014a 370B      		sbc r19,r23
 514 014c 480B      		sbc r20,r24
 515 014e 590B      		sbc r21,r25
 516 0150 DA01      		movw r26,r20
 517 0152 C901      		movw r24,r18
 518 0154 9501      		movw r18,r10
 519 0156 8401      		movw r16,r8
 520 0158 00C0      		rjmp .L4
 521               	.L84:
 522 015a 8093 0000 		sts nrk_system_time+4,r24
 523 015e 9093 0000 		sts nrk_system_time+4+1,r25
 524 0162 A093 0000 		sts nrk_system_time+4+2,r26
 525 0166 B093 0000 		sts nrk_system_time+4+3,r27
 526 016a 0093 0000 		sts nrk_system_time,r16
 527 016e 1093 0000 		sts nrk_system_time+1,r17
 528 0172 2093 0000 		sts nrk_system_time+2,r18
 529 0176 3093 0000 		sts nrk_system_time+3,r19
 128:../../src/kernel/source/nrk_scheduler.c ****     }
 129:../../src/kernel/source/nrk_scheduler.c ****     //  _nrk_time_trigger--;
 130:../../src/kernel/source/nrk_scheduler.c ****     //}
 131:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
 531               	.LM20:
 532 017a E091 0000 		lds r30,nrk_cur_task_TCB
 533 017e F091 0000 		lds r31,nrk_cur_task_TCB+1
 534 0182 8581      		ldd r24,Z+5
 535 0184 8823      		tst r24
 536 0186 01F0      		breq .L8
 538               	.LM21:
 539 0188 8185      		ldd r24,Z+9
 540 018a 8430      		cpi r24,lo8(4)
 541 018c 01F0      		breq .L8
 132:../../src/kernel/source/nrk_scheduler.c ****     {
 133:../../src/kernel/source/nrk_scheduler.c ****         //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 134:../../src/kernel/source/nrk_scheduler.c **** 
 135:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
 543               	.LM22:
 544 018e 8781      		ldd r24,Z+7
 545 0190 8230      		cpi r24,lo8(2)
 546 0192 01F0      		breq .L80
 136:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 137:../../src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
 548               	.LM23:
 549 0194 8823      		tst r24
 550 0196 01F0      		breq .L11
 552               	.LM24:
 553 0198 8681      		ldd r24,Z+6
 554 019a 8111      		cpse r24,__zero_reg__
 555 019c 00C0      		rjmp .L12
 556               	.L80:
 138:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 558               	.LM25:
 559 019e 85E0      		ldi r24,lo8(5)
 560 01a0 00C0      		rjmp .L81
 561               	.L12:
 139:../../src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
 140:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 563               	.LM26:
 564 01a2 83E0      		ldi r24,lo8(3)
 565               	.L81:
 566 01a4 8187      		std Z+9,r24
 567 01a6 00C0      		rjmp .L10
 568               	.L11:
 141:../../src/kernel/source/nrk_scheduler.c ****         else
 142:../../src/kernel/source/nrk_scheduler.c ****         {
 143:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 570               	.LM27:
 571 01a8 83E0      		ldi r24,lo8(3)
 572 01aa 8187      		std Z+9,r24
 144:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->event_suspend=0;
 574               	.LM28:
 575 01ac 1782      		std Z+7,__zero_reg__
 145:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->nw_flag=0;
 577               	.LM29:
 578 01ae 1682      		std Z+6,__zero_reg__
 146:../../src/kernel/source/nrk_scheduler.c **** 	    // agr added to fix initial startup scheduling problem
 147:../../src/kernel/source/nrk_scheduler.c ****             if(nrk_cur_task_TCB->next_wakeup==0) {
 580               	.LM30:
 581 01b0 8589      		ldd r24,Z+21
 582 01b2 9689      		ldd r25,Z+22
 583 01b4 A789      		ldd r26,Z+23
 584 01b6 B08D      		ldd r27,Z+24
 585 01b8 892B      		or r24,r25
 586 01ba 8A2B      		or r24,r26
 587 01bc 8B2B      		or r24,r27
 588 01be 01F4      		brne .L10
 148:../../src/kernel/source/nrk_scheduler.c **** 		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
 590               	.LM31:
 591 01c0 818D      		ldd r24,Z+25
 592 01c2 928D      		ldd r25,Z+26
 593 01c4 A38D      		ldd r26,Z+27
 594 01c6 B48D      		ldd r27,Z+28
 595 01c8 858B      		std Z+21,r24
 596 01ca 968B      		std Z+22,r25
 597 01cc A78B      		std Z+23,r26
 598 01ce B08F      		std Z+24,r27
 599               	.L10:
 149:../../src/kernel/source/nrk_scheduler.c **** 		}
 150:../../src/kernel/source/nrk_scheduler.c ****         }
 151:../../src/kernel/source/nrk_scheduler.c ****         nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
 601               	.LM32:
 602 01d0 8085      		ldd r24,Z+8
 603 01d2 0E94 0000 		call nrk_rem_from_readyQ
 604               	.L8:
 152:../../src/kernel/source/nrk_scheduler.c ****     }
 153:../../src/kernel/source/nrk_scheduler.c ****     // nrk_print_readyQ();
 154:../../src/kernel/source/nrk_scheduler.c **** 
 155:../../src/kernel/source/nrk_scheduler.c ****     // Update cpu used value for ended task
 156:../../src/kernel/source/nrk_scheduler.c ****     // If the task has used its reserve, suspend task
 157:../../src/kernel/source/nrk_scheduler.c ****     // Don't disable IdleTask which is 0
 158:../../src/kernel/source/nrk_scheduler.c ****     // Don't decrease cpu_remaining if reserve is 0 and hence disabled
 159:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_t
 606               	.LM33:
 607 01d6 E091 0000 		lds r30,nrk_cur_task_TCB
 608 01da F091 0000 		lds r31,nrk_cur_task_TCB+1
 609 01de 85A1      		ldd r24,Z+37
 610 01e0 96A1      		ldd r25,Z+38
 611 01e2 A7A1      		ldd r26,Z+39
 612 01e4 B0A5      		ldd r27,Z+40
 613 01e6 892B      		or r24,r25
 614 01e8 8A2B      		or r24,r26
 615 01ea 8B2B      		or r24,r27
 616 01ec 01F4      		brne .+2
 617 01ee 00C0      		rjmp .L14
 619               	.LM34:
 620 01f0 8085      		ldd r24,Z+8
 621 01f2 8823      		tst r24
 622 01f4 01F4      		brne .+2
 623 01f6 00C0      		rjmp .L14
 625               	.LM35:
 626 01f8 9185      		ldd r25,Z+9
 627 01fa 9430      		cpi r25,lo8(4)
 628 01fc 01F4      		brne .+2
 629 01fe 00C0      		rjmp .L14
 160:../../src/kernel/source/nrk_scheduler.c ****     {
 161:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
 631               	.LM36:
 632 0200 458D      		ldd r20,Z+29
 633 0202 568D      		ldd r21,Z+30
 634 0204 678D      		ldd r22,Z+31
 635 0206 70A1      		ldd r23,Z+32
 636 0208 0091 0000 		lds r16,_nrk_prev_timer_val
 637 020c 10E0      		ldi r17,0
 638 020e 20E0      		ldi r18,0
 639 0210 30E0      		ldi r19,0
 640 0212 4017      		cp r20,r16
 641 0214 5107      		cpc r21,r17
 642 0216 6207      		cpc r22,r18
 643 0218 7307      		cpc r23,r19
 644 021a 00F4      		brsh .L16
 162:../../src/kernel/source/nrk_scheduler.c ****         {
 163:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 164:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 646               	.LM37:
 647 021c 0E94 0000 		call _nrk_stats_add_violation
 165:../../src/kernel/source/nrk_scheduler.c **** #endif
 166:../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
 649               	.LM38:
 650 0220 E091 0000 		lds r30,nrk_cur_task_TCB
 651 0224 F091 0000 		lds r31,nrk_cur_task_TCB+1
 652 0228 6085      		ldd r22,Z+8
 653 022a 82E0      		ldi r24,lo8(2)
 654 022c 0E94 0000 		call nrk_kernel_error_add
 167:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining=0;
 656               	.LM39:
 657 0230 E091 0000 		lds r30,nrk_cur_task_TCB
 658 0234 F091 0000 		lds r31,nrk_cur_task_TCB+1
 659 0238 158E      		std Z+29,__zero_reg__
 660 023a 168E      		std Z+30,__zero_reg__
 661 023c 178E      		std Z+31,__zero_reg__
 662 023e 10A2      		std Z+32,__zero_reg__
 663 0240 00C0      		rjmp .L17
 664               	.L16:
 168:../../src/kernel/source/nrk_scheduler.c ****         }
 169:../../src/kernel/source/nrk_scheduler.c ****         else
 170:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
 666               	.LM40:
 667 0242 401B      		sub r20,r16
 668 0244 510B      		sbc r21,r17
 669 0246 620B      		sbc r22,r18
 670 0248 730B      		sbc r23,r19
 671 024a 458F      		std Z+29,r20
 672 024c 568F      		std Z+30,r21
 673 024e 678F      		std Z+31,r22
 674 0250 70A3      		std Z+32,r23
 675               	.L17:
 171:../../src/kernel/source/nrk_scheduler.c **** 
 172:../../src/kernel/source/nrk_scheduler.c ****         task_ID= nrk_cur_task_TCB->task_ID;
 677               	.LM41:
 678 0252 E091 0000 		lds r30,nrk_cur_task_TCB
 679 0256 F091 0000 		lds r31,nrk_cur_task_TCB+1
 680 025a C085      		ldd r28,Z+8
 173:../../src/kernel/source/nrk_scheduler.c **** 
 174:../../src/kernel/source/nrk_scheduler.c ****         if (nrk_cur_task_TCB->cpu_remaining ==0 )
 682               	.LM42:
 683 025c 858D      		ldd r24,Z+29
 684 025e 968D      		ldd r25,Z+30
 685 0260 A78D      		ldd r26,Z+31
 686 0262 B0A1      		ldd r27,Z+32
 687 0264 892B      		or r24,r25
 688 0266 8A2B      		or r24,r26
 689 0268 8B2B      		or r24,r27
 690 026a 01F4      		brne .L14
 175:../../src/kernel/source/nrk_scheduler.c ****         {
 176:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 177:../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 692               	.LM43:
 693 026c 8C2F      		mov r24,r28
 694 026e 0E94 0000 		call _nrk_stats_add_violation
 178:../../src/kernel/source/nrk_scheduler.c **** #endif
 179:../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
 696               	.LM44:
 697 0272 6C2F      		mov r22,r28
 698 0274 83E0      		ldi r24,lo8(3)
 699 0276 0E94 0000 		call nrk_kernel_error_add
 180:../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 701               	.LM45:
 702 027a E091 0000 		lds r30,nrk_cur_task_TCB
 703 027e F091 0000 		lds r31,nrk_cur_task_TCB+1
 704 0282 83E0      		ldi r24,lo8(3)
 705 0284 8187      		std Z+9,r24
 181:../../src/kernel/source/nrk_scheduler.c ****             nrk_rem_from_readyQ(task_ID);
 707               	.LM46:
 708 0286 8C2F      		mov r24,r28
 709 0288 0E94 0000 		call nrk_rem_from_readyQ
 710               	.L14:
 711 028c C0E0      		ldi r28,lo8(nrk_task_TCB+9)
 712 028e D0E0      		ldi r29,hi8(nrk_task_TCB+9)
 127:../../src/kernel/source/nrk_scheduler.c ****     }
 714               	.LM47:
 715 0290 00E6      		ldi r16,lo8(96)
 716 0292 1AEE      		ldi r17,lo8(-22)
 717 0294 312C      		mov r3,__zero_reg__
 182:../../src/kernel/source/nrk_scheduler.c ****         }
 183:../../src/kernel/source/nrk_scheduler.c ****     }
 184:../../src/kernel/source/nrk_scheduler.c **** 
 185:../../src/kernel/source/nrk_scheduler.c ****     // Check I/O nrk_queues to add tasks with remaining cpu back...
 186:../../src/kernel/source/nrk_scheduler.c **** 
 187:../../src/kernel/source/nrk_scheduler.c ****     // Add eligable tasks back to the ready Queue
 188:../../src/kernel/source/nrk_scheduler.c ****     // At the same time find the next earliest wakeup
 189:../../src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 190:../../src/kernel/source/nrk_scheduler.c ****     {
 191:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 192:../../src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 193:../../src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 194:../../src/kernel/source/nrk_scheduler.c ****         {
 195:../../src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 196:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 197:../../src/kernel/source/nrk_scheduler.c ****             else
 198:../../src/kernel/source/nrk_scheduler.c ****             {
 199:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 200:../../src/kernel/source/nrk_scheduler.c ****             }
 201:../../src/kernel/source/nrk_scheduler.c ****             // Do next period book keeping.
 202:../../src/kernel/source/nrk_scheduler.c ****             // next_period needs to be set such that the period is kept consistent even if other
 203:../../src/kernel/source/nrk_scheduler.c ****             // wait until functions are called.
 204:../../src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 205:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 206:../../src/kernel/source/nrk_scheduler.c ****             else
 207:../../src/kernel/source/nrk_scheduler.c ****             {
 208:../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 209:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 210:../../src/kernel/source/nrk_scheduler.c ****                 else
 211:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 212:../../src/kernel/source/nrk_scheduler.c ****             }
 213:../../src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 214:../../src/kernel/source/nrk_scheduler.c **** 
 215:../../src/kernel/source/nrk_scheduler.c ****         }
 216:../../src/kernel/source/nrk_scheduler.c **** 
 217:../../src/kernel/source/nrk_scheduler.c **** 
 218:../../src/kernel/source/nrk_scheduler.c ****         // Look for Next Task that Might Wakeup to interrupt current task
 219:../../src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 220:../../src/kernel/source/nrk_scheduler.c ****         {
 221:../../src/kernel/source/nrk_scheduler.c ****              //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
 222:../../src/kernel/source/nrk_scheduler.c ****             // If a task needs to become READY, make it ready
 223:../../src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 224:../../src/kernel/source/nrk_scheduler.c ****             {
 225:../../src/kernel/source/nrk_scheduler.c ****                 // printf( "Adding back %d\n",task_ID );
 226:../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 227:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 228:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 229:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 230:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 231:../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 232:../../src/kernel/source/nrk_scheduler.c ****                 {
 233:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 234:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 235:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 236:../../src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 237:../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 238:../../src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 239:../../src/kernel/source/nrk_scheduler.c ****                 }
 240:../../src/kernel/source/nrk_scheduler.c ****                 else
 241:../../src/kernel/source/nrk_scheduler.c ****                 {
 242:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 243:../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 244:../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].num_periods--;
 245:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 246:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 247:../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 719               	.LM48:
 720 0296 2AEF      		ldi r18,lo8(-6)
 721 0298 C22E      		mov r12,r18
 722 029a D12C      		mov r13,__zero_reg__
 723 029c E12C      		mov r14,__zero_reg__
 724 029e F12C      		mov r15,__zero_reg__
 234:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 726               	.LM49:
 727 02a0 32E0      		ldi r19,lo8(2)
 728 02a2 232E      		mov r2,r19
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 730               	.LM50:
 731 02a4 812C      		mov r8,__zero_reg__
 732 02a6 912C      		mov r9,__zero_reg__
 733 02a8 5401      		movw r10,r8
 734 02aa 8394      		inc r8
 735               	.L32:
 736 02ac FE01      		movw r30,r28
 737 02ae 3197      		sbiw r30,1
 191:../../src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 739               	.LM51:
 740 02b0 8081      		ld r24,Z
 741 02b2 8F3F      		cpi r24,lo8(-1)
 742 02b4 01F4      		brne .+2
 743 02b6 00C0      		rjmp .L18
 744 02b8 3397      		sbiw r30,3
 192:../../src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 746               	.LM52:
 747 02ba 1082      		st Z,__zero_reg__
 193:../../src/kernel/source/nrk_scheduler.c ****         {
 749               	.LM53:
 750 02bc 8823      		tst r24
 751 02be 01F4      		brne .+2
 752 02c0 00C0      		rjmp .L20
 193:../../src/kernel/source/nrk_scheduler.c ****         {
 754               	.LM54:
 755 02c2 8881      		ld r24,Y
 756 02c4 8430      		cpi r24,lo8(4)
 757 02c6 01F4      		brne .+2
 758 02c8 00C0      		rjmp .L20
 195:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 760               	.LM55:
 761 02ca 4C84      		ldd r4,Y+12
 762 02cc 5D84      		ldd r5,Y+13
 763 02ce 6E84      		ldd r6,Y+14
 764 02d0 7F84      		ldd r7,Y+15
 765 02d2 6091 0000 		lds r22,_nrk_prev_timer_val
 766 02d6 70E0      		ldi r23,0
 767 02d8 80E0      		ldi r24,0
 768 02da 90E0      		ldi r25,0
 769 02dc 4616      		cp r4,r22
 770 02de 5706      		cpc r5,r23
 771 02e0 6806      		cpc r6,r24
 772 02e2 7906      		cpc r7,r25
 773 02e4 00F0      		brlo .L22
 196:../../src/kernel/source/nrk_scheduler.c ****             else
 775               	.LM56:
 776 02e6 461A      		sub r4,r22
 777 02e8 570A      		sbc r5,r23
 778 02ea 680A      		sbc r6,r24
 779 02ec 790A      		sbc r7,r25
 780 02ee 4C86      		std Y+12,r4
 781 02f0 5D86      		std Y+13,r5
 782 02f2 6E86      		std Y+14,r6
 783 02f4 7F86      		std Y+15,r7
 784 02f6 00C0      		rjmp .L23
 785               	.L22:
 199:../../src/kernel/source/nrk_scheduler.c ****             }
 787               	.LM57:
 788 02f8 1C86      		std Y+12,__zero_reg__
 789 02fa 1D86      		std Y+13,__zero_reg__
 790 02fc 1E86      		std Y+14,__zero_reg__
 791 02fe 1F86      		std Y+15,__zero_reg__
 792               	.L23:
 204:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 794               	.LM58:
 795 0300 4888      		ldd r4,Y+16
 796 0302 5988      		ldd r5,Y+17
 797 0304 6A88      		ldd r6,Y+18
 798 0306 7B88      		ldd r7,Y+19
 799 0308 4616      		cp r4,r22
 800 030a 5706      		cpc r5,r23
 801 030c 6806      		cpc r6,r24
 802 030e 7906      		cpc r7,r25
 803 0310 00F0      		brlo .L24
 205:../../src/kernel/source/nrk_scheduler.c ****             else
 805               	.LM59:
 806 0312 461A      		sub r4,r22
 807 0314 570A      		sbc r5,r23
 808 0316 680A      		sbc r6,r24
 809 0318 790A      		sbc r7,r25
 810 031a 488A      		std Y+16,r4
 811 031c 598A      		std Y+17,r5
 812 031e 6A8A      		std Y+18,r6
 813 0320 7B8A      		std Y+19,r7
 814 0322 00C0      		rjmp .L25
 815               	.L24:
 208:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 817               	.LM60:
 818 0324 288D      		ldd r18,Y+24
 819 0326 398D      		ldd r19,Y+25
 820 0328 4A8D      		ldd r20,Y+26
 821 032a 5B8D      		ldd r21,Y+27
 822 032c 6217      		cp r22,r18
 823 032e 7307      		cpc r23,r19
 824 0330 8407      		cpc r24,r20
 825 0332 9507      		cpc r25,r21
 826 0334 00F4      		brsh .L26
 209:../../src/kernel/source/nrk_scheduler.c ****                 else
 828               	.LM61:
 829 0336 2901      		movw r4,r18
 830 0338 3A01      		movw r6,r20
 831 033a 461A      		sub r4,r22
 832 033c 570A      		sbc r5,r23
 833 033e 680A      		sbc r6,r24
 834 0340 790A      		sbc r7,r25
 835 0342 488A      		std Y+16,r4
 836 0344 598A      		std Y+17,r5
 837 0346 6A8A      		std Y+18,r6
 838 0348 7B8A      		std Y+19,r7
 839 034a 00C0      		rjmp .L25
 840               	.L26:
 211:../../src/kernel/source/nrk_scheduler.c ****             }
 842               	.LM62:
 843 034c 0E94 0000 		call __udivmodsi4
 844 0350 688B      		std Y+16,r22
 845 0352 798B      		std Y+17,r23
 846 0354 8A8B      		std Y+18,r24
 847 0356 9B8B      		std Y+19,r25
 848               	.L25:
 213:../../src/kernel/source/nrk_scheduler.c **** 
 850               	.LM63:
 851 0358 8889      		ldd r24,Y+16
 852 035a 9989      		ldd r25,Y+17
 853 035c AA89      		ldd r26,Y+18
 854 035e BB89      		ldd r27,Y+19
 855 0360 892B      		or r24,r25
 856 0362 8A2B      		or r24,r26
 857 0364 8B2B      		or r24,r27
 858 0366 01F4      		brne .L20
 213:../../src/kernel/source/nrk_scheduler.c **** 
 860               	.LM64:
 861 0368 888D      		ldd r24,Y+24
 862 036a 998D      		ldd r25,Y+25
 863 036c AA8D      		ldd r26,Y+26
 864 036e BB8D      		ldd r27,Y+27
 865 0370 888B      		std Y+16,r24
 866 0372 998B      		std Y+17,r25
 867 0374 AA8B      		std Y+18,r26
 868 0376 BB8B      		std Y+19,r27
 869               	.L20:
 219:../../src/kernel/source/nrk_scheduler.c ****         {
 871               	.LM65:
 872 0378 8881      		ld r24,Y
 873 037a 8330      		cpi r24,lo8(3)
 874 037c 01F0      		breq .+2
 875 037e 00C0      		rjmp .L18
 223:../../src/kernel/source/nrk_scheduler.c ****             {
 877               	.LM66:
 878 0380 8C85      		ldd r24,Y+12
 879 0382 9D85      		ldd r25,Y+13
 880 0384 AE85      		ldd r26,Y+14
 881 0386 BF85      		ldd r27,Y+15
 882 0388 892B      		or r24,r25
 883 038a 8A2B      		or r24,r26
 884 038c 8B2B      		or r24,r27
 885 038e 01F0      		breq .+2
 886 0390 00C0      		rjmp .L27
 887 0392 DE01      		movw r26,r28
 888 0394 1297      		sbiw r26,2
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 890               	.LM67:
 891 0396 8C91      		ld r24,X
 892 0398 FE01      		movw r30,r28
 893 039a 3397      		sbiw r30,3
 894 039c 8823      		tst r24
 895 039e 01F0      		breq .L28
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 897               	.LM68:
 898 03a0 8081      		ld r24,Z
 899 03a2 8823      		tst r24
 900 03a4 01F0      		breq .L28
 226:../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 902               	.LM69:
 903 03a6 B501      		movw r22,r10
 904 03a8 A401      		movw r20,r8
 905 03aa 0090 0000 		lds r0,nrk_wakeup_signal
 906 03ae 00C0      		rjmp 2f
 907               		1:
 908 03b0 440F      		lsl r20
 909 03b2 551F      		rol r21
 910 03b4 661F      		rol r22
 911 03b6 771F      		rol r23
 912               		2:
 913 03b8 0A94      		dec r0
 914 03ba 02F4      		brpl 1b
 915 03bc 4887      		std Y+8,r20
 916 03be 5987      		std Y+9,r21
 917 03c0 6A87      		std Y+10,r22
 918 03c2 7B87      		std Y+11,r23
 919               	.L28:
 228:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 921               	.LM70:
 922 03c4 1C92      		st X,__zero_reg__
 229:../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 924               	.LM71:
 925 03c6 1082      		st Z,__zero_reg__
 231:../../src/kernel/source/nrk_scheduler.c ****                 {
 927               	.LM72:
 928 03c8 A8A1      		ldd r26,Y+32
 929 03ca B9A1      		ldd r27,Y+33
 930 03cc A130      		cpi r26,1
 931 03ce B105      		cpc r27,__zero_reg__
 932 03d0 01F4      		brne .L29
 233:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 934               	.LM73:
 935 03d2 8C8D      		ldd r24,Y+28
 936 03d4 9D8D      		ldd r25,Y+29
 937 03d6 AE8D      		ldd r26,Y+30
 938 03d8 BF8D      		ldd r27,Y+31
 939 03da 8C8B      		std Y+20,r24
 940 03dc 9D8B      		std Y+21,r25
 941 03de AE8B      		std Y+22,r26
 942 03e0 BF8B      		std Y+23,r27
 234:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 944               	.LM74:
 945 03e2 2882      		st Y,r2
 235:../../src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 947               	.LM75:
 948 03e4 8889      		ldd r24,Y+16
 949 03e6 9989      		ldd r25,Y+17
 950 03e8 AA89      		ldd r26,Y+18
 951 03ea BB89      		ldd r27,Y+19
 952 03ec 8C87      		std Y+12,r24
 953 03ee 9D87      		std Y+13,r25
 954 03f0 AE87      		std Y+14,r26
 955 03f2 BF87      		std Y+15,r27
 237:../../src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 957               	.LM76:
 958 03f4 888D      		ldd r24,Y+24
 959 03f6 998D      		ldd r25,Y+25
 960 03f8 AA8D      		ldd r26,Y+26
 961 03fa BB8D      		ldd r27,Y+27
 962 03fc 892B      		or r24,r25
 963 03fe 8A2B      		or r24,r26
 964 0400 8B2B      		or r24,r27
 965 0402 01F4      		brne .L30
 237:../../src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 967               	.LM77:
 968 0404 CC86      		std Y+12,r12
 969 0406 DD86      		std Y+13,r13
 970 0408 EE86      		std Y+14,r14
 971 040a FF86      		std Y+15,r15
 972               	.L30:
 238:../../src/kernel/source/nrk_scheduler.c ****                 }
 974               	.LM78:
 975 040c 832D      		mov r24,r3
 976 040e 0E94 0000 		call nrk_add_to_readyQ
 977 0412 00C0      		rjmp .L27
 978               	.L29:
 242:../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 980               	.LM79:
 981 0414 4C8D      		ldd r20,Y+28
 982 0416 5D8D      		ldd r21,Y+29
 983 0418 6E8D      		ldd r22,Y+30
 984 041a 7F8D      		ldd r23,Y+31
 985 041c 4C8B      		std Y+20,r20
 986 041e 5D8B      		std Y+21,r21
 987 0420 6E8B      		std Y+22,r22
 988 0422 7F8B      		std Y+23,r23
 245:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 990               	.LM80:
 991 0424 488C      		ldd r4,Y+24
 992 0426 598C      		ldd r5,Y+25
 993 0428 6A8C      		ldd r6,Y+26
 994 042a 7B8C      		ldd r7,Y+27
 995 042c 1197      		sbiw r26,1
 996 042e A301      		movw r20,r6
 997 0430 9201      		movw r18,r4
 998 0432 0E94 0000 		call __muluhisi3
 999 0436 6C87      		std Y+12,r22
 1000 0438 7D87      		std Y+13,r23
 1001 043a 8E87      		std Y+14,r24
 1002 043c 9F87      		std Y+15,r25
 246:../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 1004               	.LM81:
 1005 043e 688B      		std Y+16,r22
 1006 0440 798B      		std Y+17,r23
 1007 0442 8A8B      		std Y+18,r24
 1008 0444 9B8B      		std Y+19,r25
 1010               	.LM82:
 1011 0446 4528      		or r4,r5
 1012 0448 4628      		or r4,r6
 1013 044a 4728      		or r4,r7
 1014 044c 01F4      		brne .L31
 1016               	.LM83:
 1017 044e CC86      		std Y+12,r12
 1018 0450 DD86      		std Y+13,r13
 1019 0452 EE86      		std Y+14,r14
 1020 0454 FF86      		std Y+15,r15
 1021               	.L31:
 248:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].num_periods=1;
 1023               	.LM84:
 1024 0456 6624      		clr r6
 1025 0458 6394      		inc r6
 1026 045a 712C      		mov r7,__zero_reg__
 1027 045c 79A2      		std Y+33,r7
 1028 045e 68A2      		std Y+32,r6
 1029               	.L27:
 249:../../src/kernel/source/nrk_scheduler.c ****                     //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
 250:../../src/kernel/source/nrk_scheduler.c ****                     //			nrk_task_TCB[task_ID].num_periods=1;
 251:../../src/kernel/source/nrk_scheduler.c ****                 }
 252:../../src/kernel/source/nrk_scheduler.c ****             }
 253:../../src/kernel/source/nrk_scheduler.c **** 
 254:../../src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
 1031               	.LM85:
 1032 0460 8C85      		ldd r24,Y+12
 1033 0462 9D85      		ldd r25,Y+13
 1034 0464 AE85      		ldd r26,Y+14
 1035 0466 BF85      		ldd r27,Y+15
 1036 0468 0097      		sbiw r24,0
 1037 046a A105      		cpc r26,__zero_reg__
 1038 046c B105      		cpc r27,__zero_reg__
 1039 046e 01F0      		breq .L18
 255:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 1041               	.LM86:
 1042 0470 A801      		movw r20,r16
 1043 0472 60E0      		ldi r22,0
 1044 0474 70E0      		ldi r23,0
 254:../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 1046               	.LM87:
 1047 0476 8417      		cp r24,r20
 1048 0478 9507      		cpc r25,r21
 1049 047a A607      		cpc r26,r22
 1050 047c B707      		cpc r27,r23
 1051 047e 00F4      		brsh .L18
 256:../../src/kernel/source/nrk_scheduler.c ****             {
 257:../../src/kernel/source/nrk_scheduler.c ****                 // Find closest next_wake task
 258:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].next_wakeup;
 1053               	.LM88:
 1054 0480 8C01      		movw r16,r24
 1055               	.L18:
 1056 0482 3394      		inc r3
 1057 0484 AB96      		adiw r28,43
 189:../../src/kernel/source/nrk_scheduler.c ****     {
 1059               	.LM89:
 1060 0486 85E0      		ldi r24,lo8(5)
 1061 0488 782E      		mov r7,r24
 1062 048a 3710      		cpse r3,r7
 1063 048c 00C0      		rjmp .L32
 259:../../src/kernel/source/nrk_scheduler.c ****             }
 260:../../src/kernel/source/nrk_scheduler.c **** 
 261:../../src/kernel/source/nrk_scheduler.c ****         }
 262:../../src/kernel/source/nrk_scheduler.c ****     }
 263:../../src/kernel/source/nrk_scheduler.c **** 
 264:../../src/kernel/source/nrk_scheduler.c **** 
 265:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 266:../../src/kernel/source/nrk_scheduler.c ****     _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
 1065               	.LM90:
 1066 048e E091 0000 		lds r30,nrk_cur_task_TCB
 1067 0492 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1068 0496 8085      		ldd r24,Z+8
 1069 0498 0E94 0000 		call _nrk_stats_task_start
 267:../../src/kernel/source/nrk_scheduler.c **** #endif
 268:../../src/kernel/source/nrk_scheduler.c ****     task_ID = nrk_get_high_ready_task_ID();
 1071               	.LM91:
 1072 049c 0E94 0000 		call nrk_get_high_ready_task_ID
 1073 04a0 C82F      		mov r28,r24
 269:../../src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 1075               	.LM92:
 1076 04a2 2BE2      		ldi r18,lo8(43)
 1077 04a4 8202      		muls r24,r18
 1078 04a6 F001      		movw r30,r0
 1079 04a8 1124      		clr __zero_reg__
 1080 04aa E050      		subi r30,lo8(-(nrk_task_TCB))
 1081 04ac F040      		sbci r31,hi8(-(nrk_task_TCB))
 1082 04ae 2285      		ldd r18,Z+10
 1083 04b0 2093 0000 		sts nrk_high_ready_prio,r18
 270:../../src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
 1085               	.LM93:
 1086 04b4 F093 0000 		sts nrk_high_ready_TCB+1,r31
 1087 04b8 E093 0000 		sts nrk_high_ready_TCB,r30
 271:../../src/kernel/source/nrk_scheduler.c **** 
 272:../../src/kernel/source/nrk_scheduler.c ****     // next_wake should hold next time when a suspended task might get run
 273:../../src/kernel/source/nrk_scheduler.c ****     // task_ID holds the highest priority READY task ID
 274:../../src/kernel/source/nrk_scheduler.c ****     // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time
 275:../../src/kernel/source/nrk_scheduler.c **** 
 276:../../src/kernel/source/nrk_scheduler.c ****     // Now we pick the next wakeup (either the end of the current task, or the possible resume
 277:../../src/kernel/source/nrk_scheduler.c ****     // of a suspended task)
 278:../../src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID)
 1089               	.LM94:
 1090 04bc 8823      		tst r24
 1091 04be 01F0      		breq .L33
 279:../../src/kernel/source/nrk_scheduler.c ****     {
 280:../../src/kernel/source/nrk_scheduler.c ****         // You are a non-Idle Task
 281:../../src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WA
 1093               	.LM95:
 1094 04c0 85A1      		ldd r24,Z+37
 1095 04c2 96A1      		ldd r25,Z+38
 1096 04c4 A7A1      		ldd r26,Z+39
 1097 04c6 B0A5      		ldd r27,Z+40
 1098 04c8 892B      		or r24,r25
 1099 04ca 8A2B      		or r24,r26
 1100 04cc 8B2B      		or r24,r27
 1101 04ce 01F0      		breq .L33
 1103               	.LM96:
 1104 04d0 858D      		ldd r24,Z+29
 1105 04d2 968D      		ldd r25,Z+30
 1106 04d4 A78D      		ldd r26,Z+31
 1107 04d6 B0A1      		ldd r27,Z+32
 1108 04d8 8A3F      		cpi r24,-6
 1109 04da 9105      		cpc r25,__zero_reg__
 1110 04dc A105      		cpc r26,__zero_reg__
 1111 04de B105      		cpc r27,__zero_reg__
 1112 04e0 00F4      		brsh .L33
 282:../../src/kernel/source/nrk_scheduler.c ****         {
 283:../../src/kernel/source/nrk_scheduler.c ****             if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
 1114               	.LM97:
 1115 04e2 A801      		movw r20,r16
 1116 04e4 60E0      		ldi r22,0
 1117 04e6 70E0      		ldi r23,0
 1118 04e8 8417      		cp r24,r20
 1119 04ea 9507      		cpc r25,r21
 1120 04ec A607      		cpc r26,r22
 1121 04ee B707      		cpc r27,r23
 1122 04f0 00F4      		brsh .L33
 284:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].cpu_remaining;
 1124               	.LM98:
 1125 04f2 8C01      		movw r16,r24
 1126 04f4 00C0      		rjmp .L37
 1127               	.L33:
 285:../../src/kernel/source/nrk_scheduler.c ****         }
 286:../../src/kernel/source/nrk_scheduler.c ****         else
 287:../../src/kernel/source/nrk_scheduler.c ****         {
 288:../../src/kernel/source/nrk_scheduler.c ****             if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 289:../../src/kernel/source/nrk_scheduler.c ****         }
 290:../../src/kernel/source/nrk_scheduler.c ****     }
 291:../../src/kernel/source/nrk_scheduler.c ****     else
 292:../../src/kernel/source/nrk_scheduler.c ****     {
 293:../../src/kernel/source/nrk_scheduler.c ****         // This is the idle task
 294:../../src/kernel/source/nrk_scheduler.c ****         // Make sure you wake up from the idle task a little earlier
 295:../../src/kernel/source/nrk_scheduler.c ****         // if you would go into deep sleep...
 296:../../src/kernel/source/nrk_scheduler.c ****         // After waking from deep sleep, the next context swap must be at least
 297:../../src/kernel/source/nrk_scheduler.c ****         // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
 298:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_POWER_DOWN
 299:../../src/kernel/source/nrk_scheduler.c ****         if(next_wake>NRK_SLEEP_WAKEUP_TIME)
 300:../../src/kernel/source/nrk_scheduler.c ****         {
 301:../../src/kernel/source/nrk_scheduler.c ****             if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
 302:../../src/kernel/source/nrk_scheduler.c ****             {
 303:../../src/kernel/source/nrk_scheduler.c ****                 if(next_wake-NRK_SLEEP_WAKEUP_TIME<NRK_SLEEP_WAKEUP_TIME)
 304:../../src/kernel/source/nrk_scheduler.c ****                 {
 305:../../src/kernel/source/nrk_scheduler.c ****                     next_wake=NRK_SLEEP_WAKEUP_TIME-1;
 306:../../src/kernel/source/nrk_scheduler.c ****                 }
 307:../../src/kernel/source/nrk_scheduler.c ****                 else
 308:../../src/kernel/source/nrk_scheduler.c ****                 {
 309:../../src/kernel/source/nrk_scheduler.c ****                     next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
 310:../../src/kernel/source/nrk_scheduler.c ****                 }
 311:../../src/kernel/source/nrk_scheduler.c ****             }
 312:../../src/kernel/source/nrk_scheduler.c ****             else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
 313:../../src/kernel/source/nrk_scheduler.c ****             {
 314:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME;
 315:../../src/kernel/source/nrk_scheduler.c ****             }
 316:../../src/kernel/source/nrk_scheduler.c ****             else
 317:../../src/kernel/source/nrk_scheduler.c ****             {
 318:../../src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
 319:../../src/kernel/source/nrk_scheduler.c ****             }
 320:../../src/kernel/source/nrk_scheduler.c ****         }
 321:../../src/kernel/source/nrk_scheduler.c **** #endif
 322:../../src/kernel/source/nrk_scheduler.c ****     }
 323:../../src/kernel/source/nrk_scheduler.c **** 
 324:../../src/kernel/source/nrk_scheduler.c ****     /*
 325:../../src/kernel/source/nrk_scheduler.c ****     // Some code to catch the case when the scheduler wakes up
 326:../../src/kernel/source/nrk_scheduler.c ****     // from deep sleep and has to execute again before NRK_SLEEP_WAKEUP_TIME-1
 327:../../src/kernel/source/nrk_scheduler.c ****     if(_nrk_cpu_state==2 && next_wake<NRK_SLEEP_WAKEUP_TIME-1)
 328:../../src/kernel/source/nrk_scheduler.c ****     {
 329:../../src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();
 330:../../src/kernel/source/nrk_scheduler.c ****     while(1)
 331:../../src/kernel/source/nrk_scheduler.c ****     	{
 332:../../src/kernel/source/nrk_scheduler.c ****     	nrk_spin_wait_us(60000);
 333:../../src/kernel/source/nrk_scheduler.c ****     	nrk_led_toggle(RED_LED);
 334:../../src/kernel/source/nrk_scheduler.c ****     	nrk_spin_wait_us(60000);
 335:../../src/kernel/source/nrk_scheduler.c ****     	nrk_led_toggle(GREEN_LED);
 336:../../src/kernel/source/nrk_scheduler.c ****     	printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
 337:../../src/kernel/source/nrk_scheduler.c ****     	}
 338:../../src/kernel/source/nrk_scheduler.c ****     }*/
 339:../../src/kernel/source/nrk_scheduler.c **** 
 340:../../src/kernel/source/nrk_scheduler.c **** 
 341:../../src/kernel/source/nrk_scheduler.c **** //  If we disable power down, we still need to wakeup before the overflow
 342:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_NO_POWER_DOWN
 343:../../src/kernel/source/nrk_scheduler.c ****     if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 1129               	.LM99:
 1130 04f6 0B3F      		cpi r16,-5
 1131 04f8 1105      		cpc r17,__zero_reg__
 1132 04fa 00F0      		brlo .L37
 1133 04fc 0AEF      		ldi r16,lo8(-6)
 1134 04fe 10E0      		ldi r17,0
 1135               	.L37:
 344:../../src/kernel/source/nrk_scheduler.c **** #endif
 345:../../src/kernel/source/nrk_scheduler.c ****     //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
 346:../../src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 1137               	.LM100:
 1138 0500 2093 0000 		sts nrk_cur_task_prio,r18
 347:../../src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_TCB  = nrk_high_ready_TCB;
 1140               	.LM101:
 1141 0504 F093 0000 		sts nrk_cur_task_TCB+1,r31
 1142 0508 E093 0000 		sts nrk_cur_task_TCB,r30
 348:../../src/kernel/source/nrk_scheduler.c **** 
 349:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 350:../../src/kernel/source/nrk_scheduler.c ****     if(nrk_high_ready_TCB==NULL)
 351:../../src/kernel/source/nrk_scheduler.c ****     {
 352:../../src/kernel/source/nrk_scheduler.c ****         nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
 353:../../src/kernel/source/nrk_scheduler.c ****     }
 354:../../src/kernel/source/nrk_scheduler.c **** #endif
 355:../../src/kernel/source/nrk_scheduler.c ****     //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());
 356:../../src/kernel/source/nrk_scheduler.c **** 
 357:../../src/kernel/source/nrk_scheduler.c ****     _nrk_prev_timer_val=next_wake;
 1144               	.LM102:
 1145 050c 0093 0000 		sts _nrk_prev_timer_val,r16
 358:../../src/kernel/source/nrk_scheduler.c **** 
 359:../../src/kernel/source/nrk_scheduler.c ****     // Maybe the signals are triggering this problem?
 360:../../src/kernel/source/nrk_scheduler.c ****     if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
 1147               	.LM103:
 1148 0510 0E94 0000 		call _nrk_os_timer_get
 1149 0514 282F      		mov r18,r24
 1150 0516 30E0      		ldi r19,0
 1151 0518 2F5F      		subi r18,-1
 1152 051a 3F4F      		sbci r19,-1
 1153 051c 2017      		cp r18,r16
 1154 051e 3107      		cpc r19,r17
 1155 0520 00F0      		brlo .L38
 361:../../src/kernel/source/nrk_scheduler.c ****     {
 362:../../src/kernel/source/nrk_scheduler.c ****         // FIXME: Terrible Terrible...
 363:../../src/kernel/source/nrk_scheduler.c ****         // Need to find out why this is happening...
 364:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 365:../../src/kernel/source/nrk_scheduler.c ****         // Ignore if you are the idle task coming from deep sleep
 366:../../src/kernel/source/nrk_scheduler.c ****         if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
 367:../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
 368:../../src/kernel/source/nrk_scheduler.c **** #endif
 369:../../src/kernel/source/nrk_scheduler.c ****         // This is bad news, but keeps things running
 370:../../src/kernel/source/nrk_scheduler.c ****         // +2 just in case we are on the edge of the last tick
 371:../../src/kernel/source/nrk_scheduler.c ****         next_wake=_nrk_os_timer_get()+2;
 1157               	.LM104:
 1158 0522 0E94 0000 		call _nrk_os_timer_get
 1159 0526 082F      		mov r16,r24
 1160 0528 10E0      		ldi r17,0
 1161 052a 0E5F      		subi r16,-2
 1162 052c 1F4F      		sbci r17,-1
 372:../../src/kernel/source/nrk_scheduler.c ****         _nrk_prev_timer_val=next_wake;
 1164               	.LM105:
 1165 052e 0093 0000 		sts _nrk_prev_timer_val,r16
 1166               	.L38:
 373:../../src/kernel/source/nrk_scheduler.c ****     }
 374:../../src/kernel/source/nrk_scheduler.c **** 
 375:../../src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
 1168               	.LM106:
 1169 0532 C111      		cpse r28,__zero_reg__
 1171               	.LM107:
 1172 0534 1092 0000 		sts _nrk_cpu_state,__zero_reg__
 1173               	.L39:
 376:../../src/kernel/source/nrk_scheduler.c **** 
 377:../../src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(next_wake);
 1175               	.LM108:
 1176 0538 802F      		mov r24,r16
 1177 053a 0E94 0000 		call _nrk_set_next_wakeup
 378:../../src/kernel/source/nrk_scheduler.c **** 
 379:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
 380:../../src/kernel/source/nrk_scheduler.c ****     // Bound Context Swap to 100us
 381:../../src/kernel/source/nrk_scheduler.c ****     nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
 382:../../src/kernel/source/nrk_scheduler.c **** #endif
 383:../../src/kernel/source/nrk_scheduler.c ****     nrk_stack_pointer_restore();
 1179               	.LM109:
 1180 053e 0E94 0000 		call nrk_stack_pointer_restore
 1181               	/* epilogue start */
 384:../../src/kernel/source/nrk_scheduler.c ****     //nrk_int_enable();
 385:../../src/kernel/source/nrk_scheduler.c ****     nrk_start_high_ready_task();
 386:../../src/kernel/source/nrk_scheduler.c **** 
 387:../../src/kernel/source/nrk_scheduler.c **** }
 1183               	.LM110:
 1184 0542 DF91      		pop r29
 1185 0544 CF91      		pop r28
 1186 0546 1F91      		pop r17
 1187 0548 0F91      		pop r16
 1188 054a FF90      		pop r15
 1189 054c EF90      		pop r14
 1190 054e DF90      		pop r13
 1191 0550 CF90      		pop r12
 1192 0552 BF90      		pop r11
 1193 0554 AF90      		pop r10
 1194 0556 9F90      		pop r9
 1195 0558 8F90      		pop r8
 1196 055a 7F90      		pop r7
 1197 055c 6F90      		pop r6
 1198 055e 5F90      		pop r5
 1199 0560 4F90      		pop r4
 1200 0562 3F90      		pop r3
 1201 0564 2F90      		pop r2
 385:../../src/kernel/source/nrk_scheduler.c **** 
 1203               	.LM111:
 1204 0566 0C94 0000 		jmp nrk_start_high_ready_task
 1206               	.Lscope1:
 1208               		.stabd	78,0,0
 1209               		.comm	t,1,1
 1210               		.comm	sw_wdts,57,1
 1211               		.comm	_nrk_stats_sleep_time,8,1
 1212               		.comm	cur_task_stats,150,1
 1213               		.comm	app_timer0_prescale,1,1
 1214               		.comm	app_timer0_callback,2,1
 1215               		.comm	_nrk_time_trigger,1,1
 1216               		.comm	_nrk_prev_timer_val,1,1
 1217               		.comm	next_next_wakeup,2,1
 1218               		.comm	_nrk_cpu_state,1,1
 1219               		.comm	error_num,1,1
 1220               		.comm	error_task,1,1
 1221               		.comm	nrk_system_time,8,1
 1222               		.comm	nrk_sem_list,3,1
 1223               		.comm	_nrk_resource_cnt,1,1
 1224               		.comm	nrk_high_ready_TCB,2,1
 1225               		.comm	nrk_high_ready_prio,1,1
 1226               		.comm	nrk_cur_task_TCB,2,1
 1227               		.comm	nrk_cur_task_prio,1,1
 1228               		.comm	nrk_wakeup_signal,1,1
 1229               		.comm	_head_node,2,1
 1230               		.comm	_free_node,2,1
 1231               		.comm	_nrk_readyQ,30,1
 1232               		.comm	nrk_task_TCB,215,1
 1233               		.comm	nrk_kernel_stk_ptr,2,1
 1234               		.comm	nrk_idle_task_stk,128,1
 1235               		.comm	_nrk_signal_list,4,1
 1264               	.Letext0:
 1265               		.ident	"GCC: (GNU) 4.9.1"
 1266               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk_scheduler.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//cc4jUarH.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//cc4jUarH.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//cc4jUarH.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//cc4jUarH.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//cc4jUarH.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//cc4jUarH.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//cc4jUarH.s:332    .text:0000000000000000 _nrk_scheduler
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000008 nrk_system_time
                            *COM*:0000000000000002 nrk_cur_task_TCB
                            *COM*:0000000000000001 _nrk_cpu_state
                            *COM*:00000000000000d7 nrk_task_TCB
                            *COM*:0000000000000001 nrk_wakeup_signal
                            *COM*:0000000000000001 nrk_high_ready_prio
                            *COM*:0000000000000002 nrk_high_ready_TCB
                            *COM*:0000000000000001 nrk_cur_task_prio
                            *COM*:0000000000000001 t
                            *COM*:0000000000000039 sw_wdts
                            *COM*:0000000000000008 _nrk_stats_sleep_time
                            *COM*:0000000000000096 cur_task_stats
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000002 next_next_wakeup
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000003 nrk_sem_list
                            *COM*:0000000000000001 _nrk_resource_cnt
                            *COM*:0000000000000002 _head_node
                            *COM*:0000000000000002 _free_node
                            *COM*:000000000000001e _nrk_readyQ
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_int_enable
_nrk_set_next_wakeup
nrk_watchdog_reset
_nrk_sw_wdt_check
__muluhisi3
__udivmodsi4
_nrk_stats_sleep
_nrk_stats_task_preempted
_nrk_stats_task_suspend
nrk_rem_from_readyQ
_nrk_stats_add_violation
nrk_kernel_error_add
nrk_add_to_readyQ
_nrk_stats_task_start
nrk_get_high_ready_task_ID
_nrk_os_timer_get
nrk_stack_pointer_restore
nrk_start_high_ready_task
__do_clear_bss
