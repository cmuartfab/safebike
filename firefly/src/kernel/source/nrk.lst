   1               		.file	"nrk.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 323               	.global	nrk_int_disable
 325               	nrk_int_disable:
 326               		.stabd	46,0,0
   1:../../src/kernel/source/nrk.c **** /******************************************************************************
   2:../../src/kernel/source/nrk.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk.c **** *
   6:../../src/kernel/source/nrk.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk.c **** *
  10:../../src/kernel/source/nrk.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk.c **** *
  14:../../src/kernel/source/nrk.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk.c **** *
  19:../../src/kernel/source/nrk.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk.c **** *
  22:../../src/kernel/source/nrk.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk.c **** *  Zane Starr
  25:../../src/kernel/source/nrk.c **** *  Anand Eswaren
  26:../../src/kernel/source/nrk.c **** *******************************************************************************/
  27:../../src/kernel/source/nrk.c **** 
  28:../../src/kernel/source/nrk.c **** #include <stdio.h>
  29:../../src/kernel/source/nrk.c **** #include <nrk_includes.h> 
  30:../../src/kernel/source/nrk.c **** #include <ulib.h>
  31:../../src/kernel/source/nrk.c **** #include <nrk.h>
  32:../../src/kernel/source/nrk.c **** #include <nrk_task.h>
  33:../../src/kernel/source/nrk.c **** #include <nrk_idle_task.h>
  34:../../src/kernel/source/nrk.c **** #include <nrk_defs.h>
  35:../../src/kernel/source/nrk.c **** #include <nrk_cpu.h>
  36:../../src/kernel/source/nrk.c **** #include <nrk_scheduler.h>
  37:../../src/kernel/source/nrk.c **** #include <nrk_error.h>
  38:../../src/kernel/source/nrk.c **** #include <nrk_events.h>
  39:../../src/kernel/source/nrk.c **** #include <nrk_stack_check.h>
  40:../../src/kernel/source/nrk.c **** #include <nrk_status.h>
  41:../../src/kernel/source/nrk.c **** #include <nrk_watchdog.h>
  42:../../src/kernel/source/nrk.c **** #include <nrk_sw_wdt.h>
  43:../../src/kernel/source/nrk.c **** #include <nrk_reserve.h>
  44:../../src/kernel/source/nrk.c **** #include <nrk_cfg.h>
  45:../../src/kernel/source/nrk.c **** #include <nrk_stats.h>
  46:../../src/kernel/source/nrk.c **** 
  47:../../src/kernel/source/nrk.c **** inline void nrk_int_disable(void) {
 328               	.LM0:
 329               	.LFBB1:
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
  48:../../src/kernel/source/nrk.c ****   DISABLE_GLOBAL_INT();
 335               	.LM1:
 336               	/* #APP */
 337               	 ;  48 "../../src/kernel/source/nrk.c" 1
 338 0000 F894      		cli
 339               		
 340               	 ;  0 "" 2
 341               	/* #NOAPP */
 342 0002 0895      		ret
 344               	.Lscope1:
 346               		.stabd	78,0,0
 348               	.global	nrk_int_enable
 350               	nrk_int_enable:
 351               		.stabd	46,0,0
  49:../../src/kernel/source/nrk.c **** };
  50:../../src/kernel/source/nrk.c **** 
  51:../../src/kernel/source/nrk.c **** inline void nrk_int_enable(void) {
 353               	.LM2:
 354               	.LFBB2:
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 0 */
 358               	.L__stack_usage = 0
  52:../../src/kernel/source/nrk.c ****   ENABLE_GLOBAL_INT();
 360               	.LM3:
 361               	/* #APP */
 362               	 ;  52 "../../src/kernel/source/nrk.c" 1
 363 0004 7894      		sei
 364               		
 365               	 ;  0 "" 2
 366               	/* #NOAPP */
 367 0006 0895      		ret
 369               	.Lscope2:
 371               		.stabd	78,0,0
 373               	.global	nrk_halt
 375               	nrk_halt:
 376               		.stabd	46,0,0
  53:../../src/kernel/source/nrk.c **** };
  54:../../src/kernel/source/nrk.c **** 
  55:../../src/kernel/source/nrk.c **** uint8_t nrk_task_init_cnt;
  56:../../src/kernel/source/nrk.c **** 
  57:../../src/kernel/source/nrk.c **** 
  58:../../src/kernel/source/nrk.c **** void nrk_halt()
  59:../../src/kernel/source/nrk.c **** {
 378               	.LM4:
 379               	.LFBB3:
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 0 */
 383               	.L__stack_usage = 0
  60:../../src/kernel/source/nrk.c **** nrk_int_disable();
 385               	.LM5:
 386 0008 0E94 0000 		call nrk_int_disable
 387               	.L4:
  61:../../src/kernel/source/nrk.c **** while(1);
 389               	.LM6:
 390 000c 00C0      		rjmp .L4
 392               	.Lscope3:
 394               		.stabd	78,0,0
 396               	.global	nrk_init
 398               	nrk_init:
 399               		.stabd	46,0,0
  62:../../src/kernel/source/nrk.c **** }
  63:../../src/kernel/source/nrk.c **** 
  64:../../src/kernel/source/nrk.c **** /**
  65:../../src/kernel/source/nrk.c ****  *  nrk_init();
  66:../../src/kernel/source/nrk.c ****  * *  - Init TCBlist - linked list of empty TCBs
  67:../../src/kernel/source/nrk.c ****  *  - Init global variables
  68:../../src/kernel/source/nrk.c ****  *  - Init event list
  69:../../src/kernel/source/nrk.c ****  *  - Create idle task
  70:../../src/kernel/source/nrk.c ****  */
  71:../../src/kernel/source/nrk.c **** void nrk_init()
  72:../../src/kernel/source/nrk.c **** {
 401               	.LM7:
 402               	.LFBB4:
 403 000e CF93      		push r28
 404 0010 DF93      		push r29
 405 0012 CDB7      		in r28,__SP_L__
 406 0014 DEB7      		in r29,__SP_H__
 407 0016 A397      		sbiw r28,35
 408 0018 0FB6      		in __tmp_reg__,__SREG__
 409 001a F894      		cli
 410 001c DEBF      		out __SP_H__,r29
 411 001e 0FBE      		out __SREG__,__tmp_reg__
 412 0020 CDBF      		out __SP_L__,r28
 413               	/* prologue: function */
 414               	/* frame size = 35 */
 415               	/* stack size = 37 */
 416               	.L__stack_usage = 37
  73:../../src/kernel/source/nrk.c **** 	
  74:../../src/kernel/source/nrk.c ****     uint8_t i;	
  75:../../src/kernel/source/nrk.c **** //    unsigned char *stkc;
  76:../../src/kernel/source/nrk.c **** 	
  77:../../src/kernel/source/nrk.c ****    nrk_task_type IdleTask;
  78:../../src/kernel/source/nrk.c ****    nrk_wakeup_signal = nrk_signal_create();
 418               	.LM8:
 419 0022 0E94 0000 		call nrk_signal_create
 420 0026 8093 0000 		sts nrk_wakeup_signal,r24
  79:../../src/kernel/source/nrk.c ****    if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
 422               	.LM9:
 423 002a 8F3F      		cpi r24,lo8(-1)
 424 002c 01F4      		brne .L7
 426               	.LM10:
 427 002e 60E0      		ldi r22,0
 428 0030 8EE0      		ldi r24,lo8(14)
 429 0032 0E94 0000 		call nrk_kernel_error_add
 430               	.L7:
  80:../../src/kernel/source/nrk.c ****    //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
  81:../../src/kernel/source/nrk.c **** #ifndef NRK_SOFT_REBOOT_ON_ERROR
  82:../../src/kernel/source/nrk.c ****    i=_nrk_startup_error();
 432               	.LM11:
 433 0036 0E94 0000 		call _nrk_startup_error
  83:../../src/kernel/source/nrk.c ****    if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
 435               	.LM12:
 436 003a 80FF      		sbrs r24,0
 437 003c 00C0      		rjmp .L8
 439               	.LM13:
 440 003e 60E0      		ldi r22,0
 441 0040 86E0      		ldi r24,lo8(6)
 442 0042 0E94 0000 		call nrk_kernel_error_add
 443               	.L8:
  84:../../src/kernel/source/nrk.c **** #ifndef IGNORE_EXT_RST_ERROR
  85:../../src/kernel/source/nrk.c ****    if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
  86:../../src/kernel/source/nrk.c **** #endif
  87:../../src/kernel/source/nrk.c **** #ifndef IGNORE_BROWN_OUT_ERROR
  88:../../src/kernel/source/nrk.c ****    if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
  89:../../src/kernel/source/nrk.c **** #endif
  90:../../src/kernel/source/nrk.c ****    //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
  91:../../src/kernel/source/nrk.c **** 
  92:../../src/kernel/source/nrk.c **** 
  93:../../src/kernel/source/nrk.c ****  
  94:../../src/kernel/source/nrk.c ****    //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
  95:../../src/kernel/source/nrk.c **** #endif
  96:../../src/kernel/source/nrk.c **** 
  97:../../src/kernel/source/nrk.c ****    #ifdef NRK_STARTUP_VOLTAGE_CHECK
  98:../../src/kernel/source/nrk.c ****    	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
  99:../../src/kernel/source/nrk.c ****    #endif
 100:../../src/kernel/source/nrk.c **** 
 101:../../src/kernel/source/nrk.c **** 
 102:../../src/kernel/source/nrk.c **** 
 103:../../src/kernel/source/nrk.c **** 
 104:../../src/kernel/source/nrk.c ****    #ifdef NRK_REBOOT_ON_ERROR
 105:../../src/kernel/source/nrk.c ****    #ifndef NRK_WATCHDOG
 106:../../src/kernel/source/nrk.c ****    while(1)
 107:../../src/kernel/source/nrk.c **** 	   {
 108:../../src/kernel/source/nrk.c **** 		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
 109:../../src/kernel/source/nrk.c ****     		for (i = 0; i < 100; i++)
 110:../../src/kernel/source/nrk.c ****       			nrk_spin_wait_us (1000);
 111:../../src/kernel/source/nrk.c **** 	   }
 112:../../src/kernel/source/nrk.c ****    #endif
 113:../../src/kernel/source/nrk.c ****    #endif
 114:../../src/kernel/source/nrk.c **** 
 115:../../src/kernel/source/nrk.c ****    #ifdef NRK_WATCHDOG
 116:../../src/kernel/source/nrk.c ****     if(nrk_watchdog_check()==NRK_ERROR) 
 445               	.LM14:
 446 0046 0E94 0000 		call nrk_watchdog_check
 447 004a 8F3F      		cpi r24,lo8(-1)
 448 004c 01F4      		brne .L9
 117:../../src/kernel/source/nrk.c **** 	{
 118:../../src/kernel/source/nrk.c ****     	nrk_watchdog_disable();
 450               	.LM15:
 451 004e 0E94 0000 		call nrk_watchdog_disable
 119:../../src/kernel/source/nrk.c **** 	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
 453               	.LM16:
 454 0052 60E0      		ldi r22,0
 455 0054 80E1      		ldi r24,lo8(16)
 456 0056 0E94 0000 		call nrk_kernel_error_add
 457               	.L9:
 120:../../src/kernel/source/nrk.c **** 	}
 121:../../src/kernel/source/nrk.c ****     nrk_watchdog_enable();
 459               	.LM17:
 460 005a 0E94 0000 		call nrk_watchdog_enable
 122:../../src/kernel/source/nrk.c ****     #endif
 123:../../src/kernel/source/nrk.c ****   
 124:../../src/kernel/source/nrk.c ****   // nrk_stack_pointer_init(); 
 125:../../src/kernel/source/nrk.c **** /* 
 126:../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 127:../../src/kernel/source/nrk.c **** 	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 128:../../src/kernel/source/nrk.c **** 	nrk_kernel_stk[0]=STK_CANARY_VAL;
 129:../../src/kernel/source/nrk.c ****     	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 130:../../src/kernel/source/nrk.c ****     #else
 131:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
 132:../../src/kernel/source/nrk.c ****     	*stkc = STK_CANARY_VAL;
 133:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 134:../../src/kernel/source/nrk.c **** 	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
 135:../../src/kernel/source/nrk.c ****     #endif
 136:../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 137:../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 138:../../src/kernel/source/nrk.c **** */	
 139:../../src/kernel/source/nrk.c ****  
 140:../../src/kernel/source/nrk.c ****    // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
 141:../../src/kernel/source/nrk.c **** 
 142:../../src/kernel/source/nrk.c ****     
 143:../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = 0;
 462               	.LM18:
 463 005e 1092 0000 		sts nrk_cur_task_prio,__zero_reg__
 144:../../src/kernel/source/nrk.c ****     nrk_cur_task_TCB = NULL;
 465               	.LM19:
 466 0062 1092 0000 		sts nrk_cur_task_TCB+1,__zero_reg__
 467 0066 1092 0000 		sts nrk_cur_task_TCB,__zero_reg__
 145:../../src/kernel/source/nrk.c ****     
 146:../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = NULL;
 469               	.LM20:
 470 006a 1092 0000 		sts nrk_high_ready_TCB+1,__zero_reg__
 471 006e 1092 0000 		sts nrk_high_ready_TCB,__zero_reg__
 147:../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = 0; 
 473               	.LM21:
 474 0072 1092 0000 		sts nrk_high_ready_prio,__zero_reg__
 148:../../src/kernel/source/nrk.c **** 
 149:../../src/kernel/source/nrk.c ****    #ifdef NRK_STATS_TRACKER
 150:../../src/kernel/source/nrk.c **** 	nrk_stats_reset();
 476               	.LM22:
 477 0076 0E94 0000 		call nrk_stats_reset
 151:../../src/kernel/source/nrk.c ****    #endif
 152:../../src/kernel/source/nrk.c **** 
 153:../../src/kernel/source/nrk.c ****     #ifdef NRK_MAX_RESERVES 
 154:../../src/kernel/source/nrk.c ****     // Setup the reserve structures
 155:../../src/kernel/source/nrk.c ****     _nrk_reserve_init();
 156:../../src/kernel/source/nrk.c ****     #endif
 157:../../src/kernel/source/nrk.c **** 
 158:../../src/kernel/source/nrk.c ****     _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
 479               	.LM23:
 480 007a 1092 0000 		sts _nrk_resource_cnt,__zero_reg__
 159:../../src/kernel/source/nrk.c **** 
 160:../../src/kernel/source/nrk.c **** for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
 161:../../src/kernel/source/nrk.c **** {
 162:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].count=-1;
 482               	.LM24:
 483 007e 8FEF      		ldi r24,lo8(-1)
 484 0080 8093 0000 		sts nrk_sem_list,r24
 163:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 486               	.LM25:
 487 0084 8093 0000 		sts nrk_sem_list+2,r24
 164:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].resource_ceiling=-1;
 489               	.LM26:
 490 0088 8093 0000 		sts nrk_sem_list+1,r24
 491 008c 80E0      		ldi r24,0
 492 008e 90E0      		ldi r25,0
 165:../../src/kernel/source/nrk.c ****     //nrk_resource_count[i]=-1;
 166:../../src/kernel/source/nrk.c ****     //nrk_resource_value[i]=-1;
 167:../../src/kernel/source/nrk.c ****     //nrk_resource_ceiling[i]=-1;
 168:../../src/kernel/source/nrk.c ****     
 169:../../src/kernel/source/nrk.c **** }        
 170:../../src/kernel/source/nrk.c ****     for (i= 0; i<NRK_MAX_TASKS; i++)
 171:../../src/kernel/source/nrk.c **** 	{
 172:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 494               	.LM27:
 495 0090 33E6      		ldi r19,lo8(99)
 173:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 497               	.LM28:
 498 0092 2FEF      		ldi r18,lo8(-1)
 499               	.L10:
 500 0094 FC01      		movw r30,r24
 501 0096 E050      		subi r30,lo8(-(nrk_task_TCB))
 502 0098 F040      		sbci r31,hi8(-(nrk_task_TCB))
 172:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 504               	.LM29:
 505 009a 3287      		std Z+10,r19
 507               	.LM30:
 508 009c 2087      		std Z+8,r18
 509 009e 8B96      		adiw r24,43
 170:../../src/kernel/source/nrk.c **** 	{
 511               	.LM31:
 512 00a0 873D      		cpi r24,-41
 513 00a2 9105      		cpc r25,__zero_reg__
 514 00a4 01F4      		brne .L10
 515 00a6 E0E0      		ldi r30,lo8(_nrk_readyQ)
 516 00a8 F0E0      		ldi r31,hi8(_nrk_readyQ)
 517               	.L11:
 518 00aa CF01      		movw r24,r30
 519 00ac 0596      		adiw r24,5
 174:../../src/kernel/source/nrk.c ****         }
 175:../../src/kernel/source/nrk.c ****   
 176:../../src/kernel/source/nrk.c ****        
 177:../../src/kernel/source/nrk.c ****     // Setup a double linked list of Ready Tasks 
 178:../../src/kernel/source/nrk.c ****     for (i=0;i<NRK_MAX_TASKS;i++)
 179:../../src/kernel/source/nrk.c **** 	{
 180:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 521               	.LM32:
 522 00ae 9483      		std Z+4,r25
 523 00b0 8383      		std Z+3,r24
 181:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 525               	.LM33:
 526 00b2 F783      		std Z+7,r31
 527 00b4 E683      		std Z+6,r30
 528 00b6 FC01      		movw r30,r24
 178:../../src/kernel/source/nrk.c **** 	{
 530               	.LM34:
 531 00b8 80E0      		ldi r24,hi8(_nrk_readyQ+25)
 532 00ba E030      		cpi r30,lo8(_nrk_readyQ+25)
 533 00bc F807      		cpc r31,r24
 534 00be 01F4      		brne .L11
 182:../../src/kernel/source/nrk.c **** 	}
 183:../../src/kernel/source/nrk.c **** 	
 184:../../src/kernel/source/nrk.c **** 	_nrk_readyQ[0].Prev	=	NULL;
 536               	.LM35:
 537 00c0 1092 0000 		sts _nrk_readyQ+1+1,__zero_reg__
 538 00c4 1092 0000 		sts _nrk_readyQ+1,__zero_reg__
 185:../../src/kernel/source/nrk.c **** 	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
 540               	.LM36:
 541 00c8 1092 0000 		sts _nrk_readyQ+28+1,__zero_reg__
 542 00cc 1092 0000 		sts _nrk_readyQ+28,__zero_reg__
 186:../../src/kernel/source/nrk.c **** 	_head_node = NULL;
 544               	.LM37:
 545 00d0 1092 0000 		sts _head_node+1,__zero_reg__
 546 00d4 1092 0000 		sts _head_node,__zero_reg__
 187:../../src/kernel/source/nrk.c **** 	_free_node = &_nrk_readyQ[0];
 548               	.LM38:
 549 00d8 80E0      		ldi r24,lo8(_nrk_readyQ)
 550 00da 90E0      		ldi r25,hi8(_nrk_readyQ)
 551 00dc 9093 0000 		sts _free_node+1,r25
 552 00e0 8093 0000 		sts _free_node,r24
 188:../../src/kernel/source/nrk.c **** 	
 189:../../src/kernel/source/nrk.c **** 	
 190:../../src/kernel/source/nrk.c **** 	
 191:../../src/kernel/source/nrk.c **** 
 192:../../src/kernel/source/nrk.c **** 	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
 554               	.LM39:
 555 00e4 60E0      		ldi r22,lo8(gs(nrk_idle_task))
 556 00e6 70E0      		ldi r23,hi8(gs(nrk_idle_task))
 557 00e8 CE01      		movw r24,r28
 558 00ea 0196      		adiw r24,1
 559 00ec 0E94 0000 		call nrk_task_set_entry_function
 193:../../src/kernel/source/nrk.c **** 	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
 561               	.LM40:
 562 00f0 40E8      		ldi r20,lo8(-128)
 563 00f2 50E0      		ldi r21,0
 564 00f4 60E0      		ldi r22,lo8(nrk_idle_task_stk)
 565 00f6 70E0      		ldi r23,hi8(nrk_idle_task_stk)
 566 00f8 CE01      		movw r24,r28
 567 00fa 0196      		adiw r24,1
 568 00fc 0E94 0000 		call nrk_task_set_stk
 194:../../src/kernel/source/nrk.c **** 	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
 570               	.LM41:
 571 0100 85E5      		ldi r24,lo8(85)
 572 0102 8093 0000 		sts nrk_idle_task_stk,r24
 195:../../src/kernel/source/nrk.c **** 	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
 196:../../src/kernel/source/nrk.c **** 	IdleTask.prio = 0;
 574               	.LM42:
 575 0106 1986      		std Y+9,__zero_reg__
 197:../../src/kernel/source/nrk.c **** 	IdleTask.period.secs = 0;
 577               	.LM43:
 578 0108 1C86      		std Y+12,__zero_reg__
 579 010a 1D86      		std Y+13,__zero_reg__
 580 010c 1E86      		std Y+14,__zero_reg__
 581 010e 1F86      		std Y+15,__zero_reg__
 198:../../src/kernel/source/nrk.c **** 	IdleTask.period.nano_secs = 0;
 583               	.LM44:
 584 0110 188A      		std Y+16,__zero_reg__
 585 0112 198A      		std Y+17,__zero_reg__
 586 0114 1A8A      		std Y+18,__zero_reg__
 587 0116 1B8A      		std Y+19,__zero_reg__
 199:../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.secs = 0;
 589               	.LM45:
 590 0118 1C8A      		std Y+20,__zero_reg__
 591 011a 1D8A      		std Y+21,__zero_reg__
 592 011c 1E8A      		std Y+22,__zero_reg__
 593 011e 1F8A      		std Y+23,__zero_reg__
 200:../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.nano_secs = 0;
 595               	.LM46:
 596 0120 188E      		std Y+24,__zero_reg__
 597 0122 198E      		std Y+25,__zero_reg__
 598 0124 1A8E      		std Y+26,__zero_reg__
 599 0126 1B8E      		std Y+27,__zero_reg__
 201:../../src/kernel/source/nrk.c **** 	IdleTask.offset.secs = 0;
 601               	.LM47:
 602 0128 1C8E      		std Y+28,__zero_reg__
 603 012a 1D8E      		std Y+29,__zero_reg__
 604 012c 1E8E      		std Y+30,__zero_reg__
 605 012e 1F8E      		std Y+31,__zero_reg__
 202:../../src/kernel/source/nrk.c **** 	IdleTask.offset.nano_secs = 0;
 607               	.LM48:
 608 0130 18A2      		std Y+32,__zero_reg__
 609 0132 19A2      		std Y+33,__zero_reg__
 610 0134 1AA2      		std Y+34,__zero_reg__
 611 0136 1BA2      		std Y+35,__zero_reg__
 203:../../src/kernel/source/nrk.c **** 	IdleTask.FirstActivation = TRUE;
 613               	.LM49:
 614 0138 81E0      		ldi r24,lo8(1)
 615 013a 8887      		std Y+8,r24
 204:../../src/kernel/source/nrk.c **** 	IdleTask.Type = IDLE_TASK;
 617               	.LM50:
 618 013c 92E0      		ldi r25,lo8(2)
 619 013e 9A87      		std Y+10,r25
 205:../../src/kernel/source/nrk.c **** 	IdleTask.SchType = PREEMPTIVE;
 621               	.LM51:
 622 0140 8B87      		std Y+11,r24
 206:../../src/kernel/source/nrk.c **** 	nrk_activate_task(&IdleTask);
 624               	.LM52:
 625 0142 CE01      		movw r24,r28
 626 0144 0196      		adiw r24,1
 627 0146 0E94 0000 		call nrk_activate_task
 628               	/* epilogue start */
 207:../../src/kernel/source/nrk.c **** 	
 208:../../src/kernel/source/nrk.c **** }
 630               	.LM53:
 631 014a A396      		adiw r28,35
 632 014c 0FB6      		in __tmp_reg__,__SREG__
 633 014e F894      		cli
 634 0150 DEBF      		out __SP_H__,r29
 635 0152 0FBE      		out __SREG__,__tmp_reg__
 636 0154 CDBF      		out __SP_L__,r28
 637 0156 DF91      		pop r29
 638 0158 CF91      		pop r28
 639 015a 0895      		ret
 644               	.Lscope4:
 646               		.stabd	78,0,0
 648               	.global	nrk_start
 650               	nrk_start:
 651               		.stabd	46,0,0
 209:../../src/kernel/source/nrk.c **** 
 210:../../src/kernel/source/nrk.c **** 
 211:../../src/kernel/source/nrk.c **** 
 212:../../src/kernel/source/nrk.c **** 
 213:../../src/kernel/source/nrk.c **** 
 214:../../src/kernel/source/nrk.c **** 
 215:../../src/kernel/source/nrk.c **** 
 216:../../src/kernel/source/nrk.c **** 
 217:../../src/kernel/source/nrk.c **** void nrk_start (void)
 218:../../src/kernel/source/nrk.c **** {
 653               	.LM54:
 654               	.LFBB5:
 655               	/* prologue: function */
 656               	/* frame size = 0 */
 657               	/* stack size = 0 */
 658               	.L__stack_usage = 0
 660               	.LM55:
 661 015c 00E0      		ldi r16,lo8(nrk_task_TCB+8)
 662 015e 10E0      		ldi r17,hi8(nrk_task_TCB+8)
 219:../../src/kernel/source/nrk.c **** 	int8_t task_ID;
 220:../../src/kernel/source/nrk.c **** 	uint8_t i,j;
 221:../../src/kernel/source/nrk.c **** //	NRK_STK *x;
 222:../../src/kernel/source/nrk.c **** //	unsigned char *stkc;
 223:../../src/kernel/source/nrk.c **** 
 224:../../src/kernel/source/nrk.c **** 	/*
 225:../../src/kernel/source/nrk.c **** 		- Get highest priority task from rdy list
 226:../../src/kernel/source/nrk.c **** 		- set cur prio and start the task 
 227:../../src/kernel/source/nrk.c **** 	*/
 228:../../src/kernel/source/nrk.c ****     // Check to make sure all tasks unique
 229:../../src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 664               	.LM56:
 665 0160 C0E0      		ldi r28,0
 666               	.L19:
 230:../../src/kernel/source/nrk.c ****     {
 231:../../src/kernel/source/nrk.c **** 	task_ID = nrk_task_TCB[i].task_ID;
 668               	.LM57:
 669 0162 F801      		movw r30,r16
 670 0164 D080      		ld r13,Z
 232:../../src/kernel/source/nrk.c **** 	// only check activated tasks
 233:../../src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 672               	.LM58:
 673 0166 FFEF      		ldi r31,lo8(-1)
 674 0168 DF12      		cpse r13,r31
 675 016a 00C0      		rjmp .L24
 676               	.L22:
 229:../../src/kernel/source/nrk.c ****     {
 678               	.LM59:
 679 016c CF5F      		subi r28,lo8(-(1))
 680 016e 055D      		subi r16,-43
 681 0170 1F4F      		sbci r17,-1
 682 0172 C530      		cpi r28,lo8(5)
 683 0174 01F4      		brne .L19
 234:../../src/kernel/source/nrk.c **** 	{
 235:../../src/kernel/source/nrk.c ****     		for(j=0; j<NRK_MAX_TASKS; j++ )
 236:../../src/kernel/source/nrk.c **** 		{
 237:../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 238:../../src/kernel/source/nrk.c **** 			{
 239:../../src/kernel/source/nrk.c **** 			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
 240:../../src/kernel/source/nrk.c **** 
 241:../../src/kernel/source/nrk.c **** 			}
 242:../../src/kernel/source/nrk.c **** 		}
 243:../../src/kernel/source/nrk.c **** 	}
 244:../../src/kernel/source/nrk.c **** 
 245:../../src/kernel/source/nrk.c ****     }
 246:../../src/kernel/source/nrk.c **** 
 247:../../src/kernel/source/nrk.c ****     task_ID = nrk_get_high_ready_task_ID();	
 685               	.LM60:
 686 0176 0E94 0000 		call nrk_get_high_ready_task_ID
 248:../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 688               	.LM61:
 689 017a 2BE2      		ldi r18,lo8(43)
 690 017c 8202      		muls r24,r18
 691 017e C001      		movw r24,r0
 692 0180 1124      		clr __zero_reg__
 693 0182 FC01      		movw r30,r24
 694 0184 E050      		subi r30,lo8(-(nrk_task_TCB))
 695 0186 F040      		sbci r31,hi8(-(nrk_task_TCB))
 696 0188 8285      		ldd r24,Z+10
 697 018a 8093 0000 		sts nrk_high_ready_prio,r24
 249:../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
 699               	.LM62:
 700 018e F093 0000 		sts nrk_cur_task_TCB+1,r31
 701 0192 E093 0000 		sts nrk_cur_task_TCB,r30
 702 0196 F093 0000 		sts nrk_high_ready_TCB+1,r31
 703 019a E093 0000 		sts nrk_high_ready_TCB,r30
 250:../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 705               	.LM63:
 706 019e 8093 0000 		sts nrk_cur_task_prio,r24
 251:../../src/kernel/source/nrk.c **** 		
 252:../../src/kernel/source/nrk.c **** //    nrk_stack_pointer_restore();
 253:../../src/kernel/source/nrk.c **** 
 254:../../src/kernel/source/nrk.c ****     /*
 255:../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 256:../../src/kernel/source/nrk.c ****      	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 257:../../src/kernel/source/nrk.c ****     #else
 258:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 259:../../src/kernel/source/nrk.c ****     #endif
 260:../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 261:../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 262:../../src/kernel/source/nrk.c ****     
 263:../../src/kernel/source/nrk.c ****     //TODO: this way on msp
 264:../../src/kernel/source/nrk.c ****     // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 265:../../src/kernel/source/nrk.c ****     // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
 266:../../src/kernel/source/nrk.c **** */
 267:../../src/kernel/source/nrk.c ****     nrk_target_start();
 708               	.LM64:
 709 01a2 0E94 0000 		call nrk_target_start
 268:../../src/kernel/source/nrk.c ****     nrk_stack_pointer_init(); 
 711               	.LM65:
 712 01a6 0E94 0000 		call nrk_stack_pointer_init
 269:../../src/kernel/source/nrk.c ****     nrk_start_high_ready_task();	
 714               	.LM66:
 715 01aa 0E94 0000 		call nrk_start_high_ready_task
 716 01ae 00C0      		rjmp .L23
 717               	.L24:
 718 01b0 80E0      		ldi r24,lo8(nrk_task_TCB+8)
 719 01b2 E82E      		mov r14,r24
 720 01b4 80E0      		ldi r24,hi8(nrk_task_TCB+8)
 721 01b6 F82E      		mov r15,r24
 722 01b8 D0E0      		ldi r29,0
 723               	.L18:
 237:../../src/kernel/source/nrk.c **** 			{
 725               	.LM67:
 726 01ba CD17      		cp r28,r29
 727 01bc 01F0      		breq .L21
 237:../../src/kernel/source/nrk.c **** 			{
 729               	.LM68:
 730 01be F701      		movw r30,r14
 731 01c0 8081      		ld r24,Z
 732 01c2 D812      		cpse r13,r24
 733 01c4 00C0      		rjmp .L21
 239:../../src/kernel/source/nrk.c **** 
 735               	.LM69:
 736 01c6 6D2D      		mov r22,r13
 737 01c8 85E0      		ldi r24,lo8(5)
 738 01ca 0E94 0000 		call nrk_kernel_error_add
 739               	.L21:
 235:../../src/kernel/source/nrk.c **** 		{
 741               	.LM70:
 742 01ce DF5F      		subi r29,lo8(-(1))
 743 01d0 FBE2      		ldi r31,43
 744 01d2 EF0E      		add r14,r31
 745 01d4 F11C      		adc r15,__zero_reg__
 746 01d6 D530      		cpi r29,lo8(5)
 747 01d8 01F4      		brne .L18
 748 01da 00C0      		rjmp .L22
 749               	.L23:
 270:../../src/kernel/source/nrk.c **** 
 271:../../src/kernel/source/nrk.c ****     // you should never get here    
 272:../../src/kernel/source/nrk.c ****     while(1);
 751               	.LM71:
 752 01dc 00C0      		rjmp .L23
 758               	.Lscope5:
 760               		.stabd	78,0,0
 768               	.global	nrk_TCB_init
 770               	nrk_TCB_init:
 771               		.stabd	46,0,0
 273:../../src/kernel/source/nrk.c **** }
 274:../../src/kernel/source/nrk.c **** 
 275:../../src/kernel/source/nrk.c **** 
 276:../../src/kernel/source/nrk.c **** int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pe
 277:../../src/kernel/source/nrk.c **** {
 773               	.LM72:
 774               	.LFBB6:
 775 01de CF92      		push r12
 776 01e0 DF92      		push r13
 777 01e2 EF92      		push r14
 778 01e4 FF92      		push r15
 779 01e6 0F93      		push r16
 780 01e8 1F93      		push r17
 781 01ea CF93      		push r28
 782 01ec DF93      		push r29
 783               	/* prologue: function */
 784               	/* frame size = 0 */
 785               	/* stack size = 8 */
 786               	.L__stack_usage = 8
 787 01ee EC01      		movw r28,r24
 788 01f0 8B01      		movw r16,r22
 789 01f2 7A01      		movw r14,r20
 278:../../src/kernel/source/nrk.c **** 	
 279:../../src/kernel/source/nrk.c ****     //  Already in critical section so no needenter critical section
 280:../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK)
 791               	.LM73:
 792 01f4 8985      		ldd r24,Y+9
 793 01f6 8230      		cpi r24,lo8(2)
 794 01f8 01F0      		breq .L29
 281:../../src/kernel/source/nrk.c ****     	Task->task_ID=nrk_task_init_cnt;
 796               	.LM74:
 797 01fa 8091 0000 		lds r24,nrk_task_init_cnt
 798 01fe 8883      		st Y,r24
 799 0200 00C0      		rjmp .L30
 800               	.L29:
 282:../../src/kernel/source/nrk.c ****     else Task->task_ID=NRK_IDLE_TASK_ID;
 802               	.LM75:
 803 0202 1882      		st Y,__zero_reg__
 804               	.L30:
 283:../../src/kernel/source/nrk.c **** 
 284:../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
 806               	.LM76:
 807 0204 8091 0000 		lds r24,nrk_task_init_cnt
 808 0208 8530      		cpi r24,lo8(5)
 809 020a 00F0      		brlo .L31
 811               	.LM77:
 812 020c 60E0      		ldi r22,0
 813 020e 87E0      		ldi r24,lo8(7)
 814 0210 0E94 0000 		call nrk_kernel_error_add
 815               	.L31:
 285:../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
 817               	.LM78:
 818 0214 8985      		ldd r24,Y+9
 819 0216 8230      		cpi r24,lo8(2)
 820 0218 01F0      		breq .L32
 822               	.LM79:
 823 021a 8091 0000 		lds r24,nrk_task_init_cnt
 824 021e 8F5F      		subi r24,lo8(-(1))
 825 0220 8093 0000 		sts nrk_task_init_cnt,r24
 826               	.L32:
 286:../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
 828               	.LM80:
 829 0224 8091 0000 		lds r24,nrk_task_init_cnt
 830 0228 8111      		cpse r24,__zero_reg__
 831 022a 00C0      		rjmp .L33
 833               	.LM81:
 834 022c 81E0      		ldi r24,lo8(1)
 835 022e 8093 0000 		sts nrk_task_init_cnt,r24
 836               	.L33:
 287:../../src/kernel/source/nrk.c ****     //initialize member of TCB structure
 288:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
 838               	.LM82:
 839 0232 3881      		ld r19,Y
 840 0234 2BE2      		ldi r18,lo8(43)
 841 0236 3203      		mulsu r19,r18
 842 0238 F001      		movw r30,r0
 843 023a 1124      		clr __zero_reg__
 844 023c E050      		subi r30,lo8(-(nrk_task_TCB))
 845 023e F040      		sbci r31,hi8(-(nrk_task_TCB))
 846 0240 1183      		std Z+1,r17
 847 0242 0083      		st Z,r16
 289:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
 849               	.LM83:
 850 0244 8885      		ldd r24,Y+8
 851 0246 8287      		std Z+10,r24
 290:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
 853               	.LM84:
 854 0248 3881      		ld r19,Y
 855 024a 3203      		mulsu r19,r18
 856 024c F001      		movw r30,r0
 857 024e 1124      		clr __zero_reg__
 858 0250 E050      		subi r30,lo8(-(nrk_task_TCB))
 859 0252 F040      		sbci r31,hi8(-(nrk_task_TCB))
 860 0254 83E0      		ldi r24,lo8(3)
 861 0256 8187      		std Z+9,r24
 291:../../src/kernel/source/nrk.c ****     
 292:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
 863               	.LM85:
 864 0258 3881      		ld r19,Y
 865 025a 3203      		mulsu r19,r18
 866 025c F001      		movw r30,r0
 867 025e 1124      		clr __zero_reg__
 868 0260 E050      		subi r30,lo8(-(nrk_task_TCB))
 869 0262 F040      		sbci r31,hi8(-(nrk_task_TCB))
 870 0264 3087      		std Z+8,r19
 293:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].suspend_flag = 0;
 872               	.LM86:
 873 0266 0881      		ld r16,Y
 874 0268 0203      		mulsu r16,r18
 875 026a 8001      		movw r16,r0
 876 026c 1124      		clr __zero_reg__
 877 026e 0050      		subi r16,lo8(-(nrk_task_TCB))
 878 0270 1040      		sbci r17,hi8(-(nrk_task_TCB))
 879 0272 F801      		movw r30,r16
 880 0274 1582      		std Z+5,__zero_reg__
 294:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
 882               	.LM87:
 883 0276 CE01      		movw r24,r28
 884 0278 0B96      		adiw r24,11
 885 027a 0E94 0000 		call _nrk_time_to_ticks_long
 886 027e F801      		movw r30,r16
 887 0280 61A3      		std Z+33,r22
 888 0282 72A3      		std Z+34,r23
 889 0284 83A3      		std Z+35,r24
 890 0286 94A3      		std Z+36,r25
 295:../../src/kernel/source/nrk.c ****     if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
 892               	.LM88:
 893 0288 8B85      		ldd r24,Y+11
 894 028a 9C85      		ldd r25,Y+12
 895 028c AD85      		ldd r26,Y+13
 896 028e BE85      		ldd r27,Y+14
 897 0290 8833      		cpi r24,56
 898 0292 9948      		sbci r25,-119
 899 0294 A144      		sbci r26,65
 900 0296 B105      		cpc r27,__zero_reg__
 901 0298 00F0      		brlo .L34
 903               	.LM89:
 904 029a 6881      		ld r22,Y
 905 029c 86E1      		ldi r24,lo8(22)
 906 029e 0E94 0000 		call nrk_kernel_error_add
 907               	.L34:
 296:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
 909               	.LM90:
 910 02a2 C880      		ld r12,Y
 911 02a4 DD24      		clr r13
 912 02a6 C7FC      		sbrc r12,7
 913 02a8 D094      		com r13
 914 02aa CE01      		movw r24,r28
 915 02ac 4B96      		adiw r24,27
 916 02ae 0E94 0000 		call _nrk_time_to_ticks_long
 917 02b2 1BE2      		ldi r17,lo8(43)
 918 02b4 1C9D      		mul r17,r12
 919 02b6 F001      		movw r30,r0
 920 02b8 1D9D      		mul r17,r13
 921 02ba F00D      		add r31,r0
 922 02bc 1124      		clr __zero_reg__
 923 02be E050      		subi r30,lo8(-(nrk_task_TCB))
 924 02c0 F040      		sbci r31,hi8(-(nrk_task_TCB))
 925 02c2 658B      		std Z+21,r22
 926 02c4 768B      		std Z+22,r23
 927 02c6 878B      		std Z+23,r24
 928 02c8 908F      		std Z+24,r25
 297:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->
 930               	.LM91:
 931 02ca 2881      		ld r18,Y
 932 02cc 2103      		mulsu r18,r17
 933 02ce C001      		movw r24,r0
 934 02d0 1124      		clr __zero_reg__
 935 02d2 9C01      		movw r18,r24
 936 02d4 2050      		subi r18,lo8(-(nrk_task_TCB))
 937 02d6 3040      		sbci r19,hi8(-(nrk_task_TCB))
 938 02d8 6901      		movw r12,r18
 939 02da F901      		movw r30,r18
 940 02dc 4589      		ldd r20,Z+21
 941 02de 5689      		ldd r21,Z+22
 942 02e0 6789      		ldd r22,Z+23
 943 02e2 708D      		ldd r23,Z+24
 944 02e4 81A1      		ldd r24,Z+33
 945 02e6 92A1      		ldd r25,Z+34
 946 02e8 A3A1      		ldd r26,Z+35
 947 02ea B4A1      		ldd r27,Z+36
 948 02ec 840F      		add r24,r20
 949 02ee 951F      		adc r25,r21
 950 02f0 A61F      		adc r26,r22
 951 02f2 B71F      		adc r27,r23
 952 02f4 818F      		std Z+25,r24
 953 02f6 928F      		std Z+26,r25
 954 02f8 A38F      		std Z+27,r26
 955 02fa B48F      		std Z+28,r27
 298:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
 957               	.LM92:
 958 02fc CE01      		movw r24,r28
 959 02fe 4396      		adiw r24,19
 960 0300 0E94 0000 		call _nrk_time_to_ticks_long
 961 0304 F601      		movw r30,r12
 962 0306 65A3      		std Z+37,r22
 963 0308 76A3      		std Z+38,r23
 964 030a 87A3      		std Z+39,r24
 965 030c 90A7      		std Z+40,r25
 299:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
 967               	.LM93:
 968 030e 2881      		ld r18,Y
 969 0310 2103      		mulsu r18,r17
 970 0312 F001      		movw r30,r0
 971 0314 1124      		clr __zero_reg__
 972 0316 E050      		subi r30,lo8(-(nrk_task_TCB))
 973 0318 F040      		sbci r31,hi8(-(nrk_task_TCB))
 974 031a 85A1      		ldd r24,Z+37
 975 031c 96A1      		ldd r25,Z+38
 976 031e A7A1      		ldd r26,Z+39
 977 0320 B0A5      		ldd r27,Z+40
 978 0322 858F      		std Z+29,r24
 979 0324 968F      		std Z+30,r25
 980 0326 A78F      		std Z+31,r26
 981 0328 B0A3      		std Z+32,r27
 300:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].num_periods = 1;
 983               	.LM94:
 984 032a 81E0      		ldi r24,lo8(1)
 985 032c 90E0      		ldi r25,0
 986 032e 92A7      		std Z+42,r25
 987 0330 81A7      		std Z+41,r24
 301:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
 989               	.LM95:
 990 0332 F382      		std Z+3,r15
 991 0334 E282      		std Z+2,r14
 302:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 993               	.LM96:
 994 0336 8487      		std Z+12,r24
 995               	/* epilogue start */
 303:../../src/kernel/source/nrk.c ****  
 304:../../src/kernel/source/nrk.c **** 	
 305:../../src/kernel/source/nrk.c **** 	         
 306:../../src/kernel/source/nrk.c **** 
 307:../../src/kernel/source/nrk.c **** 			
 308:../../src/kernel/source/nrk.c ****     return NRK_OK;
 309:../../src/kernel/source/nrk.c **** 
 310:../../src/kernel/source/nrk.c **** }
 997               	.LM97:
 998 0338 DF91      		pop r29
 999 033a CF91      		pop r28
 1000 033c 1F91      		pop r17
 1001 033e 0F91      		pop r16
 1002 0340 FF90      		pop r15
 1003 0342 EF90      		pop r14
 1004 0344 DF90      		pop r13
 1005 0346 CF90      		pop r12
 1006 0348 0895      		ret
 1008               	.Lscope6:
 1010               		.stabd	78,0,0
 1012               	.global	_nrk_timer_tick
 1014               	_nrk_timer_tick:
 1015               		.stabd	46,0,0
 311:../../src/kernel/source/nrk.c **** 
 312:../../src/kernel/source/nrk.c **** 
 313:../../src/kernel/source/nrk.c **** /*
 314:../../src/kernel/source/nrk.c ****  * _nrk_timer_tick() 
 315:../../src/kernel/source/nrk.c ****  *
 316:../../src/kernel/source/nrk.c ****  * This function is called by the interrupt timer0.
 317:../../src/kernel/source/nrk.c ****  * It calls the scheduler.
 318:../../src/kernel/source/nrk.c ****  */
 319:../../src/kernel/source/nrk.c **** void _nrk_timer_tick(void)
 320:../../src/kernel/source/nrk.c **** {
 1017               	.LM98:
 1018               	.LFBB7:
 1019               	/* prologue: function */
 1020               	/* frame size = 0 */
 1021               	/* stack size = 0 */
 1022               	.L__stack_usage = 0
 321:../../src/kernel/source/nrk.c **** 	// want to do something before the scheduler gets called? 
 322:../../src/kernel/source/nrk.c **** 	// Go ahead and put it here...
 323:../../src/kernel/source/nrk.c **** 
 324:../../src/kernel/source/nrk.c **** 	_nrk_scheduler();
 1024               	.LM99:
 1025 034a 0C94 0000 		jmp _nrk_scheduler
 1027               	.Lscope7:
 1029               		.stabd	78,0,0
 1031               	.global	nrk_version
 1033               	nrk_version:
 1034               		.stabd	46,0,0
 325:../../src/kernel/source/nrk.c **** 
 326:../../src/kernel/source/nrk.c ****   	return;
 327:../../src/kernel/source/nrk.c **** }
 328:../../src/kernel/source/nrk.c **** 
 329:../../src/kernel/source/nrk.c **** 
 330:../../src/kernel/source/nrk.c **** uint16_t nrk_version (void)
 331:../../src/kernel/source/nrk.c **** {
 1036               	.LM100:
 1037               	.LFBB8:
 1038               	/* prologue: function */
 1039               	/* frame size = 0 */
 1040               	/* stack size = 0 */
 1041               	.L__stack_usage = 0
 332:../../src/kernel/source/nrk.c ****     return (NRK_VERSION);
 333:../../src/kernel/source/nrk.c **** }
 1043               	.LM101:
 1044 034e 85E6      		ldi r24,lo8(101)
 1045 0350 90E0      		ldi r25,0
 1046 0352 0895      		ret
 1048               	.Lscope8:
 1050               		.stabd	78,0,0
 1051               		.comm	nrk_task_init_cnt,1,1
 1052               		.comm	_nrk_stats_sleep_time,8,1
 1053               		.comm	cur_task_stats,150,1
 1054               		.comm	sw_wdts,57,1
 1055               		.comm	error_num,1,1
 1056               		.comm	error_task,1,1
 1057               		.comm	next_next_wakeup,2,1
 1058               		.comm	_nrk_cpu_state,1,1
 1059               		.comm	nrk_system_time,8,1
 1060               		.comm	nrk_sem_list,3,1
 1061               		.comm	_nrk_resource_cnt,1,1
 1062               		.comm	nrk_high_ready_TCB,2,1
 1063               		.comm	nrk_high_ready_prio,1,1
 1064               		.comm	nrk_cur_task_TCB,2,1
 1065               		.comm	nrk_cur_task_prio,1,1
 1066               		.comm	nrk_wakeup_signal,1,1
 1067               		.comm	_head_node,2,1
 1068               		.comm	_free_node,2,1
 1069               		.comm	_nrk_readyQ,30,1
 1070               		.comm	nrk_task_TCB,215,1
 1071               		.comm	nrk_kernel_stk_ptr,2,1
 1072               		.comm	nrk_idle_task_stk,128,1
 1073               		.comm	_nrk_signal_list,4,1
 1098               	.Letext0:
 1099               		.ident	"GCC: (GNU) 4.9.1"
 1100               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:325    .text:0000000000000000 nrk_int_disable
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:350    .text:0000000000000004 nrk_int_enable
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:375    .text:0000000000000008 nrk_halt
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:398    .text:000000000000000e nrk_init
                            *COM*:0000000000000001 nrk_wakeup_signal
                            *COM*:0000000000000001 nrk_cur_task_prio
                            *COM*:0000000000000002 nrk_cur_task_TCB
                            *COM*:0000000000000002 nrk_high_ready_TCB
                            *COM*:0000000000000001 nrk_high_ready_prio
                            *COM*:0000000000000001 _nrk_resource_cnt
                            *COM*:0000000000000003 nrk_sem_list
                            *COM*:00000000000000d7 nrk_task_TCB
                            *COM*:000000000000001e _nrk_readyQ
                            *COM*:0000000000000002 _head_node
                            *COM*:0000000000000002 _free_node
                            *COM*:0000000000000080 nrk_idle_task_stk
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:650    .text:000000000000015c nrk_start
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:770    .text:00000000000001de nrk_TCB_init
                            *COM*:0000000000000001 nrk_task_init_cnt
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:1014   .text:000000000000034a _nrk_timer_tick
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccUEbbOI.s:1033   .text:000000000000034e nrk_version
                            *COM*:0000000000000008 _nrk_stats_sleep_time
                            *COM*:0000000000000096 cur_task_stats
                            *COM*:0000000000000039 sw_wdts
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 next_next_wakeup
                            *COM*:0000000000000001 _nrk_cpu_state
                            *COM*:0000000000000008 nrk_system_time
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_signal_create
nrk_kernel_error_add
_nrk_startup_error
nrk_watchdog_check
nrk_watchdog_disable
nrk_watchdog_enable
nrk_stats_reset
nrk_idle_task
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_get_high_ready_task_ID
nrk_target_start
nrk_stack_pointer_init
nrk_start_high_ready_task
_nrk_time_to_ticks_long
_nrk_scheduler
__do_clear_bss
