   1               		.file	"nrk.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 323               	.global	nrk_int_disable
 325               	nrk_int_disable:
 326               		.stabd	46,0,0
   1:../../src/kernel/source/nrk.c **** /******************************************************************************
   2:../../src/kernel/source/nrk.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk.c **** *
   6:../../src/kernel/source/nrk.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk.c **** *
  10:../../src/kernel/source/nrk.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk.c **** *
  14:../../src/kernel/source/nrk.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk.c **** *
  19:../../src/kernel/source/nrk.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk.c **** *
  22:../../src/kernel/source/nrk.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk.c **** *  Zane Starr
  25:../../src/kernel/source/nrk.c **** *  Anand Eswaren
  26:../../src/kernel/source/nrk.c **** *******************************************************************************/
  27:../../src/kernel/source/nrk.c **** 
  28:../../src/kernel/source/nrk.c **** #include <stdio.h>
  29:../../src/kernel/source/nrk.c **** #include <nrk_includes.h> 
  30:../../src/kernel/source/nrk.c **** #include <ulib.h>
  31:../../src/kernel/source/nrk.c **** #include <nrk.h>
  32:../../src/kernel/source/nrk.c **** #include <nrk_task.h>
  33:../../src/kernel/source/nrk.c **** #include <nrk_idle_task.h>
  34:../../src/kernel/source/nrk.c **** #include <nrk_defs.h>
  35:../../src/kernel/source/nrk.c **** #include <nrk_cpu.h>
  36:../../src/kernel/source/nrk.c **** #include <nrk_scheduler.h>
  37:../../src/kernel/source/nrk.c **** #include <nrk_error.h>
  38:../../src/kernel/source/nrk.c **** #include <nrk_events.h>
  39:../../src/kernel/source/nrk.c **** #include <nrk_stack_check.h>
  40:../../src/kernel/source/nrk.c **** #include <nrk_status.h>
  41:../../src/kernel/source/nrk.c **** #include <nrk_watchdog.h>
  42:../../src/kernel/source/nrk.c **** #include <nrk_sw_wdt.h>
  43:../../src/kernel/source/nrk.c **** #include <nrk_reserve.h>
  44:../../src/kernel/source/nrk.c **** #include <nrk_cfg.h>
  45:../../src/kernel/source/nrk.c **** #include <nrk_stats.h>
  46:../../src/kernel/source/nrk.c **** 
  47:../../src/kernel/source/nrk.c **** inline void nrk_int_disable(void) {
 328               	.LM0:
 329               	.LFBB1:
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
  48:../../src/kernel/source/nrk.c ****   DISABLE_GLOBAL_INT();
 335               	.LM1:
 336               	/* #APP */
 337               	 ;  48 "../../src/kernel/source/nrk.c" 1
 338 0000 F894      		cli
 339               		
 340               	 ;  0 "" 2
 341               	/* #NOAPP */
 342 0002 0895      		ret
 344               	.Lscope1:
 346               		.stabd	78,0,0
 348               	.global	nrk_int_enable
 350               	nrk_int_enable:
 351               		.stabd	46,0,0
  49:../../src/kernel/source/nrk.c **** };
  50:../../src/kernel/source/nrk.c **** 
  51:../../src/kernel/source/nrk.c **** inline void nrk_int_enable(void) {
 353               	.LM2:
 354               	.LFBB2:
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 0 */
 358               	.L__stack_usage = 0
  52:../../src/kernel/source/nrk.c ****   ENABLE_GLOBAL_INT();
 360               	.LM3:
 361               	/* #APP */
 362               	 ;  52 "../../src/kernel/source/nrk.c" 1
 363 0004 7894      		sei
 364               		
 365               	 ;  0 "" 2
 366               	/* #NOAPP */
 367 0006 0895      		ret
 369               	.Lscope2:
 371               		.stabd	78,0,0
 373               	.global	nrk_halt
 375               	nrk_halt:
 376               		.stabd	46,0,0
  53:../../src/kernel/source/nrk.c **** };
  54:../../src/kernel/source/nrk.c **** 
  55:../../src/kernel/source/nrk.c **** uint8_t nrk_task_init_cnt;
  56:../../src/kernel/source/nrk.c **** 
  57:../../src/kernel/source/nrk.c **** 
  58:../../src/kernel/source/nrk.c **** void nrk_halt()
  59:../../src/kernel/source/nrk.c **** {
 378               	.LM4:
 379               	.LFBB3:
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 0 */
 383               	.L__stack_usage = 0
  60:../../src/kernel/source/nrk.c **** nrk_int_disable();
 385               	.LM5:
 386 0008 0E94 0000 		call nrk_int_disable
 387               	.L4:
  61:../../src/kernel/source/nrk.c **** while(1);
 389               	.LM6:
 390 000c 00C0      		rjmp .L4
 392               	.Lscope3:
 394               		.stabd	78,0,0
 396               	.global	nrk_init
 398               	nrk_init:
 399               		.stabd	46,0,0
  62:../../src/kernel/source/nrk.c **** }
  63:../../src/kernel/source/nrk.c **** 
  64:../../src/kernel/source/nrk.c **** /**
  65:../../src/kernel/source/nrk.c ****  *  nrk_init();
  66:../../src/kernel/source/nrk.c ****  * *  - Init TCBlist - linked list of empty TCBs
  67:../../src/kernel/source/nrk.c ****  *  - Init global variables
  68:../../src/kernel/source/nrk.c ****  *  - Init event list
  69:../../src/kernel/source/nrk.c ****  *  - Create idle task
  70:../../src/kernel/source/nrk.c ****  */
  71:../../src/kernel/source/nrk.c **** void nrk_init()
  72:../../src/kernel/source/nrk.c **** {
 401               	.LM7:
 402               	.LFBB4:
 403 000e CF93      		push r28
 404 0010 DF93      		push r29
 405 0012 CDB7      		in r28,__SP_L__
 406 0014 DEB7      		in r29,__SP_H__
 407 0016 A397      		sbiw r28,35
 408 0018 0FB6      		in __tmp_reg__,__SREG__
 409 001a F894      		cli
 410 001c DEBF      		out __SP_H__,r29
 411 001e 0FBE      		out __SREG__,__tmp_reg__
 412 0020 CDBF      		out __SP_L__,r28
 413               	/* prologue: function */
 414               	/* frame size = 35 */
 415               	/* stack size = 37 */
 416               	.L__stack_usage = 37
  73:../../src/kernel/source/nrk.c **** 	
  74:../../src/kernel/source/nrk.c ****     uint8_t i;	
  75:../../src/kernel/source/nrk.c **** //    unsigned char *stkc;
  76:../../src/kernel/source/nrk.c **** 	
  77:../../src/kernel/source/nrk.c ****    nrk_task_type IdleTask;
  78:../../src/kernel/source/nrk.c ****    nrk_wakeup_signal = nrk_signal_create();
 418               	.LM8:
 419 0022 0E94 0000 		call nrk_signal_create
 420 0026 8093 0000 		sts nrk_wakeup_signal,r24
  79:../../src/kernel/source/nrk.c ****    if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
 422               	.LM9:
 423 002a 8F3F      		cpi r24,lo8(-1)
 424 002c 01F4      		brne .L7
 426               	.LM10:
 427 002e 60E0      		ldi r22,0
 428 0030 8EE0      		ldi r24,lo8(14)
 429 0032 0E94 0000 		call nrk_kernel_error_add
 430               	.L7:
  80:../../src/kernel/source/nrk.c ****    //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
  81:../../src/kernel/source/nrk.c **** #ifndef NRK_SOFT_REBOOT_ON_ERROR
  82:../../src/kernel/source/nrk.c ****    i=_nrk_startup_error();
 432               	.LM11:
 433 0036 0E94 0000 		call _nrk_startup_error
  83:../../src/kernel/source/nrk.c ****    if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
 435               	.LM12:
 436 003a 80FF      		sbrs r24,0
 437 003c 00C0      		rjmp .L8
 439               	.LM13:
 440 003e 60E0      		ldi r22,0
 441 0040 86E0      		ldi r24,lo8(6)
 442 0042 0E94 0000 		call nrk_kernel_error_add
 443               	.L8:
  84:../../src/kernel/source/nrk.c **** #ifndef IGNORE_EXT_RST_ERROR
  85:../../src/kernel/source/nrk.c ****    if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
  86:../../src/kernel/source/nrk.c **** #endif
  87:../../src/kernel/source/nrk.c **** #ifndef IGNORE_BROWN_OUT_ERROR
  88:../../src/kernel/source/nrk.c ****    if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
  89:../../src/kernel/source/nrk.c **** #endif
  90:../../src/kernel/source/nrk.c ****    //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
  91:../../src/kernel/source/nrk.c **** 
  92:../../src/kernel/source/nrk.c **** 
  93:../../src/kernel/source/nrk.c ****  
  94:../../src/kernel/source/nrk.c ****    //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
  95:../../src/kernel/source/nrk.c **** #endif
  96:../../src/kernel/source/nrk.c **** 
  97:../../src/kernel/source/nrk.c ****    #ifdef NRK_STARTUP_VOLTAGE_CHECK
  98:../../src/kernel/source/nrk.c ****    	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
  99:../../src/kernel/source/nrk.c ****    #endif
 100:../../src/kernel/source/nrk.c **** 
 101:../../src/kernel/source/nrk.c **** 
 102:../../src/kernel/source/nrk.c **** 
 103:../../src/kernel/source/nrk.c **** 
 104:../../src/kernel/source/nrk.c ****    #ifdef NRK_REBOOT_ON_ERROR
 105:../../src/kernel/source/nrk.c ****    #ifndef NRK_WATCHDOG
 106:../../src/kernel/source/nrk.c ****    while(1)
 107:../../src/kernel/source/nrk.c **** 	   {
 108:../../src/kernel/source/nrk.c **** 		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
 109:../../src/kernel/source/nrk.c ****     		for (i = 0; i < 100; i++)
 110:../../src/kernel/source/nrk.c ****       			nrk_spin_wait_us (1000);
 111:../../src/kernel/source/nrk.c **** 	   }
 112:../../src/kernel/source/nrk.c ****    #endif
 113:../../src/kernel/source/nrk.c ****    #endif
 114:../../src/kernel/source/nrk.c **** 
 115:../../src/kernel/source/nrk.c ****    #ifdef NRK_WATCHDOG
 116:../../src/kernel/source/nrk.c ****     if(nrk_watchdog_check()==NRK_ERROR) 
 445               	.LM14:
 446 0046 0E94 0000 		call nrk_watchdog_check
 447 004a 8F3F      		cpi r24,lo8(-1)
 448 004c 01F4      		brne .L9
 117:../../src/kernel/source/nrk.c **** 	{
 118:../../src/kernel/source/nrk.c ****     	nrk_watchdog_disable();
 450               	.LM15:
 451 004e 0E94 0000 		call nrk_watchdog_disable
 119:../../src/kernel/source/nrk.c **** 	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
 453               	.LM16:
 454 0052 60E0      		ldi r22,0
 455 0054 80E1      		ldi r24,lo8(16)
 456 0056 0E94 0000 		call nrk_kernel_error_add
 457               	.L9:
 120:../../src/kernel/source/nrk.c **** 	}
 121:../../src/kernel/source/nrk.c ****     nrk_watchdog_enable();
 459               	.LM17:
 460 005a 0E94 0000 		call nrk_watchdog_enable
 122:../../src/kernel/source/nrk.c ****     #endif
 123:../../src/kernel/source/nrk.c ****   
 124:../../src/kernel/source/nrk.c ****   // nrk_stack_pointer_init(); 
 125:../../src/kernel/source/nrk.c **** /* 
 126:../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 127:../../src/kernel/source/nrk.c **** 	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 128:../../src/kernel/source/nrk.c **** 	nrk_kernel_stk[0]=STK_CANARY_VAL;
 129:../../src/kernel/source/nrk.c ****     	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 130:../../src/kernel/source/nrk.c ****     #else
 131:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
 132:../../src/kernel/source/nrk.c ****     	*stkc = STK_CANARY_VAL;
 133:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 134:../../src/kernel/source/nrk.c **** 	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
 135:../../src/kernel/source/nrk.c ****     #endif
 136:../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 137:../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 138:../../src/kernel/source/nrk.c **** */	
 139:../../src/kernel/source/nrk.c ****  
 140:../../src/kernel/source/nrk.c ****    // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
 141:../../src/kernel/source/nrk.c **** 
 142:../../src/kernel/source/nrk.c ****     
 143:../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = 0;
 462               	.LM18:
 463 005e 1092 0000 		sts nrk_cur_task_prio,__zero_reg__
 144:../../src/kernel/source/nrk.c ****     nrk_cur_task_TCB = NULL;
 465               	.LM19:
 466 0062 1092 0000 		sts nrk_cur_task_TCB+1,__zero_reg__
 467 0066 1092 0000 		sts nrk_cur_task_TCB,__zero_reg__
 145:../../src/kernel/source/nrk.c ****     
 146:../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = NULL;
 469               	.LM20:
 470 006a 1092 0000 		sts nrk_high_ready_TCB+1,__zero_reg__
 471 006e 1092 0000 		sts nrk_high_ready_TCB,__zero_reg__
 147:../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = 0; 
 473               	.LM21:
 474 0072 1092 0000 		sts nrk_high_ready_prio,__zero_reg__
 148:../../src/kernel/source/nrk.c **** 
 149:../../src/kernel/source/nrk.c ****    #ifdef NRK_STATS_TRACKER
 150:../../src/kernel/source/nrk.c **** 	nrk_stats_reset();
 476               	.LM22:
 477 0076 0E94 0000 		call nrk_stats_reset
 151:../../src/kernel/source/nrk.c ****    #endif
 152:../../src/kernel/source/nrk.c **** 
 153:../../src/kernel/source/nrk.c ****     #ifdef NRK_MAX_RESERVES 
 154:../../src/kernel/source/nrk.c ****     // Setup the reserve structures
 155:../../src/kernel/source/nrk.c ****     _nrk_reserve_init();
 156:../../src/kernel/source/nrk.c ****     #endif
 157:../../src/kernel/source/nrk.c **** 
 158:../../src/kernel/source/nrk.c ****     _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
 479               	.LM23:
 480 007a 1092 0000 		sts _nrk_resource_cnt,__zero_reg__
 159:../../src/kernel/source/nrk.c **** 
 160:../../src/kernel/source/nrk.c **** for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
 161:../../src/kernel/source/nrk.c **** {
 162:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].count=-1;
 482               	.LM24:
 483 007e 8FEF      		ldi r24,lo8(-1)
 484 0080 8093 0000 		sts nrk_sem_list,r24
 163:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 486               	.LM25:
 487 0084 8093 0000 		sts nrk_sem_list+2,r24
 164:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].resource_ceiling=-1;
 489               	.LM26:
 490 0088 8093 0000 		sts nrk_sem_list+1,r24
 162:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 492               	.LM27:
 493 008c 8093 0000 		sts nrk_sem_list+3,r24
 163:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 495               	.LM28:
 496 0090 8093 0000 		sts nrk_sem_list+5,r24
 498               	.LM29:
 499 0094 8093 0000 		sts nrk_sem_list+4,r24
 500 0098 80E0      		ldi r24,0
 501 009a 90E0      		ldi r25,0
 165:../../src/kernel/source/nrk.c ****     //nrk_resource_count[i]=-1;
 166:../../src/kernel/source/nrk.c ****     //nrk_resource_value[i]=-1;
 167:../../src/kernel/source/nrk.c ****     //nrk_resource_ceiling[i]=-1;
 168:../../src/kernel/source/nrk.c ****     
 169:../../src/kernel/source/nrk.c **** }        
 170:../../src/kernel/source/nrk.c ****     for (i= 0; i<NRK_MAX_TASKS; i++)
 171:../../src/kernel/source/nrk.c **** 	{
 172:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 503               	.LM30:
 504 009c 33E6      		ldi r19,lo8(99)
 173:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 506               	.LM31:
 507 009e 2FEF      		ldi r18,lo8(-1)
 508               	.L10:
 509 00a0 FC01      		movw r30,r24
 510 00a2 E050      		subi r30,lo8(-(nrk_task_TCB))
 511 00a4 F040      		sbci r31,hi8(-(nrk_task_TCB))
 172:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 513               	.LM32:
 514 00a6 3287      		std Z+10,r19
 516               	.LM33:
 517 00a8 2087      		std Z+8,r18
 518 00aa 8B96      		adiw r24,43
 170:../../src/kernel/source/nrk.c **** 	{
 520               	.LM34:
 521 00ac 873D      		cpi r24,-41
 522 00ae 9105      		cpc r25,__zero_reg__
 523 00b0 01F4      		brne .L10
 524 00b2 E0E0      		ldi r30,lo8(_nrk_readyQ)
 525 00b4 F0E0      		ldi r31,hi8(_nrk_readyQ)
 526               	.L11:
 527 00b6 CF01      		movw r24,r30
 528 00b8 0596      		adiw r24,5
 174:../../src/kernel/source/nrk.c ****         }
 175:../../src/kernel/source/nrk.c ****   
 176:../../src/kernel/source/nrk.c ****        
 177:../../src/kernel/source/nrk.c ****     // Setup a double linked list of Ready Tasks 
 178:../../src/kernel/source/nrk.c ****     for (i=0;i<NRK_MAX_TASKS;i++)
 179:../../src/kernel/source/nrk.c **** 	{
 180:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 530               	.LM35:
 531 00ba 9483      		std Z+4,r25
 532 00bc 8383      		std Z+3,r24
 181:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 534               	.LM36:
 535 00be F783      		std Z+7,r31
 536 00c0 E683      		std Z+6,r30
 537 00c2 FC01      		movw r30,r24
 178:../../src/kernel/source/nrk.c **** 	{
 539               	.LM37:
 540 00c4 80E0      		ldi r24,hi8(_nrk_readyQ+25)
 541 00c6 E030      		cpi r30,lo8(_nrk_readyQ+25)
 542 00c8 F807      		cpc r31,r24
 543 00ca 01F4      		brne .L11
 182:../../src/kernel/source/nrk.c **** 	}
 183:../../src/kernel/source/nrk.c **** 	
 184:../../src/kernel/source/nrk.c **** 	_nrk_readyQ[0].Prev	=	NULL;
 545               	.LM38:
 546 00cc 1092 0000 		sts _nrk_readyQ+1+1,__zero_reg__
 547 00d0 1092 0000 		sts _nrk_readyQ+1,__zero_reg__
 185:../../src/kernel/source/nrk.c **** 	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
 549               	.LM39:
 550 00d4 1092 0000 		sts _nrk_readyQ+28+1,__zero_reg__
 551 00d8 1092 0000 		sts _nrk_readyQ+28,__zero_reg__
 186:../../src/kernel/source/nrk.c **** 	_head_node = NULL;
 553               	.LM40:
 554 00dc 1092 0000 		sts _head_node+1,__zero_reg__
 555 00e0 1092 0000 		sts _head_node,__zero_reg__
 187:../../src/kernel/source/nrk.c **** 	_free_node = &_nrk_readyQ[0];
 557               	.LM41:
 558 00e4 80E0      		ldi r24,lo8(_nrk_readyQ)
 559 00e6 90E0      		ldi r25,hi8(_nrk_readyQ)
 560 00e8 9093 0000 		sts _free_node+1,r25
 561 00ec 8093 0000 		sts _free_node,r24
 188:../../src/kernel/source/nrk.c **** 	
 189:../../src/kernel/source/nrk.c **** 	
 190:../../src/kernel/source/nrk.c **** 	
 191:../../src/kernel/source/nrk.c **** 
 192:../../src/kernel/source/nrk.c **** 	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
 563               	.LM42:
 564 00f0 60E0      		ldi r22,lo8(gs(nrk_idle_task))
 565 00f2 70E0      		ldi r23,hi8(gs(nrk_idle_task))
 566 00f4 CE01      		movw r24,r28
 567 00f6 0196      		adiw r24,1
 568 00f8 0E94 0000 		call nrk_task_set_entry_function
 193:../../src/kernel/source/nrk.c **** 	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
 570               	.LM43:
 571 00fc 40E8      		ldi r20,lo8(-128)
 572 00fe 50E0      		ldi r21,0
 573 0100 60E0      		ldi r22,lo8(nrk_idle_task_stk)
 574 0102 70E0      		ldi r23,hi8(nrk_idle_task_stk)
 575 0104 CE01      		movw r24,r28
 576 0106 0196      		adiw r24,1
 577 0108 0E94 0000 		call nrk_task_set_stk
 194:../../src/kernel/source/nrk.c **** 	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
 579               	.LM44:
 580 010c 85E5      		ldi r24,lo8(85)
 581 010e 8093 0000 		sts nrk_idle_task_stk,r24
 195:../../src/kernel/source/nrk.c **** 	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
 196:../../src/kernel/source/nrk.c **** 	IdleTask.prio = 0;
 583               	.LM45:
 584 0112 1986      		std Y+9,__zero_reg__
 197:../../src/kernel/source/nrk.c **** 	IdleTask.period.secs = 0;
 586               	.LM46:
 587 0114 1C86      		std Y+12,__zero_reg__
 588 0116 1D86      		std Y+13,__zero_reg__
 589 0118 1E86      		std Y+14,__zero_reg__
 590 011a 1F86      		std Y+15,__zero_reg__
 198:../../src/kernel/source/nrk.c **** 	IdleTask.period.nano_secs = 0;
 592               	.LM47:
 593 011c 188A      		std Y+16,__zero_reg__
 594 011e 198A      		std Y+17,__zero_reg__
 595 0120 1A8A      		std Y+18,__zero_reg__
 596 0122 1B8A      		std Y+19,__zero_reg__
 199:../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.secs = 0;
 598               	.LM48:
 599 0124 1C8A      		std Y+20,__zero_reg__
 600 0126 1D8A      		std Y+21,__zero_reg__
 601 0128 1E8A      		std Y+22,__zero_reg__
 602 012a 1F8A      		std Y+23,__zero_reg__
 200:../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.nano_secs = 0;
 604               	.LM49:
 605 012c 188E      		std Y+24,__zero_reg__
 606 012e 198E      		std Y+25,__zero_reg__
 607 0130 1A8E      		std Y+26,__zero_reg__
 608 0132 1B8E      		std Y+27,__zero_reg__
 201:../../src/kernel/source/nrk.c **** 	IdleTask.offset.secs = 0;
 610               	.LM50:
 611 0134 1C8E      		std Y+28,__zero_reg__
 612 0136 1D8E      		std Y+29,__zero_reg__
 613 0138 1E8E      		std Y+30,__zero_reg__
 614 013a 1F8E      		std Y+31,__zero_reg__
 202:../../src/kernel/source/nrk.c **** 	IdleTask.offset.nano_secs = 0;
 616               	.LM51:
 617 013c 18A2      		std Y+32,__zero_reg__
 618 013e 19A2      		std Y+33,__zero_reg__
 619 0140 1AA2      		std Y+34,__zero_reg__
 620 0142 1BA2      		std Y+35,__zero_reg__
 203:../../src/kernel/source/nrk.c **** 	IdleTask.FirstActivation = TRUE;
 622               	.LM52:
 623 0144 81E0      		ldi r24,lo8(1)
 624 0146 8887      		std Y+8,r24
 204:../../src/kernel/source/nrk.c **** 	IdleTask.Type = IDLE_TASK;
 626               	.LM53:
 627 0148 92E0      		ldi r25,lo8(2)
 628 014a 9A87      		std Y+10,r25
 205:../../src/kernel/source/nrk.c **** 	IdleTask.SchType = PREEMPTIVE;
 630               	.LM54:
 631 014c 8B87      		std Y+11,r24
 206:../../src/kernel/source/nrk.c **** 	nrk_activate_task(&IdleTask);
 633               	.LM55:
 634 014e CE01      		movw r24,r28
 635 0150 0196      		adiw r24,1
 636 0152 0E94 0000 		call nrk_activate_task
 637               	/* epilogue start */
 207:../../src/kernel/source/nrk.c **** 	
 208:../../src/kernel/source/nrk.c **** }
 639               	.LM56:
 640 0156 A396      		adiw r28,35
 641 0158 0FB6      		in __tmp_reg__,__SREG__
 642 015a F894      		cli
 643 015c DEBF      		out __SP_H__,r29
 644 015e 0FBE      		out __SREG__,__tmp_reg__
 645 0160 CDBF      		out __SP_L__,r28
 646 0162 DF91      		pop r29
 647 0164 CF91      		pop r28
 648 0166 0895      		ret
 653               	.Lscope4:
 655               		.stabd	78,0,0
 657               	.global	nrk_start
 659               	nrk_start:
 660               		.stabd	46,0,0
 209:../../src/kernel/source/nrk.c **** 
 210:../../src/kernel/source/nrk.c **** 
 211:../../src/kernel/source/nrk.c **** 
 212:../../src/kernel/source/nrk.c **** 
 213:../../src/kernel/source/nrk.c **** 
 214:../../src/kernel/source/nrk.c **** 
 215:../../src/kernel/source/nrk.c **** 
 216:../../src/kernel/source/nrk.c **** 
 217:../../src/kernel/source/nrk.c **** void nrk_start (void)
 218:../../src/kernel/source/nrk.c **** {
 662               	.LM57:
 663               	.LFBB5:
 664               	/* prologue: function */
 665               	/* frame size = 0 */
 666               	/* stack size = 0 */
 667               	.L__stack_usage = 0
 669               	.LM58:
 670 0168 00E0      		ldi r16,lo8(nrk_task_TCB+8)
 671 016a 10E0      		ldi r17,hi8(nrk_task_TCB+8)
 219:../../src/kernel/source/nrk.c **** 	int8_t task_ID;
 220:../../src/kernel/source/nrk.c **** 	uint8_t i,j;
 221:../../src/kernel/source/nrk.c **** //	NRK_STK *x;
 222:../../src/kernel/source/nrk.c **** //	unsigned char *stkc;
 223:../../src/kernel/source/nrk.c **** 
 224:../../src/kernel/source/nrk.c **** 	/*
 225:../../src/kernel/source/nrk.c **** 		- Get highest priority task from rdy list
 226:../../src/kernel/source/nrk.c **** 		- set cur prio and start the task 
 227:../../src/kernel/source/nrk.c **** 	*/
 228:../../src/kernel/source/nrk.c ****     // Check to make sure all tasks unique
 229:../../src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 673               	.LM59:
 674 016c C0E0      		ldi r28,0
 675               	.L19:
 230:../../src/kernel/source/nrk.c ****     {
 231:../../src/kernel/source/nrk.c **** 	task_ID = nrk_task_TCB[i].task_ID;
 677               	.LM60:
 678 016e F801      		movw r30,r16
 679 0170 D080      		ld r13,Z
 232:../../src/kernel/source/nrk.c **** 	// only check activated tasks
 233:../../src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 681               	.LM61:
 682 0172 FFEF      		ldi r31,lo8(-1)
 683 0174 DF12      		cpse r13,r31
 684 0176 00C0      		rjmp .L24
 685               	.L22:
 229:../../src/kernel/source/nrk.c ****     {
 687               	.LM62:
 688 0178 CF5F      		subi r28,lo8(-(1))
 689 017a 055D      		subi r16,-43
 690 017c 1F4F      		sbci r17,-1
 691 017e C530      		cpi r28,lo8(5)
 692 0180 01F4      		brne .L19
 234:../../src/kernel/source/nrk.c **** 	{
 235:../../src/kernel/source/nrk.c ****     		for(j=0; j<NRK_MAX_TASKS; j++ )
 236:../../src/kernel/source/nrk.c **** 		{
 237:../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 238:../../src/kernel/source/nrk.c **** 			{
 239:../../src/kernel/source/nrk.c **** 			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
 240:../../src/kernel/source/nrk.c **** 
 241:../../src/kernel/source/nrk.c **** 			}
 242:../../src/kernel/source/nrk.c **** 		}
 243:../../src/kernel/source/nrk.c **** 	}
 244:../../src/kernel/source/nrk.c **** 
 245:../../src/kernel/source/nrk.c ****     }
 246:../../src/kernel/source/nrk.c **** 
 247:../../src/kernel/source/nrk.c ****     task_ID = nrk_get_high_ready_task_ID();	
 694               	.LM63:
 695 0182 0E94 0000 		call nrk_get_high_ready_task_ID
 248:../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 697               	.LM64:
 698 0186 2BE2      		ldi r18,lo8(43)
 699 0188 8202      		muls r24,r18
 700 018a C001      		movw r24,r0
 701 018c 1124      		clr __zero_reg__
 702 018e FC01      		movw r30,r24
 703 0190 E050      		subi r30,lo8(-(nrk_task_TCB))
 704 0192 F040      		sbci r31,hi8(-(nrk_task_TCB))
 705 0194 8285      		ldd r24,Z+10
 706 0196 8093 0000 		sts nrk_high_ready_prio,r24
 249:../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
 708               	.LM65:
 709 019a F093 0000 		sts nrk_cur_task_TCB+1,r31
 710 019e E093 0000 		sts nrk_cur_task_TCB,r30
 711 01a2 F093 0000 		sts nrk_high_ready_TCB+1,r31
 712 01a6 E093 0000 		sts nrk_high_ready_TCB,r30
 250:../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 714               	.LM66:
 715 01aa 8093 0000 		sts nrk_cur_task_prio,r24
 251:../../src/kernel/source/nrk.c **** 		
 252:../../src/kernel/source/nrk.c **** //    nrk_stack_pointer_restore();
 253:../../src/kernel/source/nrk.c **** 
 254:../../src/kernel/source/nrk.c ****     /*
 255:../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 256:../../src/kernel/source/nrk.c ****      	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 257:../../src/kernel/source/nrk.c ****     #else
 258:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 259:../../src/kernel/source/nrk.c ****     #endif
 260:../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 261:../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 262:../../src/kernel/source/nrk.c ****     
 263:../../src/kernel/source/nrk.c ****     //TODO: this way on msp
 264:../../src/kernel/source/nrk.c ****     // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 265:../../src/kernel/source/nrk.c ****     // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
 266:../../src/kernel/source/nrk.c **** */
 267:../../src/kernel/source/nrk.c ****     nrk_target_start();
 717               	.LM67:
 718 01ae 0E94 0000 		call nrk_target_start
 268:../../src/kernel/source/nrk.c ****     nrk_stack_pointer_init(); 
 720               	.LM68:
 721 01b2 0E94 0000 		call nrk_stack_pointer_init
 269:../../src/kernel/source/nrk.c ****     nrk_start_high_ready_task();	
 723               	.LM69:
 724 01b6 0E94 0000 		call nrk_start_high_ready_task
 725 01ba 00C0      		rjmp .L23
 726               	.L24:
 727 01bc 80E0      		ldi r24,lo8(nrk_task_TCB+8)
 728 01be E82E      		mov r14,r24
 729 01c0 80E0      		ldi r24,hi8(nrk_task_TCB+8)
 730 01c2 F82E      		mov r15,r24
 731 01c4 D0E0      		ldi r29,0
 732               	.L18:
 237:../../src/kernel/source/nrk.c **** 			{
 734               	.LM70:
 735 01c6 CD17      		cp r28,r29
 736 01c8 01F0      		breq .L21
 237:../../src/kernel/source/nrk.c **** 			{
 738               	.LM71:
 739 01ca F701      		movw r30,r14
 740 01cc 8081      		ld r24,Z
 741 01ce D812      		cpse r13,r24
 742 01d0 00C0      		rjmp .L21
 239:../../src/kernel/source/nrk.c **** 
 744               	.LM72:
 745 01d2 6D2D      		mov r22,r13
 746 01d4 85E0      		ldi r24,lo8(5)
 747 01d6 0E94 0000 		call nrk_kernel_error_add
 748               	.L21:
 235:../../src/kernel/source/nrk.c **** 		{
 750               	.LM73:
 751 01da DF5F      		subi r29,lo8(-(1))
 752 01dc FBE2      		ldi r31,43
 753 01de EF0E      		add r14,r31
 754 01e0 F11C      		adc r15,__zero_reg__
 755 01e2 D530      		cpi r29,lo8(5)
 756 01e4 01F4      		brne .L18
 757 01e6 00C0      		rjmp .L22
 758               	.L23:
 270:../../src/kernel/source/nrk.c **** 
 271:../../src/kernel/source/nrk.c ****     // you should never get here    
 272:../../src/kernel/source/nrk.c ****     while(1);
 760               	.LM74:
 761 01e8 00C0      		rjmp .L23
 767               	.Lscope5:
 769               		.stabd	78,0,0
 777               	.global	nrk_TCB_init
 779               	nrk_TCB_init:
 780               		.stabd	46,0,0
 273:../../src/kernel/source/nrk.c **** }
 274:../../src/kernel/source/nrk.c **** 
 275:../../src/kernel/source/nrk.c **** 
 276:../../src/kernel/source/nrk.c **** int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pe
 277:../../src/kernel/source/nrk.c **** {
 782               	.LM75:
 783               	.LFBB6:
 784 01ea CF92      		push r12
 785 01ec DF92      		push r13
 786 01ee EF92      		push r14
 787 01f0 FF92      		push r15
 788 01f2 0F93      		push r16
 789 01f4 1F93      		push r17
 790 01f6 CF93      		push r28
 791 01f8 DF93      		push r29
 792               	/* prologue: function */
 793               	/* frame size = 0 */
 794               	/* stack size = 8 */
 795               	.L__stack_usage = 8
 796 01fa EC01      		movw r28,r24
 797 01fc 8B01      		movw r16,r22
 798 01fe 7A01      		movw r14,r20
 278:../../src/kernel/source/nrk.c **** 	
 279:../../src/kernel/source/nrk.c ****     //  Already in critical section so no needenter critical section
 280:../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK)
 800               	.LM76:
 801 0200 8985      		ldd r24,Y+9
 802 0202 8230      		cpi r24,lo8(2)
 803 0204 01F0      		breq .L29
 281:../../src/kernel/source/nrk.c ****     	Task->task_ID=nrk_task_init_cnt;
 805               	.LM77:
 806 0206 8091 0000 		lds r24,nrk_task_init_cnt
 807 020a 8883      		st Y,r24
 808 020c 00C0      		rjmp .L30
 809               	.L29:
 282:../../src/kernel/source/nrk.c ****     else Task->task_ID=NRK_IDLE_TASK_ID;
 811               	.LM78:
 812 020e 1882      		st Y,__zero_reg__
 813               	.L30:
 283:../../src/kernel/source/nrk.c **** 
 284:../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
 815               	.LM79:
 816 0210 8091 0000 		lds r24,nrk_task_init_cnt
 817 0214 8530      		cpi r24,lo8(5)
 818 0216 00F0      		brlo .L31
 820               	.LM80:
 821 0218 60E0      		ldi r22,0
 822 021a 87E0      		ldi r24,lo8(7)
 823 021c 0E94 0000 		call nrk_kernel_error_add
 824               	.L31:
 285:../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
 826               	.LM81:
 827 0220 8985      		ldd r24,Y+9
 828 0222 8230      		cpi r24,lo8(2)
 829 0224 01F0      		breq .L32
 831               	.LM82:
 832 0226 8091 0000 		lds r24,nrk_task_init_cnt
 833 022a 8F5F      		subi r24,lo8(-(1))
 834 022c 8093 0000 		sts nrk_task_init_cnt,r24
 835               	.L32:
 286:../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
 837               	.LM83:
 838 0230 8091 0000 		lds r24,nrk_task_init_cnt
 839 0234 8111      		cpse r24,__zero_reg__
 840 0236 00C0      		rjmp .L33
 842               	.LM84:
 843 0238 81E0      		ldi r24,lo8(1)
 844 023a 8093 0000 		sts nrk_task_init_cnt,r24
 845               	.L33:
 287:../../src/kernel/source/nrk.c ****     //initialize member of TCB structure
 288:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
 847               	.LM85:
 848 023e 3881      		ld r19,Y
 849 0240 2BE2      		ldi r18,lo8(43)
 850 0242 3203      		mulsu r19,r18
 851 0244 F001      		movw r30,r0
 852 0246 1124      		clr __zero_reg__
 853 0248 E050      		subi r30,lo8(-(nrk_task_TCB))
 854 024a F040      		sbci r31,hi8(-(nrk_task_TCB))
 855 024c 1183      		std Z+1,r17
 856 024e 0083      		st Z,r16
 289:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
 858               	.LM86:
 859 0250 8885      		ldd r24,Y+8
 860 0252 8287      		std Z+10,r24
 290:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
 862               	.LM87:
 863 0254 3881      		ld r19,Y
 864 0256 3203      		mulsu r19,r18
 865 0258 F001      		movw r30,r0
 866 025a 1124      		clr __zero_reg__
 867 025c E050      		subi r30,lo8(-(nrk_task_TCB))
 868 025e F040      		sbci r31,hi8(-(nrk_task_TCB))
 869 0260 83E0      		ldi r24,lo8(3)
 870 0262 8187      		std Z+9,r24
 291:../../src/kernel/source/nrk.c ****     
 292:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
 872               	.LM88:
 873 0264 3881      		ld r19,Y
 874 0266 3203      		mulsu r19,r18
 875 0268 F001      		movw r30,r0
 876 026a 1124      		clr __zero_reg__
 877 026c E050      		subi r30,lo8(-(nrk_task_TCB))
 878 026e F040      		sbci r31,hi8(-(nrk_task_TCB))
 879 0270 3087      		std Z+8,r19
 293:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].suspend_flag = 0;
 881               	.LM89:
 882 0272 0881      		ld r16,Y
 883 0274 0203      		mulsu r16,r18
 884 0276 8001      		movw r16,r0
 885 0278 1124      		clr __zero_reg__
 886 027a 0050      		subi r16,lo8(-(nrk_task_TCB))
 887 027c 1040      		sbci r17,hi8(-(nrk_task_TCB))
 888 027e F801      		movw r30,r16
 889 0280 1582      		std Z+5,__zero_reg__
 294:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
 891               	.LM90:
 892 0282 CE01      		movw r24,r28
 893 0284 0B96      		adiw r24,11
 894 0286 0E94 0000 		call _nrk_time_to_ticks_long
 895 028a F801      		movw r30,r16
 896 028c 61A3      		std Z+33,r22
 897 028e 72A3      		std Z+34,r23
 898 0290 83A3      		std Z+35,r24
 899 0292 94A3      		std Z+36,r25
 295:../../src/kernel/source/nrk.c ****     if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
 901               	.LM91:
 902 0294 8B85      		ldd r24,Y+11
 903 0296 9C85      		ldd r25,Y+12
 904 0298 AD85      		ldd r26,Y+13
 905 029a BE85      		ldd r27,Y+14
 906 029c 8833      		cpi r24,56
 907 029e 9948      		sbci r25,-119
 908 02a0 A144      		sbci r26,65
 909 02a2 B105      		cpc r27,__zero_reg__
 910 02a4 00F0      		brlo .L34
 912               	.LM92:
 913 02a6 6881      		ld r22,Y
 914 02a8 86E1      		ldi r24,lo8(22)
 915 02aa 0E94 0000 		call nrk_kernel_error_add
 916               	.L34:
 296:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
 918               	.LM93:
 919 02ae C880      		ld r12,Y
 920 02b0 DD24      		clr r13
 921 02b2 C7FC      		sbrc r12,7
 922 02b4 D094      		com r13
 923 02b6 CE01      		movw r24,r28
 924 02b8 4B96      		adiw r24,27
 925 02ba 0E94 0000 		call _nrk_time_to_ticks_long
 926 02be 1BE2      		ldi r17,lo8(43)
 927 02c0 1C9D      		mul r17,r12
 928 02c2 F001      		movw r30,r0
 929 02c4 1D9D      		mul r17,r13
 930 02c6 F00D      		add r31,r0
 931 02c8 1124      		clr __zero_reg__
 932 02ca E050      		subi r30,lo8(-(nrk_task_TCB))
 933 02cc F040      		sbci r31,hi8(-(nrk_task_TCB))
 934 02ce 658B      		std Z+21,r22
 935 02d0 768B      		std Z+22,r23
 936 02d2 878B      		std Z+23,r24
 937 02d4 908F      		std Z+24,r25
 297:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->
 939               	.LM94:
 940 02d6 2881      		ld r18,Y
 941 02d8 2103      		mulsu r18,r17
 942 02da C001      		movw r24,r0
 943 02dc 1124      		clr __zero_reg__
 944 02de 9C01      		movw r18,r24
 945 02e0 2050      		subi r18,lo8(-(nrk_task_TCB))
 946 02e2 3040      		sbci r19,hi8(-(nrk_task_TCB))
 947 02e4 6901      		movw r12,r18
 948 02e6 F901      		movw r30,r18
 949 02e8 4589      		ldd r20,Z+21
 950 02ea 5689      		ldd r21,Z+22
 951 02ec 6789      		ldd r22,Z+23
 952 02ee 708D      		ldd r23,Z+24
 953 02f0 81A1      		ldd r24,Z+33
 954 02f2 92A1      		ldd r25,Z+34
 955 02f4 A3A1      		ldd r26,Z+35
 956 02f6 B4A1      		ldd r27,Z+36
 957 02f8 840F      		add r24,r20
 958 02fa 951F      		adc r25,r21
 959 02fc A61F      		adc r26,r22
 960 02fe B71F      		adc r27,r23
 961 0300 818F      		std Z+25,r24
 962 0302 928F      		std Z+26,r25
 963 0304 A38F      		std Z+27,r26
 964 0306 B48F      		std Z+28,r27
 298:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
 966               	.LM95:
 967 0308 CE01      		movw r24,r28
 968 030a 4396      		adiw r24,19
 969 030c 0E94 0000 		call _nrk_time_to_ticks_long
 970 0310 F601      		movw r30,r12
 971 0312 65A3      		std Z+37,r22
 972 0314 76A3      		std Z+38,r23
 973 0316 87A3      		std Z+39,r24
 974 0318 90A7      		std Z+40,r25
 299:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
 976               	.LM96:
 977 031a 2881      		ld r18,Y
 978 031c 2103      		mulsu r18,r17
 979 031e F001      		movw r30,r0
 980 0320 1124      		clr __zero_reg__
 981 0322 E050      		subi r30,lo8(-(nrk_task_TCB))
 982 0324 F040      		sbci r31,hi8(-(nrk_task_TCB))
 983 0326 85A1      		ldd r24,Z+37
 984 0328 96A1      		ldd r25,Z+38
 985 032a A7A1      		ldd r26,Z+39
 986 032c B0A5      		ldd r27,Z+40
 987 032e 858F      		std Z+29,r24
 988 0330 968F      		std Z+30,r25
 989 0332 A78F      		std Z+31,r26
 990 0334 B0A3      		std Z+32,r27
 300:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].num_periods = 1;
 992               	.LM97:
 993 0336 81E0      		ldi r24,lo8(1)
 994 0338 90E0      		ldi r25,0
 995 033a 92A7      		std Z+42,r25
 996 033c 81A7      		std Z+41,r24
 301:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
 998               	.LM98:
 999 033e F382      		std Z+3,r15
 1000 0340 E282      		std Z+2,r14
 302:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 1002               	.LM99:
 1003 0342 8487      		std Z+12,r24
 1004               	/* epilogue start */
 303:../../src/kernel/source/nrk.c ****  
 304:../../src/kernel/source/nrk.c **** 	
 305:../../src/kernel/source/nrk.c **** 	         
 306:../../src/kernel/source/nrk.c **** 
 307:../../src/kernel/source/nrk.c **** 			
 308:../../src/kernel/source/nrk.c ****     return NRK_OK;
 309:../../src/kernel/source/nrk.c **** 
 310:../../src/kernel/source/nrk.c **** }
 1006               	.LM100:
 1007 0344 DF91      		pop r29
 1008 0346 CF91      		pop r28
 1009 0348 1F91      		pop r17
 1010 034a 0F91      		pop r16
 1011 034c FF90      		pop r15
 1012 034e EF90      		pop r14
 1013 0350 DF90      		pop r13
 1014 0352 CF90      		pop r12
 1015 0354 0895      		ret
 1017               	.Lscope6:
 1019               		.stabd	78,0,0
 1021               	.global	_nrk_timer_tick
 1023               	_nrk_timer_tick:
 1024               		.stabd	46,0,0
 311:../../src/kernel/source/nrk.c **** 
 312:../../src/kernel/source/nrk.c **** 
 313:../../src/kernel/source/nrk.c **** /*
 314:../../src/kernel/source/nrk.c ****  * _nrk_timer_tick() 
 315:../../src/kernel/source/nrk.c ****  *
 316:../../src/kernel/source/nrk.c ****  * This function is called by the interrupt timer0.
 317:../../src/kernel/source/nrk.c ****  * It calls the scheduler.
 318:../../src/kernel/source/nrk.c ****  */
 319:../../src/kernel/source/nrk.c **** void _nrk_timer_tick(void)
 320:../../src/kernel/source/nrk.c **** {
 1026               	.LM101:
 1027               	.LFBB7:
 1028               	/* prologue: function */
 1029               	/* frame size = 0 */
 1030               	/* stack size = 0 */
 1031               	.L__stack_usage = 0
 321:../../src/kernel/source/nrk.c **** 	// want to do something before the scheduler gets called? 
 322:../../src/kernel/source/nrk.c **** 	// Go ahead and put it here...
 323:../../src/kernel/source/nrk.c **** 
 324:../../src/kernel/source/nrk.c **** 	_nrk_scheduler();
 1033               	.LM102:
 1034 0356 0C94 0000 		jmp _nrk_scheduler
 1036               	.Lscope7:
 1038               		.stabd	78,0,0
 1040               	.global	nrk_version
 1042               	nrk_version:
 1043               		.stabd	46,0,0
 325:../../src/kernel/source/nrk.c **** 
 326:../../src/kernel/source/nrk.c ****   	return;
 327:../../src/kernel/source/nrk.c **** }
 328:../../src/kernel/source/nrk.c **** 
 329:../../src/kernel/source/nrk.c **** 
 330:../../src/kernel/source/nrk.c **** uint16_t nrk_version (void)
 331:../../src/kernel/source/nrk.c **** {
 1045               	.LM103:
 1046               	.LFBB8:
 1047               	/* prologue: function */
 1048               	/* frame size = 0 */
 1049               	/* stack size = 0 */
 1050               	.L__stack_usage = 0
 332:../../src/kernel/source/nrk.c ****     return (NRK_VERSION);
 333:../../src/kernel/source/nrk.c **** }
 1052               	.LM104:
 1053 035a 85E6      		ldi r24,lo8(101)
 1054 035c 90E0      		ldi r25,0
 1055 035e 0895      		ret
 1057               	.Lscope8:
 1059               		.stabd	78,0,0
 1060               		.comm	nrk_task_init_cnt,1,1
 1061               		.comm	_nrk_stats_sleep_time,8,1
 1062               		.comm	cur_task_stats,150,1
 1063               		.comm	sw_wdts,57,1
 1064               		.comm	error_num,1,1
 1065               		.comm	error_task,1,1
 1066               		.comm	next_next_wakeup,2,1
 1067               		.comm	_nrk_cpu_state,1,1
 1068               		.comm	nrk_system_time,8,1
 1069               		.comm	nrk_sem_list,6,1
 1070               		.comm	_nrk_resource_cnt,1,1
 1071               		.comm	nrk_high_ready_TCB,2,1
 1072               		.comm	nrk_high_ready_prio,1,1
 1073               		.comm	nrk_cur_task_TCB,2,1
 1074               		.comm	nrk_cur_task_prio,1,1
 1075               		.comm	nrk_wakeup_signal,1,1
 1076               		.comm	_head_node,2,1
 1077               		.comm	_free_node,2,1
 1078               		.comm	_nrk_readyQ,30,1
 1079               		.comm	nrk_task_TCB,215,1
 1080               		.comm	nrk_kernel_stk_ptr,2,1
 1081               		.comm	nrk_idle_task_stk,128,1
 1082               		.comm	_nrk_signal_list,4,1
 1107               	.Letext0:
 1108               		.ident	"GCC: (GNU) 4.9.1"
 1109               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:325    .text:0000000000000000 nrk_int_disable
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:350    .text:0000000000000004 nrk_int_enable
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:375    .text:0000000000000008 nrk_halt
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:398    .text:000000000000000e nrk_init
                            *COM*:0000000000000001 nrk_wakeup_signal
                            *COM*:0000000000000001 nrk_cur_task_prio
                            *COM*:0000000000000002 nrk_cur_task_TCB
                            *COM*:0000000000000002 nrk_high_ready_TCB
                            *COM*:0000000000000001 nrk_high_ready_prio
                            *COM*:0000000000000001 _nrk_resource_cnt
                            *COM*:0000000000000006 nrk_sem_list
                            *COM*:00000000000000d7 nrk_task_TCB
                            *COM*:000000000000001e _nrk_readyQ
                            *COM*:0000000000000002 _head_node
                            *COM*:0000000000000002 _free_node
                            *COM*:0000000000000080 nrk_idle_task_stk
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:659    .text:0000000000000168 nrk_start
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:779    .text:00000000000001ea nrk_TCB_init
                            *COM*:0000000000000001 nrk_task_init_cnt
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:1023   .text:0000000000000356 _nrk_timer_tick
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccQElQEG.s:1042   .text:000000000000035a nrk_version
                            *COM*:0000000000000008 _nrk_stats_sleep_time
                            *COM*:0000000000000096 cur_task_stats
                            *COM*:0000000000000039 sw_wdts
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 next_next_wakeup
                            *COM*:0000000000000001 _nrk_cpu_state
                            *COM*:0000000000000008 nrk_system_time
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_signal_create
nrk_kernel_error_add
_nrk_startup_error
nrk_watchdog_check
nrk_watchdog_disable
nrk_watchdog_enable
nrk_stats_reset
nrk_idle_task
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_get_high_ready_task_ID
nrk_target_start
nrk_stack_pointer_init
nrk_start_high_ready_task
_nrk_time_to_ticks_long
_nrk_scheduler
__do_clear_bss
