   1               		.file	"nrk.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 315               	.global	nrk_int_disable
 317               	nrk_int_disable:
 318               		.stabd	46,0,0
   1:../../src/kernel/source/nrk.c **** /******************************************************************************
   2:../../src/kernel/source/nrk.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk.c **** *
   6:../../src/kernel/source/nrk.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk.c **** *
  10:../../src/kernel/source/nrk.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk.c **** *
  14:../../src/kernel/source/nrk.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk.c **** *
  19:../../src/kernel/source/nrk.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk.c **** *
  22:../../src/kernel/source/nrk.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk.c **** *  Zane Starr
  25:../../src/kernel/source/nrk.c **** *  Anand Eswaren
  26:../../src/kernel/source/nrk.c **** *******************************************************************************/
  27:../../src/kernel/source/nrk.c **** 
  28:../../src/kernel/source/nrk.c **** #include <stdio.h>
  29:../../src/kernel/source/nrk.c **** #include <nrk_includes.h> 
  30:../../src/kernel/source/nrk.c **** #include <ulib.h>
  31:../../src/kernel/source/nrk.c **** #include <nrk.h>
  32:../../src/kernel/source/nrk.c **** #include <nrk_task.h>
  33:../../src/kernel/source/nrk.c **** #include <nrk_idle_task.h>
  34:../../src/kernel/source/nrk.c **** #include <nrk_defs.h>
  35:../../src/kernel/source/nrk.c **** #include <nrk_cpu.h>
  36:../../src/kernel/source/nrk.c **** #include <nrk_scheduler.h>
  37:../../src/kernel/source/nrk.c **** #include <nrk_error.h>
  38:../../src/kernel/source/nrk.c **** #include <nrk_events.h>
  39:../../src/kernel/source/nrk.c **** #include <nrk_stack_check.h>
  40:../../src/kernel/source/nrk.c **** #include <nrk_status.h>
  41:../../src/kernel/source/nrk.c **** #include <nrk_watchdog.h>
  42:../../src/kernel/source/nrk.c **** #include <nrk_sw_wdt.h>
  43:../../src/kernel/source/nrk.c **** #include <nrk_reserve.h>
  44:../../src/kernel/source/nrk.c **** #include <nrk_cfg.h>
  45:../../src/kernel/source/nrk.c **** #include <nrk_stats.h>
  46:../../src/kernel/source/nrk.c **** 
  47:../../src/kernel/source/nrk.c **** inline void nrk_int_disable(void) {
 320               	.LM0:
 321               	.LFBB1:
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
  48:../../src/kernel/source/nrk.c ****   DISABLE_GLOBAL_INT();
 327               	.LM1:
 328               	/* #APP */
 329               	 ;  48 "../../src/kernel/source/nrk.c" 1
 330 0000 F894      		cli
 331               		
 332               	 ;  0 "" 2
 333               	/* #NOAPP */
 334 0002 0895      		ret
 336               	.Lscope1:
 338               		.stabd	78,0,0
 340               	.global	nrk_int_enable
 342               	nrk_int_enable:
 343               		.stabd	46,0,0
  49:../../src/kernel/source/nrk.c **** };
  50:../../src/kernel/source/nrk.c **** 
  51:../../src/kernel/source/nrk.c **** inline void nrk_int_enable(void) {
 345               	.LM2:
 346               	.LFBB2:
 347               	/* prologue: function */
 348               	/* frame size = 0 */
 349               	/* stack size = 0 */
 350               	.L__stack_usage = 0
  52:../../src/kernel/source/nrk.c ****   ENABLE_GLOBAL_INT();
 352               	.LM3:
 353               	/* #APP */
 354               	 ;  52 "../../src/kernel/source/nrk.c" 1
 355 0004 7894      		sei
 356               		
 357               	 ;  0 "" 2
 358               	/* #NOAPP */
 359 0006 0895      		ret
 361               	.Lscope2:
 363               		.stabd	78,0,0
 365               	.global	nrk_halt
 367               	nrk_halt:
 368               		.stabd	46,0,0
  53:../../src/kernel/source/nrk.c **** };
  54:../../src/kernel/source/nrk.c **** 
  55:../../src/kernel/source/nrk.c **** uint8_t nrk_task_init_cnt;
  56:../../src/kernel/source/nrk.c **** 
  57:../../src/kernel/source/nrk.c **** 
  58:../../src/kernel/source/nrk.c **** void nrk_halt()
  59:../../src/kernel/source/nrk.c **** {
 370               	.LM4:
 371               	.LFBB3:
 372               	/* prologue: function */
 373               	/* frame size = 0 */
 374               	/* stack size = 0 */
 375               	.L__stack_usage = 0
  60:../../src/kernel/source/nrk.c **** nrk_int_disable();
 377               	.LM5:
 378 0008 0E94 0000 		call nrk_int_disable
 379               	.L4:
  61:../../src/kernel/source/nrk.c **** while(1);
 381               	.LM6:
 382 000c 00C0      		rjmp .L4
 384               	.Lscope3:
 386               		.stabd	78,0,0
 388               	.global	nrk_init
 390               	nrk_init:
 391               		.stabd	46,0,0
  62:../../src/kernel/source/nrk.c **** }
  63:../../src/kernel/source/nrk.c **** 
  64:../../src/kernel/source/nrk.c **** /**
  65:../../src/kernel/source/nrk.c ****  *  nrk_init();
  66:../../src/kernel/source/nrk.c ****  * *  - Init TCBlist - linked list of empty TCBs
  67:../../src/kernel/source/nrk.c ****  *  - Init global variables
  68:../../src/kernel/source/nrk.c ****  *  - Init event list
  69:../../src/kernel/source/nrk.c ****  *  - Create idle task
  70:../../src/kernel/source/nrk.c ****  */
  71:../../src/kernel/source/nrk.c **** void nrk_init()
  72:../../src/kernel/source/nrk.c **** {
 393               	.LM7:
 394               	.LFBB4:
 395 000e CF93      		push r28
 396 0010 DF93      		push r29
 397 0012 CDB7      		in r28,__SP_L__
 398 0014 DEB7      		in r29,__SP_H__
 399 0016 A397      		sbiw r28,35
 400 0018 0FB6      		in __tmp_reg__,__SREG__
 401 001a F894      		cli
 402 001c DEBF      		out __SP_H__,r29
 403 001e 0FBE      		out __SREG__,__tmp_reg__
 404 0020 CDBF      		out __SP_L__,r28
 405               	/* prologue: function */
 406               	/* frame size = 35 */
 407               	/* stack size = 37 */
 408               	.L__stack_usage = 37
  73:../../src/kernel/source/nrk.c **** 	
  74:../../src/kernel/source/nrk.c ****     uint8_t i;	
  75:../../src/kernel/source/nrk.c **** //    unsigned char *stkc;
  76:../../src/kernel/source/nrk.c **** 	
  77:../../src/kernel/source/nrk.c ****    nrk_task_type IdleTask;
  78:../../src/kernel/source/nrk.c ****    nrk_wakeup_signal = nrk_signal_create();
 410               	.LM8:
 411 0022 0E94 0000 		call nrk_signal_create
 412 0026 8093 0000 		sts nrk_wakeup_signal,r24
  79:../../src/kernel/source/nrk.c ****    if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
 414               	.LM9:
 415 002a 8F3F      		cpi r24,lo8(-1)
 416 002c 01F4      		brne .L7
 418               	.LM10:
 419 002e 60E0      		ldi r22,0
 420 0030 8EE0      		ldi r24,lo8(14)
 421 0032 0E94 0000 		call nrk_kernel_error_add
 422               	.L7:
  80:../../src/kernel/source/nrk.c ****    //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
  81:../../src/kernel/source/nrk.c **** #ifndef NRK_SOFT_REBOOT_ON_ERROR
  82:../../src/kernel/source/nrk.c ****    i=_nrk_startup_error();
 424               	.LM11:
 425 0036 0E94 0000 		call _nrk_startup_error
  83:../../src/kernel/source/nrk.c ****    if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
 427               	.LM12:
 428 003a 80FF      		sbrs r24,0
 429 003c 00C0      		rjmp .L8
 431               	.LM13:
 432 003e 60E0      		ldi r22,0
 433 0040 86E0      		ldi r24,lo8(6)
 434 0042 0E94 0000 		call nrk_kernel_error_add
 435               	.L8:
  84:../../src/kernel/source/nrk.c **** #ifndef IGNORE_EXT_RST_ERROR
  85:../../src/kernel/source/nrk.c ****    if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
  86:../../src/kernel/source/nrk.c **** #endif
  87:../../src/kernel/source/nrk.c **** #ifndef IGNORE_BROWN_OUT_ERROR
  88:../../src/kernel/source/nrk.c ****    if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
  89:../../src/kernel/source/nrk.c **** #endif
  90:../../src/kernel/source/nrk.c ****    //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
  91:../../src/kernel/source/nrk.c **** 
  92:../../src/kernel/source/nrk.c **** 
  93:../../src/kernel/source/nrk.c ****  
  94:../../src/kernel/source/nrk.c ****    //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
  95:../../src/kernel/source/nrk.c **** #endif
  96:../../src/kernel/source/nrk.c **** 
  97:../../src/kernel/source/nrk.c ****    #ifdef NRK_STARTUP_VOLTAGE_CHECK
  98:../../src/kernel/source/nrk.c ****    	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
  99:../../src/kernel/source/nrk.c ****    #endif
 100:../../src/kernel/source/nrk.c **** 
 101:../../src/kernel/source/nrk.c **** 
 102:../../src/kernel/source/nrk.c **** 
 103:../../src/kernel/source/nrk.c **** 
 104:../../src/kernel/source/nrk.c ****    #ifdef NRK_REBOOT_ON_ERROR
 105:../../src/kernel/source/nrk.c ****    #ifndef NRK_WATCHDOG
 106:../../src/kernel/source/nrk.c ****    while(1)
 107:../../src/kernel/source/nrk.c **** 	   {
 108:../../src/kernel/source/nrk.c **** 		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
 109:../../src/kernel/source/nrk.c ****     		for (i = 0; i < 100; i++)
 110:../../src/kernel/source/nrk.c ****       			nrk_spin_wait_us (1000);
 111:../../src/kernel/source/nrk.c **** 	   }
 112:../../src/kernel/source/nrk.c ****    #endif
 113:../../src/kernel/source/nrk.c ****    #endif
 114:../../src/kernel/source/nrk.c **** 
 115:../../src/kernel/source/nrk.c ****    #ifdef NRK_WATCHDOG
 116:../../src/kernel/source/nrk.c ****     if(nrk_watchdog_check()==NRK_ERROR) 
 117:../../src/kernel/source/nrk.c **** 	{
 118:../../src/kernel/source/nrk.c ****     	nrk_watchdog_disable();
 119:../../src/kernel/source/nrk.c **** 	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
 120:../../src/kernel/source/nrk.c **** 	}
 121:../../src/kernel/source/nrk.c ****     nrk_watchdog_enable();
 122:../../src/kernel/source/nrk.c ****     #endif
 123:../../src/kernel/source/nrk.c ****   
 124:../../src/kernel/source/nrk.c ****   // nrk_stack_pointer_init(); 
 125:../../src/kernel/source/nrk.c **** /* 
 126:../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 127:../../src/kernel/source/nrk.c **** 	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 128:../../src/kernel/source/nrk.c **** 	nrk_kernel_stk[0]=STK_CANARY_VAL;
 129:../../src/kernel/source/nrk.c ****     	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 130:../../src/kernel/source/nrk.c ****     #else
 131:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
 132:../../src/kernel/source/nrk.c ****     	*stkc = STK_CANARY_VAL;
 133:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 134:../../src/kernel/source/nrk.c **** 	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
 135:../../src/kernel/source/nrk.c ****     #endif
 136:../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 137:../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 138:../../src/kernel/source/nrk.c **** */	
 139:../../src/kernel/source/nrk.c ****  
 140:../../src/kernel/source/nrk.c ****    // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
 141:../../src/kernel/source/nrk.c **** 
 142:../../src/kernel/source/nrk.c ****     
 143:../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = 0;
 437               	.LM14:
 438 0046 1092 0000 		sts nrk_cur_task_prio,__zero_reg__
 144:../../src/kernel/source/nrk.c ****     nrk_cur_task_TCB = NULL;
 440               	.LM15:
 441 004a 1092 0000 		sts nrk_cur_task_TCB+1,__zero_reg__
 442 004e 1092 0000 		sts nrk_cur_task_TCB,__zero_reg__
 145:../../src/kernel/source/nrk.c ****     
 146:../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = NULL;
 444               	.LM16:
 445 0052 1092 0000 		sts nrk_high_ready_TCB+1,__zero_reg__
 446 0056 1092 0000 		sts nrk_high_ready_TCB,__zero_reg__
 147:../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = 0; 
 448               	.LM17:
 449 005a 1092 0000 		sts nrk_high_ready_prio,__zero_reg__
 148:../../src/kernel/source/nrk.c **** 
 149:../../src/kernel/source/nrk.c ****    #ifdef NRK_STATS_TRACKER
 150:../../src/kernel/source/nrk.c **** 	nrk_stats_reset();
 151:../../src/kernel/source/nrk.c ****    #endif
 152:../../src/kernel/source/nrk.c **** 
 153:../../src/kernel/source/nrk.c ****     #ifdef NRK_MAX_RESERVES 
 154:../../src/kernel/source/nrk.c ****     // Setup the reserve structures
 155:../../src/kernel/source/nrk.c ****     _nrk_reserve_init();
 156:../../src/kernel/source/nrk.c ****     #endif
 157:../../src/kernel/source/nrk.c **** 
 158:../../src/kernel/source/nrk.c ****     _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
 451               	.LM18:
 452 005e 1092 0000 		sts _nrk_resource_cnt,__zero_reg__
 159:../../src/kernel/source/nrk.c **** 
 160:../../src/kernel/source/nrk.c **** for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
 161:../../src/kernel/source/nrk.c **** {
 162:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].count=-1;
 454               	.LM19:
 455 0062 8FEF      		ldi r24,lo8(-1)
 456 0064 8093 0000 		sts nrk_sem_list,r24
 163:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 458               	.LM20:
 459 0068 8093 0000 		sts nrk_sem_list+2,r24
 164:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].resource_ceiling=-1;
 461               	.LM21:
 462 006c 8093 0000 		sts nrk_sem_list+1,r24
 162:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 464               	.LM22:
 465 0070 8093 0000 		sts nrk_sem_list+3,r24
 163:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 467               	.LM23:
 468 0074 8093 0000 		sts nrk_sem_list+5,r24
 470               	.LM24:
 471 0078 8093 0000 		sts nrk_sem_list+4,r24
 165:../../src/kernel/source/nrk.c ****     //nrk_resource_count[i]=-1;
 166:../../src/kernel/source/nrk.c ****     //nrk_resource_value[i]=-1;
 167:../../src/kernel/source/nrk.c ****     //nrk_resource_ceiling[i]=-1;
 168:../../src/kernel/source/nrk.c ****     
 169:../../src/kernel/source/nrk.c **** }        
 170:../../src/kernel/source/nrk.c ****     for (i= 0; i<NRK_MAX_TASKS; i++)
 171:../../src/kernel/source/nrk.c **** 	{
 172:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 473               	.LM25:
 474 007c 93E6      		ldi r25,lo8(99)
 475 007e 9093 0000 		sts nrk_task_TCB+10,r25
 173:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 477               	.LM26:
 478 0082 8093 0000 		sts nrk_task_TCB+8,r24
 172:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 480               	.LM27:
 481 0086 9093 0000 		sts nrk_task_TCB+53,r25
 483               	.LM28:
 484 008a 8093 0000 		sts nrk_task_TCB+51,r24
 172:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 486               	.LM29:
 487 008e 9093 0000 		sts nrk_task_TCB+96,r25
 489               	.LM30:
 490 0092 8093 0000 		sts nrk_task_TCB+94,r24
 172:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 492               	.LM31:
 493 0096 9093 0000 		sts nrk_task_TCB+139,r25
 495               	.LM32:
 496 009a 8093 0000 		sts nrk_task_TCB+137,r24
 174:../../src/kernel/source/nrk.c ****         }
 175:../../src/kernel/source/nrk.c ****   
 176:../../src/kernel/source/nrk.c ****        
 177:../../src/kernel/source/nrk.c ****     // Setup a double linked list of Ready Tasks 
 178:../../src/kernel/source/nrk.c ****     for (i=0;i<NRK_MAX_TASKS;i++)
 179:../../src/kernel/source/nrk.c **** 	{
 180:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 498               	.LM33:
 499 009e 80E0      		ldi r24,lo8(_nrk_readyQ)
 500 00a0 90E0      		ldi r25,hi8(_nrk_readyQ)
 501 00a2 20E0      		ldi r18,lo8(_nrk_readyQ+5)
 502 00a4 30E0      		ldi r19,hi8(_nrk_readyQ+5)
 503 00a6 3093 0000 		sts _nrk_readyQ+3+1,r19
 504 00aa 2093 0000 		sts _nrk_readyQ+3,r18
 181:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 506               	.LM34:
 507 00ae 9093 0000 		sts _nrk_readyQ+6+1,r25
 508 00b2 8093 0000 		sts _nrk_readyQ+6,r24
 180:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 510               	.LM35:
 511 00b6 40E0      		ldi r20,lo8(_nrk_readyQ+10)
 512 00b8 50E0      		ldi r21,hi8(_nrk_readyQ+10)
 513 00ba 5093 0000 		sts _nrk_readyQ+8+1,r21
 514 00be 4093 0000 		sts _nrk_readyQ+8,r20
 516               	.LM36:
 517 00c2 3093 0000 		sts _nrk_readyQ+11+1,r19
 518 00c6 2093 0000 		sts _nrk_readyQ+11,r18
 180:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 520               	.LM37:
 521 00ca 20E0      		ldi r18,lo8(_nrk_readyQ+15)
 522 00cc 30E0      		ldi r19,hi8(_nrk_readyQ+15)
 523 00ce 3093 0000 		sts _nrk_readyQ+13+1,r19
 524 00d2 2093 0000 		sts _nrk_readyQ+13,r18
 526               	.LM38:
 527 00d6 5093 0000 		sts _nrk_readyQ+16+1,r21
 528 00da 4093 0000 		sts _nrk_readyQ+16,r20
 180:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 530               	.LM39:
 531 00de 40E0      		ldi r20,lo8(_nrk_readyQ+20)
 532 00e0 50E0      		ldi r21,hi8(_nrk_readyQ+20)
 533 00e2 5093 0000 		sts _nrk_readyQ+18+1,r21
 534 00e6 4093 0000 		sts _nrk_readyQ+18,r20
 536               	.LM40:
 537 00ea 3093 0000 		sts _nrk_readyQ+21+1,r19
 538 00ee 2093 0000 		sts _nrk_readyQ+21,r18
 182:../../src/kernel/source/nrk.c **** 	}
 183:../../src/kernel/source/nrk.c **** 	
 184:../../src/kernel/source/nrk.c **** 	_nrk_readyQ[0].Prev	=	NULL;
 540               	.LM41:
 541 00f2 1092 0000 		sts _nrk_readyQ+1+1,__zero_reg__
 542 00f6 1092 0000 		sts _nrk_readyQ+1,__zero_reg__
 185:../../src/kernel/source/nrk.c **** 	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
 544               	.LM42:
 545 00fa 1092 0000 		sts _nrk_readyQ+23+1,__zero_reg__
 546 00fe 1092 0000 		sts _nrk_readyQ+23,__zero_reg__
 186:../../src/kernel/source/nrk.c **** 	_head_node = NULL;
 548               	.LM43:
 549 0102 1092 0000 		sts _head_node+1,__zero_reg__
 550 0106 1092 0000 		sts _head_node,__zero_reg__
 187:../../src/kernel/source/nrk.c **** 	_free_node = &_nrk_readyQ[0];
 552               	.LM44:
 553 010a 9093 0000 		sts _free_node+1,r25
 554 010e 8093 0000 		sts _free_node,r24
 188:../../src/kernel/source/nrk.c **** 	
 189:../../src/kernel/source/nrk.c **** 	
 190:../../src/kernel/source/nrk.c **** 	
 191:../../src/kernel/source/nrk.c **** 
 192:../../src/kernel/source/nrk.c **** 	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
 556               	.LM45:
 557 0112 60E0      		ldi r22,lo8(gs(nrk_idle_task))
 558 0114 70E0      		ldi r23,hi8(gs(nrk_idle_task))
 559 0116 CE01      		movw r24,r28
 560 0118 0196      		adiw r24,1
 561 011a 0E94 0000 		call nrk_task_set_entry_function
 193:../../src/kernel/source/nrk.c **** 	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
 563               	.LM46:
 564 011e 40E8      		ldi r20,lo8(-128)
 565 0120 50E0      		ldi r21,0
 566 0122 60E0      		ldi r22,lo8(nrk_idle_task_stk)
 567 0124 70E0      		ldi r23,hi8(nrk_idle_task_stk)
 568 0126 CE01      		movw r24,r28
 569 0128 0196      		adiw r24,1
 570 012a 0E94 0000 		call nrk_task_set_stk
 194:../../src/kernel/source/nrk.c **** 	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
 572               	.LM47:
 573 012e 85E5      		ldi r24,lo8(85)
 574 0130 8093 0000 		sts nrk_idle_task_stk,r24
 195:../../src/kernel/source/nrk.c **** 	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
 196:../../src/kernel/source/nrk.c **** 	IdleTask.prio = 0;
 576               	.LM48:
 577 0134 1986      		std Y+9,__zero_reg__
 197:../../src/kernel/source/nrk.c **** 	IdleTask.period.secs = 0;
 579               	.LM49:
 580 0136 1C86      		std Y+12,__zero_reg__
 581 0138 1D86      		std Y+13,__zero_reg__
 582 013a 1E86      		std Y+14,__zero_reg__
 583 013c 1F86      		std Y+15,__zero_reg__
 198:../../src/kernel/source/nrk.c **** 	IdleTask.period.nano_secs = 0;
 585               	.LM50:
 586 013e 188A      		std Y+16,__zero_reg__
 587 0140 198A      		std Y+17,__zero_reg__
 588 0142 1A8A      		std Y+18,__zero_reg__
 589 0144 1B8A      		std Y+19,__zero_reg__
 199:../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.secs = 0;
 591               	.LM51:
 592 0146 1C8A      		std Y+20,__zero_reg__
 593 0148 1D8A      		std Y+21,__zero_reg__
 594 014a 1E8A      		std Y+22,__zero_reg__
 595 014c 1F8A      		std Y+23,__zero_reg__
 200:../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.nano_secs = 0;
 597               	.LM52:
 598 014e 188E      		std Y+24,__zero_reg__
 599 0150 198E      		std Y+25,__zero_reg__
 600 0152 1A8E      		std Y+26,__zero_reg__
 601 0154 1B8E      		std Y+27,__zero_reg__
 201:../../src/kernel/source/nrk.c **** 	IdleTask.offset.secs = 0;
 603               	.LM53:
 604 0156 1C8E      		std Y+28,__zero_reg__
 605 0158 1D8E      		std Y+29,__zero_reg__
 606 015a 1E8E      		std Y+30,__zero_reg__
 607 015c 1F8E      		std Y+31,__zero_reg__
 202:../../src/kernel/source/nrk.c **** 	IdleTask.offset.nano_secs = 0;
 609               	.LM54:
 610 015e 18A2      		std Y+32,__zero_reg__
 611 0160 19A2      		std Y+33,__zero_reg__
 612 0162 1AA2      		std Y+34,__zero_reg__
 613 0164 1BA2      		std Y+35,__zero_reg__
 203:../../src/kernel/source/nrk.c **** 	IdleTask.FirstActivation = TRUE;
 615               	.LM55:
 616 0166 81E0      		ldi r24,lo8(1)
 617 0168 8887      		std Y+8,r24
 204:../../src/kernel/source/nrk.c **** 	IdleTask.Type = IDLE_TASK;
 619               	.LM56:
 620 016a 92E0      		ldi r25,lo8(2)
 621 016c 9A87      		std Y+10,r25
 205:../../src/kernel/source/nrk.c **** 	IdleTask.SchType = PREEMPTIVE;
 623               	.LM57:
 624 016e 8B87      		std Y+11,r24
 206:../../src/kernel/source/nrk.c **** 	nrk_activate_task(&IdleTask);
 626               	.LM58:
 627 0170 CE01      		movw r24,r28
 628 0172 0196      		adiw r24,1
 629 0174 0E94 0000 		call nrk_activate_task
 630               	/* epilogue start */
 207:../../src/kernel/source/nrk.c **** 	
 208:../../src/kernel/source/nrk.c **** }
 632               	.LM59:
 633 0178 A396      		adiw r28,35
 634 017a 0FB6      		in __tmp_reg__,__SREG__
 635 017c F894      		cli
 636 017e DEBF      		out __SP_H__,r29
 637 0180 0FBE      		out __SREG__,__tmp_reg__
 638 0182 CDBF      		out __SP_L__,r28
 639 0184 DF91      		pop r29
 640 0186 CF91      		pop r28
 641 0188 0895      		ret
 646               	.Lscope4:
 648               		.stabd	78,0,0
 650               	.global	nrk_start
 652               	nrk_start:
 653               		.stabd	46,0,0
 209:../../src/kernel/source/nrk.c **** 
 210:../../src/kernel/source/nrk.c **** 
 211:../../src/kernel/source/nrk.c **** 
 212:../../src/kernel/source/nrk.c **** 
 213:../../src/kernel/source/nrk.c **** 
 214:../../src/kernel/source/nrk.c **** 
 215:../../src/kernel/source/nrk.c **** 
 216:../../src/kernel/source/nrk.c **** 
 217:../../src/kernel/source/nrk.c **** void nrk_start (void)
 218:../../src/kernel/source/nrk.c **** {
 655               	.LM60:
 656               	.LFBB5:
 657               	/* prologue: function */
 658               	/* frame size = 0 */
 659               	/* stack size = 0 */
 660               	.L__stack_usage = 0
 662               	.LM61:
 663 018a 00E0      		ldi r16,lo8(nrk_task_TCB+8)
 664 018c 10E0      		ldi r17,hi8(nrk_task_TCB+8)
 219:../../src/kernel/source/nrk.c **** 	int8_t task_ID;
 220:../../src/kernel/source/nrk.c **** 	uint8_t i,j;
 221:../../src/kernel/source/nrk.c **** //	NRK_STK *x;
 222:../../src/kernel/source/nrk.c **** //	unsigned char *stkc;
 223:../../src/kernel/source/nrk.c **** 
 224:../../src/kernel/source/nrk.c **** 	/*
 225:../../src/kernel/source/nrk.c **** 		- Get highest priority task from rdy list
 226:../../src/kernel/source/nrk.c **** 		- set cur prio and start the task 
 227:../../src/kernel/source/nrk.c **** 	*/
 228:../../src/kernel/source/nrk.c ****     // Check to make sure all tasks unique
 229:../../src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 666               	.LM62:
 667 018e C0E0      		ldi r28,0
 668               	.L14:
 230:../../src/kernel/source/nrk.c ****     {
 231:../../src/kernel/source/nrk.c **** 	task_ID = nrk_task_TCB[i].task_ID;
 670               	.LM63:
 671 0190 F801      		movw r30,r16
 672 0192 D080      		ld r13,Z
 232:../../src/kernel/source/nrk.c **** 	// only check activated tasks
 233:../../src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 674               	.LM64:
 675 0194 FFEF      		ldi r31,lo8(-1)
 676 0196 DF12      		cpse r13,r31
 677 0198 00C0      		rjmp .L19
 678               	.L17:
 229:../../src/kernel/source/nrk.c ****     {
 680               	.LM65:
 681 019a CF5F      		subi r28,lo8(-(1))
 682 019c 055D      		subi r16,-43
 683 019e 1F4F      		sbci r17,-1
 684 01a0 C430      		cpi r28,lo8(4)
 685 01a2 01F4      		brne .L14
 234:../../src/kernel/source/nrk.c **** 	{
 235:../../src/kernel/source/nrk.c ****     		for(j=0; j<NRK_MAX_TASKS; j++ )
 236:../../src/kernel/source/nrk.c **** 		{
 237:../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 238:../../src/kernel/source/nrk.c **** 			{
 239:../../src/kernel/source/nrk.c **** 			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
 240:../../src/kernel/source/nrk.c **** 
 241:../../src/kernel/source/nrk.c **** 			}
 242:../../src/kernel/source/nrk.c **** 		}
 243:../../src/kernel/source/nrk.c **** 	}
 244:../../src/kernel/source/nrk.c **** 
 245:../../src/kernel/source/nrk.c ****     }
 246:../../src/kernel/source/nrk.c **** 
 247:../../src/kernel/source/nrk.c ****     task_ID = nrk_get_high_ready_task_ID();	
 687               	.LM66:
 688 01a4 0E94 0000 		call nrk_get_high_ready_task_ID
 248:../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 690               	.LM67:
 691 01a8 2BE2      		ldi r18,lo8(43)
 692 01aa 8202      		muls r24,r18
 693 01ac C001      		movw r24,r0
 694 01ae 1124      		clr __zero_reg__
 695 01b0 FC01      		movw r30,r24
 696 01b2 E050      		subi r30,lo8(-(nrk_task_TCB))
 697 01b4 F040      		sbci r31,hi8(-(nrk_task_TCB))
 698 01b6 8285      		ldd r24,Z+10
 699 01b8 8093 0000 		sts nrk_high_ready_prio,r24
 249:../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
 701               	.LM68:
 702 01bc F093 0000 		sts nrk_cur_task_TCB+1,r31
 703 01c0 E093 0000 		sts nrk_cur_task_TCB,r30
 704 01c4 F093 0000 		sts nrk_high_ready_TCB+1,r31
 705 01c8 E093 0000 		sts nrk_high_ready_TCB,r30
 250:../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 707               	.LM69:
 708 01cc 8093 0000 		sts nrk_cur_task_prio,r24
 251:../../src/kernel/source/nrk.c **** 		
 252:../../src/kernel/source/nrk.c **** //    nrk_stack_pointer_restore();
 253:../../src/kernel/source/nrk.c **** 
 254:../../src/kernel/source/nrk.c ****     /*
 255:../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 256:../../src/kernel/source/nrk.c ****      	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 257:../../src/kernel/source/nrk.c ****     #else
 258:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 259:../../src/kernel/source/nrk.c ****     #endif
 260:../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 261:../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 262:../../src/kernel/source/nrk.c ****     
 263:../../src/kernel/source/nrk.c ****     //TODO: this way on msp
 264:../../src/kernel/source/nrk.c ****     // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 265:../../src/kernel/source/nrk.c ****     // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
 266:../../src/kernel/source/nrk.c **** */
 267:../../src/kernel/source/nrk.c ****     nrk_target_start();
 710               	.LM70:
 711 01d0 0E94 0000 		call nrk_target_start
 268:../../src/kernel/source/nrk.c ****     nrk_stack_pointer_init(); 
 713               	.LM71:
 714 01d4 0E94 0000 		call nrk_stack_pointer_init
 269:../../src/kernel/source/nrk.c ****     nrk_start_high_ready_task();	
 716               	.LM72:
 717 01d8 0E94 0000 		call nrk_start_high_ready_task
 718 01dc 00C0      		rjmp .L18
 719               	.L19:
 720 01de 80E0      		ldi r24,lo8(nrk_task_TCB+8)
 721 01e0 E82E      		mov r14,r24
 722 01e2 80E0      		ldi r24,hi8(nrk_task_TCB+8)
 723 01e4 F82E      		mov r15,r24
 724 01e6 D0E0      		ldi r29,0
 725               	.L13:
 237:../../src/kernel/source/nrk.c **** 			{
 727               	.LM73:
 728 01e8 CD17      		cp r28,r29
 729 01ea 01F0      		breq .L16
 237:../../src/kernel/source/nrk.c **** 			{
 731               	.LM74:
 732 01ec F701      		movw r30,r14
 733 01ee 8081      		ld r24,Z
 734 01f0 D812      		cpse r13,r24
 735 01f2 00C0      		rjmp .L16
 239:../../src/kernel/source/nrk.c **** 
 737               	.LM75:
 738 01f4 6D2D      		mov r22,r13
 739 01f6 85E0      		ldi r24,lo8(5)
 740 01f8 0E94 0000 		call nrk_kernel_error_add
 741               	.L16:
 235:../../src/kernel/source/nrk.c **** 		{
 743               	.LM76:
 744 01fc DF5F      		subi r29,lo8(-(1))
 745 01fe FBE2      		ldi r31,43
 746 0200 EF0E      		add r14,r31
 747 0202 F11C      		adc r15,__zero_reg__
 748 0204 D430      		cpi r29,lo8(4)
 749 0206 01F4      		brne .L13
 750 0208 00C0      		rjmp .L17
 751               	.L18:
 270:../../src/kernel/source/nrk.c **** 
 271:../../src/kernel/source/nrk.c ****     // you should never get here    
 272:../../src/kernel/source/nrk.c ****     while(1);
 753               	.LM77:
 754 020a 00C0      		rjmp .L18
 760               	.Lscope5:
 762               		.stabd	78,0,0
 770               	.global	nrk_TCB_init
 772               	nrk_TCB_init:
 773               		.stabd	46,0,0
 273:../../src/kernel/source/nrk.c **** }
 274:../../src/kernel/source/nrk.c **** 
 275:../../src/kernel/source/nrk.c **** 
 276:../../src/kernel/source/nrk.c **** int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pe
 277:../../src/kernel/source/nrk.c **** {
 775               	.LM78:
 776               	.LFBB6:
 777 020c CF92      		push r12
 778 020e DF92      		push r13
 779 0210 EF92      		push r14
 780 0212 FF92      		push r15
 781 0214 0F93      		push r16
 782 0216 1F93      		push r17
 783 0218 CF93      		push r28
 784 021a DF93      		push r29
 785               	/* prologue: function */
 786               	/* frame size = 0 */
 787               	/* stack size = 8 */
 788               	.L__stack_usage = 8
 789 021c EC01      		movw r28,r24
 790 021e 8B01      		movw r16,r22
 791 0220 7A01      		movw r14,r20
 278:../../src/kernel/source/nrk.c **** 	
 279:../../src/kernel/source/nrk.c ****     //  Already in critical section so no needenter critical section
 280:../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK)
 793               	.LM79:
 794 0222 8985      		ldd r24,Y+9
 795 0224 8230      		cpi r24,lo8(2)
 796 0226 01F0      		breq .L24
 281:../../src/kernel/source/nrk.c ****     	Task->task_ID=nrk_task_init_cnt;
 798               	.LM80:
 799 0228 8091 0000 		lds r24,nrk_task_init_cnt
 800 022c 8883      		st Y,r24
 801 022e 00C0      		rjmp .L25
 802               	.L24:
 282:../../src/kernel/source/nrk.c ****     else Task->task_ID=NRK_IDLE_TASK_ID;
 804               	.LM81:
 805 0230 1882      		st Y,__zero_reg__
 806               	.L25:
 283:../../src/kernel/source/nrk.c **** 
 284:../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
 808               	.LM82:
 809 0232 8091 0000 		lds r24,nrk_task_init_cnt
 810 0236 8430      		cpi r24,lo8(4)
 811 0238 00F0      		brlo .L26
 813               	.LM83:
 814 023a 60E0      		ldi r22,0
 815 023c 87E0      		ldi r24,lo8(7)
 816 023e 0E94 0000 		call nrk_kernel_error_add
 817               	.L26:
 285:../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
 819               	.LM84:
 820 0242 8985      		ldd r24,Y+9
 821 0244 8230      		cpi r24,lo8(2)
 822 0246 01F0      		breq .L27
 824               	.LM85:
 825 0248 8091 0000 		lds r24,nrk_task_init_cnt
 826 024c 8F5F      		subi r24,lo8(-(1))
 827 024e 8093 0000 		sts nrk_task_init_cnt,r24
 828               	.L27:
 286:../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
 830               	.LM86:
 831 0252 8091 0000 		lds r24,nrk_task_init_cnt
 832 0256 8111      		cpse r24,__zero_reg__
 833 0258 00C0      		rjmp .L28
 835               	.LM87:
 836 025a 81E0      		ldi r24,lo8(1)
 837 025c 8093 0000 		sts nrk_task_init_cnt,r24
 838               	.L28:
 287:../../src/kernel/source/nrk.c ****     //initialize member of TCB structure
 288:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
 840               	.LM88:
 841 0260 3881      		ld r19,Y
 842 0262 2BE2      		ldi r18,lo8(43)
 843 0264 3203      		mulsu r19,r18
 844 0266 F001      		movw r30,r0
 845 0268 1124      		clr __zero_reg__
 846 026a E050      		subi r30,lo8(-(nrk_task_TCB))
 847 026c F040      		sbci r31,hi8(-(nrk_task_TCB))
 848 026e 1183      		std Z+1,r17
 849 0270 0083      		st Z,r16
 289:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
 851               	.LM89:
 852 0272 8885      		ldd r24,Y+8
 853 0274 8287      		std Z+10,r24
 290:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
 855               	.LM90:
 856 0276 3881      		ld r19,Y
 857 0278 3203      		mulsu r19,r18
 858 027a F001      		movw r30,r0
 859 027c 1124      		clr __zero_reg__
 860 027e E050      		subi r30,lo8(-(nrk_task_TCB))
 861 0280 F040      		sbci r31,hi8(-(nrk_task_TCB))
 862 0282 83E0      		ldi r24,lo8(3)
 863 0284 8187      		std Z+9,r24
 291:../../src/kernel/source/nrk.c ****     
 292:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
 865               	.LM91:
 866 0286 3881      		ld r19,Y
 867 0288 3203      		mulsu r19,r18
 868 028a F001      		movw r30,r0
 869 028c 1124      		clr __zero_reg__
 870 028e E050      		subi r30,lo8(-(nrk_task_TCB))
 871 0290 F040      		sbci r31,hi8(-(nrk_task_TCB))
 872 0292 3087      		std Z+8,r19
 293:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].suspend_flag = 0;
 874               	.LM92:
 875 0294 0881      		ld r16,Y
 876 0296 0203      		mulsu r16,r18
 877 0298 8001      		movw r16,r0
 878 029a 1124      		clr __zero_reg__
 879 029c 0050      		subi r16,lo8(-(nrk_task_TCB))
 880 029e 1040      		sbci r17,hi8(-(nrk_task_TCB))
 881 02a0 F801      		movw r30,r16
 882 02a2 1582      		std Z+5,__zero_reg__
 294:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
 884               	.LM93:
 885 02a4 CE01      		movw r24,r28
 886 02a6 0B96      		adiw r24,11
 887 02a8 0E94 0000 		call _nrk_time_to_ticks_long
 888 02ac F801      		movw r30,r16
 889 02ae 61A3      		std Z+33,r22
 890 02b0 72A3      		std Z+34,r23
 891 02b2 83A3      		std Z+35,r24
 892 02b4 94A3      		std Z+36,r25
 295:../../src/kernel/source/nrk.c ****     if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
 894               	.LM94:
 895 02b6 8B85      		ldd r24,Y+11
 896 02b8 9C85      		ldd r25,Y+12
 897 02ba AD85      		ldd r26,Y+13
 898 02bc BE85      		ldd r27,Y+14
 899 02be 8833      		cpi r24,56
 900 02c0 9948      		sbci r25,-119
 901 02c2 A144      		sbci r26,65
 902 02c4 B105      		cpc r27,__zero_reg__
 903 02c6 00F0      		brlo .L29
 905               	.LM95:
 906 02c8 6881      		ld r22,Y
 907 02ca 86E1      		ldi r24,lo8(22)
 908 02cc 0E94 0000 		call nrk_kernel_error_add
 909               	.L29:
 296:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
 911               	.LM96:
 912 02d0 C880      		ld r12,Y
 913 02d2 DD24      		clr r13
 914 02d4 C7FC      		sbrc r12,7
 915 02d6 D094      		com r13
 916 02d8 CE01      		movw r24,r28
 917 02da 4B96      		adiw r24,27
 918 02dc 0E94 0000 		call _nrk_time_to_ticks_long
 919 02e0 1BE2      		ldi r17,lo8(43)
 920 02e2 1C9D      		mul r17,r12
 921 02e4 F001      		movw r30,r0
 922 02e6 1D9D      		mul r17,r13
 923 02e8 F00D      		add r31,r0
 924 02ea 1124      		clr __zero_reg__
 925 02ec E050      		subi r30,lo8(-(nrk_task_TCB))
 926 02ee F040      		sbci r31,hi8(-(nrk_task_TCB))
 927 02f0 658B      		std Z+21,r22
 928 02f2 768B      		std Z+22,r23
 929 02f4 878B      		std Z+23,r24
 930 02f6 908F      		std Z+24,r25
 297:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->
 932               	.LM97:
 933 02f8 2881      		ld r18,Y
 934 02fa 2103      		mulsu r18,r17
 935 02fc C001      		movw r24,r0
 936 02fe 1124      		clr __zero_reg__
 937 0300 9C01      		movw r18,r24
 938 0302 2050      		subi r18,lo8(-(nrk_task_TCB))
 939 0304 3040      		sbci r19,hi8(-(nrk_task_TCB))
 940 0306 6901      		movw r12,r18
 941 0308 F901      		movw r30,r18
 942 030a 4589      		ldd r20,Z+21
 943 030c 5689      		ldd r21,Z+22
 944 030e 6789      		ldd r22,Z+23
 945 0310 708D      		ldd r23,Z+24
 946 0312 81A1      		ldd r24,Z+33
 947 0314 92A1      		ldd r25,Z+34
 948 0316 A3A1      		ldd r26,Z+35
 949 0318 B4A1      		ldd r27,Z+36
 950 031a 840F      		add r24,r20
 951 031c 951F      		adc r25,r21
 952 031e A61F      		adc r26,r22
 953 0320 B71F      		adc r27,r23
 954 0322 818F      		std Z+25,r24
 955 0324 928F      		std Z+26,r25
 956 0326 A38F      		std Z+27,r26
 957 0328 B48F      		std Z+28,r27
 298:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
 959               	.LM98:
 960 032a CE01      		movw r24,r28
 961 032c 4396      		adiw r24,19
 962 032e 0E94 0000 		call _nrk_time_to_ticks_long
 963 0332 F601      		movw r30,r12
 964 0334 65A3      		std Z+37,r22
 965 0336 76A3      		std Z+38,r23
 966 0338 87A3      		std Z+39,r24
 967 033a 90A7      		std Z+40,r25
 299:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
 969               	.LM99:
 970 033c 2881      		ld r18,Y
 971 033e 2103      		mulsu r18,r17
 972 0340 F001      		movw r30,r0
 973 0342 1124      		clr __zero_reg__
 974 0344 E050      		subi r30,lo8(-(nrk_task_TCB))
 975 0346 F040      		sbci r31,hi8(-(nrk_task_TCB))
 976 0348 85A1      		ldd r24,Z+37
 977 034a 96A1      		ldd r25,Z+38
 978 034c A7A1      		ldd r26,Z+39
 979 034e B0A5      		ldd r27,Z+40
 980 0350 858F      		std Z+29,r24
 981 0352 968F      		std Z+30,r25
 982 0354 A78F      		std Z+31,r26
 983 0356 B0A3      		std Z+32,r27
 300:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].num_periods = 1;
 985               	.LM100:
 986 0358 81E0      		ldi r24,lo8(1)
 987 035a 90E0      		ldi r25,0
 988 035c 92A7      		std Z+42,r25
 989 035e 81A7      		std Z+41,r24
 301:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
 991               	.LM101:
 992 0360 F382      		std Z+3,r15
 993 0362 E282      		std Z+2,r14
 302:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 995               	.LM102:
 996 0364 8487      		std Z+12,r24
 997               	/* epilogue start */
 303:../../src/kernel/source/nrk.c ****  
 304:../../src/kernel/source/nrk.c **** 	
 305:../../src/kernel/source/nrk.c **** 	         
 306:../../src/kernel/source/nrk.c **** 
 307:../../src/kernel/source/nrk.c **** 			
 308:../../src/kernel/source/nrk.c ****     return NRK_OK;
 309:../../src/kernel/source/nrk.c **** 
 310:../../src/kernel/source/nrk.c **** }
 999               	.LM103:
 1000 0366 DF91      		pop r29
 1001 0368 CF91      		pop r28
 1002 036a 1F91      		pop r17
 1003 036c 0F91      		pop r16
 1004 036e FF90      		pop r15
 1005 0370 EF90      		pop r14
 1006 0372 DF90      		pop r13
 1007 0374 CF90      		pop r12
 1008 0376 0895      		ret
 1010               	.Lscope6:
 1012               		.stabd	78,0,0
 1014               	.global	_nrk_timer_tick
 1016               	_nrk_timer_tick:
 1017               		.stabd	46,0,0
 311:../../src/kernel/source/nrk.c **** 
 312:../../src/kernel/source/nrk.c **** 
 313:../../src/kernel/source/nrk.c **** /*
 314:../../src/kernel/source/nrk.c ****  * _nrk_timer_tick() 
 315:../../src/kernel/source/nrk.c ****  *
 316:../../src/kernel/source/nrk.c ****  * This function is called by the interrupt timer0.
 317:../../src/kernel/source/nrk.c ****  * It calls the scheduler.
 318:../../src/kernel/source/nrk.c ****  */
 319:../../src/kernel/source/nrk.c **** void _nrk_timer_tick(void)
 320:../../src/kernel/source/nrk.c **** {
 1019               	.LM104:
 1020               	.LFBB7:
 1021               	/* prologue: function */
 1022               	/* frame size = 0 */
 1023               	/* stack size = 0 */
 1024               	.L__stack_usage = 0
 321:../../src/kernel/source/nrk.c **** 	// want to do something before the scheduler gets called? 
 322:../../src/kernel/source/nrk.c **** 	// Go ahead and put it here...
 323:../../src/kernel/source/nrk.c **** 
 324:../../src/kernel/source/nrk.c **** 	_nrk_scheduler();
 1026               	.LM105:
 1027 0378 0C94 0000 		jmp _nrk_scheduler
 1029               	.Lscope7:
 1031               		.stabd	78,0,0
 1033               	.global	nrk_version
 1035               	nrk_version:
 1036               		.stabd	46,0,0
 325:../../src/kernel/source/nrk.c **** 
 326:../../src/kernel/source/nrk.c ****   	return;
 327:../../src/kernel/source/nrk.c **** }
 328:../../src/kernel/source/nrk.c **** 
 329:../../src/kernel/source/nrk.c **** 
 330:../../src/kernel/source/nrk.c **** uint16_t nrk_version (void)
 331:../../src/kernel/source/nrk.c **** {
 1038               	.LM106:
 1039               	.LFBB8:
 1040               	/* prologue: function */
 1041               	/* frame size = 0 */
 1042               	/* stack size = 0 */
 1043               	.L__stack_usage = 0
 332:../../src/kernel/source/nrk.c ****     return (NRK_VERSION);
 333:../../src/kernel/source/nrk.c **** }
 1045               	.LM107:
 1046 037c 85E6      		ldi r24,lo8(101)
 1047 037e 90E0      		ldi r25,0
 1048 0380 0895      		ret
 1050               	.Lscope8:
 1052               		.stabd	78,0,0
 1053               		.comm	nrk_task_init_cnt,1,1
 1054               		.comm	error_num,1,1
 1055               		.comm	error_task,1,1
 1056               		.comm	next_next_wakeup,2,1
 1057               		.comm	_nrk_cpu_state,1,1
 1058               		.comm	nrk_system_time,8,1
 1059               		.comm	nrk_sem_list,6,1
 1060               		.comm	_nrk_resource_cnt,1,1
 1061               		.comm	nrk_high_ready_TCB,2,1
 1062               		.comm	nrk_high_ready_prio,1,1
 1063               		.comm	nrk_cur_task_TCB,2,1
 1064               		.comm	nrk_cur_task_prio,1,1
 1065               		.comm	nrk_wakeup_signal,1,1
 1066               		.comm	_head_node,2,1
 1067               		.comm	_free_node,2,1
 1068               		.comm	_nrk_readyQ,25,1
 1069               		.comm	nrk_task_TCB,172,1
 1070               		.comm	nrk_kernel_stk_ptr,2,1
 1071               		.comm	nrk_idle_task_stk,128,1
 1072               		.comm	_nrk_signal_list,4,1
 1094               	.Letext0:
 1095               		.ident	"GCC: (GNU) 4.9.1"
 1096               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:317    .text:0000000000000000 nrk_int_disable
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:342    .text:0000000000000004 nrk_int_enable
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:367    .text:0000000000000008 nrk_halt
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:390    .text:000000000000000e nrk_init
                            *COM*:0000000000000001 nrk_wakeup_signal
                            *COM*:0000000000000001 nrk_cur_task_prio
                            *COM*:0000000000000002 nrk_cur_task_TCB
                            *COM*:0000000000000002 nrk_high_ready_TCB
                            *COM*:0000000000000001 nrk_high_ready_prio
                            *COM*:0000000000000001 _nrk_resource_cnt
                            *COM*:0000000000000006 nrk_sem_list
                            *COM*:00000000000000ac nrk_task_TCB
                            *COM*:0000000000000019 _nrk_readyQ
                            *COM*:0000000000000002 _head_node
                            *COM*:0000000000000002 _free_node
                            *COM*:0000000000000080 nrk_idle_task_stk
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:652    .text:000000000000018a nrk_start
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:772    .text:000000000000020c nrk_TCB_init
                            *COM*:0000000000000001 nrk_task_init_cnt
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:1016   .text:0000000000000378 _nrk_timer_tick
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccfVMsFX.s:1035   .text:000000000000037c nrk_version
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 next_next_wakeup
                            *COM*:0000000000000001 _nrk_cpu_state
                            *COM*:0000000000000008 nrk_system_time
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_signal_create
nrk_kernel_error_add
_nrk_startup_error
nrk_idle_task
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_get_high_ready_task_ID
nrk_target_start
nrk_stack_pointer_init
nrk_start_high_ready_task
_nrk_time_to_ticks_long
_nrk_scheduler
__do_clear_bss
