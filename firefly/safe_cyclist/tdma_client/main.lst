   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 337               	.global	task_imu
 339               	task_imu:
 340               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** #include <nrk.h>
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <hal.h>
  29:main.c        **** #include <nrk_error.h>
  30:main.c        **** #include <nrk_timer.h>
  31:main.c        **** #include <nrk_stack_check.h>
  32:main.c        **** #include <nrk_stats.h>
  33:main.c        **** #include <pcf_tdma.h>
  34:main.c        **** #include <TWI_Master.h>
  35:main.c        **** #include <tdma_cons.h>
  36:main.c        **** 
  37:main.c        **** // Constants for the accelrometer
  38:main.c        **** //There are 6 data registers, they are sequential starting 
  39:main.c        **** //with the LSB of X.  We'll read all 6 in a burst and won't
  40:main.c        **** //address them individually
  41:main.c        **** #define ADXL345_REGISTER_XLSB 0x32
  42:main.c        **** #define ADXL_REGISTER_DTFMT 0x31
  43:main.c        **** //Need to set power control bit to wake up the adxl345
  44:main.c        **** #define ADXL_REGISTER_PWRCTL 0x2D
  45:main.c        **** #define ADXL_REGISTER_FIFOCTL 0x38
  46:main.c        **** #define ADXL_FIFOCTL_STREAM 1<<7
  47:main.c        **** #define ADXL_PWRCTL_MEASURE 1 << 3
  48:main.c        **** #define ADXL_16G_DTFMT 0x0F
  49:main.c        **** #define ADXL_PWRCTL_STBY 0
  50:main.c        **** #define ADXL345_ADDRESS 0xA6
  51:main.c        **** #define ADXL_SIZE 6
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** //Constants for the gyroscope
  55:main.c        **** #define ITG3200_ADDRESS 0xD0
  56:main.c        **** //request burst of 6 bytes from this address
  57:main.c        **** #define ITG3200_REGISTER_XMSB 0x1D
  58:main.c        **** #define ITG3200_REGISTER_DLPF 0x16
  59:main.c        **** #define ITG3200_FULLSCALE 0x03 << 3
  60:main.c        **** #define ITG3200_42HZ 0x03
  61:main.c        **** #define ITG3200_SIZE 6
  62:main.c        **** 
  63:main.c        **** 
  64:main.c        **** #define HMC5843_ADDRESS 0x3C
  65:main.c        **** //First data address of 6 is XMSB.  Also need to set a configuration register for
  66:main.c        **** //continuous measurement
  67:main.c        **** #define HMC5843_REGISTER_XMSB 0x03
  68:main.c        **** #define HMC5843_REGISTER_MEASMODE 0x02
  69:main.c        **** #define HMC5843_MEASMODE_CONT 0x00
  70:main.c        **** #define HMC5843_SIZE 6
  71:main.c        **** 
  72:main.c        **** 
  73:main.c        **** tdma_info tx_tdma_fd;
  74:main.c        **** tdma_info rx_tdma_fd;
  75:main.c        **** 
  76:main.c        **** uint8_t i2c_buf[16];
  77:main.c        **** uint8_t tx_buf[TDMA_MAX_PKT_SIZE];
  78:main.c        **** uint8_t rx_buf[TDMA_MAX_PKT_SIZE];
  79:main.c        **** uint8_t tx_len;
  80:main.c        **** unsigned int sequenceNo; 
  81:main.c        **** bool packetReady;
  82:main.c        **** uint16_t mac_address;
  83:main.c        **** 
  84:main.c        **** uint8_t aes_key[] = {0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee, 0x
  85:main.c        **** 
  86:main.c        **** 
  87:main.c        **** unsigned char TWI_Act_On_Failure_In_Last_Transmission ( unsigned char TWIerrorMsg )
  88:main.c        **** {
  89:main.c        ****                     // A failure has occurred, use TWIerrorMsg to determine the nature of the failu
  90:main.c        ****                     // and take appropriate actions.
  91:main.c        ****                     // Se header file for a list of possible failures messages.
  92:main.c        ****                     
  93:main.c        ****                     // Here is a simple sample, where if received a NACK on the slave address,
  94:main.c        ****                     // then a retransmission will be initiated.
  95:main.c        **** if ( (TWIerrorMsg == TWI_MTX_ADR_NACK) | (TWIerrorMsg == TWI_MRX_ADR_NACK) ){
  96:main.c        ****     TWI_Start_Transceiver();
  97:main.c        **** }
  98:main.c        **** printf("%c \n",TWIerrorMsg);
  99:main.c        ****     
 100:main.c        ****   return TWIerrorMsg; 
 101:main.c        **** }
 102:main.c        **** 
 103:main.c        **** 
 104:main.c        **** 
 105:main.c        **** 
 106:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
 107:main.c        **** nrk_task_type TaskOne;
 108:main.c        **** void task_imu(void);
 109:main.c        **** 
 110:main.c        **** NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
 111:main.c        **** nrk_task_type rx_task_info;
 112:main.c        **** void rx_task (void);
 113:main.c        **** 
 114:main.c        **** NRK_STK tx_task_stack[NRK_APP_STACKSIZE];
 115:main.c        **** nrk_task_type tx_task_info;
 116:main.c        **** void tx_task (void);
 117:main.c        **** 
 118:main.c        **** 
 119:main.c        **** void init_adxl345(void);
 120:main.c        **** void init_itg3200(void);
 121:main.c        **** void init_hmc5843(void);
 122:main.c        **** 
 123:main.c        **** void nrk_create_taskset();
 124:main.c        **** 
 125:main.c        **** int
 126:main.c        **** main ()
 127:main.c        **** {
 128:main.c        ****   nrk_setup_ports();
 129:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 130:main.c        **** 
 131:main.c        ****   tdma_init (TDMA_CLIENT, DEFAULT_CHANNEL, mac_address);
 132:main.c        **** 
 133:main.c        ****   //tdma_aes_setkey(aes_key);
 134:main.c        ****   //tdma_aes_enable();
 135:main.c        **** 
 136:main.c        ****   tdma_tx_slot_add (mac_address&0xFFFF);
 137:main.c        **** 
 138:main.c        ****   TWI_Master_Initialise();
 139:main.c        ****   sei();
 140:main.c        ****   init_adxl345();
 141:main.c        ****   init_itg3200();
 142:main.c        ****   init_hmc5843();
 143:main.c        ****   /* initialize sequence number, used to sync with master */
 144:main.c        ****   sequenceNo = 0; 
 145:main.c        **** 
 146:main.c        ****   /* initialize tx_buf ready flag */
 147:main.c        ****   packetReady = false;
 148:main.c        ****   
 149:main.c        ****   nrk_init();
 150:main.c        **** 
 151:main.c        ****   mac_address = CLIENT_MAC;
 152:main.c        **** 
 153:main.c        ****   nrk_led_clr(ORANGE_LED);
 154:main.c        ****   nrk_led_clr(BLUE_LED);
 155:main.c        ****   nrk_led_clr(GREEN_LED);
 156:main.c        ****   nrk_led_clr(RED_LED);
 157:main.c        ****  
 158:main.c        ****   nrk_time_set(0,0);
 159:main.c        ****   nrk_create_taskset();
 160:main.c        ****   nrk_start();
 161:main.c        ****   
 162:main.c        ****   return 0;
 163:main.c        **** }
 164:main.c        **** 
 165:main.c        **** void init_itg3200() {
 166:main.c        ****     /* put in standby mode while we change fifo control bits */
 167:main.c        ****   i2c_buf[0] = ITG3200_ADDRESS | FALSE<<TWI_READ_BIT;
 168:main.c        ****   i2c_buf[1] = ITG3200_REGISTER_DLPF;
 169:main.c        ****   i2c_buf[2] = ITG3200_FULLSCALE | ITG3200_42HZ;
 170:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 171:main.c        **** }
 172:main.c        **** 
 173:main.c        **** void init_hmc5843() {
 174:main.c        ****     /* put in standby mode while we change fifo control bits */
 175:main.c        ****   i2c_buf[0] = HMC5843_ADDRESS | FALSE<<TWI_READ_BIT;
 176:main.c        ****   i2c_buf[1] = HMC5843_REGISTER_MEASMODE;
 177:main.c        ****   i2c_buf[2] = HMC5843_MEASMODE_CONT;
 178:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 179:main.c        **** }
 180:main.c        **** 
 181:main.c        **** 
 182:main.c        **** void init_adxl345() {
 183:main.c        ****   unsigned int read = 0;
 184:main.c        **** 
 185:main.c        ****   /* put in standby mode while we change fifo control bits */
 186:main.c        ****   i2c_buf[0] = ADXL345_ADDRESS | FALSE<<TWI_READ_BIT;
 187:main.c        ****   i2c_buf[1] = ADXL_REGISTER_PWRCTL;
 188:main.c        ****   i2c_buf[2] = ADXL_PWRCTL_STBY;
 189:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 190:main.c        **** 
 191:main.c        ****   /* set the fifo mode to stream */
 192:main.c        ****   i2c_buf[0] = ADXL345_ADDRESS | FALSE<<TWI_READ_BIT;
 193:main.c        ****   i2c_buf[1] = ADXL_REGISTER_FIFOCTL;
 194:main.c        ****   i2c_buf[2] = ADXL_FIFOCTL_STREAM;
 195:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf,3);
 196:main.c        **** 
 197:main.c        ****   /* set data format to full resolution +-16g */
 198:main.c        ****   i2c_buf[0] = ADXL345_ADDRESS | FALSE<<TWI_READ_BIT;
 199:main.c        ****   i2c_buf[1] = ADXL_REGISTER_DTFMT;
 200:main.c        ****   i2c_buf[2] = ADXL_16G_DTFMT;
 201:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf,3);
 202:main.c        **** 
 203:main.c        ****   /* set to measure mode */
 204:main.c        ****   i2c_buf[0] = ADXL345_ADDRESS | FALSE<<TWI_READ_BIT;
 205:main.c        ****   i2c_buf[1] = ADXL_REGISTER_PWRCTL;
 206:main.c        ****   i2c_buf[2] = ADXL_PWRCTL_MEASURE;
 207:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 208:main.c        **** }
 209:main.c        **** 
 210:main.c        **** void task_imu(){
 342               	.LM0:
 343               	.LFBB1:
 344 0000 CF93      		push r28
 345 0002 DF93      		push r29
 346 0004 00D0      		rcall .
 347 0006 CDB7      		in r28,__SP_L__
 348 0008 DEB7      		in r29,__SP_H__
 349               	/* prologue: function */
 350               	/* frame size = 2 */
 351               	/* stack size = 4 */
 352               	.L__stack_usage = 4
 211:main.c        ****   unsigned int i;
 212:main.c        ****   unsigned int count;
 213:main.c        ****   int v;
 214:main.c        ****   
 215:main.c        ****   while(1){
 216:main.c        ****     packetReady = false;
 217:main.c        ****     i = 0;
 218:main.c        ****     tx_buf[i++] = NODE_ADDR;
 354               	.LM1:
 355 000a 11E0      		ldi r17,lo8(1)
 219:main.c        ****     tx_buf[i++] = sequenceNo++;
 220:main.c        ****     
 221:main.c        ****     i2c_buf[0] = (ADXL345_ADDRESS) | (FALSE<<TWI_READ_BIT);
 357               	.LM2:
 358 000c 86EA      		ldi r24,lo8(-90)
 359 000e F82E      		mov r15,r24
 222:main.c        ****     i2c_buf[1] = ADXL345_REGISTER_XLSB;
 361               	.LM3:
 362 0010 92E3      		ldi r25,lo8(50)
 363 0012 E92E      		mov r14,r25
 223:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 224:main.c        **** 
 225:main.c        **** 
 226:main.c        ****     /* Read first byte */
 227:main.c        ****     i2c_buf[0] = (ADXL345_ADDRESS) | (TRUE<<TWI_READ_BIT);
 365               	.LM4:
 366 0014 27EA      		ldi r18,lo8(-89)
 367 0016 D22E      		mov r13,r18
 228:main.c        **** 
 229:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 230:main.c        ****     TWI_Get_Data_From_Transceiver(i2c_buf,7);
 231:main.c        ****     for (count = 0; count < ADXL_SIZE; count++){
 232:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 233:main.c        ****     }
 234:main.c        **** 
 235:main.c        ****     i2c_buf[0] = (ITG3200_ADDRESS) | (FALSE<<TWI_READ_BIT);
 369               	.LM5:
 370 0018 30ED      		ldi r19,lo8(-48)
 371 001a C32E      		mov r12,r19
 236:main.c        ****     i2c_buf[1] = ITG3200_REGISTER_XMSB;
 373               	.LM6:
 374 001c 4DE1      		ldi r20,lo8(29)
 375 001e B42E      		mov r11,r20
 237:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 238:main.c        **** 
 239:main.c        ****     /* Read first byte */
 240:main.c        ****     i2c_buf[0] = (ITG3200_ADDRESS) | (TRUE<<TWI_READ_BIT);
 377               	.LM7:
 378 0020 51ED      		ldi r21,lo8(-47)
 379 0022 A52E      		mov r10,r21
 241:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 242:main.c        ****     TWI_Get_Data_From_Transceiver(i2c_buf,7);
 243:main.c        ****     for (count = 0; count < ITG3200_SIZE; count++){
 244:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 245:main.c        ****     }
 246:main.c        **** 
 247:main.c        ****     i2c_buf[0] = (HMC5843_ADDRESS) | (FALSE<<TWI_READ_BIT);
 381               	.LM8:
 382 0024 6CE3      		ldi r22,lo8(60)
 383 0026 962E      		mov r9,r22
 248:main.c        ****     i2c_buf[1] = HMC5843_REGISTER_XMSB;
 385               	.LM9:
 386 0028 73E0      		ldi r23,lo8(3)
 387 002a 872E      		mov r8,r23
 249:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 250:main.c        **** 
 251:main.c        ****     /* Read first byte */
 252:main.c        ****     i2c_buf[0] = (HMC5843_ADDRESS) | (TRUE<<TWI_READ_BIT);
 389               	.LM10:
 390 002c EDE3      		ldi r30,lo8(61)
 391 002e 7E2E      		mov r7,r30
 253:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 254:main.c        ****     TWI_Get_Data_From_Transceiver(i2c_buf,7);
 255:main.c        ****     for (count = 0; count < HMC5843_SIZE; count++){
 256:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 257:main.c        ****     }
 258:main.c        ****     tx_len = i;
 393               	.LM11:
 394 0030 04E1      		ldi r16,lo8(20)
 395               	.L5:
 216:main.c        ****     i = 0;
 397               	.LM12:
 398 0032 1092 0000 		sts packetReady,__zero_reg__
 218:main.c        ****     tx_buf[i++] = sequenceNo++;
 400               	.LM13:
 401 0036 1093 0000 		sts tx_buf,r17
 219:main.c        ****     
 403               	.LM14:
 404 003a 8091 0000 		lds r24,sequenceNo
 405 003e 9091 0000 		lds r25,sequenceNo+1
 406 0042 9C01      		movw r18,r24
 407 0044 2F5F      		subi r18,-1
 408 0046 3F4F      		sbci r19,-1
 409 0048 3093 0000 		sts sequenceNo+1,r19
 410 004c 2093 0000 		sts sequenceNo,r18
 411 0050 8093 0000 		sts tx_buf+1,r24
 221:main.c        ****     i2c_buf[1] = ADXL345_REGISTER_XLSB;
 413               	.LM15:
 414 0054 F092 0000 		sts i2c_buf,r15
 222:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 416               	.LM16:
 417 0058 E092 0000 		sts i2c_buf+1,r14
 223:main.c        **** 
 419               	.LM17:
 420 005c 62E0      		ldi r22,lo8(2)
 421 005e 80E0      		ldi r24,lo8(i2c_buf)
 422 0060 90E0      		ldi r25,hi8(i2c_buf)
 423 0062 0E94 0000 		call TWI_Start_Transceiver_With_Data
 227:main.c        **** 
 425               	.LM18:
 426 0066 D092 0000 		sts i2c_buf,r13
 229:main.c        ****     TWI_Get_Data_From_Transceiver(i2c_buf,7);
 428               	.LM19:
 429 006a 67E0      		ldi r22,lo8(7)
 430 006c 80E0      		ldi r24,lo8(i2c_buf)
 431 006e 90E0      		ldi r25,hi8(i2c_buf)
 432 0070 0E94 0000 		call TWI_Start_Transceiver_With_Data
 230:main.c        ****     for (count = 0; count < ADXL_SIZE; count++){
 434               	.LM20:
 435 0074 67E0      		ldi r22,lo8(7)
 436 0076 80E0      		ldi r24,lo8(i2c_buf)
 437 0078 90E0      		ldi r25,hi8(i2c_buf)
 438 007a 0E94 0000 		call TWI_Get_Data_From_Transceiver
 219:main.c        ****     
 440               	.LM21:
 441 007e 82E0      		ldi r24,lo8(2)
 442 0080 90E0      		ldi r25,0
 443               	.L2:
 232:main.c        ****     }
 445               	.LM22:
 446 0082 2C01      		movw r4,r24
 447 0084 2FEF      		ldi r18,-1
 448 0086 421A      		sub r4,r18
 449 0088 520A      		sbc r5,r18
 450 008a FC01      		movw r30,r24
 451 008c E050      		subi r30,lo8(-(i2c_buf-1))
 452 008e F040      		sbci r31,hi8(-(i2c_buf-1))
 453 0090 2081      		ld r18,Z
 454 0092 FC01      		movw r30,r24
 455 0094 E050      		subi r30,lo8(-(tx_buf))
 456 0096 F040      		sbci r31,hi8(-(tx_buf))
 457 0098 2083      		st Z,r18
 458 009a C201      		movw r24,r4
 231:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 460               	.LM23:
 461 009c 8830      		cpi r24,8
 462 009e 9105      		cpc r25,__zero_reg__
 463 00a0 01F4      		brne .L2
 235:main.c        ****     i2c_buf[1] = ITG3200_REGISTER_XMSB;
 465               	.LM24:
 466 00a2 C092 0000 		sts i2c_buf,r12
 236:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 468               	.LM25:
 469 00a6 B092 0000 		sts i2c_buf+1,r11
 237:main.c        **** 
 471               	.LM26:
 472 00aa 62E0      		ldi r22,lo8(2)
 473 00ac 80E0      		ldi r24,lo8(i2c_buf)
 474 00ae 90E0      		ldi r25,hi8(i2c_buf)
 475 00b0 0E94 0000 		call TWI_Start_Transceiver_With_Data
 240:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 477               	.LM27:
 478 00b4 A092 0000 		sts i2c_buf,r10
 241:main.c        ****     TWI_Get_Data_From_Transceiver(i2c_buf,7);
 480               	.LM28:
 481 00b8 67E0      		ldi r22,lo8(7)
 482 00ba 80E0      		ldi r24,lo8(i2c_buf)
 483 00bc 90E0      		ldi r25,hi8(i2c_buf)
 484 00be 0E94 0000 		call TWI_Start_Transceiver_With_Data
 242:main.c        ****     for (count = 0; count < ITG3200_SIZE; count++){
 486               	.LM29:
 487 00c2 67E0      		ldi r22,lo8(7)
 488 00c4 80E0      		ldi r24,lo8(i2c_buf)
 489 00c6 90E0      		ldi r25,hi8(i2c_buf)
 490 00c8 0E94 0000 		call TWI_Get_Data_From_Transceiver
 491               	.L3:
 244:main.c        ****     }
 493               	.LM30:
 494 00cc 9201      		movw r18,r4
 495 00ce 2F5F      		subi r18,-1
 496 00d0 3F4F      		sbci r19,-1
 497 00d2 F201      		movw r30,r4
 498 00d4 E050      		subi r30,lo8(-(i2c_buf-7))
 499 00d6 F040      		sbci r31,hi8(-(i2c_buf-7))
 500 00d8 8081      		ld r24,Z
 501 00da F201      		movw r30,r4
 502 00dc E050      		subi r30,lo8(-(tx_buf))
 503 00de F040      		sbci r31,hi8(-(tx_buf))
 504 00e0 8083      		st Z,r24
 505 00e2 2901      		movw r4,r18
 243:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 507               	.LM31:
 508 00e4 2E30      		cpi r18,14
 509 00e6 3105      		cpc r19,__zero_reg__
 510 00e8 01F4      		brne .L3
 247:main.c        ****     i2c_buf[1] = HMC5843_REGISTER_XMSB;
 512               	.LM32:
 513 00ea 9092 0000 		sts i2c_buf,r9
 248:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 515               	.LM33:
 516 00ee 8092 0000 		sts i2c_buf+1,r8
 249:main.c        **** 
 518               	.LM34:
 519 00f2 62E0      		ldi r22,lo8(2)
 520 00f4 80E0      		ldi r24,lo8(i2c_buf)
 521 00f6 90E0      		ldi r25,hi8(i2c_buf)
 522 00f8 2983      		std Y+1,r18
 523 00fa 3A83      		std Y+2,r19
 524 00fc 0E94 0000 		call TWI_Start_Transceiver_With_Data
 252:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 526               	.LM35:
 527 0100 7092 0000 		sts i2c_buf,r7
 253:main.c        ****     TWI_Get_Data_From_Transceiver(i2c_buf,7);
 529               	.LM36:
 530 0104 67E0      		ldi r22,lo8(7)
 531 0106 80E0      		ldi r24,lo8(i2c_buf)
 532 0108 90E0      		ldi r25,hi8(i2c_buf)
 533 010a 0E94 0000 		call TWI_Start_Transceiver_With_Data
 254:main.c        ****     for (count = 0; count < HMC5843_SIZE; count++){
 535               	.LM37:
 536 010e 67E0      		ldi r22,lo8(7)
 537 0110 80E0      		ldi r24,lo8(i2c_buf)
 538 0112 90E0      		ldi r25,hi8(i2c_buf)
 539 0114 0E94 0000 		call TWI_Get_Data_From_Transceiver
 540 0118 3A81      		ldd r19,Y+2
 541 011a 2981      		ldd r18,Y+1
 542               	.L4:
 543 011c F901      		movw r30,r18
 544 011e E050      		subi r30,lo8(-(i2c_buf-13))
 545 0120 F040      		sbci r31,hi8(-(i2c_buf-13))
 256:main.c        ****     }
 547               	.LM38:
 548 0122 8081      		ld r24,Z
 549 0124 F901      		movw r30,r18
 550 0126 E050      		subi r30,lo8(-(tx_buf))
 551 0128 F040      		sbci r31,hi8(-(tx_buf))
 552 012a 8083      		st Z,r24
 553 012c 2F5F      		subi r18,-1
 554 012e 3F4F      		sbci r19,-1
 255:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 556               	.LM39:
 557 0130 2431      		cpi r18,20
 558 0132 3105      		cpc r19,__zero_reg__
 559 0134 01F4      		brne .L4
 561               	.LM40:
 562 0136 0093 0000 		sts tx_len,r16
 259:main.c        ****     packetReady = true;
 564               	.LM41:
 565 013a 1093 0000 		sts packetReady,r17
 260:main.c        ****     nrk_wait_until_next_period();
 567               	.LM42:
 568 013e 0E94 0000 		call nrk_wait_until_next_period
 261:main.c        ****   }
 570               	.LM43:
 571 0142 00C0      		rjmp .L5
 573               	.Lscope1:
 575               		.stabd	78,0,0
 576               		.section	.rodata.str1.1,"aMS",@progbits,1
 577               	.LC0:
 578 0000 5478 2054 		.string	"Tx Task PID=%u\r\n"
 578      6173 6B20 
 578      5049 443D 
 578      2575 0D0A 
 578      00
 579               	.LC1:
 580 0011 7061 636B 		.string	"packet sending error!\r"
 580      6574 2073 
 580      656E 6469 
 580      6E67 2065 
 580      7272 6F72 
 581               		.text
 583               	.global	tx_task
 585               	tx_task:
 586               		.stabd	46,0,0
 262:main.c        **** }
 263:main.c        **** 
 264:main.c        **** 
 265:main.c        **** void tx_task ()
 266:main.c        **** {
 588               	.LM44:
 589               	.LFBB2:
 590 0144 CF93      		push r28
 591 0146 DF93      		push r29
 592 0148 CDB7      		in r28,__SP_L__
 593 014a DEB7      		in r29,__SP_H__
 594 014c 2897      		sbiw r28,8
 595 014e 0FB6      		in __tmp_reg__,__SREG__
 596 0150 F894      		cli
 597 0152 DEBF      		out __SP_H__,r29
 598 0154 0FBE      		out __SREG__,__tmp_reg__
 599 0156 CDBF      		out __SP_L__,r28
 600               	/* prologue: function */
 601               	/* frame size = 8 */
 602               	/* stack size = 10 */
 603               	.L__stack_usage = 10
 267:main.c        ****   int8_t v;
 268:main.c        ****   uint8_t cnt;
 269:main.c        ****   nrk_time_t t;
 270:main.c        **** 
 271:main.c        **** 
 272:main.c        ****   printf ("Tx Task PID=%u\r\n", nrk_get_pid ());
 605               	.LM45:
 606 0158 0E94 0000 		call nrk_get_pid
 607 015c 1F92      		push __zero_reg__
 608 015e 8F93      		push r24
 609 0160 80E0      		ldi r24,lo8(.LC0)
 610 0162 90E0      		ldi r25,hi8(.LC0)
 611 0164 9F93      		push r25
 612 0166 8F93      		push r24
 613 0168 0E94 0000 		call printf
 273:main.c        ****   t.secs = 5;
 615               	.LM46:
 616 016c 85E0      		ldi r24,lo8(5)
 617 016e 90E0      		ldi r25,0
 618 0170 A0E0      		ldi r26,0
 619 0172 B0E0      		ldi r27,0
 620 0174 8983      		std Y+1,r24
 621 0176 9A83      		std Y+2,r25
 622 0178 AB83      		std Y+3,r26
 623 017a BC83      		std Y+4,r27
 274:main.c        ****   t.nano_secs = 0;
 625               	.LM47:
 626 017c 1D82      		std Y+5,__zero_reg__
 627 017e 1E82      		std Y+6,__zero_reg__
 628 0180 1F82      		std Y+7,__zero_reg__
 629 0182 1886      		std Y+8,__zero_reg__
 275:main.c        **** 
 276:main.c        ****   // // setup a software watch dog timer
 277:main.c        ****   nrk_sw_wdt_init(0, &t, NULL);
 631               	.LM48:
 632 0184 40E0      		ldi r20,0
 633 0186 50E0      		ldi r21,0
 634 0188 BE01      		movw r22,r28
 635 018a 6F5F      		subi r22,-1
 636 018c 7F4F      		sbci r23,-1
 637 018e 80E0      		ldi r24,0
 638 0190 90E0      		ldi r25,0
 639 0192 0E94 0000 		call nrk_sw_wdt_init
 278:main.c        ****   nrk_sw_wdt_start(0);
 641               	.LM49:
 642 0196 80E0      		ldi r24,0
 643 0198 90E0      		ldi r25,0
 644 019a 0E94 0000 		call nrk_sw_wdt_start
 279:main.c        **** 
 280:main.c        **** 
 281:main.c        ****   while (!tdma_started())
 646               	.LM50:
 647 019e 0F90      		pop __tmp_reg__
 648 01a0 0F90      		pop __tmp_reg__
 649 01a2 0F90      		pop __tmp_reg__
 650 01a4 0F90      		pop __tmp_reg__
 651               	.L11:
 652 01a6 0E94 0000 		call tdma_started
 653 01aa 8111      		cpse r24,__zero_reg__
 654 01ac 00C0      		rjmp .L14
 282:main.c        ****     nrk_wait_until_next_period ();
 656               	.LM51:
 657 01ae 0E94 0000 		call nrk_wait_until_next_period
 658 01b2 00C0      		rjmp .L11
 659               	.L13:
 660               	.LBB2:
 283:main.c        **** 
 284:main.c        ****   cnt = 0;
 285:main.c        **** 
 286:main.c        ****   while (1) {
 287:main.c        ****     // Update watchdog timer
 288:main.c        ****     nrk_sw_wdt_update(0);
 289:main.c        ****     nrk_led_set(RED_LED);
 290:main.c        **** 
 291:main.c        ****     // if sensor data hasn't been gathered yet
 292:main.c        ****     if (!packetReady)
 293:main.c        ****      nrk_wait_until_next_period();
 294:main.c        ****     
 295:main.c        ****     nrk_led_clr(RED_LED);
 662               	.LM52:
 663 01b4 80E0      		ldi r24,0
 664 01b6 90E0      		ldi r25,0
 665 01b8 0E94 0000 		call nrk_led_clr
 296:main.c        ****     v = tdma_send (&tx_tdma_fd, &tx_buf, tx_len, TDMA_BLOCKING);
 667               	.LM53:
 668 01bc 20E0      		ldi r18,0
 669 01be 4091 0000 		lds r20,tx_len
 670 01c2 60E0      		ldi r22,lo8(tx_buf)
 671 01c4 70E0      		ldi r23,hi8(tx_buf)
 672 01c6 80E0      		ldi r24,lo8(tx_tdma_fd)
 673 01c8 90E0      		ldi r25,hi8(tx_tdma_fd)
 674 01ca 0E94 0000 		call tdma_send
 297:main.c        ****     if (v == NRK_OK) {
 676               	.LM54:
 677 01ce 8130      		cpi r24,lo8(1)
 678 01d0 01F0      		breq .L14
 298:main.c        ****       //nrk_kprintf (PSTR ("App tx_buf Sent\r\n"));
 299:main.c        ****       //for (int i = 0; i < tx_len; i++){
 300:main.c        ****         //printf("%d",tx_buf[i]);
 301:main.c        ****       //}
 302:main.c        ****       //printf("\n");
 303:main.c        ****     }
 304:main.c        ****     else
 305:main.c        ****       printf("packet sending error!\r\n");
 680               	.LM55:
 681 01d2 80E0      		ldi r24,lo8(.LC1)
 682 01d4 90E0      		ldi r25,hi8(.LC1)
 683 01d6 0E94 0000 		call puts
 684               	.L14:
 288:main.c        ****     nrk_led_set(RED_LED);
 686               	.LM56:
 687 01da 80E0      		ldi r24,0
 688 01dc 90E0      		ldi r25,0
 689 01de 0E94 0000 		call nrk_sw_wdt_update
 289:main.c        **** 
 691               	.LM57:
 692 01e2 80E0      		ldi r24,0
 693 01e4 90E0      		ldi r25,0
 694 01e6 0E94 0000 		call nrk_led_set
 292:main.c        ****      nrk_wait_until_next_period();
 696               	.LM58:
 697 01ea 8091 0000 		lds r24,packetReady
 698 01ee 8111      		cpse r24,__zero_reg__
 699 01f0 00C0      		rjmp .L13
 293:main.c        ****     
 701               	.LM59:
 702 01f2 0E94 0000 		call nrk_wait_until_next_period
 703 01f6 00C0      		rjmp .L13
 704               	.LBE2:
 709               	.Lscope2:
 711               		.stabd	78,0,0
 712               		.section	.rodata.str1.1
 713               	.LC2:
 714 0028 2563 200A 		.string	"%c \n"
 714      00
 715               		.text
 718               	.global	TWI_Act_On_Failure_In_Last_Transmission
 720               	TWI_Act_On_Failure_In_Last_Transmission:
 721               		.stabd	46,0,0
  88:main.c        ****                     // A failure has occurred, use TWIerrorMsg to determine the nature of the failu
 723               	.LM60:
 724               	.LFBB3:
 725 01f8 CF93      		push r28
 726               	/* prologue: function */
 727               	/* frame size = 0 */
 728               	/* stack size = 1 */
 729               	.L__stack_usage = 1
 730 01fa C82F      		mov r28,r24
  95:main.c        ****     TWI_Start_Transceiver();
 732               	.LM61:
 733 01fc 8834      		cpi r24,lo8(72)
 734 01fe 01F0      		breq .L23
 735 0200 8032      		cpi r24,lo8(32)
 736 0202 01F4      		brne .L19
 737               	.L23:
  96:main.c        **** }
 739               	.LM62:
 740 0204 0E94 0000 		call TWI_Start_Transceiver
 741               	.L19:
  98:main.c        ****     
 743               	.LM63:
 744 0208 1F92      		push __zero_reg__
 745 020a CF93      		push r28
 746 020c 80E0      		ldi r24,lo8(.LC2)
 747 020e 90E0      		ldi r25,hi8(.LC2)
 748 0210 9F93      		push r25
 749 0212 8F93      		push r24
 750 0214 0E94 0000 		call printf
 100:main.c        **** }
 752               	.LM64:
 753 0218 0F90      		pop __tmp_reg__
 754 021a 0F90      		pop __tmp_reg__
 755 021c 0F90      		pop __tmp_reg__
 756 021e 0F90      		pop __tmp_reg__
 101:main.c        **** 
 758               	.LM65:
 759 0220 8C2F      		mov r24,r28
 760               	/* epilogue start */
 761 0222 CF91      		pop r28
 762 0224 0895      		ret
 764               	.Lscope3:
 766               		.stabd	78,0,0
 768               	.global	init_itg3200
 770               	init_itg3200:
 771               		.stabd	46,0,0
 165:main.c        ****     /* put in standby mode while we change fifo control bits */
 773               	.LM66:
 774               	.LFBB4:
 775               	/* prologue: function */
 776               	/* frame size = 0 */
 777               	/* stack size = 0 */
 778               	.L__stack_usage = 0
 167:main.c        ****   i2c_buf[1] = ITG3200_REGISTER_DLPF;
 780               	.LM67:
 781 0226 E0E0      		ldi r30,lo8(i2c_buf)
 782 0228 F0E0      		ldi r31,hi8(i2c_buf)
 783 022a 80ED      		ldi r24,lo8(-48)
 784 022c 8083      		st Z,r24
 168:main.c        ****   i2c_buf[2] = ITG3200_FULLSCALE | ITG3200_42HZ;
 786               	.LM68:
 787 022e 86E1      		ldi r24,lo8(22)
 788 0230 8183      		std Z+1,r24
 169:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 790               	.LM69:
 791 0232 8BE1      		ldi r24,lo8(27)
 792 0234 8283      		std Z+2,r24
 170:main.c        **** }
 794               	.LM70:
 795 0236 63E0      		ldi r22,lo8(3)
 796 0238 CF01      		movw r24,r30
 797 023a 0C94 0000 		jmp TWI_Start_Transceiver_With_Data
 799               	.Lscope4:
 801               		.stabd	78,0,0
 803               	.global	init_hmc5843
 805               	init_hmc5843:
 806               		.stabd	46,0,0
 173:main.c        ****     /* put in standby mode while we change fifo control bits */
 808               	.LM71:
 809               	.LFBB5:
 810               	/* prologue: function */
 811               	/* frame size = 0 */
 812               	/* stack size = 0 */
 813               	.L__stack_usage = 0
 175:main.c        ****   i2c_buf[1] = HMC5843_REGISTER_MEASMODE;
 815               	.LM72:
 816 023e E0E0      		ldi r30,lo8(i2c_buf)
 817 0240 F0E0      		ldi r31,hi8(i2c_buf)
 818 0242 8CE3      		ldi r24,lo8(60)
 819 0244 8083      		st Z,r24
 176:main.c        ****   i2c_buf[2] = HMC5843_MEASMODE_CONT;
 821               	.LM73:
 822 0246 82E0      		ldi r24,lo8(2)
 823 0248 8183      		std Z+1,r24
 177:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 825               	.LM74:
 826 024a 1282      		std Z+2,__zero_reg__
 178:main.c        **** }
 828               	.LM75:
 829 024c 63E0      		ldi r22,lo8(3)
 830 024e CF01      		movw r24,r30
 831 0250 0C94 0000 		jmp TWI_Start_Transceiver_With_Data
 833               	.Lscope5:
 835               		.stabd	78,0,0
 837               	.global	init_adxl345
 839               	init_adxl345:
 840               		.stabd	46,0,0
 182:main.c        ****   unsigned int read = 0;
 842               	.LM76:
 843               	.LFBB6:
 844 0254 0F93      		push r16
 845 0256 1F93      		push r17
 846 0258 CF93      		push r28
 847 025a DF93      		push r29
 848               	/* prologue: function */
 849               	/* frame size = 0 */
 850               	/* stack size = 4 */
 851               	.L__stack_usage = 4
 186:main.c        ****   i2c_buf[1] = ADXL_REGISTER_PWRCTL;
 853               	.LM77:
 854 025c C0E0      		ldi r28,lo8(i2c_buf)
 855 025e D0E0      		ldi r29,hi8(i2c_buf)
 856 0260 16EA      		ldi r17,lo8(-90)
 857 0262 1883      		st Y,r17
 187:main.c        ****   i2c_buf[2] = ADXL_PWRCTL_STBY;
 859               	.LM78:
 860 0264 0DE2      		ldi r16,lo8(45)
 861 0266 0983      		std Y+1,r16
 188:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 863               	.LM79:
 864 0268 1A82      		std Y+2,__zero_reg__
 189:main.c        **** 
 866               	.LM80:
 867 026a 63E0      		ldi r22,lo8(3)
 868 026c CE01      		movw r24,r28
 869 026e 0E94 0000 		call TWI_Start_Transceiver_With_Data
 192:main.c        ****   i2c_buf[1] = ADXL_REGISTER_FIFOCTL;
 871               	.LM81:
 872 0272 1883      		st Y,r17
 193:main.c        ****   i2c_buf[2] = ADXL_FIFOCTL_STREAM;
 874               	.LM82:
 875 0274 88E3      		ldi r24,lo8(56)
 876 0276 8983      		std Y+1,r24
 194:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf,3);
 878               	.LM83:
 879 0278 80E8      		ldi r24,lo8(-128)
 880 027a 8A83      		std Y+2,r24
 195:main.c        **** 
 882               	.LM84:
 883 027c 63E0      		ldi r22,lo8(3)
 884 027e CE01      		movw r24,r28
 885 0280 0E94 0000 		call TWI_Start_Transceiver_With_Data
 198:main.c        ****   i2c_buf[1] = ADXL_REGISTER_DTFMT;
 887               	.LM85:
 888 0284 1883      		st Y,r17
 199:main.c        ****   i2c_buf[2] = ADXL_16G_DTFMT;
 890               	.LM86:
 891 0286 81E3      		ldi r24,lo8(49)
 892 0288 8983      		std Y+1,r24
 200:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf,3);
 894               	.LM87:
 895 028a 8FE0      		ldi r24,lo8(15)
 896 028c 8A83      		std Y+2,r24
 201:main.c        **** 
 898               	.LM88:
 899 028e 63E0      		ldi r22,lo8(3)
 900 0290 CE01      		movw r24,r28
 901 0292 0E94 0000 		call TWI_Start_Transceiver_With_Data
 204:main.c        ****   i2c_buf[1] = ADXL_REGISTER_PWRCTL;
 903               	.LM89:
 904 0296 1883      		st Y,r17
 205:main.c        ****   i2c_buf[2] = ADXL_PWRCTL_MEASURE;
 906               	.LM90:
 907 0298 0983      		std Y+1,r16
 206:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 909               	.LM91:
 910 029a 88E0      		ldi r24,lo8(8)
 911 029c 8A83      		std Y+2,r24
 207:main.c        **** }
 913               	.LM92:
 914 029e 63E0      		ldi r22,lo8(3)
 915 02a0 CE01      		movw r24,r28
 916               	/* epilogue start */
 208:main.c        **** 
 918               	.LM93:
 919 02a2 DF91      		pop r29
 920 02a4 CF91      		pop r28
 921 02a6 1F91      		pop r17
 922 02a8 0F91      		pop r16
 207:main.c        **** }
 924               	.LM94:
 925 02aa 0C94 0000 		jmp TWI_Start_Transceiver_With_Data
 927               	.Lscope6:
 929               		.stabd	78,0,0
 931               	.global	nrk_create_taskset
 933               	nrk_create_taskset:
 934               		.stabd	46,0,0
 306:main.c        ****   }
 307:main.c        **** }
 308:main.c        **** 
 309:main.c        **** 
 310:main.c        **** 
 311:main.c        **** void
 312:main.c        **** nrk_create_taskset()
 313:main.c        **** {
 936               	.LM95:
 937               	.LFBB7:
 938 02ae CF92      		push r12
 939 02b0 DF92      		push r13
 940 02b2 EF92      		push r14
 941 02b4 FF92      		push r15
 942 02b6 CF93      		push r28
 943               	/* prologue: function */
 944               	/* frame size = 0 */
 945               	/* stack size = 5 */
 946               	.L__stack_usage = 5
 314:main.c        ****   nrk_task_set_entry_function( &TaskOne, task_imu);
 948               	.LM96:
 949 02b8 60E0      		ldi r22,lo8(gs(task_imu))
 950 02ba 70E0      		ldi r23,hi8(gs(task_imu))
 951 02bc 80E0      		ldi r24,lo8(TaskOne)
 952 02be 90E0      		ldi r25,hi8(TaskOne)
 953 02c0 0E94 0000 		call nrk_task_set_entry_function
 315:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 955               	.LM97:
 956 02c4 40E8      		ldi r20,lo8(-128)
 957 02c6 50E0      		ldi r21,0
 958 02c8 60E0      		ldi r22,lo8(Stack1)
 959 02ca 70E0      		ldi r23,hi8(Stack1)
 960 02cc 80E0      		ldi r24,lo8(TaskOne)
 961 02ce 90E0      		ldi r25,hi8(TaskOne)
 962 02d0 0E94 0000 		call nrk_task_set_stk
 316:main.c        ****   TaskOne.prio = 1;
 964               	.LM98:
 965 02d4 E0E0      		ldi r30,lo8(TaskOne)
 966 02d6 F0E0      		ldi r31,hi8(TaskOne)
 967 02d8 C1E0      		ldi r28,lo8(1)
 968 02da C087      		std Z+8,r28
 317:main.c        ****   TaskOne.FirstActivation = TRUE;
 970               	.LM99:
 971 02dc C783      		std Z+7,r28
 318:main.c        ****   TaskOne.Type = BASIC_TASK;
 973               	.LM100:
 974 02de C187      		std Z+9,r28
 319:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 976               	.LM101:
 977 02e0 C287      		std Z+10,r28
 320:main.c        ****   TaskOne.period.secs = 0;
 979               	.LM102:
 980 02e2 1386      		std Z+11,__zero_reg__
 981 02e4 1486      		std Z+12,__zero_reg__
 982 02e6 1586      		std Z+13,__zero_reg__
 983 02e8 1686      		std Z+14,__zero_reg__
 321:main.c        ****   TaskOne.period.nano_secs = 25 * NANOS_PER_MS;
 985               	.LM103:
 986 02ea 80E4      		ldi r24,lo8(64)
 987 02ec 98E7      		ldi r25,lo8(120)
 988 02ee ADE7      		ldi r26,lo8(125)
 989 02f0 B1E0      		ldi r27,lo8(1)
 990 02f2 8787      		std Z+15,r24
 991 02f4 908B      		std Z+16,r25
 992 02f6 A18B      		std Z+17,r26
 993 02f8 B28B      		std Z+18,r27
 322:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 995               	.LM104:
 996 02fa 138A      		std Z+19,__zero_reg__
 997 02fc 148A      		std Z+20,__zero_reg__
 998 02fe 158A      		std Z+21,__zero_reg__
 999 0300 168A      		std Z+22,__zero_reg__
 323:main.c        ****   TaskOne.cpu_reserve.nano_secs = 0;
 1001               	.LM105:
 1002 0302 178A      		std Z+23,__zero_reg__
 1003 0304 108E      		std Z+24,__zero_reg__
 1004 0306 118E      		std Z+25,__zero_reg__
 1005 0308 128E      		std Z+26,__zero_reg__
 324:main.c        ****   TaskOne.offset.secs = 1;
 1007               	.LM106:
 1008 030a C12C      		mov r12,__zero_reg__
 1009 030c D12C      		mov r13,__zero_reg__
 1010 030e 7601      		movw r14,r12
 1011 0310 C394      		inc r12
 1012 0312 C38E      		std Z+27,r12
 1013 0314 D48E      		std Z+28,r13
 1014 0316 E58E      		std Z+29,r14
 1015 0318 F68E      		std Z+30,r15
 325:main.c        ****   TaskOne.offset.nano_secs= 0;
 1017               	.LM107:
 1018 031a 178E      		std Z+31,__zero_reg__
 1019 031c 10A2      		std Z+32,__zero_reg__
 1020 031e 11A2      		std Z+33,__zero_reg__
 1021 0320 12A2      		std Z+34,__zero_reg__
 326:main.c        ****   nrk_activate_task (&TaskOne);
 1023               	.LM108:
 1024 0322 CF01      		movw r24,r30
 1025 0324 0E94 0000 		call nrk_activate_task
 327:main.c        **** 
 328:main.c        ****   nrk_task_set_entry_function (&tx_task_info, tx_task);
 1027               	.LM109:
 1028 0328 60E0      		ldi r22,lo8(gs(tx_task))
 1029 032a 70E0      		ldi r23,hi8(gs(tx_task))
 1030 032c 80E0      		ldi r24,lo8(tx_task_info)
 1031 032e 90E0      		ldi r25,hi8(tx_task_info)
 1032 0330 0E94 0000 		call nrk_task_set_entry_function
 329:main.c        ****   nrk_task_set_stk (&tx_task_info, tx_task_stack, NRK_APP_STACKSIZE);
 1034               	.LM110:
 1035 0334 40E8      		ldi r20,lo8(-128)
 1036 0336 50E0      		ldi r21,0
 1037 0338 60E0      		ldi r22,lo8(tx_task_stack)
 1038 033a 70E0      		ldi r23,hi8(tx_task_stack)
 1039 033c 80E0      		ldi r24,lo8(tx_task_info)
 1040 033e 90E0      		ldi r25,hi8(tx_task_info)
 1041 0340 0E94 0000 		call nrk_task_set_stk
 330:main.c        ****   tx_task_info.prio = 2;
 1043               	.LM111:
 1044 0344 E0E0      		ldi r30,lo8(tx_task_info)
 1045 0346 F0E0      		ldi r31,hi8(tx_task_info)
 1046 0348 82E0      		ldi r24,lo8(2)
 1047 034a 8087      		std Z+8,r24
 331:main.c        ****   tx_task_info.FirstActivation = TRUE;
 1049               	.LM112:
 1050 034c C783      		std Z+7,r28
 332:main.c        ****   tx_task_info.Type = BASIC_TASK;
 1052               	.LM113:
 1053 034e C187      		std Z+9,r28
 333:main.c        ****   tx_task_info.SchType = PREEMPTIVE;
 1055               	.LM114:
 1056 0350 C287      		std Z+10,r28
 334:main.c        ****   tx_task_info.period.secs = 0;
 1058               	.LM115:
 1059 0352 1386      		std Z+11,__zero_reg__
 1060 0354 1486      		std Z+12,__zero_reg__
 1061 0356 1586      		std Z+13,__zero_reg__
 1062 0358 1686      		std Z+14,__zero_reg__
 335:main.c        ****   tx_task_info.period.nano_secs = 15 * NANOS_PER_MS;
 1064               	.LM116:
 1065 035a 80EC      		ldi r24,lo8(-64)
 1066 035c 91EE      		ldi r25,lo8(-31)
 1067 035e A4EE      		ldi r26,lo8(-28)
 1068 0360 B0E0      		ldi r27,0
 1069 0362 8787      		std Z+15,r24
 1070 0364 908B      		std Z+16,r25
 1071 0366 A18B      		std Z+17,r26
 1072 0368 B28B      		std Z+18,r27
 336:main.c        ****   tx_task_info.cpu_reserve.secs = 0;
 1074               	.LM117:
 1075 036a 138A      		std Z+19,__zero_reg__
 1076 036c 148A      		std Z+20,__zero_reg__
 1077 036e 158A      		std Z+21,__zero_reg__
 1078 0370 168A      		std Z+22,__zero_reg__
 337:main.c        ****   tx_task_info.cpu_reserve.nano_secs = 0 * NANOS_PER_MS;
 1080               	.LM118:
 1081 0372 178A      		std Z+23,__zero_reg__
 1082 0374 108E      		std Z+24,__zero_reg__
 1083 0376 118E      		std Z+25,__zero_reg__
 1084 0378 128E      		std Z+26,__zero_reg__
 338:main.c        ****   tx_task_info.offset.secs = 1;
 1086               	.LM119:
 1087 037a C38E      		std Z+27,r12
 1088 037c D48E      		std Z+28,r13
 1089 037e E58E      		std Z+29,r14
 1090 0380 F68E      		std Z+30,r15
 339:main.c        ****   tx_task_info.offset.nano_secs = 0;
 1092               	.LM120:
 1093 0382 178E      		std Z+31,__zero_reg__
 1094 0384 10A2      		std Z+32,__zero_reg__
 1095 0386 11A2      		std Z+33,__zero_reg__
 1096 0388 12A2      		std Z+34,__zero_reg__
 340:main.c        ****   nrk_activate_task (&tx_task_info);
 1098               	.LM121:
 1099 038a CF01      		movw r24,r30
 1100 038c 0E94 0000 		call nrk_activate_task
 1101               	/* epilogue start */
 341:main.c        **** 
 342:main.c        ****   tdma_task_config ();
 343:main.c        **** }
 1103               	.LM122:
 1104 0390 CF91      		pop r28
 1105 0392 FF90      		pop r15
 1106 0394 EF90      		pop r14
 1107 0396 DF90      		pop r13
 1108 0398 CF90      		pop r12
 342:main.c        **** }
 1110               	.LM123:
 1111 039a 0C94 0000 		jmp tdma_task_config
 1113               	.Lscope7:
 1115               		.stabd	78,0,0
 1116               		.section	.text.startup,"ax",@progbits
 1118               	.global	main
 1120               	main:
 1121               		.stabd	46,0,0
 127:main.c        ****   nrk_setup_ports();
 1123               	.LM124:
 1124               	.LFBB8:
 1125               	/* prologue: function */
 1126               	/* frame size = 0 */
 1127               	/* stack size = 0 */
 1128               	.L__stack_usage = 0
 128:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 1130               	.LM125:
 1131 0000 0E94 0000 		call nrk_setup_ports
 129:main.c        **** 
 1133               	.LM126:
 1134 0004 80E1      		ldi r24,lo8(16)
 1135 0006 90E0      		ldi r25,0
 1136 0008 0E94 0000 		call nrk_setup_uart
 131:main.c        **** 
 1138               	.LM127:
 1139 000c 4091 0000 		lds r20,mac_address
 1140 0010 5091 0000 		lds r21,mac_address+1
 1141 0014 6DE0      		ldi r22,lo8(13)
 1142 0016 82E0      		ldi r24,lo8(2)
 1143 0018 0E94 0000 		call tdma_init
 136:main.c        **** 
 1145               	.LM128:
 1146 001c 8091 0000 		lds r24,mac_address
 1147 0020 9091 0000 		lds r25,mac_address+1
 1148 0024 0E94 0000 		call tdma_tx_slot_add
 138:main.c        ****   sei();
 1150               	.LM129:
 1151 0028 0E94 0000 		call TWI_Master_Initialise
 139:main.c        ****   init_adxl345();
 1153               	.LM130:
 1154               	/* #APP */
 1155               	 ;  139 "main.c" 1
 1156 002c 7894      		sei
 1157               	 ;  0 "" 2
 140:main.c        ****   init_itg3200();
 1159               	.LM131:
 1160               	/* #NOAPP */
 1161 002e 0E94 0000 		call init_adxl345
 141:main.c        ****   init_hmc5843();
 1163               	.LM132:
 1164 0032 0E94 0000 		call init_itg3200
 142:main.c        ****   /* initialize sequence number, used to sync with master */
 1166               	.LM133:
 1167 0036 0E94 0000 		call init_hmc5843
 144:main.c        **** 
 1169               	.LM134:
 1170 003a 1092 0000 		sts sequenceNo+1,__zero_reg__
 1171 003e 1092 0000 		sts sequenceNo,__zero_reg__
 147:main.c        ****   
 1173               	.LM135:
 1174 0042 1092 0000 		sts packetReady,__zero_reg__
 149:main.c        **** 
 1176               	.LM136:
 1177 0046 0E94 0000 		call nrk_init
 151:main.c        **** 
 1179               	.LM137:
 1180 004a 81E0      		ldi r24,lo8(1)
 1181 004c 90E0      		ldi r25,0
 1182 004e 9093 0000 		sts mac_address+1,r25
 1183 0052 8093 0000 		sts mac_address,r24
 153:main.c        ****   nrk_led_clr(BLUE_LED);
 1185               	.LM138:
 1186 0056 82E0      		ldi r24,lo8(2)
 1187 0058 90E0      		ldi r25,0
 1188 005a 0E94 0000 		call nrk_led_clr
 154:main.c        ****   nrk_led_clr(GREEN_LED);
 1190               	.LM139:
 1191 005e 83E0      		ldi r24,lo8(3)
 1192 0060 90E0      		ldi r25,0
 1193 0062 0E94 0000 		call nrk_led_clr
 155:main.c        ****   nrk_led_clr(RED_LED);
 1195               	.LM140:
 1196 0066 81E0      		ldi r24,lo8(1)
 1197 0068 90E0      		ldi r25,0
 1198 006a 0E94 0000 		call nrk_led_clr
 156:main.c        ****  
 1200               	.LM141:
 1201 006e 80E0      		ldi r24,0
 1202 0070 90E0      		ldi r25,0
 1203 0072 0E94 0000 		call nrk_led_clr
 158:main.c        ****   nrk_create_taskset();
 1205               	.LM142:
 1206 0076 20E0      		ldi r18,0
 1207 0078 30E0      		ldi r19,0
 1208 007a A901      		movw r20,r18
 1209 007c 60E0      		ldi r22,0
 1210 007e 70E0      		ldi r23,0
 1211 0080 CB01      		movw r24,r22
 1212 0082 0E94 0000 		call nrk_time_set
 159:main.c        ****   nrk_start();
 1214               	.LM143:
 1215 0086 0E94 0000 		call nrk_create_taskset
 160:main.c        ****   
 1217               	.LM144:
 1218 008a 0E94 0000 		call nrk_start
 163:main.c        **** 
 1220               	.LM145:
 1221 008e 80E0      		ldi r24,0
 1222 0090 90E0      		ldi r25,0
 1223 0092 0895      		ret
 1225               	.Lscope8:
 1227               		.stabd	78,0,0
 1228               		.comm	tx_task_info,35,1
 1229               		.comm	tx_task_stack,128,1
 1230               		.comm	rx_task_info,35,1
 1231               		.comm	rx_task_stack,128,1
 1232               		.comm	TaskOne,35,1
 1233               		.comm	Stack1,128,1
 1234               	.global	aes_key
 1235               		.data
 1238               	aes_key:
 1239 0000 00        		.byte	0
 1240 0001 11        		.byte	17
 1241 0002 22        		.byte	34
 1242 0003 33        		.byte	51
 1243 0004 44        		.byte	68
 1244 0005 55        		.byte	85
 1245 0006 66        		.byte	102
 1246 0007 77        		.byte	119
 1247 0008 88        		.byte	-120
 1248 0009 99        		.byte	-103
 1249 000a AA        		.byte	-86
 1250 000b BB        		.byte	-69
 1251 000c CC        		.byte	-52
 1252 000d DD        		.byte	-35
 1253 000e EE        		.byte	-18
 1254 000f FF        		.byte	-1
 1255               		.comm	mac_address,2,1
 1256               		.comm	packetReady,1,1
 1257               		.comm	sequenceNo,2,1
 1258               		.comm	tx_len,1,1
 1259               		.comm	rx_buf,112,1
 1260               		.comm	tx_buf,112,1
 1261               		.comm	i2c_buf,16,1
 1262               		.comm	rx_tdma_fd,18,1
 1263               		.comm	tx_tdma_fd,18,1
 1264               		.comm	tdma_rfTxInfo,7,1
 1265               		.comm	tdma_rfRxInfo,12,1
 1266               		.comm	tdma_enable_signal,1,1
 1267               		.comm	tdma_tx_pkt_done_signal,1,1
 1268               		.comm	tdma_rx_pkt_signal,1,1
 1269               		.comm	_nrk_stats_sleep_time,8,1
 1270               		.comm	cur_task_stats,120,1
 1271               		.comm	app_timer0_prescale,1,1
 1272               		.comm	app_timer0_callback,2,1
 1273               		.comm	_nrk_time_trigger,1,1
 1274               		.comm	_nrk_prev_timer_val,1,1
 1275               		.comm	error_num,1,1
 1276               		.comm	error_task,1,1
 1277               		.comm	nrk_kernel_stk_ptr,2,1
 1278               		.comm	nrk_idle_task_stk,128,1
 1279               		.comm	_nrk_signal_list,4,1
 1312               		.text
 1314               	.Letext0:
 1315               		.ident	"GCC: (GNU) 4.9.1"
 1316               	.global __do_copy_data
 1317               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:339    .text:0000000000000000 task_imu
                            *COM*:0000000000000001 packetReady
                            *COM*:0000000000000070 tx_buf
                            *COM*:0000000000000002 sequenceNo
                            *COM*:0000000000000010 i2c_buf
                            *COM*:0000000000000001 tx_len
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:585    .text:0000000000000144 tx_task
                            *COM*:0000000000000012 tx_tdma_fd
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:720    .text:00000000000001f8 TWI_Act_On_Failure_In_Last_Transmission
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:770    .text:0000000000000226 init_itg3200
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:805    .text:000000000000023e init_hmc5843
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:839    .text:0000000000000254 init_adxl345
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:933    .text:00000000000002ae nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
                            *COM*:0000000000000023 tx_task_info
                            *COM*:0000000000000080 tx_task_stack
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:1120   .text.startup:0000000000000000 main
                            *COM*:0000000000000002 mac_address
                            *COM*:0000000000000023 rx_task_info
                            *COM*:0000000000000080 rx_task_stack
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccJewuGs.s:1238   .data:0000000000000000 aes_key
                            *COM*:0000000000000070 rx_buf
                            *COM*:0000000000000012 rx_tdma_fd
                            *COM*:0000000000000007 tdma_rfTxInfo
                            *COM*:000000000000000c tdma_rfRxInfo
                            *COM*:0000000000000001 tdma_enable_signal
                            *COM*:0000000000000001 tdma_tx_pkt_done_signal
                            *COM*:0000000000000001 tdma_rx_pkt_signal
                            *COM*:0000000000000008 _nrk_stats_sleep_time
                            *COM*:0000000000000078 cur_task_stats
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
TWI_Start_Transceiver_With_Data
TWI_Get_Data_From_Transceiver
nrk_wait_until_next_period
nrk_get_pid
printf
nrk_sw_wdt_init
nrk_sw_wdt_start
tdma_started
nrk_led_clr
tdma_send
puts
nrk_sw_wdt_update
nrk_led_set
TWI_Start_Transceiver
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
tdma_task_config
nrk_setup_ports
nrk_setup_uart
tdma_init
tdma_tx_slot_add
TWI_Master_Initialise
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
