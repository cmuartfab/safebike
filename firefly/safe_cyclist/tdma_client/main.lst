   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 337               	.global	task_imu
 339               	task_imu:
 340               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** #include <nrk.h>
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <hal.h>
  29:main.c        **** #include <nrk_error.h>
  30:main.c        **** #include <nrk_timer.h>
  31:main.c        **** #include <nrk_stack_check.h>
  32:main.c        **** #include <nrk_stats.h>
  33:main.c        **** #include <pcf_tdma.h>
  34:main.c        **** #include <TWI_Master.h>
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** // Constants for the accelrometer
  38:main.c        **** //There are 6 data registers, they are sequential starting 
  39:main.c        **** //with the LSB of X.  We'll read all 6 in a burst and won't
  40:main.c        **** //address them individually
  41:main.c        **** #define ADXL345_REGISTER_XLSB 0x32
  42:main.c        **** 
  43:main.c        **** //Need to set power control bit to wake up the adxl345
  44:main.c        **** #define ADXL_REGISTER_PWRCTL 0x2D
  45:main.c        **** #define ADXL_REGISTER_FIFOCTL 0x38
  46:main.c        **** #define ADXL_FIFOCTL_STREAM 1<<7
  47:main.c        **** #define ADXL_PWRCTL_MEASURE 1 << 3
  48:main.c        **** #define ADXL_PWRCTL_STBY 0
  49:main.c        **** #define ADXL345_ADDRESS 0xA6
  50:main.c        **** #define ADXL_SIZE 6
  51:main.c        **** 
  52:main.c        **** 
  53:main.c        **** //Constants for the gyroscope
  54:main.c        **** #define ITG3200_ADDRESS 0xD0
  55:main.c        **** //request burst of 6 bytes from this address
  56:main.c        **** #define ITG3200_REGISTER_XMSB 0x1D
  57:main.c        **** #define ITG3200_REGISTER_DLPF 0x16
  58:main.c        **** #define ITG3200_FULLSCALE 0x03 << 3
  59:main.c        **** #define ITG3200_42HZ 0x03
  60:main.c        **** #define ITG3200_SIZE 6
  61:main.c        **** 
  62:main.c        **** 
  63:main.c        **** #define HMC5843_ADDRESS 0x3C
  64:main.c        **** //First data address of 6 is XMSB.  Also need to set a configuration register for
  65:main.c        **** //continuous measurement
  66:main.c        **** #define HMC5843_REGISTER_XMSB 0x03
  67:main.c        **** #define HMC5843_REGISTER_MEASMODE 0x02
  68:main.c        **** #define HMC5843_MEASMODE_CONT 0x00
  69:main.c        **** #define HMC5843_SIZE 6
  70:main.c        **** 
  71:main.c        **** 
  72:main.c        **** tdma_info tx_tdma_fd;
  73:main.c        **** tdma_info rx_tdma_fd;
  74:main.c        **** 
  75:main.c        **** uint8_t i2c_buf[16];
  76:main.c        **** uint8_t tx_buf[TDMA_MAX_PKT_SIZE];
  77:main.c        **** uint8_t rx_buf[TDMA_MAX_PKT_SIZE];
  78:main.c        **** unsigned int sequenceNo; 
  79:main.c        **** bool packetReady;
  80:main.c        **** uint16_t mac_address;
  81:main.c        **** 
  82:main.c        **** 
  83:main.c        **** 
  84:main.c        **** unsigned char TWI_Act_On_Failure_In_Last_Transmission ( unsigned char TWIerrorMsg )
  85:main.c        **** {
  86:main.c        ****                     // A failure has occurred, use TWIerrorMsg to determine the nature of the failu
  87:main.c        ****                     // and take appropriate actions.
  88:main.c        ****                     // Se header file for a list of possible failures messages.
  89:main.c        ****                     
  90:main.c        ****                     // Here is a simple sample, where if received a NACK on the slave address,
  91:main.c        ****                     // then a retransmission will be initiated.
  92:main.c        **** if ( (TWIerrorMsg == TWI_MTX_ADR_NACK) | (TWIerrorMsg == TWI_MRX_ADR_NACK) ){
  93:main.c        ****     TWI_Start_Transceiver();
  94:main.c        **** }
  95:main.c        **** printf("%c \n",TWIerrorMsg);
  96:main.c        ****     
  97:main.c        ****   return TWIerrorMsg; 
  98:main.c        **** }
  99:main.c        **** 
 100:main.c        **** 
 101:main.c        **** 
 102:main.c        **** 
 103:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
 104:main.c        **** nrk_task_type TaskOne;
 105:main.c        **** void task_imu(void);
 106:main.c        **** 
 107:main.c        **** NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
 108:main.c        **** nrk_task_type rx_task_info;
 109:main.c        **** void rx_task (void);
 110:main.c        **** 
 111:main.c        **** NRK_STK tx_task_stack[NRK_APP_STACKSIZE];
 112:main.c        **** nrk_task_type tx_task_info;
 113:main.c        **** void tx_task (void);
 114:main.c        **** 
 115:main.c        **** 
 116:main.c        **** void init_adxl345(void);
 117:main.c        **** void init_itg3200(void);
 118:main.c        **** void init_hmc5843(void);
 119:main.c        **** 
 120:main.c        **** void nrk_create_taskset();
 121:main.c        **** 
 122:main.c        **** int
 123:main.c        **** main ()
 124:main.c        **** {
 125:main.c        ****   nrk_setup_ports();
 126:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 127:main.c        **** 
 128:main.c        ****   TWI_Master_Initialise();
 129:main.c        ****   sei();
 130:main.c        ****   init_adxl345();
 131:main.c        ****   init_itg3200();
 132:main.c        ****   init_hmc5843();
 133:main.c        ****   /* initialize sequence number, used to sync with master */
 134:main.c        ****   sequenceNo = 0; 
 135:main.c        **** 
 136:main.c        ****   /* initialize tx_buf ready flag */
 137:main.c        ****   packetReady = true;
 138:main.c        ****   
 139:main.c        ****   nrk_init();
 140:main.c        **** 
 141:main.c        ****   nrk_led_clr(ORANGE_LED);
 142:main.c        ****   nrk_led_clr(BLUE_LED);
 143:main.c        ****   nrk_led_clr(GREEN_LED);
 144:main.c        ****   nrk_led_clr(RED_LED);
 145:main.c        ****  
 146:main.c        ****   nrk_time_set(0,0);
 147:main.c        ****   nrk_create_taskset();
 148:main.c        ****   nrk_start();
 149:main.c        ****   
 150:main.c        ****   return 0;
 151:main.c        **** }
 152:main.c        **** 
 153:main.c        **** void init_itg3200() {
 154:main.c        ****     /* put in standby mode while we change fifo control bits */
 155:main.c        ****   i2c_buf[0] = ITG3200_ADDRESS | FALSE<<TWI_READ_BIT;
 156:main.c        ****   i2c_buf[1] = ITG3200_REGISTER_DLPF;
 157:main.c        ****   i2c_buf[2] = ITG3200_FULLSCALE | ITG3200_42HZ;
 158:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 159:main.c        **** }
 160:main.c        **** 
 161:main.c        **** void init_hmc5843() {
 162:main.c        ****     /* put in standby mode while we change fifo control bits */
 163:main.c        ****   i2c_buf[0] = HMC5843_ADDRESS | FALSE<<TWI_READ_BIT;
 164:main.c        ****   i2c_buf[1] = HMC5843_REGISTER_MEASMODE;
 165:main.c        ****   i2c_buf[2] = HMC5843_MEASMODE_CONT;
 166:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 167:main.c        **** }
 168:main.c        **** 
 169:main.c        **** 
 170:main.c        **** void init_adxl345() {
 171:main.c        ****   unsigned int read = 0;
 172:main.c        **** 
 173:main.c        ****   /* put in standby mode while we change fifo control bits */
 174:main.c        ****   i2c_buf[0] = ADXL345_ADDRESS | FALSE<<TWI_READ_BIT;
 175:main.c        ****   i2c_buf[1] = ADXL_REGISTER_PWRCTL;
 176:main.c        ****   i2c_buf[2] = ADXL_PWRCTL_STBY;
 177:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 178:main.c        **** 
 179:main.c        ****   /* set the fifo mode to stream */
 180:main.c        ****   i2c_buf[0] = ADXL345_ADDRESS | FALSE<<TWI_READ_BIT;
 181:main.c        ****   i2c_buf[1] = ADXL_REGISTER_FIFOCTL;
 182:main.c        ****   i2c_buf[2] = ADXL_FIFOCTL_STREAM;
 183:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf,3);
 184:main.c        **** 
 185:main.c        **** 
 186:main.c        ****   /* set to measure mode */
 187:main.c        ****   i2c_buf[0] = ADXL345_ADDRESS | FALSE<<TWI_READ_BIT;
 188:main.c        ****   i2c_buf[1] = ADXL_REGISTER_PWRCTL;
 189:main.c        ****   i2c_buf[2] = ADXL_PWRCTL_MEASURE;
 190:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 191:main.c        **** }
 192:main.c        **** 
 193:main.c        **** void task_imu(){
 342               	.LM0:
 343               	.LFBB1:
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
 194:main.c        ****   unsigned int i;
 195:main.c        ****   unsigned int count;
 196:main.c        ****   
 197:main.c        ****   while(1){
 198:main.c        ****     packetReady = false;
 199:main.c        ****     i = 0;
 200:main.c        ****     tx_buf[i++] = sequenceNo++;
 201:main.c        **** 
 202:main.c        ****     i2c_buf[0] = (ADXL345_ADDRESS) | (FALSE<<TWI_READ_BIT);
 349               	.LM1:
 350 0000 86EA      		ldi r24,lo8(-90)
 351 0002 E82E      		mov r14,r24
 203:main.c        ****     i2c_buf[1] = ADXL345_REGISTER_XLSB;
 353               	.LM2:
 354 0004 92E3      		ldi r25,lo8(50)
 355 0006 D92E      		mov r13,r25
 204:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 205:main.c        **** 
 206:main.c        ****     /* Read first byte */
 207:main.c        ****     i2c_buf[0] = (ADXL345_ADDRESS) | (TRUE<<TWI_READ_BIT);
 357               	.LM3:
 358 0008 27EA      		ldi r18,lo8(-89)
 359 000a C22E      		mov r12,r18
 208:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 209:main.c        **** 
 210:main.c        ****     for (count = 0; count < ADXL_SIZE; count++){
 211:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 212:main.c        ****     }
 213:main.c        **** 
 214:main.c        ****     i2c_buf[0] = (ITG3200_ADDRESS) | (FALSE<<TWI_READ_BIT);
 361               	.LM4:
 362 000c 30ED      		ldi r19,lo8(-48)
 363 000e B32E      		mov r11,r19
 215:main.c        ****     i2c_buf[1] = ITG3200_REGISTER_XMSB;
 365               	.LM5:
 366 0010 4DE1      		ldi r20,lo8(29)
 367 0012 A42E      		mov r10,r20
 216:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 217:main.c        **** 
 218:main.c        ****     /* Read first byte */
 219:main.c        ****     i2c_buf[0] = (ITG3200_ADDRESS) | (TRUE<<TWI_READ_BIT);
 369               	.LM6:
 370 0014 51ED      		ldi r21,lo8(-47)
 371 0016 952E      		mov r9,r21
 220:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 221:main.c        **** 
 222:main.c        ****     for (count = 0; count < ITG3200_SIZE; count++){
 223:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 224:main.c        ****     }
 225:main.c        **** 
 226:main.c        ****     i2c_buf[0] = (HMC5843_ADDRESS) | (FALSE<<TWI_READ_BIT);
 373               	.LM7:
 374 0018 6CE3      		ldi r22,lo8(60)
 375 001a 862E      		mov r8,r22
 227:main.c        ****     i2c_buf[1] = HMC5843_REGISTER_XMSB;
 377               	.LM8:
 378 001c 73E0      		ldi r23,lo8(3)
 379 001e 772E      		mov r7,r23
 228:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 229:main.c        **** 
 230:main.c        ****     /* Read first byte */
 231:main.c        ****     i2c_buf[0] = (HMC5843_ADDRESS) | (TRUE<<TWI_READ_BIT);
 381               	.LM9:
 382 0020 EDE3      		ldi r30,lo8(61)
 383 0022 6E2E      		mov r6,r30
 232:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 233:main.c        **** 
 234:main.c        ****     for (count = 0; count < HMC5843_SIZE; count++){
 235:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 236:main.c        ****     }
 237:main.c        ****     packetReady = true;
 385               	.LM10:
 386 0024 FF24      		clr r15
 387 0026 F394      		inc r15
 388               	.L5:
 198:main.c        ****     i = 0;
 390               	.LM11:
 391 0028 1092 0000 		sts packetReady,__zero_reg__
 200:main.c        **** 
 393               	.LM12:
 394 002c 8091 0000 		lds r24,sequenceNo
 395 0030 9091 0000 		lds r25,sequenceNo+1
 396 0034 9C01      		movw r18,r24
 397 0036 2F5F      		subi r18,-1
 398 0038 3F4F      		sbci r19,-1
 399 003a 3093 0000 		sts sequenceNo+1,r19
 400 003e 2093 0000 		sts sequenceNo,r18
 401 0042 8093 0000 		sts tx_buf,r24
 202:main.c        ****     i2c_buf[1] = ADXL345_REGISTER_XLSB;
 403               	.LM13:
 404 0046 E092 0000 		sts i2c_buf,r14
 203:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 406               	.LM14:
 407 004a D092 0000 		sts i2c_buf+1,r13
 204:main.c        **** 
 409               	.LM15:
 410 004e 62E0      		ldi r22,lo8(2)
 411 0050 80E0      		ldi r24,lo8(i2c_buf)
 412 0052 90E0      		ldi r25,hi8(i2c_buf)
 413 0054 0E94 0000 		call TWI_Start_Transceiver_With_Data
 207:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 415               	.LM16:
 416 0058 C092 0000 		sts i2c_buf,r12
 208:main.c        **** 
 418               	.LM17:
 419 005c 67E0      		ldi r22,lo8(7)
 420 005e 80E0      		ldi r24,lo8(i2c_buf)
 421 0060 90E0      		ldi r25,hi8(i2c_buf)
 422 0062 0E94 0000 		call TWI_Start_Transceiver_With_Data
 200:main.c        **** 
 424               	.LM18:
 425 0066 81E0      		ldi r24,lo8(1)
 426 0068 90E0      		ldi r25,0
 427               	.L2:
 211:main.c        ****     }
 429               	.LM19:
 430 006a EC01      		movw r28,r24
 431 006c 2196      		adiw r28,1
 432 006e FC01      		movw r30,r24
 433 0070 E050      		subi r30,lo8(-(i2c_buf))
 434 0072 F040      		sbci r31,hi8(-(i2c_buf))
 435 0074 2081      		ld r18,Z
 436 0076 FC01      		movw r30,r24
 437 0078 E050      		subi r30,lo8(-(tx_buf))
 438 007a F040      		sbci r31,hi8(-(tx_buf))
 439 007c 2083      		st Z,r18
 440 007e CE01      		movw r24,r28
 210:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 442               	.LM20:
 443 0080 C730      		cpi r28,7
 444 0082 D105      		cpc r29,__zero_reg__
 445 0084 01F4      		brne .L2
 214:main.c        ****     i2c_buf[1] = ITG3200_REGISTER_XMSB;
 447               	.LM21:
 448 0086 B092 0000 		sts i2c_buf,r11
 215:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 450               	.LM22:
 451 008a A092 0000 		sts i2c_buf+1,r10
 216:main.c        **** 
 453               	.LM23:
 454 008e 62E0      		ldi r22,lo8(2)
 455 0090 80E0      		ldi r24,lo8(i2c_buf)
 456 0092 90E0      		ldi r25,hi8(i2c_buf)
 457 0094 0E94 0000 		call TWI_Start_Transceiver_With_Data
 219:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 459               	.LM24:
 460 0098 9092 0000 		sts i2c_buf,r9
 220:main.c        **** 
 462               	.LM25:
 463 009c 67E0      		ldi r22,lo8(7)
 464 009e 80E0      		ldi r24,lo8(i2c_buf)
 465 00a0 90E0      		ldi r25,hi8(i2c_buf)
 466 00a2 0E94 0000 		call TWI_Start_Transceiver_With_Data
 467               	.L3:
 223:main.c        ****     }
 469               	.LM26:
 470 00a6 8E01      		movw r16,r28
 471 00a8 0F5F      		subi r16,-1
 472 00aa 1F4F      		sbci r17,-1
 473 00ac FE01      		movw r30,r28
 474 00ae E050      		subi r30,lo8(-(i2c_buf-6))
 475 00b0 F040      		sbci r31,hi8(-(i2c_buf-6))
 476 00b2 8081      		ld r24,Z
 477 00b4 C050      		subi r28,lo8(-(tx_buf))
 478 00b6 D040      		sbci r29,hi8(-(tx_buf))
 479 00b8 8883      		st Y,r24
 480 00ba E801      		movw r28,r16
 222:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 482               	.LM27:
 483 00bc 0D30      		cpi r16,13
 484 00be 1105      		cpc r17,__zero_reg__
 485 00c0 01F4      		brne .L3
 226:main.c        ****     i2c_buf[1] = HMC5843_REGISTER_XMSB;
 487               	.LM28:
 488 00c2 8092 0000 		sts i2c_buf,r8
 227:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 2);
 490               	.LM29:
 491 00c6 7092 0000 		sts i2c_buf+1,r7
 228:main.c        **** 
 493               	.LM30:
 494 00ca 62E0      		ldi r22,lo8(2)
 495 00cc 80E0      		ldi r24,lo8(i2c_buf)
 496 00ce 90E0      		ldi r25,hi8(i2c_buf)
 497 00d0 0E94 0000 		call TWI_Start_Transceiver_With_Data
 231:main.c        ****     TWI_Start_Transceiver_With_Data(i2c_buf, 7);
 499               	.LM31:
 500 00d4 6092 0000 		sts i2c_buf,r6
 232:main.c        **** 
 502               	.LM32:
 503 00d8 67E0      		ldi r22,lo8(7)
 504 00da 80E0      		ldi r24,lo8(i2c_buf)
 505 00dc 90E0      		ldi r25,hi8(i2c_buf)
 506 00de 0E94 0000 		call TWI_Start_Transceiver_With_Data
 507               	.L4:
 508 00e2 F801      		movw r30,r16
 509 00e4 E050      		subi r30,lo8(-(i2c_buf-12))
 510 00e6 F040      		sbci r31,hi8(-(i2c_buf-12))
 235:main.c        ****     }
 512               	.LM33:
 513 00e8 8081      		ld r24,Z
 514 00ea F801      		movw r30,r16
 515 00ec E050      		subi r30,lo8(-(tx_buf))
 516 00ee F040      		sbci r31,hi8(-(tx_buf))
 517 00f0 8083      		st Z,r24
 518 00f2 0F5F      		subi r16,-1
 519 00f4 1F4F      		sbci r17,-1
 234:main.c        ****       tx_buf[i++] = i2c_buf[count+1];
 521               	.LM34:
 522 00f6 0331      		cpi r16,19
 523 00f8 1105      		cpc r17,__zero_reg__
 524 00fa 01F4      		brne .L4
 526               	.LM35:
 527 00fc F092 0000 		sts packetReady,r15
 238:main.c        ****     nrk_wait_until_next_period();
 529               	.LM36:
 530 0100 0E94 0000 		call nrk_wait_until_next_period
 239:main.c        ****   }
 532               	.LM37:
 533 0104 00C0      		rjmp .L5
 535               	.Lscope1:
 537               		.stabd	78,0,0
 538               		.section	.rodata.str1.1,"aMS",@progbits,1
 539               	.LC0:
 540 0000 5478 2054 		.string	"Tx Task PID=%u\r\n"
 540      6173 6B20 
 540      5049 443D 
 540      2575 0D0A 
 540      00
 541               	.LC1:
 542 0011 4E6F 6465 		.string	"Node MAC: %u cnt: %d\n"
 542      204D 4143 
 542      3A20 2575 
 542      2063 6E74 
 542      3A20 2564 
 543               		.text
 545               	.global	tx_task
 547               	tx_task:
 548               		.stabd	46,0,0
 240:main.c        **** }
 241:main.c        **** 
 242:main.c        **** 
 243:main.c        **** void tx_task ()
 244:main.c        **** {
 550               	.LM38:
 551               	.LFBB2:
 552               	/* prologue: function */
 553               	/* frame size = 0 */
 554               	/* stack size = 0 */
 555               	.L__stack_usage = 0
 245:main.c        ****   int8_t v;
 246:main.c        ****   uint8_t len, cnt;
 247:main.c        **** 
 248:main.c        **** 
 249:main.c        ****   printf ("Tx Task PID=%u\r\n", nrk_get_pid ());
 557               	.LM39:
 558 0106 0E94 0000 		call nrk_get_pid
 559 010a 1F92      		push __zero_reg__
 560 010c 8F93      		push r24
 561 010e 80E0      		ldi r24,lo8(.LC0)
 562 0110 90E0      		ldi r25,hi8(.LC0)
 563 0112 9F93      		push r25
 564 0114 8F93      		push r24
 565 0116 0E94 0000 		call printf
 250:main.c        **** 
 251:main.c        ****   while (!tdma_started() && !packetReady)
 567               	.LM40:
 568 011a 0F90      		pop __tmp_reg__
 569 011c 0F90      		pop __tmp_reg__
 570 011e 0F90      		pop __tmp_reg__
 571 0120 0F90      		pop __tmp_reg__
 572               	.L11:
 573 0122 0E94 0000 		call tdma_started
 574 0126 8111      		cpse r24,__zero_reg__
 575 0128 00C0      		rjmp .L15
 577               	.LM41:
 578 012a 8091 0000 		lds r24,packetReady
 579 012e 8111      		cpse r24,__zero_reg__
 580 0130 00C0      		rjmp .L15
 252:main.c        ****     nrk_wait_until_next_period ();
 582               	.LM42:
 583 0132 0E94 0000 		call nrk_wait_until_next_period
 584 0136 00C0      		rjmp .L11
 585               	.L15:
 586 0138 C0E0      		ldi r28,0
 253:main.c        **** 
 254:main.c        ****   cnt = 0;
 255:main.c        **** 
 256:main.c        ****   while (1) {
 257:main.c        ****     nrk_led_clr(GREEN_LED);
 258:main.c        **** 
 259:main.c        ****     sprintf (tx_buf, "Node MAC: %u cnt: %d\n", mac_address, cnt);
 588               	.LM43:
 589 013a 80E0      		ldi r24,lo8(.LC1)
 590 013c E82E      		mov r14,r24
 591 013e 80E0      		ldi r24,hi8(.LC1)
 592 0140 F82E      		mov r15,r24
 593 0142 00E0      		ldi r16,lo8(tx_buf)
 594 0144 10E0      		ldi r17,hi8(tx_buf)
 595               	.L16:
 257:main.c        **** 
 597               	.LM44:
 598 0146 81E0      		ldi r24,lo8(1)
 599 0148 90E0      		ldi r25,0
 600 014a 0E94 0000 		call nrk_led_clr
 602               	.LM45:
 603 014e 1F92      		push __zero_reg__
 604 0150 CF93      		push r28
 605 0152 8091 0000 		lds r24,mac_address+1
 606 0156 8F93      		push r24
 607 0158 8091 0000 		lds r24,mac_address
 608 015c 8F93      		push r24
 609 015e FF92      		push r15
 610 0160 EF92      		push r14
 611 0162 1F93      		push r17
 612 0164 0F93      		push r16
 613 0166 0E94 0000 		call sprintf
 260:main.c        ****     cnt++;
 615               	.LM46:
 616 016a CF5F      		subi r28,lo8(-(1))
 261:main.c        ****     len = strlen (tx_buf) + 1;
 618               	.LM47:
 619 016c F801      		movw r30,r16
 620               		0:
 621 016e 0190      		ld __tmp_reg__,Z+
 622 0170 0020      		tst __tmp_reg__
 623 0172 01F4      		brne 0b
 624 0174 3197      		sbiw r30,1
 625 0176 E050      		subi r30,lo8(tx_buf)
 626 0178 F040      		sbci r31,hi8(tx_buf)
 627 017a 41E0      		ldi r20,lo8(1)
 628 017c 4E0F      		add r20,r30
 262:main.c        **** 
 263:main.c        ****     v = tdma_send (&tx_tdma_fd, &tx_buf, len, TDMA_BLOCKING);
 630               	.LM48:
 631 017e 20E0      		ldi r18,0
 632 0180 60E0      		ldi r22,lo8(tx_buf)
 633 0182 70E0      		ldi r23,hi8(tx_buf)
 634 0184 80E0      		ldi r24,lo8(tx_tdma_fd)
 635 0186 90E0      		ldi r25,hi8(tx_tdma_fd)
 636 0188 0E94 0000 		call tdma_send
 264:main.c        ****     if (v == NRK_OK) {
 638               	.LM49:
 639 018c 2DB7      		in r18,__SP_L__
 640 018e 3EB7      		in r19,__SP_H__
 641 0190 285F      		subi r18,-8
 642 0192 3F4F      		sbci r19,-1
 643 0194 0FB6      		in __tmp_reg__,__SREG__
 644 0196 F894      		cli
 645 0198 3EBF      		out __SP_H__,r19
 646 019a 0FBE      		out __SREG__,__tmp_reg__
 647 019c 2DBF      		out __SP_L__,r18
 648 019e 8130      		cpi r24,lo8(1)
 649 01a0 01F4      		brne .L14
 265:main.c        ****       nrk_led_set(GREEN_LED);
 651               	.LM50:
 652 01a2 81E0      		ldi r24,lo8(1)
 653 01a4 90E0      		ldi r25,0
 654 01a6 0E94 0000 		call nrk_led_set
 266:main.c        ****       nrk_kprintf (PSTR ("App tx_buf Sent\n"));
 656               	.LM51:
 657 01aa 80E0      		ldi r24,lo8(__c.3553)
 658 01ac 90E0      		ldi r25,hi8(__c.3553)
 659 01ae 0E94 0000 		call nrk_kprintf
 660               	.L14:
 267:main.c        ****     }
 268:main.c        ****     nrk_wait_until_next_period();
 662               	.LM52:
 663 01b2 0E94 0000 		call nrk_wait_until_next_period
 269:main.c        ****   }
 665               	.LM53:
 666 01b6 00C0      		rjmp .L16
 671               	.Lscope2:
 673               		.stabd	78,0,0
 674               		.section	.rodata.str1.1
 675               	.LC2:
 676 0027 2564 0D0A 		.string	"%d\r\n"
 676      00
 677               	.LC3:
 678 002c 5258 2054 		.string	"RX Task PID=%u\r\n"
 678      6173 6B20 
 678      5049 443D 
 678      2575 0D0A 
 678      00
 679               	.LC4:
 680 003d 7372 633A 		.string	"src: %u\r\nrssi: %d\r\n"
 680      2025 750D 
 680      0A72 7373 
 680      693A 2025 
 680      640D 0A00 
 681               	.LC5:
 682 0051 736C 6F74 		.string	"slot: %u\r\n"
 682      3A20 2575 
 682      0D0A 00
 683               	.LC6:
 684 005c 6379 636C 		.string	"cycle len: %u\r\n"
 684      6520 6C65 
 684      6E3A 2025 
 684      750D 0A00 
 685               	.LC7:
 686 006c 6C65 6E3A 		.string	"len: %u\r\npayload: "
 686      2025 750D 
 686      0A70 6179 
 686      6C6F 6164 
 686      3A20 00
 687               	.LC8:
 688 007f 0D00      		.string	"\r"
 689               		.text
 691               	.global	rx_task
 693               	rx_task:
 694               		.stabd	46,0,0
 270:main.c        **** }
 271:main.c        **** 
 272:main.c        **** void rx_task ()
 273:main.c        **** {
 696               	.LM54:
 697               	.LFBB3:
 698 01b8 CF93      		push r28
 699 01ba DF93      		push r29
 700 01bc 1F92      		push __zero_reg__
 701 01be CDB7      		in r28,__SP_L__
 702 01c0 DEB7      		in r29,__SP_H__
 703               	/* prologue: function */
 704               	/* frame size = 1 */
 705               	/* stack size = 3 */
 706               	.L__stack_usage = 3
 274:main.c        ****   nrk_time_t t;
 275:main.c        ****   uint16_t cnt;
 276:main.c        ****   int8_t v;
 277:main.c        ****   uint8_t len, i;
 278:main.c        **** 
 279:main.c        **** 
 280:main.c        ****   cnt = 0;
 281:main.c        ****   nrk_kprintf (PSTR ("Nano-RK Version "));
 708               	.LM55:
 709 01c2 80E0      		ldi r24,lo8(__c.3563)
 710 01c4 90E0      		ldi r25,hi8(__c.3563)
 711 01c6 0E94 0000 		call nrk_kprintf
 282:main.c        ****   printf ("%d\r\n", NRK_VERSION);
 713               	.LM56:
 714 01ca 1F92      		push __zero_reg__
 715 01cc 85E6      		ldi r24,lo8(101)
 716 01ce 8F93      		push r24
 717 01d0 80E0      		ldi r24,lo8(.LC2)
 718 01d2 90E0      		ldi r25,hi8(.LC2)
 719 01d4 9F93      		push r25
 720 01d6 8F93      		push r24
 721 01d8 0E94 0000 		call printf
 283:main.c        **** 
 284:main.c        **** 
 285:main.c        ****   printf ("RX Task PID=%u\r\n", nrk_get_pid ());
 723               	.LM57:
 724 01dc 0E94 0000 		call nrk_get_pid
 725 01e0 1F92      		push __zero_reg__
 726 01e2 8F93      		push r24
 727 01e4 80E0      		ldi r24,lo8(.LC3)
 728 01e6 90E0      		ldi r25,hi8(.LC3)
 729 01e8 9F93      		push r25
 730 01ea 8F93      		push r24
 731 01ec 0E94 0000 		call printf
 286:main.c        ****   // t.secs = 5;
 287:main.c        ****   // t.nano_secs = 0;
 288:main.c        **** 
 289:main.c        ****   // // setup a software watch dog timer
 290:main.c        ****   // nrk_sw_wdt_init(0, &t, NULL);
 291:main.c        ****   // nrk_sw_wdt_start(0);
 292:main.c        **** 
 293:main.c        ****   mac_address = 1;
 733               	.LM58:
 734 01f0 81E0      		ldi r24,lo8(1)
 735 01f2 90E0      		ldi r25,0
 736 01f4 9093 0000 		sts mac_address+1,r25
 737 01f8 8093 0000 		sts mac_address,r24
 294:main.c        **** 
 295:main.c        ****   tdma_init (TDMA_CLIENT, 13, mac_address);
 739               	.LM59:
 740 01fc 41E0      		ldi r20,lo8(1)
 741 01fe 50E0      		ldi r21,0
 742 0200 6DE0      		ldi r22,lo8(13)
 743 0202 82E0      		ldi r24,lo8(2)
 744 0204 0E94 0000 		call tdma_init
 296:main.c        **** 
 297:main.c        **** 
 298:main.c        ****   while (!tdma_started ())
 746               	.LM60:
 747 0208 0FB6      		in __tmp_reg__,__SREG__
 748 020a F894      		cli
 749 020c DEBF      		out __SP_H__,r29
 750 020e 0FBE      		out __SREG__,__tmp_reg__
 751 0210 CDBF      		out __SP_L__,r28
 752               	.L18:
 753 0212 0E94 0000 		call tdma_started
 754 0216 8111      		cpse r24,__zero_reg__
 755 0218 00C0      		rjmp .L28
 299:main.c        ****     nrk_wait_until_next_period ();
 757               	.LM61:
 758 021a 0E94 0000 		call nrk_wait_until_next_period
 759 021e 00C0      		rjmp .L18
 760               	.L28:
 300:main.c        **** 
 301:main.c        ****   v = tdma_tx_slot_add (mac_address);
 762               	.LM62:
 763 0220 8091 0000 		lds r24,mac_address
 764 0224 9091 0000 		lds r25,mac_address+1
 765 0228 0E94 0000 		call tdma_tx_slot_add
 302:main.c        **** 
 303:main.c        ****   if (v != NRK_OK)
 767               	.LM63:
 768 022c 8130      		cpi r24,lo8(1)
 769 022e 01F0      		breq .L20
 304:main.c        ****     nrk_kprintf (PSTR ("Could not add slot!\r\n"));
 771               	.LM64:
 772 0230 80E0      		ldi r24,lo8(__c.3568)
 773 0232 90E0      		ldi r25,hi8(__c.3568)
 774 0234 0E94 0000 		call nrk_kprintf
 775               	.L20:
 305:main.c        **** 
 306:main.c        ****   while (1) {
 307:main.c        ****     nrk_led_clr(BLUE_LED);
 308:main.c        ****     // Update watchdog timer
 309:main.c        ****     // nrk_sw_wdt_update(0);
 310:main.c        ****     v = tdma_recv (&rx_tdma_fd, &rx_buf, &len, TDMA_BLOCKING);
 311:main.c        ****     if (v == NRK_OK) {
 312:main.c        ****       printf ("src: %u\r\nrssi: %d\r\n", rx_tdma_fd.src, rx_tdma_fd.rssi);
 777               	.LM65:
 778 0238 80E0      		ldi r24,lo8(.LC4)
 779 023a E82E      		mov r14,r24
 780 023c 80E0      		ldi r24,hi8(.LC4)
 781 023e F82E      		mov r15,r24
 313:main.c        ****       printf ("slot: %u\r\n", rx_tdma_fd.slot);
 783               	.LM66:
 784 0240 90E0      		ldi r25,lo8(.LC5)
 785 0242 C92E      		mov r12,r25
 786 0244 90E0      		ldi r25,hi8(.LC5)
 787 0246 D92E      		mov r13,r25
 314:main.c        ****       printf ("cycle len: %u\r\n", rx_tdma_fd.cycle_size);
 789               	.LM67:
 790 0248 20E0      		ldi r18,lo8(.LC6)
 791 024a A22E      		mov r10,r18
 792 024c 20E0      		ldi r18,hi8(.LC6)
 793 024e B22E      		mov r11,r18
 315:main.c        ****       printf ("len: %u\r\npayload: ", len);
 795               	.LM68:
 796 0250 30E0      		ldi r19,lo8(.LC7)
 797 0252 832E      		mov r8,r19
 798 0254 30E0      		ldi r19,hi8(.LC7)
 799 0256 932E      		mov r9,r19
 800               	.L24:
 307:main.c        ****     // Update watchdog timer
 802               	.LM69:
 803 0258 83E0      		ldi r24,lo8(3)
 804 025a 90E0      		ldi r25,0
 805 025c 0E94 0000 		call nrk_led_clr
 310:main.c        ****     if (v == NRK_OK) {
 807               	.LM70:
 808 0260 20E0      		ldi r18,0
 809 0262 AE01      		movw r20,r28
 810 0264 4F5F      		subi r20,-1
 811 0266 5F4F      		sbci r21,-1
 812 0268 60E0      		ldi r22,lo8(rx_buf)
 813 026a 70E0      		ldi r23,hi8(rx_buf)
 814 026c 80E0      		ldi r24,lo8(rx_tdma_fd)
 815 026e 90E0      		ldi r25,hi8(rx_tdma_fd)
 816 0270 0E94 0000 		call tdma_recv
 311:main.c        ****       printf ("src: %u\r\nrssi: %d\r\n", rx_tdma_fd.src, rx_tdma_fd.rssi);
 818               	.LM71:
 819 0274 8130      		cpi r24,lo8(1)
 820 0276 01F0      		breq .+2
 821 0278 00C0      		rjmp .L21
 312:main.c        ****       printf ("slot: %u\r\n", rx_tdma_fd.slot);
 823               	.LM72:
 824 027a 8091 0000 		lds r24,rx_tdma_fd+14
 825 027e 8F93      		push r24
 826 0280 8091 0000 		lds r24,rx_tdma_fd+13
 827 0284 8F93      		push r24
 828 0286 8091 0000 		lds r24,rx_tdma_fd+8
 829 028a 8F93      		push r24
 830 028c 8091 0000 		lds r24,rx_tdma_fd+7
 831 0290 8F93      		push r24
 832 0292 FF92      		push r15
 833 0294 EF92      		push r14
 834 0296 0E94 0000 		call printf
 313:main.c        ****       printf ("cycle len: %u\r\n", rx_tdma_fd.cycle_size);
 836               	.LM73:
 837 029a 8091 0000 		lds r24,rx_tdma_fd+1
 838 029e 8F93      		push r24
 839 02a0 8091 0000 		lds r24,rx_tdma_fd
 840 02a4 8F93      		push r24
 841 02a6 DF92      		push r13
 842 02a8 CF92      		push r12
 843 02aa 0E94 0000 		call printf
 314:main.c        ****       printf ("len: %u\r\npayload: ", len);
 845               	.LM74:
 846 02ae 8091 0000 		lds r24,rx_tdma_fd+3
 847 02b2 8F93      		push r24
 848 02b4 8091 0000 		lds r24,rx_tdma_fd+2
 849 02b8 8F93      		push r24
 850 02ba BF92      		push r11
 851 02bc AF92      		push r10
 852 02be 0E94 0000 		call printf
 854               	.LM75:
 855 02c2 8981      		ldd r24,Y+1
 856 02c4 1F92      		push __zero_reg__
 857 02c6 8F93      		push r24
 858 02c8 9F92      		push r9
 859 02ca 8F92      		push r8
 860 02cc 0E94 0000 		call printf
 316:main.c        ****       for (i = 0; i < len; i++)
 862               	.LM76:
 863 02d0 0FB6      		in __tmp_reg__,__SREG__
 864 02d2 F894      		cli
 865 02d4 DEBF      		out __SP_H__,r29
 866 02d6 0FBE      		out __SREG__,__tmp_reg__
 867 02d8 CDBF      		out __SP_L__,r28
 868 02da 10E0      		ldi r17,0
 869               	.L22:
 871               	.LM77:
 872 02dc 8981      		ldd r24,Y+1
 873 02de 1817      		cp r17,r24
 874 02e0 00F4      		brsh .L29
 317:main.c        ****         printf ("%c", rx_buf[i]);
 876               	.LM78:
 877 02e2 E12F      		mov r30,r17
 878 02e4 F0E0      		ldi r31,0
 879 02e6 E050      		subi r30,lo8(-(rx_buf))
 880 02e8 F040      		sbci r31,hi8(-(rx_buf))
 881 02ea 8081      		ld r24,Z
 882 02ec 90E0      		ldi r25,0
 883 02ee 0E94 0000 		call putchar
 316:main.c        ****       for (i = 0; i < len; i++)
 885               	.LM79:
 886 02f2 1F5F      		subi r17,lo8(-(1))
 887 02f4 00C0      		rjmp .L22
 888               	.L29:
 318:main.c        ****       printf ("\r\n");
 890               	.LM80:
 891 02f6 80E0      		ldi r24,lo8(.LC8)
 892 02f8 90E0      		ldi r25,hi8(.LC8)
 893 02fa 0E94 0000 		call puts
 319:main.c        ****       nrk_led_set(BLUE_LED);
 895               	.LM81:
 896 02fe 83E0      		ldi r24,lo8(3)
 897 0300 90E0      		ldi r25,0
 898 0302 0E94 0000 		call nrk_led_set
 899               	.L21:
 320:main.c        ****     }
 321:main.c        **** 
 322:main.c        ****      nrk_wait_until_next_period();
 901               	.LM82:
 902 0306 0E94 0000 		call nrk_wait_until_next_period
 323:main.c        ****   }
 904               	.LM83:
 905 030a 00C0      		rjmp .L24
 911               	.Lscope3:
 913               		.stabd	78,0,0
 914               		.section	.rodata.str1.1
 915               	.LC9:
 916 0081 2563 200A 		.string	"%c \n"
 916      00
 917               		.text
 920               	.global	TWI_Act_On_Failure_In_Last_Transmission
 922               	TWI_Act_On_Failure_In_Last_Transmission:
 923               		.stabd	46,0,0
  85:main.c        ****                     // A failure has occurred, use TWIerrorMsg to determine the nature of the failu
 925               	.LM84:
 926               	.LFBB4:
 927 030c CF93      		push r28
 928               	/* prologue: function */
 929               	/* frame size = 0 */
 930               	/* stack size = 1 */
 931               	.L__stack_usage = 1
 932 030e C82F      		mov r28,r24
  92:main.c        ****     TWI_Start_Transceiver();
 934               	.LM85:
 935 0310 8834      		cpi r24,lo8(72)
 936 0312 01F0      		breq .L35
 937 0314 8032      		cpi r24,lo8(32)
 938 0316 01F4      		brne .L31
 939               	.L35:
  93:main.c        **** }
 941               	.LM86:
 942 0318 0E94 0000 		call TWI_Start_Transceiver
 943               	.L31:
  95:main.c        ****     
 945               	.LM87:
 946 031c 1F92      		push __zero_reg__
 947 031e CF93      		push r28
 948 0320 80E0      		ldi r24,lo8(.LC9)
 949 0322 90E0      		ldi r25,hi8(.LC9)
 950 0324 9F93      		push r25
 951 0326 8F93      		push r24
 952 0328 0E94 0000 		call printf
  97:main.c        **** }
 954               	.LM88:
 955 032c 0F90      		pop __tmp_reg__
 956 032e 0F90      		pop __tmp_reg__
 957 0330 0F90      		pop __tmp_reg__
 958 0332 0F90      		pop __tmp_reg__
  98:main.c        **** 
 960               	.LM89:
 961 0334 8C2F      		mov r24,r28
 962               	/* epilogue start */
 963 0336 CF91      		pop r28
 964 0338 0895      		ret
 966               	.Lscope4:
 968               		.stabd	78,0,0
 970               	.global	init_itg3200
 972               	init_itg3200:
 973               		.stabd	46,0,0
 153:main.c        ****     /* put in standby mode while we change fifo control bits */
 975               	.LM90:
 976               	.LFBB5:
 977               	/* prologue: function */
 978               	/* frame size = 0 */
 979               	/* stack size = 0 */
 980               	.L__stack_usage = 0
 155:main.c        ****   i2c_buf[1] = ITG3200_REGISTER_DLPF;
 982               	.LM91:
 983 033a E0E0      		ldi r30,lo8(i2c_buf)
 984 033c F0E0      		ldi r31,hi8(i2c_buf)
 985 033e 80ED      		ldi r24,lo8(-48)
 986 0340 8083      		st Z,r24
 156:main.c        ****   i2c_buf[2] = ITG3200_FULLSCALE | ITG3200_42HZ;
 988               	.LM92:
 989 0342 86E1      		ldi r24,lo8(22)
 990 0344 8183      		std Z+1,r24
 157:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 992               	.LM93:
 993 0346 8BE1      		ldi r24,lo8(27)
 994 0348 8283      		std Z+2,r24
 158:main.c        **** }
 996               	.LM94:
 997 034a 63E0      		ldi r22,lo8(3)
 998 034c CF01      		movw r24,r30
 999 034e 0C94 0000 		jmp TWI_Start_Transceiver_With_Data
 1001               	.Lscope5:
 1003               		.stabd	78,0,0
 1005               	.global	init_hmc5843
 1007               	init_hmc5843:
 1008               		.stabd	46,0,0
 161:main.c        ****     /* put in standby mode while we change fifo control bits */
 1010               	.LM95:
 1011               	.LFBB6:
 1012               	/* prologue: function */
 1013               	/* frame size = 0 */
 1014               	/* stack size = 0 */
 1015               	.L__stack_usage = 0
 163:main.c        ****   i2c_buf[1] = HMC5843_REGISTER_MEASMODE;
 1017               	.LM96:
 1018 0352 E0E0      		ldi r30,lo8(i2c_buf)
 1019 0354 F0E0      		ldi r31,hi8(i2c_buf)
 1020 0356 8CE3      		ldi r24,lo8(60)
 1021 0358 8083      		st Z,r24
 164:main.c        ****   i2c_buf[2] = HMC5843_MEASMODE_CONT;
 1023               	.LM97:
 1024 035a 82E0      		ldi r24,lo8(2)
 1025 035c 8183      		std Z+1,r24
 165:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 1027               	.LM98:
 1028 035e 1282      		std Z+2,__zero_reg__
 166:main.c        **** }
 1030               	.LM99:
 1031 0360 63E0      		ldi r22,lo8(3)
 1032 0362 CF01      		movw r24,r30
 1033 0364 0C94 0000 		jmp TWI_Start_Transceiver_With_Data
 1035               	.Lscope6:
 1037               		.stabd	78,0,0
 1039               	.global	init_adxl345
 1041               	init_adxl345:
 1042               		.stabd	46,0,0
 170:main.c        ****   unsigned int read = 0;
 1044               	.LM100:
 1045               	.LFBB7:
 1046 0368 0F93      		push r16
 1047 036a 1F93      		push r17
 1048 036c CF93      		push r28
 1049 036e DF93      		push r29
 1050               	/* prologue: function */
 1051               	/* frame size = 0 */
 1052               	/* stack size = 4 */
 1053               	.L__stack_usage = 4
 174:main.c        ****   i2c_buf[1] = ADXL_REGISTER_PWRCTL;
 1055               	.LM101:
 1056 0370 C0E0      		ldi r28,lo8(i2c_buf)
 1057 0372 D0E0      		ldi r29,hi8(i2c_buf)
 1058 0374 16EA      		ldi r17,lo8(-90)
 1059 0376 1883      		st Y,r17
 175:main.c        ****   i2c_buf[2] = ADXL_PWRCTL_STBY;
 1061               	.LM102:
 1062 0378 0DE2      		ldi r16,lo8(45)
 1063 037a 0983      		std Y+1,r16
 176:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 1065               	.LM103:
 1066 037c 1A82      		std Y+2,__zero_reg__
 177:main.c        **** 
 1068               	.LM104:
 1069 037e 63E0      		ldi r22,lo8(3)
 1070 0380 CE01      		movw r24,r28
 1071 0382 0E94 0000 		call TWI_Start_Transceiver_With_Data
 180:main.c        ****   i2c_buf[1] = ADXL_REGISTER_FIFOCTL;
 1073               	.LM105:
 1074 0386 1883      		st Y,r17
 181:main.c        ****   i2c_buf[2] = ADXL_FIFOCTL_STREAM;
 1076               	.LM106:
 1077 0388 88E3      		ldi r24,lo8(56)
 1078 038a 8983      		std Y+1,r24
 182:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf,3);
 1080               	.LM107:
 1081 038c 80E8      		ldi r24,lo8(-128)
 1082 038e 8A83      		std Y+2,r24
 183:main.c        **** 
 1084               	.LM108:
 1085 0390 63E0      		ldi r22,lo8(3)
 1086 0392 CE01      		movw r24,r28
 1087 0394 0E94 0000 		call TWI_Start_Transceiver_With_Data
 187:main.c        ****   i2c_buf[1] = ADXL_REGISTER_PWRCTL;
 1089               	.LM109:
 1090 0398 1883      		st Y,r17
 188:main.c        ****   i2c_buf[2] = ADXL_PWRCTL_MEASURE;
 1092               	.LM110:
 1093 039a 0983      		std Y+1,r16
 189:main.c        ****   TWI_Start_Transceiver_With_Data(i2c_buf, 3);
 1095               	.LM111:
 1096 039c 88E0      		ldi r24,lo8(8)
 1097 039e 8A83      		std Y+2,r24
 190:main.c        **** }
 1099               	.LM112:
 1100 03a0 63E0      		ldi r22,lo8(3)
 1101 03a2 CE01      		movw r24,r28
 1102               	/* epilogue start */
 191:main.c        **** 
 1104               	.LM113:
 1105 03a4 DF91      		pop r29
 1106 03a6 CF91      		pop r28
 1107 03a8 1F91      		pop r17
 1108 03aa 0F91      		pop r16
 190:main.c        **** }
 1110               	.LM114:
 1111 03ac 0C94 0000 		jmp TWI_Start_Transceiver_With_Data
 1113               	.Lscope7:
 1115               		.stabd	78,0,0
 1117               	.global	nrk_create_taskset
 1119               	nrk_create_taskset:
 1120               		.stabd	46,0,0
 324:main.c        **** }
 325:main.c        **** 
 326:main.c        **** 
 327:main.c        **** 
 328:main.c        **** void
 329:main.c        **** nrk_create_taskset()
 330:main.c        **** {
 1122               	.LM115:
 1123               	.LFBB8:
 1124 03b0 8F92      		push r8
 1125 03b2 9F92      		push r9
 1126 03b4 AF92      		push r10
 1127 03b6 BF92      		push r11
 1128 03b8 CF92      		push r12
 1129 03ba DF92      		push r13
 1130 03bc EF92      		push r14
 1131 03be FF92      		push r15
 1132 03c0 CF93      		push r28
 1133               	/* prologue: function */
 1134               	/* frame size = 0 */
 1135               	/* stack size = 9 */
 1136               	.L__stack_usage = 9
 331:main.c        ****   nrk_task_set_entry_function( &TaskOne, task_imu);
 1138               	.LM116:
 1139 03c2 60E0      		ldi r22,lo8(gs(task_imu))
 1140 03c4 70E0      		ldi r23,hi8(gs(task_imu))
 1141 03c6 80E0      		ldi r24,lo8(TaskOne)
 1142 03c8 90E0      		ldi r25,hi8(TaskOne)
 1143 03ca 0E94 0000 		call nrk_task_set_entry_function
 332:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 1145               	.LM117:
 1146 03ce 40E8      		ldi r20,lo8(-128)
 1147 03d0 50E0      		ldi r21,0
 1148 03d2 60E0      		ldi r22,lo8(Stack1)
 1149 03d4 70E0      		ldi r23,hi8(Stack1)
 1150 03d6 80E0      		ldi r24,lo8(TaskOne)
 1151 03d8 90E0      		ldi r25,hi8(TaskOne)
 1152 03da 0E94 0000 		call nrk_task_set_stk
 333:main.c        ****   TaskOne.prio = 1;
 1154               	.LM118:
 1155 03de E0E0      		ldi r30,lo8(TaskOne)
 1156 03e0 F0E0      		ldi r31,hi8(TaskOne)
 1157 03e2 C1E0      		ldi r28,lo8(1)
 1158 03e4 C087      		std Z+8,r28
 334:main.c        ****   TaskOne.FirstActivation = TRUE;
 1160               	.LM119:
 1161 03e6 C783      		std Z+7,r28
 335:main.c        ****   TaskOne.Type = BASIC_TASK;
 1163               	.LM120:
 1164 03e8 C187      		std Z+9,r28
 336:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 1166               	.LM121:
 1167 03ea C287      		std Z+10,r28
 337:main.c        ****   TaskOne.period.secs = 0;
 1169               	.LM122:
 1170 03ec 1386      		std Z+11,__zero_reg__
 1171 03ee 1486      		std Z+12,__zero_reg__
 1172 03f0 1586      		std Z+13,__zero_reg__
 1173 03f2 1686      		std Z+14,__zero_reg__
 338:main.c        ****   TaskOne.period.nano_secs = 250 * NANOS_PER_MS;
 1175               	.LM123:
 1176 03f4 80E8      		ldi r24,lo8(-128)
 1177 03f6 C82E      		mov r12,r24
 1178 03f8 82EB      		ldi r24,lo8(-78)
 1179 03fa D82E      		mov r13,r24
 1180 03fc 86EE      		ldi r24,lo8(-26)
 1181 03fe E82E      		mov r14,r24
 1182 0400 8EE0      		ldi r24,lo8(14)
 1183 0402 F82E      		mov r15,r24
 1184 0404 C786      		std Z+15,r12
 1185 0406 D08A      		std Z+16,r13
 1186 0408 E18A      		std Z+17,r14
 1187 040a F28A      		std Z+18,r15
 339:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 1189               	.LM124:
 1190 040c 138A      		std Z+19,__zero_reg__
 1191 040e 148A      		std Z+20,__zero_reg__
 1192 0410 158A      		std Z+21,__zero_reg__
 1193 0412 168A      		std Z+22,__zero_reg__
 340:main.c        ****   TaskOne.cpu_reserve.nano_secs = 30 * NANOS_PER_MS;
 1195               	.LM125:
 1196 0414 80E8      		ldi r24,lo8(-128)
 1197 0416 93EC      		ldi r25,lo8(-61)
 1198 0418 A9EC      		ldi r26,lo8(-55)
 1199 041a B1E0      		ldi r27,lo8(1)
 1200 041c 878B      		std Z+23,r24
 1201 041e 908F      		std Z+24,r25
 1202 0420 A18F      		std Z+25,r26
 1203 0422 B28F      		std Z+26,r27
 341:main.c        ****   TaskOne.offset.secs = 1;
 1205               	.LM126:
 1206 0424 81E0      		ldi r24,lo8(1)
 1207 0426 90E0      		ldi r25,0
 1208 0428 A0E0      		ldi r26,0
 1209 042a B0E0      		ldi r27,0
 1210 042c 838F      		std Z+27,r24
 1211 042e 948F      		std Z+28,r25
 1212 0430 A58F      		std Z+29,r26
 1213 0432 B68F      		std Z+30,r27
 342:main.c        ****   TaskOne.offset.nano_secs= 0;
 1215               	.LM127:
 1216 0434 178E      		std Z+31,__zero_reg__
 1217 0436 10A2      		std Z+32,__zero_reg__
 1218 0438 11A2      		std Z+33,__zero_reg__
 1219 043a 12A2      		std Z+34,__zero_reg__
 343:main.c        ****   nrk_activate_task (&TaskOne);
 1221               	.LM128:
 1222 043c CF01      		movw r24,r30
 1223 043e 0E94 0000 		call nrk_activate_task
 344:main.c        **** 
 345:main.c        ****   nrk_task_set_entry_function (&rx_task_info, rx_task);
 1225               	.LM129:
 1226 0442 60E0      		ldi r22,lo8(gs(rx_task))
 1227 0444 70E0      		ldi r23,hi8(gs(rx_task))
 1228 0446 80E0      		ldi r24,lo8(rx_task_info)
 1229 0448 90E0      		ldi r25,hi8(rx_task_info)
 1230 044a 0E94 0000 		call nrk_task_set_entry_function
 346:main.c        ****   nrk_task_set_stk (&rx_task_info, rx_task_stack, NRK_APP_STACKSIZE);
 1232               	.LM130:
 1233 044e 40E8      		ldi r20,lo8(-128)
 1234 0450 50E0      		ldi r21,0
 1235 0452 60E0      		ldi r22,lo8(rx_task_stack)
 1236 0454 70E0      		ldi r23,hi8(rx_task_stack)
 1237 0456 80E0      		ldi r24,lo8(rx_task_info)
 1238 0458 90E0      		ldi r25,hi8(rx_task_info)
 1239 045a 0E94 0000 		call nrk_task_set_stk
 347:main.c        ****   rx_task_info.prio = 1;
 1241               	.LM131:
 1242 045e E0E0      		ldi r30,lo8(rx_task_info)
 1243 0460 F0E0      		ldi r31,hi8(rx_task_info)
 1244 0462 C087      		std Z+8,r28
 348:main.c        ****   rx_task_info.FirstActivation = TRUE;
 1246               	.LM132:
 1247 0464 C783      		std Z+7,r28
 349:main.c        ****   rx_task_info.Type = BASIC_TASK;
 1249               	.LM133:
 1250 0466 C187      		std Z+9,r28
 350:main.c        ****   rx_task_info.SchType = PREEMPTIVE;
 1252               	.LM134:
 1253 0468 C287      		std Z+10,r28
 351:main.c        ****   rx_task_info.period.secs = 0;
 1255               	.LM135:
 1256 046a 1386      		std Z+11,__zero_reg__
 1257 046c 1486      		std Z+12,__zero_reg__
 1258 046e 1586      		std Z+13,__zero_reg__
 1259 0470 1686      		std Z+14,__zero_reg__
 352:main.c        ****   rx_task_info.period.nano_secs = 250 * NANOS_PER_MS;
 1261               	.LM136:
 1262 0472 C786      		std Z+15,r12
 1263 0474 D08A      		std Z+16,r13
 1264 0476 E18A      		std Z+17,r14
 1265 0478 F28A      		std Z+18,r15
 353:main.c        ****   rx_task_info.cpu_reserve.secs = 0;
 1267               	.LM137:
 1268 047a 138A      		std Z+19,__zero_reg__
 1269 047c 148A      		std Z+20,__zero_reg__
 1270 047e 158A      		std Z+21,__zero_reg__
 1271 0480 168A      		std Z+22,__zero_reg__
 354:main.c        ****   rx_task_info.cpu_reserve.nano_secs = 100 * NANOS_PER_MS;
 1273               	.LM138:
 1274 0482 812C      		mov r8,__zero_reg__
 1275 0484 91EE      		ldi r25,lo8(-31)
 1276 0486 992E      		mov r9,r25
 1277 0488 95EF      		ldi r25,lo8(-11)
 1278 048a A92E      		mov r10,r25
 1279 048c 95E0      		ldi r25,lo8(5)
 1280 048e B92E      		mov r11,r25
 1281 0490 878A      		std Z+23,r8
 1282 0492 908E      		std Z+24,r9
 1283 0494 A18E      		std Z+25,r10
 1284 0496 B28E      		std Z+26,r11
 355:main.c        ****   rx_task_info.offset.secs = 0;
 1286               	.LM139:
 1287 0498 138E      		std Z+27,__zero_reg__
 1288 049a 148E      		std Z+28,__zero_reg__
 1289 049c 158E      		std Z+29,__zero_reg__
 1290 049e 168E      		std Z+30,__zero_reg__
 356:main.c        ****   rx_task_info.offset.nano_secs = 0;
 1292               	.LM140:
 1293 04a0 178E      		std Z+31,__zero_reg__
 1294 04a2 10A2      		std Z+32,__zero_reg__
 1295 04a4 11A2      		std Z+33,__zero_reg__
 1296 04a6 12A2      		std Z+34,__zero_reg__
 357:main.c        ****   nrk_activate_task (&rx_task_info);
 1298               	.LM141:
 1299 04a8 CF01      		movw r24,r30
 1300 04aa 0E94 0000 		call nrk_activate_task
 358:main.c        **** 
 359:main.c        ****   nrk_task_set_entry_function (&tx_task_info, tx_task);
 1302               	.LM142:
 1303 04ae 60E0      		ldi r22,lo8(gs(tx_task))
 1304 04b0 70E0      		ldi r23,hi8(gs(tx_task))
 1305 04b2 80E0      		ldi r24,lo8(tx_task_info)
 1306 04b4 90E0      		ldi r25,hi8(tx_task_info)
 1307 04b6 0E94 0000 		call nrk_task_set_entry_function
 360:main.c        ****   nrk_task_set_stk (&tx_task_info, tx_task_stack, NRK_APP_STACKSIZE);
 1309               	.LM143:
 1310 04ba 40E8      		ldi r20,lo8(-128)
 1311 04bc 50E0      		ldi r21,0
 1312 04be 60E0      		ldi r22,lo8(tx_task_stack)
 1313 04c0 70E0      		ldi r23,hi8(tx_task_stack)
 1314 04c2 80E0      		ldi r24,lo8(tx_task_info)
 1315 04c4 90E0      		ldi r25,hi8(tx_task_info)
 1316 04c6 0E94 0000 		call nrk_task_set_stk
 361:main.c        ****   tx_task_info.prio = 1;
 1318               	.LM144:
 1319 04ca E0E0      		ldi r30,lo8(tx_task_info)
 1320 04cc F0E0      		ldi r31,hi8(tx_task_info)
 1321 04ce C087      		std Z+8,r28
 362:main.c        ****   tx_task_info.FirstActivation = TRUE;
 1323               	.LM145:
 1324 04d0 C783      		std Z+7,r28
 363:main.c        ****   tx_task_info.Type = BASIC_TASK;
 1326               	.LM146:
 1327 04d2 C187      		std Z+9,r28
 364:main.c        ****   tx_task_info.SchType = PREEMPTIVE;
 1329               	.LM147:
 1330 04d4 C287      		std Z+10,r28
 365:main.c        ****   tx_task_info.period.secs = 0;
 1332               	.LM148:
 1333 04d6 1386      		std Z+11,__zero_reg__
 1334 04d8 1486      		std Z+12,__zero_reg__
 1335 04da 1586      		std Z+13,__zero_reg__
 1336 04dc 1686      		std Z+14,__zero_reg__
 366:main.c        ****   tx_task_info.period.nano_secs = 250 * NANOS_PER_MS;
 1338               	.LM149:
 1339 04de C786      		std Z+15,r12
 1340 04e0 D08A      		std Z+16,r13
 1341 04e2 E18A      		std Z+17,r14
 1342 04e4 F28A      		std Z+18,r15
 367:main.c        ****   tx_task_info.cpu_reserve.secs = 0;
 1344               	.LM150:
 1345 04e6 138A      		std Z+19,__zero_reg__
 1346 04e8 148A      		std Z+20,__zero_reg__
 1347 04ea 158A      		std Z+21,__zero_reg__
 1348 04ec 168A      		std Z+22,__zero_reg__
 368:main.c        ****   tx_task_info.cpu_reserve.nano_secs = 100 * NANOS_PER_MS;
 1350               	.LM151:
 1351 04ee 878A      		std Z+23,r8
 1352 04f0 908E      		std Z+24,r9
 1353 04f2 A18E      		std Z+25,r10
 1354 04f4 B28E      		std Z+26,r11
 369:main.c        ****   tx_task_info.offset.secs = 0;
 1356               	.LM152:
 1357 04f6 138E      		std Z+27,__zero_reg__
 1358 04f8 148E      		std Z+28,__zero_reg__
 1359 04fa 158E      		std Z+29,__zero_reg__
 1360 04fc 168E      		std Z+30,__zero_reg__
 370:main.c        ****   tx_task_info.offset.nano_secs = 0;
 1362               	.LM153:
 1363 04fe 178E      		std Z+31,__zero_reg__
 1364 0500 10A2      		std Z+32,__zero_reg__
 1365 0502 11A2      		std Z+33,__zero_reg__
 1366 0504 12A2      		std Z+34,__zero_reg__
 371:main.c        ****   nrk_activate_task (&tx_task_info);
 1368               	.LM154:
 1369 0506 CF01      		movw r24,r30
 1370 0508 0E94 0000 		call nrk_activate_task
 1371               	/* epilogue start */
 372:main.c        **** 
 373:main.c        ****   tdma_task_config ();
 374:main.c        **** }
 1373               	.LM155:
 1374 050c CF91      		pop r28
 1375 050e FF90      		pop r15
 1376 0510 EF90      		pop r14
 1377 0512 DF90      		pop r13
 1378 0514 CF90      		pop r12
 1379 0516 BF90      		pop r11
 1380 0518 AF90      		pop r10
 1381 051a 9F90      		pop r9
 1382 051c 8F90      		pop r8
 373:main.c        **** }
 1384               	.LM156:
 1385 051e 0C94 0000 		jmp tdma_task_config
 1387               	.Lscope8:
 1389               		.stabd	78,0,0
 1390               		.section	.text.startup,"ax",@progbits
 1392               	.global	main
 1394               	main:
 1395               		.stabd	46,0,0
 124:main.c        ****   nrk_setup_ports();
 1397               	.LM157:
 1398               	.LFBB9:
 1399               	/* prologue: function */
 1400               	/* frame size = 0 */
 1401               	/* stack size = 0 */
 1402               	.L__stack_usage = 0
 125:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 1404               	.LM158:
 1405 0000 0E94 0000 		call nrk_setup_ports
 126:main.c        **** 
 1407               	.LM159:
 1408 0004 80E1      		ldi r24,lo8(16)
 1409 0006 90E0      		ldi r25,0
 1410 0008 0E94 0000 		call nrk_setup_uart
 128:main.c        ****   sei();
 1412               	.LM160:
 1413 000c 0E94 0000 		call TWI_Master_Initialise
 129:main.c        ****   init_adxl345();
 1415               	.LM161:
 1416               	/* #APP */
 1417               	 ;  129 "main.c" 1
 1418 0010 7894      		sei
 1419               	 ;  0 "" 2
 130:main.c        ****   init_itg3200();
 1421               	.LM162:
 1422               	/* #NOAPP */
 1423 0012 0E94 0000 		call init_adxl345
 131:main.c        ****   init_hmc5843();
 1425               	.LM163:
 1426 0016 0E94 0000 		call init_itg3200
 132:main.c        ****   /* initialize sequence number, used to sync with master */
 1428               	.LM164:
 1429 001a 0E94 0000 		call init_hmc5843
 134:main.c        **** 
 1431               	.LM165:
 1432 001e 1092 0000 		sts sequenceNo+1,__zero_reg__
 1433 0022 1092 0000 		sts sequenceNo,__zero_reg__
 137:main.c        ****   
 1435               	.LM166:
 1436 0026 81E0      		ldi r24,lo8(1)
 1437 0028 8093 0000 		sts packetReady,r24
 139:main.c        **** 
 1439               	.LM167:
 1440 002c 0E94 0000 		call nrk_init
 141:main.c        ****   nrk_led_clr(BLUE_LED);
 1442               	.LM168:
 1443 0030 82E0      		ldi r24,lo8(2)
 1444 0032 90E0      		ldi r25,0
 1445 0034 0E94 0000 		call nrk_led_clr
 142:main.c        ****   nrk_led_clr(GREEN_LED);
 1447               	.LM169:
 1448 0038 83E0      		ldi r24,lo8(3)
 1449 003a 90E0      		ldi r25,0
 1450 003c 0E94 0000 		call nrk_led_clr
 143:main.c        ****   nrk_led_clr(RED_LED);
 1452               	.LM170:
 1453 0040 81E0      		ldi r24,lo8(1)
 1454 0042 90E0      		ldi r25,0
 1455 0044 0E94 0000 		call nrk_led_clr
 144:main.c        ****  
 1457               	.LM171:
 1458 0048 80E0      		ldi r24,0
 1459 004a 90E0      		ldi r25,0
 1460 004c 0E94 0000 		call nrk_led_clr
 146:main.c        ****   nrk_create_taskset();
 1462               	.LM172:
 1463 0050 20E0      		ldi r18,0
 1464 0052 30E0      		ldi r19,0
 1465 0054 A901      		movw r20,r18
 1466 0056 60E0      		ldi r22,0
 1467 0058 70E0      		ldi r23,0
 1468 005a CB01      		movw r24,r22
 1469 005c 0E94 0000 		call nrk_time_set
 147:main.c        ****   nrk_start();
 1471               	.LM173:
 1472 0060 0E94 0000 		call nrk_create_taskset
 148:main.c        ****   
 1474               	.LM174:
 1475 0064 0E94 0000 		call nrk_start
 151:main.c        **** 
 1477               	.LM175:
 1478 0068 80E0      		ldi r24,0
 1479 006a 90E0      		ldi r25,0
 1480 006c 0895      		ret
 1482               	.Lscope9:
 1484               		.stabd	78,0,0
 1485               		.section	.progmem.data,"a",@progbits
 1488               	__c.3568:
 1489 0000 436F 756C 		.string	"Could not add slot!\r\n"
 1489      6420 6E6F 
 1489      7420 6164 
 1489      6420 736C 
 1489      6F74 210D 
 1492               	__c.3563:
 1493 0016 4E61 6E6F 		.string	"Nano-RK Version "
 1493      2D52 4B20 
 1493      5665 7273 
 1493      696F 6E20 
 1493      00
 1496               	__c.3553:
 1497 0027 4170 7020 		.string	"App tx_buf Sent\n"
 1497      7478 5F62 
 1497      7566 2053 
 1497      656E 740A 
 1497      00
 1498               		.comm	tx_task_info,35,1
 1499               		.comm	tx_task_stack,128,1
 1500               		.comm	rx_task_info,35,1
 1501               		.comm	rx_task_stack,128,1
 1502               		.comm	TaskOne,35,1
 1503               		.comm	Stack1,128,1
 1504               		.comm	mac_address,2,1
 1505               		.comm	packetReady,1,1
 1506               		.comm	sequenceNo,2,1
 1507               		.comm	rx_buf,112,1
 1508               		.comm	tx_buf,112,1
 1509               		.comm	i2c_buf,16,1
 1510               		.comm	rx_tdma_fd,18,1
 1511               		.comm	tx_tdma_fd,18,1
 1512               		.comm	tdma_rfTxInfo,7,1
 1513               		.comm	tdma_rfRxInfo,12,1
 1514               		.comm	tdma_enable_signal,1,1
 1515               		.comm	tdma_tx_pkt_done_signal,1,1
 1516               		.comm	tdma_rx_pkt_signal,1,1
 1517               		.comm	_nrk_stats_sleep_time,8,1
 1518               		.comm	cur_task_stats,150,1
 1519               		.comm	app_timer0_prescale,1,1
 1520               		.comm	app_timer0_callback,2,1
 1521               		.comm	_nrk_time_trigger,1,1
 1522               		.comm	_nrk_prev_timer_val,1,1
 1523               		.comm	error_num,1,1
 1524               		.comm	error_task,1,1
 1525               		.comm	nrk_kernel_stk_ptr,2,1
 1526               		.comm	nrk_idle_task_stk,128,1
 1527               		.comm	_nrk_signal_list,4,1
 1558               		.text
 1560               	.Letext0:
 1561               		.ident	"GCC: (GNU) 4.9.1"
 1562               	.global __do_copy_data
 1563               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:339    .text:0000000000000000 task_imu
                            *COM*:0000000000000001 packetReady
                            *COM*:0000000000000002 sequenceNo
                            *COM*:0000000000000070 tx_buf
                            *COM*:0000000000000010 i2c_buf
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:547    .text:0000000000000106 tx_task
                            *COM*:0000000000000002 mac_address
                            *COM*:0000000000000012 tx_tdma_fd
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:1496   .progmem.data:0000000000000027 __c.3553
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:693    .text:00000000000001b8 rx_task
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:1492   .progmem.data:0000000000000016 __c.3563
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:1488   .progmem.data:0000000000000000 __c.3568
                            *COM*:0000000000000070 rx_buf
                            *COM*:0000000000000012 rx_tdma_fd
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:922    .text:000000000000030c TWI_Act_On_Failure_In_Last_Transmission
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:972    .text:000000000000033a init_itg3200
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:1007   .text:0000000000000352 init_hmc5843
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:1041   .text:0000000000000368 init_adxl345
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:1119   .text:00000000000003b0 nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
                            *COM*:0000000000000023 rx_task_info
                            *COM*:0000000000000080 rx_task_stack
                            *COM*:0000000000000023 tx_task_info
                            *COM*:0000000000000080 tx_task_stack
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccZ1bRWv.s:1394   .text.startup:0000000000000000 main
                            *COM*:0000000000000007 tdma_rfTxInfo
                            *COM*:000000000000000c tdma_rfRxInfo
                            *COM*:0000000000000001 tdma_enable_signal
                            *COM*:0000000000000001 tdma_tx_pkt_done_signal
                            *COM*:0000000000000001 tdma_rx_pkt_signal
                            *COM*:0000000000000008 _nrk_stats_sleep_time
                            *COM*:0000000000000096 cur_task_stats
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
TWI_Start_Transceiver_With_Data
nrk_wait_until_next_period
nrk_get_pid
printf
tdma_started
nrk_led_clr
sprintf
tdma_send
nrk_led_set
nrk_kprintf
tdma_init
tdma_tx_slot_add
tdma_recv
putchar
puts
TWI_Start_Transceiver
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
tdma_task_config
nrk_setup_ports
nrk_setup_uart
TWI_Master_Initialise
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
