
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800200  000066b4  00006748  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ec  0080037a  0080037a  000068c2  2**0
                  ALLOC
  3 .stab         00012708  00000000  00000000  000068c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009895  00000000  00000000  00018fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00022861  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  00022872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  000239d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00024a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00024a61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 03 	jmp	0x612	; 0x612 <__ctors_end>
       4:	0c 94 a8 2c 	jmp	0x5950	; 0x5950 <__vector_1>
       8:	0c 94 da 2c 	jmp	0x59b4	; 0x59b4 <__vector_2>
       c:	0c 94 0c 2d 	jmp	0x5a18	; 0x5a18 <__vector_3>
      10:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      14:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      18:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      1c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      20:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      24:	0c 94 76 2c 	jmp	0x58ec	; 0x58ec <__vector_9>
      28:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      2c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      30:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      34:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__vector_13>
      38:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      3c:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__vector_13>
      40:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      44:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      48:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      4c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      50:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      54:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      58:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      5c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      60:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      64:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      68:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      6c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      70:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      74:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      78:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      7c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      80:	0c 94 08 2b 	jmp	0x5610	; 0x5610 <__vector_32>
      84:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      88:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      8c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      90:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      94:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      98:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      9c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      a0:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      a4:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      a8:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      ac:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      b0:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      b4:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      b8:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      bc:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      c0:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      c4:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      c8:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      cc:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      d0:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      d4:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      d8:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      dc:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      e0:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
      e4:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__vector_57>
      e8:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__vector_58>
      ec:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_59>
      f0:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__vector_60>
      f4:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <__vector_61>
      f8:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__vector_62>
      fc:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_63>
     100:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__vector_64>
     104:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
     108:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
     10c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
     110:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
     114:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
     118:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
     11c:	0c 94 28 03 	jmp	0x650	; 0x650 <__bad_interrupt>
     120:	3c 10       	cpse	r3, r12
     122:	49 10       	cpse	r4, r9
     124:	56 10       	cpse	r5, r6
     126:	63 10       	cpse	r6, r3
     128:	70 10       	cpse	r7, r0
     12a:	7d 10       	cpse	r7, r13
     12c:	8a 10       	cpse	r8, r10
     12e:	ad 10       	cpse	r10, r13
     130:	bb 10       	cpse	r11, r11
     132:	c9 10       	cpse	r12, r9
     134:	d7 10       	cpse	r13, r7
     136:	e5 10       	cpse	r14, r5
     138:	f3 10       	cpse	r15, r3
     13a:	01 11       	cpse	r16, r1
     13c:	24 11       	cpse	r18, r4
     13e:	26 11       	cpse	r18, r6
     140:	28 11       	cpse	r18, r8
     142:	2a 11       	cpse	r18, r10
     144:	2c 11       	cpse	r18, r12
     146:	2e 11       	cpse	r18, r14
     148:	30 11       	cpse	r19, r0
     14a:	4f 11       	cpse	r20, r15
     14c:	72 11       	cpse	r23, r2
     14e:	96 11       	cpse	r25, r6
     150:	b9 11       	cpse	r27, r9
     152:	dc 11       	cpse	r29, r12
     154:	ff 11       	cpse	r31, r15
     156:	22 12       	cpse	r2, r18
     158:	5c 12       	cpse	r5, r28
     15a:	69 12       	cpse	r6, r25
     15c:	76 12       	cpse	r7, r22
     15e:	83 12       	cpse	r8, r19
     160:	90 12       	cpse	r9, r16
     162:	9d 12       	cpse	r9, r29
     164:	aa 12       	cpse	r10, r26
     166:	c3 12       	cpse	r12, r19
     168:	d0 12       	cpse	r13, r16
     16a:	dd 12       	cpse	r13, r29
     16c:	ea 12       	cpse	r14, r26
     16e:	f7 12       	cpse	r15, r23
     170:	04 13       	cpse	r16, r20
     172:	11 13       	cpse	r17, r17
     174:	2e 1a       	sub	r2, r30
     176:	34 1a       	sub	r3, r20
     178:	37 1a       	sub	r3, r23
     17a:	3a 1a       	sub	r3, r26
     17c:	3d 1a       	sub	r3, r29
     17e:	40 1a       	sub	r4, r16
     180:	46 1a       	sub	r4, r22
     182:	43 1a       	sub	r4, r19
     184:	49 1a       	sub	r4, r25
     186:	4c 1a       	sub	r4, r28
     188:	4f 1a       	sub	r4, r31
     18a:	58 1a       	sub	r5, r24
     18c:	5b 1a       	sub	r5, r27
     18e:	5e 1a       	sub	r5, r30
     190:	61 1a       	sub	r6, r17
     192:	55 1a       	sub	r5, r21
     194:	2b 1a       	sub	r2, r27
     196:	31 1a       	sub	r3, r17
     198:	64 1a       	sub	r6, r20
     19a:	67 1a       	sub	r6, r23
     19c:	52 1a       	sub	r5, r18
     19e:	28 1a       	sub	r2, r24
     1a0:	50 1b       	sub	r21, r16
     1a2:	53 1b       	sub	r21, r19
     1a4:	5e 1b       	sub	r21, r30
     1a6:	63 1b       	sub	r22, r19
     1a8:	6a 1b       	sub	r22, r26
     1aa:	73 1b       	sub	r23, r19
     1ac:	76 1b       	sub	r23, r22
     1ae:	7b 1b       	sub	r23, r27
     1b0:	82 1b       	sub	r24, r18
     1b2:	8b 1b       	sub	r24, r27

000001b4 <__trampolines_end>:
     1b4:	74 78       	andi	r23, 0x84	; 132
     1b6:	20 65       	ori	r18, 0x50	; 80
     1b8:	72 72       	andi	r23, 0x22	; 34
     1ba:	6f 72       	andi	r22, 0x2F	; 47
     1bc:	0d 0a       	sbc	r0, r29
	...

000001bf <__c.3496>:
     1bf:	45 52 52 4f 52 20 73 65 74 74 69 6e 67 20 75 70     ERROR setting up
     1cf:	20 74 69 6d 65 72 0d 0a 00                           timer...

000001d8 <__c.3776>:
     1d8:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     1e8:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

000001f4 <__c.3746>:
     1f4:	54 44 4d 41 20 45 52 52 4f 52 3a 20 63 72 65 61     TDMA ERROR: crea
     204:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     214:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

00000220 <__c.3744>:
     220:	54 44 4d 41 20 45 52 52 4f 52 3a 20 63 72 65 61     TDMA ERROR: crea
     230:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     240:	61 69 6c 65 64 0d 0a 00                             ailed...

00000248 <__c.3742>:
     248:	54 44 4d 41 20 45 52 52 4f 52 3a 20 63 72 65 61     TDMA ERROR: crea
     258:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     268:	61 69 6c 65 64 0d 0a 00                             ailed...

00000270 <__c.3717>:
     270:	54 44 4d 41 20 54 58 3a 20 57 6f 6b 65 20 75 70     TDMA TX: Woke up
     280:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     290:	0d 0a 00                                            ...

00000293 <__c.3715>:
     293:	54 44 4d 41 20 54 58 3a 20 45 72 72 6f 72 20 63     TDMA TX: Error c
     2a3:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     2b3:	74 0d 0a 00                                         t...

000002b7 <__c.3341>:
     2b7:	0d 0a 4e 61 6e 6f 2d 52 4b 20 54 61 73 6b 20 53     ..Nano-RK Task S
     2c7:	74 61 74 69 73 74 69 63 73 3a 0d 0a 00              tatistics:...

000002d4 <__c.3336>:
     2d4:	0d 0a 00                                            ...

000002d7 <__c.3334>:
     2d7:	0d 0a 20 20 20 4f 76 65 72 66 6c 6f 77 20 45 72     ..   Overflow Er
     2e7:	72 6f 72 20 53 74 61 74 75 73 3a 20 00              ror Status: .

000002f4 <__c.3332>:
     2f4:	0d 0a 20 20 20 4b 65 72 6e 65 6c 20 56 69 6f 6c     ..   Kernel Viol
     304:	61 74 69 6f 6e 73 3a 20 00                          ations: .

0000030d <__c.3330>:
     30d:	0d 0a 20 20 20 50 72 65 65 6d 70 74 69 6f 6e 73     ..   Preemptions
     31d:	3a 20 00                                            : .

00000320 <__c.3328>:
     320:	0d 0a 20 20 20 53 77 61 70 2d 69 6e 73 3a 20 00     ..   Swap-ins: .

00000330 <__c.3326>:
     330:	0d 0a 20 20 20 54 69 6d 65 20 5b 4d 69 6e 2c 4c     ..   Time [Min,L
     340:	61 73 74 2c 4d 61 78 5d 3a 20 00                    ast,Max]: .

0000034b <__c.3324>:
     34b:	0d 0a 20 20 20 54 6f 74 61 6c 20 43 50 55 3a 20     ..   Total CPU: 
	...

0000035c <__c.3322>:
     35c:	0d 0a 20 20 20 49 64 6c 65 20 54 61 73 6b 20 44     ..   Idle Task D
     36c:	65 65 70 20 53 6c 65 65 70 20 54 69 6d 65 3a 20     eep Sleep Time: 
	...

0000037d <__c.3320>:
     37d:	0d 0a 20 20 20 54 6f 74 61 6c 20 53 79 73 74 65     ..   Total Syste
     38d:	6d 20 55 70 74 69 6d 65 3a 20 00                    m Uptime: .

00000398 <__c.3318>:
     398:	20 54 61 73 6b 20 49 44 3a 20 00                     Task ID: .

000003a3 <__c.3420>:
     3a3:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000003aa <__c.3417>:
     3aa:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000003b9 <__c.3414>:
     3b9:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000003ca <__c.3411>:
     3ca:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     3da:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000003e5 <__c.3408>:
     3e5:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     3f5:	20 53 69 67 6e 61 6c 00                              Signal.

000003fd <__c.3405>:
     3fd:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     40d:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000041d <__c.3402>:
     41d:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     42d:	72 6f 72 00                                         ror.

00000431 <__c.3399>:
     431:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000442 <__c.3396>:
     442:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     452:	61 72 74 00                                         art.

00000456 <__c.3393>:
     456:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000465 <__c.3390>:
     465:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     475:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000480 <__c.3387>:
     480:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000048c <__c.3384>:
     48c:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     49c:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     4ac:	20 6f 6b 3f 00                                       ok?.

000004b1 <__c.3381>:
     4b1:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     4c1:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000004cf <__c.3378>:
     4cf:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     4df:	72 74 00                                            rt.

000004e2 <__c.3375>:
     4e2:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     4f2:	49 44 00                                            ID.

000004f5 <__c.3372>:
     4f5:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     505:	20 57 61 6b 65 75 70 00                              Wakeup.

0000050d <__c.3369>:
     50d:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     51d:	6c 61 74 65 64 00                                   lated.

00000523 <__c.3366>:
     523:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     533:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000053e <__c.3363>:
     53e:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     54e:	69 6e 74 65 72 00                                   inter.

00000554 <__c.3360>:
     554:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     564:	6c 6f 77 00                                         low.

00000568 <__c.3357>:
     568:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     578:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     588:	6e 6f 75 67 68 21 00                                nough!.

0000058f <__c.3353>:
     58f:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     59f:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     5af:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     5bf:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000005cb <__c.3350>:
     5cb:	29 3a 20 00                                         ): .

000005cf <__c.3348>:
     5cf:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000005db <__c.3341>:
     5db:	4e 52 4b 20 52 65 62 6f 6f 74 2e 2e 2e 0d 0a 00     NRK Reboot......

000005eb <__c.3249>:
     5eb:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000005fa <__c.2228>:
     5fa:	45 46 47 65 66 67 00                                EFGefg.

00000601 <__c.2222>:
     601:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000612 <__ctors_end>:
     612:	11 24       	eor	r1, r1
     614:	1f be       	out	0x3f, r1	; 63
     616:	cf ef       	ldi	r28, 0xFF	; 255
     618:	d1 e4       	ldi	r29, 0x41	; 65
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	cd bf       	out	0x3d, r28	; 61

0000061e <__do_copy_data>:
     61e:	13 e0       	ldi	r17, 0x03	; 3
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b2 e0       	ldi	r27, 0x02	; 2
     624:	e4 eb       	ldi	r30, 0xB4	; 180
     626:	f6 e6       	ldi	r31, 0x66	; 102
     628:	00 e0       	ldi	r16, 0x00	; 0
     62a:	0b bf       	out	0x3b, r16	; 59
     62c:	02 c0       	rjmp	.+4      	; 0x632 <__do_copy_data+0x14>
     62e:	07 90       	elpm	r0, Z+
     630:	0d 92       	st	X+, r0
     632:	aa 37       	cpi	r26, 0x7A	; 122
     634:	b1 07       	cpc	r27, r17
     636:	d9 f7       	brne	.-10     	; 0x62e <__do_copy_data+0x10>

00000638 <__do_clear_bss>:
     638:	1a e0       	ldi	r17, 0x0A	; 10
     63a:	aa e7       	ldi	r26, 0x7A	; 122
     63c:	b3 e0       	ldi	r27, 0x03	; 3
     63e:	01 c0       	rjmp	.+2      	; 0x642 <.do_clear_bss_start>

00000640 <.do_clear_bss_loop>:
     640:	1d 92       	st	X+, r1

00000642 <.do_clear_bss_start>:
     642:	a6 36       	cpi	r26, 0x66	; 102
     644:	b1 07       	cpc	r27, r17
     646:	e1 f7       	brne	.-8      	; 0x640 <.do_clear_bss_loop>
     648:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <main>
     64c:	0c 94 58 33 	jmp	0x66b0	; 0x66b0 <_exit>

00000650 <__bad_interrupt>:
     650:	0c 94 cb 2a 	jmp	0x5596	; 0x5596 <__vector_default>

00000654 <timer_callback>:
  
  return 0;
}

void timer_callback(){
  nrk_led_toggle(RED_LED);
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <nrk_led_toggle>

0000065c <task_cadence>:
}

void task_cadence()
{
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	2a 97       	sbiw	r28, 0x0a	; 10
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
  nrk_time_t t;
  uint8_t val,v;
  uint16_t time;  

  // // setup a software watch dog timer
  nrk_sw_wdt_init(0, &t, NULL);
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	be 01       	movw	r22, r28
     676:	6f 5f       	subi	r22, 0xFF	; 255
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 ac 28 	call	0x5158	; 0x5158 <nrk_sw_wdt_init>
  nrk_sw_wdt_start(0);
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 27 29 	call	0x524e	; 0x524e <nrk_sw_wdt_start>

  //set 400 Hz timer
  if (nrk_timer_int_configure
     68a:	2a e2       	ldi	r18, 0x2A	; 42
     68c:	33 e0       	ldi	r19, 0x03	; 3
     68e:	40 ed       	ldi	r20, 0xD0	; 208
     690:	57 e0       	ldi	r21, 0x07	; 7
     692:	62 e0       	ldi	r22, 0x02	; 2
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 8d 2a 	call	0x551a	; 0x551a <nrk_timer_int_configure>
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	21 f0       	breq	.+8      	; 0x6a8 <task_cadence+0x4c>
      (NRK_APP_TIMER_0,2,2000, &timer_callback) != NRK_OK)
    nrk_kprintf(PSTR("ERROR setting up timer\r\n"));
     6a0:	8f eb       	ldi	r24, 0xBF	; 191
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>

  nrk_timer_int_reset(NRK_APP_TIMER_0);
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <nrk_timer_int_reset>

  nrk_gpio_direction(NRK_PORTD_0, NRK_PIN_INPUT);
     6ae:	f0 90 56 02 	lds	r15, 0x0256
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	8f 2d       	mov	r24, r15
     6b6:	0e 94 47 12 	call	0x248e	; 0x248e <nrk_gpio_direction>

  nrk_timer_int_start(NRK_APP_TIMER_0);
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 84 2a 	call	0x5508	; 0x5508 <nrk_timer_int_start>
      if (!v)
      {
        nrk_kprintf(PSTR("tx error\r\n"));
      }

      printf("Task1 timer = %u\r\n",time);
     6c0:	07 e7       	ldi	r16, 0x77	; 119
     6c2:	12 e0       	ldi	r17, 0x02	; 2

  nrk_timer_int_start(NRK_APP_TIMER_0);

  while (1) {
    // Update watchdog timer
    nrk_sw_wdt_update(0);
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <nrk_sw_wdt_update>
    nrk_led_toggle(RED_LED);
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 2b 13 	call	0x2656	; 0x2656 <nrk_led_toggle>

    val = nrk_gpio_get(NRK_PORTD_0);
     6d4:	8f 2d       	mov	r24, r15
     6d6:	0e 94 12 11 	call	0x2224	; 0x2224 <nrk_gpio_get>
    if (val)
     6da:	88 23       	and	r24, r24
     6dc:	99 f3       	breq	.-26     	; 0x6c4 <task_cadence+0x68>
    {
      time = nrk_timer_int_read(NRK_APP_TIMER_0);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <nrk_timer_int_read>
     6e4:	9a 87       	std	Y+10, r25	; 0x0a
     6e6:	89 87       	std	Y+9, r24	; 0x09
      nrk_timer_int_reset(NRK_APP_TIMER_0);
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <nrk_timer_int_reset>
      
      v = tdma_send (&tx_tdma_fd, &time, 2, TDMA_BLOCKING);
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	42 e0       	ldi	r20, 0x02	; 2
     6f2:	be 01       	movw	r22, r28
     6f4:	67 5f       	subi	r22, 0xF7	; 247
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	8c e8       	ldi	r24, 0x8C	; 140
     6fa:	96 e0       	ldi	r25, 0x06	; 6
     6fc:	0e 94 28 04 	call	0x850	; 0x850 <tdma_send>
      if (!v)
     700:	81 11       	cpse	r24, r1
     702:	04 c0       	rjmp	.+8      	; 0x70c <task_cadence+0xb0>
      {
        nrk_kprintf(PSTR("tx error\r\n"));
     704:	84 eb       	ldi	r24, 0xB4	; 180
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
      }

      printf("Task1 timer = %u\r\n",time);
     70c:	8a 85       	ldd	r24, Y+10	; 0x0a
     70e:	8f 93       	push	r24
     710:	89 85       	ldd	r24, Y+9	; 0x09
     712:	8f 93       	push	r24
     714:	1f 93       	push	r17
     716:	0f 93       	push	r16
     718:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	cf cf       	rjmp	.-98     	; 0x6c4 <task_cadence+0x68>

00000726 <nrk_create_taskset>:


void
nrk_create_taskset()
{
  nrk_task_set_entry_function( &TaskOne, task_cadence);
     726:	6e e2       	ldi	r22, 0x2E	; 46
     728:	73 e0       	ldi	r23, 0x03	; 3
     72a:	86 e5       	ldi	r24, 0x56	; 86
     72c:	96 e0       	ldi	r25, 0x06	; 6
     72e:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     732:	40 e8       	ldi	r20, 0x80	; 128
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	6e e9       	ldi	r22, 0x9E	; 158
     738:	76 e0       	ldi	r23, 0x06	; 6
     73a:	86 e5       	ldi	r24, 0x56	; 86
     73c:	96 e0       	ldi	r25, 0x06	; 6
     73e:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <nrk_task_set_stk>
  TaskOne.prio = 2;
     742:	e6 e5       	ldi	r30, 0x56	; 86
     744:	f6 e0       	ldi	r31, 0x06	; 6
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	80 87       	std	Z+8, r24	; 0x08
  TaskOne.FirstActivation = TRUE;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	87 83       	std	Z+7, r24	; 0x07
  TaskOne.Type = BASIC_TASK;
     74e:	81 87       	std	Z+9, r24	; 0x09
  TaskOne.SchType = PREEMPTIVE;
     750:	82 87       	std	Z+10, r24	; 0x0a
  TaskOne.period.secs = 0;
     752:	13 86       	std	Z+11, r1	; 0x0b
     754:	14 86       	std	Z+12, r1	; 0x0c
     756:	15 86       	std	Z+13, r1	; 0x0d
     758:	16 86       	std	Z+14, r1	; 0x0e
  TaskOne.period.nano_secs = 250 * NANOS_PER_MS;
     75a:	80 e8       	ldi	r24, 0x80	; 128
     75c:	92 eb       	ldi	r25, 0xB2	; 178
     75e:	a6 ee       	ldi	r26, 0xE6	; 230
     760:	be e0       	ldi	r27, 0x0E	; 14
     762:	87 87       	std	Z+15, r24	; 0x0f
     764:	90 8b       	std	Z+16, r25	; 0x10
     766:	a1 8b       	std	Z+17, r26	; 0x11
     768:	b2 8b       	std	Z+18, r27	; 0x12
  TaskOne.cpu_reserve.secs = 0;
     76a:	13 8a       	std	Z+19, r1	; 0x13
     76c:	14 8a       	std	Z+20, r1	; 0x14
     76e:	15 8a       	std	Z+21, r1	; 0x15
     770:	16 8a       	std	Z+22, r1	; 0x16
  TaskOne.cpu_reserve.nano_secs = 0;
     772:	17 8a       	std	Z+23, r1	; 0x17
     774:	10 8e       	std	Z+24, r1	; 0x18
     776:	11 8e       	std	Z+25, r1	; 0x19
     778:	12 8e       	std	Z+26, r1	; 0x1a
  TaskOne.offset.secs = 1;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 e0       	ldi	r26, 0x00	; 0
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	83 8f       	std	Z+27, r24	; 0x1b
     784:	94 8f       	std	Z+28, r25	; 0x1c
     786:	a5 8f       	std	Z+29, r26	; 0x1d
     788:	b6 8f       	std	Z+30, r27	; 0x1e
  TaskOne.offset.nano_secs= 0;
     78a:	17 8e       	std	Z+31, r1	; 0x1f
     78c:	10 a2       	std	Z+32, r1	; 0x20
     78e:	11 a2       	std	Z+33, r1	; 0x21
     790:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&TaskOne);
     792:	cf 01       	movw	r24, r30
     794:	0e 94 96 20 	call	0x412c	; 0x412c <nrk_activate_task>

  tdma_task_config ();
     798:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <tdma_task_config>

0000079c <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     79c:	08 95       	ret

0000079e <tdma_aes_setkey>:

void tdma_aes_setkey(uint8_t *key)
{
uint8_t i;
	aes_setkey(key);
     79e:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <aes_setkey>

000007a2 <tdma_aes_enable>:
}


void tdma_aes_enable()
{
  _tdma_aes_enabled=1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 b0 03 	sts	0x03B0, r24
     7a8:	08 95       	ret

000007aa <tdma_aes_disable>:
}

void tdma_aes_disable()
{
  _tdma_aes_enabled=1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 b0 03 	sts	0x03B0, r24
     7b0:	08 95       	ret

000007b2 <tdma_sync_ok>:
}

uint8_t tdma_sync_ok()
{
return sync_status;
}
     7b2:	80 91 7d 03 	lds	r24, 0x037D
     7b6:	08 95       	ret

000007b8 <tdma_set_error_callback>:

int8_t tdma_set_error_callback(void (*fp)(void))
{
	if(fp==NULL ) return NRK_ERROR;
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	31 f0       	breq	.+12     	; 0x7c8 <tdma_set_error_callback+0x10>
	tdma_error_callback=fp;
     7bc:	90 93 7c 03 	sts	0x037C, r25
     7c0:	80 93 7b 03 	sts	0x037B, r24
return NRK_OK;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	08 95       	ret
return sync_status;
}

int8_t tdma_set_error_callback(void (*fp)(void))
{
	if(fp==NULL ) return NRK_ERROR;
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
	tdma_error_callback=fp;
return NRK_OK;
}
     7ca:	08 95       	ret

000007cc <tdma_tx_slot_add>:


int8_t tdma_tx_slot_add (uint16_t slot)
{
  tdma_tx_sched[0] = slot;
     7cc:	90 93 b3 03 	sts	0x03B3, r25
     7d0:	80 93 b2 03 	sts	0x03B2, r24
  tdma_tx_slots = 1;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	80 93 b1 03 	sts	0x03B1, r24
  return NRK_OK;
}
     7da:	08 95       	ret

000007dc <tdma_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	08 95       	ret

000007e0 <tdma_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	08 95       	ret

000007e6 <tdma_set_rf_power>:

int8_t tdma_set_rf_power (uint8_t power)
{
  if (power > 31)
     7e6:	80 32       	cpi	r24, 0x20	; 32
     7e8:	20 f4       	brcc	.+8      	; 0x7f2 <tdma_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     7ea:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <rf_tx_power>
  return NRK_OK;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	08 95       	ret
}

int8_t tdma_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     7f4:	08 95       	ret

000007f6 <tdma_set_channel>:

int8_t tdma_set_channel (uint8_t chan)
{
  if (chan > 26)
     7f6:	8b 31       	cpi	r24, 0x1B	; 27
     7f8:	68 f4       	brcc	.+26     	; 0x814 <tdma_set_channel+0x1e>
     7fa:	68 2f       	mov	r22, r24
    return NRK_ERROR;
  tdma_chan = chan;
     7fc:	80 93 a3 03 	sts	0x03A3, r24
//rf_init (&tdma_rfRxInfo, chan, 0xFFFF, 0x00000);
  rf_init (&tdma_rfRxInfo, chan, 0x2420, 0x1214);
     800:	24 e1       	ldi	r18, 0x14	; 20
     802:	32 e1       	ldi	r19, 0x12	; 18
     804:	40 e2       	ldi	r20, 0x20	; 32
     806:	54 e2       	ldi	r21, 0x24	; 36
     808:	86 ec       	ldi	r24, 0xC6	; 198
     80a:	95 e0       	ldi	r25, 0x05	; 5
     80c:	0e 94 29 0b 	call	0x1652	; 0x1652 <rf_init>
  return NRK_OK;
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	08 95       	ret
}

int8_t tdma_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     814:	8f ef       	ldi	r24, 0xFF	; 255
  tdma_chan = chan;
//rf_init (&tdma_rfRxInfo, chan, 0xFFFF, 0x00000);
  rf_init (&tdma_rfRxInfo, chan, 0x2420, 0x1214);
  return NRK_OK;
}
     816:	08 95       	ret

00000818 <tdma_set_slot_len_ms>:

int8_t tdma_set_slot_len_ms (uint16_t len)
{
  tdma_slot_len_ms = len;
     818:	90 93 ab 03 	sts	0x03AB, r25
     81c:	80 93 aa 03 	sts	0x03AA, r24
  _tdma_slot_time.nano_secs = len * NANOS_PER_MS;
     820:	e9 e8       	ldi	r30, 0x89	; 137
     822:	f3 e0       	ldi	r31, 0x03	; 3
     824:	dc 01       	movw	r26, r24
     826:	20 e4       	ldi	r18, 0x40	; 64
     828:	32 e4       	ldi	r19, 0x42	; 66
     82a:	4f e0       	ldi	r20, 0x0F	; 15
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <__muluhisi3>
     832:	64 83       	std	Z+4, r22	; 0x04
     834:	75 83       	std	Z+5, r23	; 0x05
     836:	86 83       	std	Z+6, r24	; 0x06
     838:	97 83       	std	Z+7, r25	; 0x07
  _tdma_slot_time.secs = 0;
     83a:	10 82       	st	Z, r1
     83c:	11 82       	std	Z+1, r1	; 0x01
     83e:	12 82       	std	Z+2, r1	; 0x02
     840:	13 82       	std	Z+3, r1	; 0x03
  return NRK_OK;
}
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	08 95       	ret

00000846 <tdma_set_slots_per_cycle>:


int8_t tdma_set_slots_per_cycle (uint16_t slots_per_cycle)
{

  tdma_slots_per_cycle = slots_per_cycle;
     846:	90 93 a9 03 	sts	0x03A9, r25
     84a:	80 93 a8 03 	sts	0x03A8, r24
}
     84e:	08 95       	ret

00000850 <tdma_send>:

int8_t tdma_send (tdma_info * fd, uint8_t * buf, uint8_t len, uint8_t flags)
{
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	00 d0       	rcall	.+0      	; 0x85e <tdma_send+0xe>
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	6c 01       	movw	r12, r24
     864:	7b 01       	movw	r14, r22
  uint32_t mask;
  uint8_t i;

  if (tx_data_ready == 1)
     866:	80 91 ac 03 	lds	r24, 0x03AC
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	09 f4       	brne	.+2      	; 0x870 <tdma_send+0x20>
     86e:	8d c0       	rjmp	.+282    	; 0x98a <tdma_send+0x13a>
    return NRK_ERROR;
  if (len == 0)
     870:	44 23       	and	r20, r20
     872:	09 f4       	brne	.+2      	; 0x876 <tdma_send+0x26>
     874:	8a c0       	rjmp	.+276    	; 0x98a <tdma_send+0x13a>
    return NRK_ERROR;
  if (buf == NULL)
     876:	61 15       	cp	r22, r1
     878:	71 05       	cpc	r23, r1
     87a:	09 f4       	brne	.+2      	; 0x87e <tdma_send+0x2e>
     87c:	86 c0       	rjmp	.+268    	; 0x98a <tdma_send+0x13a>
    return NRK_ERROR;
  if (fd == NULL)
     87e:	c1 14       	cp	r12, r1
     880:	d1 04       	cpc	r13, r1
     882:	09 f4       	brne	.+2      	; 0x886 <tdma_send+0x36>
     884:	82 c0       	rjmp	.+260    	; 0x98a <tdma_send+0x13a>
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  if (flags == TDMA_BLOCKING)
     886:	21 11       	cpse	r18, r1
     888:	08 c0       	rjmp	.+16     	; 0x89a <tdma_send+0x4a>
    nrk_signal_register (tdma_tx_pkt_done_signal);
     88a:	80 91 b5 07 	lds	r24, 0x07B5
     88e:	2a 83       	std	Y+2, r18	; 0x02
     890:	49 83       	std	Y+1, r20	; 0x01
     892:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <nrk_signal_register>
     896:	49 81       	ldd	r20, Y+1	; 0x01
     898:	2a 81       	ldd	r18, Y+2	; 0x02

  tx_data_ready = 1;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 ac 03 	sts	0x03AC, r24

  tdma_rfTxInfo.pPayload = tdma_tx_buf;
     8a0:	8a e2       	ldi	r24, 0x2A	; 42
     8a2:	94 e0       	ldi	r25, 0x04	; 4
     8a4:	90 93 7d 06 	sts	0x067D, r25
     8a8:	80 93 7c 06 	sts	0x067C, r24
// Setup the header data
  tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = (fd->slot >> 8) & 0xff;
     8ac:	f6 01       	movw	r30, r12
     8ae:	81 81       	ldd	r24, Z+1	; 0x01
     8b0:	80 93 2b 04 	sts	0x042B, r24
  tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = (fd->slot & 0xff);
     8b4:	80 81       	ld	r24, Z
     8b6:	80 93 2a 04 	sts	0x042A, r24
  tdma_rfTxInfo.pPayload[TDMA_DST_HIGH] = (fd->dst >> 8) & 0xff;
     8ba:	85 81       	ldd	r24, Z+5	; 0x05
     8bc:	96 81       	ldd	r25, Z+6	; 0x06
     8be:	90 93 2d 04 	sts	0x042D, r25
  tdma_rfTxInfo.pPayload[TDMA_DST_LOW] = (fd->dst & 0xff);
     8c2:	80 93 2c 04 	sts	0x042C, r24
//  tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = (fd->src >> 8) & 0xff;
  tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = (tdma_my_mac & 0xff);
     8c6:	80 91 af 03 	lds	r24, 0x03AF
     8ca:	80 93 2f 04 	sts	0x042F, r24
  tdma_rfTxInfo.pPayload[TDMA_SRC_LOW] = (tdma_my_mac >> 8) & 0xff;
     8ce:	10 92 2e 04 	sts	0x042E, r1
  fd->seq_num++;
     8d2:	81 85       	ldd	r24, Z+9	; 0x09
     8d4:	92 85       	ldd	r25, Z+10	; 0x0a
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	92 87       	std	Z+10, r25	; 0x0a
     8da:	81 87       	std	Z+9, r24	; 0x09
  tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_HIGH] = ((fd->seq_num>>8) & 0xff);
     8dc:	90 93 31 04 	sts	0x0431, r25
  tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_LOW] = (fd->seq_num & 0xff);
     8e0:	80 93 30 04 	sts	0x0430, r24
  tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_HIGH] = (fd->cycle_size >> 8) & 0xff;
     8e4:	83 81       	ldd	r24, Z+3	; 0x03
     8e6:	80 93 33 04 	sts	0x0433, r24
  tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_LOW] = (fd->cycle_size & 0xff);
     8ea:	82 81       	ldd	r24, Z+2	; 0x02
     8ec:	80 93 32 04 	sts	0x0432, r24
  tdma_rfTxInfo.pPayload[TDMA_TTL] = tdma_ttl<<4 | tdma_ttl;
     8f0:	30 91 ad 03 	lds	r19, 0x03AD
     8f4:	f0 e1       	ldi	r31, 0x10	; 16
     8f6:	3f 9f       	mul	r19, r31
     8f8:	c0 01       	movw	r24, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	83 2b       	or	r24, r19
     8fe:	80 93 34 04 	sts	0x0434, r24
     902:	5e 2d       	mov	r21, r14

// Copy the user payload to the back of the header
  for (i = 0; i < len; i++)
     904:	f7 01       	movw	r30, r14
     906:	8c e0       	ldi	r24, 0x0C	; 12
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	3e 2f       	mov	r19, r30
     90c:	35 1b       	sub	r19, r21
     90e:	34 17       	cp	r19, r20
     910:	50 f4       	brcc	.+20     	; 0x926 <tdma_send+0xd6>
    tdma_rfTxInfo.pPayload[i + TDMA_PCF_HEADER] = buf[i];
     912:	31 91       	ld	r19, Z+
     914:	a0 91 7c 06 	lds	r26, 0x067C
     918:	b0 91 7d 06 	lds	r27, 0x067D
     91c:	a8 0f       	add	r26, r24
     91e:	b9 1f       	adc	r27, r25
     920:	3c 93       	st	X, r19
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	f2 cf       	rjmp	.-28     	; 0x90a <tdma_send+0xba>
// Set packet length with header
  tdma_rfTxInfo.length = len + TDMA_PCF_HEADER;
     926:	44 5f       	subi	r20, 0xF4	; 244
     928:	40 93 7b 06 	sts	0x067B, r20
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif

  if (flags == TDMA_BLOCKING) {
     92c:	21 11       	cpse	r18, r1
     92e:	2b c0       	rjmp	.+86     	; 0x986 <tdma_send+0x136>
    mask = nrk_event_wait (SIG (tdma_tx_pkt_done_signal));
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	a0 e0       	ldi	r26, 0x00	; 0
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	bc 01       	movw	r22, r24
     93a:	cd 01       	movw	r24, r26
     93c:	00 90 b5 07 	lds	r0, 0x07B5
     940:	04 c0       	rjmp	.+8      	; 0x94a <tdma_send+0xfa>
     942:	66 0f       	add	r22, r22
     944:	77 1f       	adc	r23, r23
     946:	88 1f       	adc	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	0a 94       	dec	r0
     94c:	d2 f7       	brpl	.-12     	; 0x942 <tdma_send+0xf2>
     94e:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <nrk_event_wait>
     952:	6b 01       	movw	r12, r22
     954:	7c 01       	movw	r14, r24
    if (mask == 0)
     956:	61 15       	cp	r22, r1
     958:	71 05       	cpc	r23, r1
     95a:	81 05       	cpc	r24, r1
     95c:	91 05       	cpc	r25, r1
     95e:	21 f4       	brne	.+8      	; 0x968 <tdma_send+0x118>
      nrk_kprintf (PSTR ("TDMA TX: Error calling event wait\r\n"));
     960:	83 e9       	ldi	r24, 0x93	; 147
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    if ((mask & SIG (tdma_tx_pkt_done_signal)) == 0)
     968:	00 90 b5 07 	lds	r0, 0x07B5
     96c:	04 c0       	rjmp	.+8      	; 0x976 <tdma_send+0x126>
     96e:	f6 94       	lsr	r15
     970:	e7 94       	ror	r14
     972:	d7 94       	ror	r13
     974:	c7 94       	ror	r12
     976:	0a 94       	dec	r0
     978:	d2 f7       	brpl	.-12     	; 0x96e <tdma_send+0x11e>
     97a:	c0 fc       	sbrc	r12, 0
     97c:	04 c0       	rjmp	.+8      	; 0x986 <tdma_send+0x136>
      nrk_kprintf (PSTR ("TDMA TX: Woke up on wrong signal\r\n"));
     97e:	80 e7       	ldi	r24, 0x70	; 112
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    return NRK_OK;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	01 c0       	rjmp	.+2      	; 0x98c <tdma_send+0x13c>
{
  uint32_t mask;
  uint8_t i;

  if (tx_data_ready == 1)
    return NRK_ERROR;
     98a:	8f ef       	ldi	r24, 0xFF	; 255
      nrk_kprintf (PSTR ("TDMA TX: Woke up on wrong signal\r\n"));
    return NRK_OK;
  }

  return NRK_OK;
}
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	08 95       	ret

0000099e <tdma_recv>:

int8_t tdma_recv (tdma_info * fd, uint8_t * buf, uint8_t * len, uint8_t flags)
{
     99e:	8f 92       	push	r8
     9a0:	9f 92       	push	r9
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	1f 92       	push	r1
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	4c 01       	movw	r8, r24
     9be:	8b 01       	movw	r16, r22
     9c0:	5a 01       	movw	r10, r20
     9c2:	80 91 a5 03 	lds	r24, 0x03A5
  nrk_sig_mask_t event;
  uint8_t i;
  if (flags == TDMA_BLOCKING) {
     9c6:	21 11       	cpse	r18, r1
     9c8:	1c c0       	rjmp	.+56     	; 0xa02 <tdma_recv+0x64>
    if (tdma_rx_buf_empty == 1) {
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	f1 f4       	brne	.+60     	; 0xa0a <tdma_recv+0x6c>
      nrk_signal_register (tdma_rx_pkt_signal);
     9ce:	80 91 b4 07 	lds	r24, 0x07B4
     9d2:	29 83       	std	Y+1, r18	; 0x01
     9d4:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <nrk_signal_register>
      event = nrk_event_wait (SIG (tdma_rx_pkt_signal));
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	bc 01       	movw	r22, r24
     9e2:	cd 01       	movw	r24, r26
     9e4:	00 90 b4 07 	lds	r0, 0x07B4
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <tdma_recv+0x54>
     9ea:	66 0f       	add	r22, r22
     9ec:	77 1f       	adc	r23, r23
     9ee:	88 1f       	adc	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	0a 94       	dec	r0
     9f4:	d2 f7       	brpl	.-12     	; 0x9ea <tdma_recv+0x4c>
     9f6:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <nrk_event_wait>
     9fa:	6b 01       	movw	r12, r22
     9fc:	7c 01       	movw	r14, r24
     9fe:	29 81       	ldd	r18, Y+1	; 0x01
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <tdma_recv+0x6c>
    }
  }
  else if (tdma_rx_buf_empty == 1)
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	11 f4       	brne	.+4      	; 0xa0a <tdma_recv+0x6c>
    return NRK_ERROR;
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	7c c0       	rjmp	.+248    	; 0xb02 <tdma_recv+0x164>

  if (tdma_rfRxInfo.length < TDMA_PCF_HEADER)
     a0a:	80 91 c9 05 	lds	r24, 0x05C9
     a0e:	8c 30       	cpi	r24, 0x0C	; 12
     a10:	d4 f3       	brlt	.-12     	; 0xa06 <tdma_recv+0x68>
    return NRK_ERROR;
  // Set the length
  *len = (uint8_t) (tdma_rfRxInfo.length - TDMA_PCF_HEADER);
     a12:	8c 50       	subi	r24, 0x0C	; 12
     a14:	d5 01       	movw	r26, r10
     a16:	8c 93       	st	X, r24
  // Copy the payload data
  for (i = 0; i < *len; i++)
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	f5 01       	movw	r30, r10
     a1c:	90 81       	ld	r25, Z
     a1e:	89 17       	cp	r24, r25
     a20:	78 f4       	brcc	.+30     	; 0xa40 <tdma_recv+0xa2>
    buf[i] = tdma_rfRxInfo.pPayload[i + TDMA_PCF_HEADER];
     a22:	48 2f       	mov	r20, r24
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	e0 91 cb 05 	lds	r30, 0x05CB
     a2a:	f0 91 cc 05 	lds	r31, 0x05CC
     a2e:	e4 0f       	add	r30, r20
     a30:	f5 1f       	adc	r31, r21
     a32:	94 85       	ldd	r25, Z+12	; 0x0c
     a34:	f8 01       	movw	r30, r16
     a36:	e4 0f       	add	r30, r20
     a38:	f5 1f       	adc	r31, r21
     a3a:	90 83       	st	Z, r25
  if (tdma_rfRxInfo.length < TDMA_PCF_HEADER)
    return NRK_ERROR;
  // Set the length
  *len = (uint8_t) (tdma_rfRxInfo.length - TDMA_PCF_HEADER);
  // Copy the payload data
  for (i = 0; i < *len; i++)
     a3c:	8f 5f       	subi	r24, 0xFF	; 255
     a3e:	ed cf       	rjmp	.-38     	; 0xa1a <tdma_recv+0x7c>
    buf[i] = tdma_rfRxInfo.pPayload[i + TDMA_PCF_HEADER];

  // Fill the information struct
  fd->rssi = tdma_rfRxInfo.rssi;
     a40:	80 91 ce 05 	lds	r24, 0x05CE
     a44:	99 27       	eor	r25, r25
     a46:	87 fd       	sbrc	r24, 7
     a48:	90 95       	com	r25
     a4a:	d4 01       	movw	r26, r8
     a4c:	1e 96       	adiw	r26, 0x0e	; 14
     a4e:	9c 93       	st	X, r25
     a50:	8e 93       	st	-X, r24
     a52:	1d 97       	sbiw	r26, 0x0d	; 13
  fd->actualRssi = tdma_rfRxInfo.actualRssi;
     a54:	80 91 cf 05 	lds	r24, 0x05CF
     a58:	1f 96       	adiw	r26, 0x0f	; 15
     a5a:	8c 93       	st	X, r24
     a5c:	1f 97       	sbiw	r26, 0x0f	; 15
  fd->energyDetectionLevel = tdma_rfRxInfo.energyDetectionLevel;
     a5e:	80 91 d0 05 	lds	r24, 0x05D0
     a62:	50 96       	adiw	r26, 0x10	; 16
     a64:	8c 93       	st	X, r24
     a66:	50 97       	sbiw	r26, 0x10	; 16
  fd->linkQualityIndication = tdma_rfRxInfo.linkQualityIndication;
     a68:	80 91 d1 05 	lds	r24, 0x05D1
     a6c:	51 96       	adiw	r26, 0x11	; 17
     a6e:	8c 93       	st	X, r24
     a70:	51 97       	sbiw	r26, 0x11	; 17
  fd->src =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
     a72:	e0 91 cb 05 	lds	r30, 0x05CB
     a76:	f0 91 cc 05 	lds	r31, 0x05CC
     a7a:	85 81       	ldd	r24, Z+5	; 0x05
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	98 2f       	mov	r25, r24
     a80:	88 27       	eor	r24, r24
     a82:	34 81       	ldd	r19, Z+4	; 0x04
     a84:	83 2b       	or	r24, r19
  // Fill the information struct
  fd->rssi = tdma_rfRxInfo.rssi;
  fd->actualRssi = tdma_rfRxInfo.actualRssi;
  fd->energyDetectionLevel = tdma_rfRxInfo.energyDetectionLevel;
  fd->linkQualityIndication = tdma_rfRxInfo.linkQualityIndication;
  fd->src =
     a86:	18 96       	adiw	r26, 0x08	; 8
     a88:	9c 93       	st	X, r25
     a8a:	8e 93       	st	-X, r24
     a8c:	17 97       	sbiw	r26, 0x07	; 7
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SRC_LOW];
  fd->dst =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
     a8e:	83 81       	ldd	r24, Z+3	; 0x03
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	98 2f       	mov	r25, r24
     a94:	88 27       	eor	r24, r24
     a96:	32 81       	ldd	r19, Z+2	; 0x02
     a98:	83 2b       	or	r24, r19
  fd->energyDetectionLevel = tdma_rfRxInfo.energyDetectionLevel;
  fd->linkQualityIndication = tdma_rfRxInfo.linkQualityIndication;
  fd->src =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SRC_LOW];
  fd->dst =
     a9a:	16 96       	adiw	r26, 0x06	; 6
     a9c:	9c 93       	st	X, r25
     a9e:	8e 93       	st	-X, r24
     aa0:	15 97       	sbiw	r26, 0x05	; 5
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_DST_LOW];
  fd->slot =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
     aa2:	81 81       	ldd	r24, Z+1	; 0x01
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	98 2f       	mov	r25, r24
     aa8:	88 27       	eor	r24, r24
     aaa:	30 81       	ld	r19, Z
     aac:	83 2b       	or	r24, r19
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SRC_LOW];
  fd->dst =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_DST_LOW];
  fd->slot =
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	9c 93       	st	X, r25
     ab2:	8e 93       	st	-X, r24
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SLOT_LOW];
  fd->seq_num =
    ((uint16_t) tdma_rfRxInfo.
     ab4:	87 81       	ldd	r24, Z+7	; 0x07
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     pPayload[TDMA_SEQ_NUM_HIGH] << 8) | tdma_rfRxInfo.
     ab8:	98 2f       	mov	r25, r24
     aba:	88 27       	eor	r24, r24
     abc:	36 81       	ldd	r19, Z+6	; 0x06
     abe:	83 2b       	or	r24, r19
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_DST_LOW];
  fd->slot =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SLOT_LOW];
  fd->seq_num =
     ac0:	1a 96       	adiw	r26, 0x0a	; 10
     ac2:	9c 93       	st	X, r25
     ac4:	8e 93       	st	-X, r24
     ac6:	19 97       	sbiw	r26, 0x09	; 9
    ((uint16_t) tdma_rfRxInfo.
     pPayload[TDMA_SEQ_NUM_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SEQ_NUM_LOW];
  fd->cycle_size =
    ((uint16_t) tdma_rfRxInfo.
     ac8:	81 85       	ldd	r24, Z+9	; 0x09
     aca:	90 e0       	ldi	r25, 0x00	; 0
     pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
     acc:	98 2f       	mov	r25, r24
     ace:	88 27       	eor	r24, r24
     ad0:	30 85       	ldd	r19, Z+8	; 0x08
     ad2:	83 2b       	or	r24, r19
    pPayload[TDMA_SLOT_LOW];
  fd->seq_num =
    ((uint16_t) tdma_rfRxInfo.
     pPayload[TDMA_SEQ_NUM_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SEQ_NUM_LOW];
  fd->cycle_size =
     ad4:	13 96       	adiw	r26, 0x03	; 3
     ad6:	9c 93       	st	X, r25
     ad8:	8e 93       	st	-X, r24
     ada:	12 97       	sbiw	r26, 0x02	; 2
    ((uint16_t) tdma_rfRxInfo.
     pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_CYCLE_SIZE_LOW];

  fd->ttl= (uint8_t) tdma_rfRxInfo.pPayload[TDMA_TTL]; 
     adc:	82 85       	ldd	r24, Z+10	; 0x0a
     ade:	1c 96       	adiw	r26, 0x0c	; 12
     ae0:	8c 93       	st	X, r24


  // Check if it was a time out instead of packet RX signal
  if (flags == TDMA_BLOCKING)
     ae2:	21 11       	cpse	r18, r1
     ae4:	0b c0       	rjmp	.+22     	; 0xafc <tdma_recv+0x15e>
    if ((event & SIG (tdma_rx_pkt_signal)) == 0)
     ae6:	00 90 b4 07 	lds	r0, 0x07B4
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <tdma_recv+0x156>
     aec:	f6 94       	lsr	r15
     aee:	e7 94       	ror	r14
     af0:	d7 94       	ror	r13
     af2:	c7 94       	ror	r12
     af4:	0a 94       	dec	r0
     af6:	d2 f7       	brpl	.-12     	; 0xaec <tdma_recv+0x14e>
     af8:	c0 fe       	sbrs	r12, 0
     afa:	85 cf       	rjmp	.-246    	; 0xa06 <tdma_recv+0x68>
      return NRK_ERROR;

  // Set the buffer as empty
  tdma_rx_buf_empty = 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 a5 03 	sts	0x03A5, r24
  return NRK_OK;

}
     b02:	0f 90       	pop	r0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	9f 90       	pop	r9
     b1a:	8f 90       	pop	r8
     b1c:	08 95       	ret

00000b1e <tdma_rx_pkt_set_buffer>:


int8_t tdma_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	51 f0       	breq	.+20     	; 0xb36 <tdma_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  tdma_rfRxInfo.pPayload = buf;
     b22:	90 93 cc 05 	sts	0x05CC, r25
     b26:	80 93 cb 05 	sts	0x05CB, r24
  tdma_rfRxInfo.max_length = size;
     b2a:	60 93 ca 05 	sts	0x05CA, r22
  tdma_rx_buf_empty = 1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 a5 03 	sts	0x03A5, r24
  return NRK_OK;
     b34:	08 95       	ret


int8_t tdma_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     b36:	8f ef       	ldi	r24, 0xFF	; 255
  tdma_rfRxInfo.pPayload = buf;
  tdma_rfRxInfo.max_length = size;
  tdma_rx_buf_empty = 1;
  return NRK_OK;
}
     b38:	08 95       	ret

00000b3a <tdma_ttl_set>:

void tdma_ttl_set(uint8_t ttl)
{
tdma_ttl=ttl;
     b3a:	80 93 ad 03 	sts	0x03AD, r24
     b3e:	08 95       	ret

00000b40 <tdma_init>:
}

int8_t tdma_init (uint8_t mode, uint8_t chan, uint16_t my_mac)
{
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	16 2f       	mov	r17, r22
     b4a:	d4 2f       	mov	r29, r20
     b4c:	05 2f       	mov	r16, r21
  tx_reserve = -1;
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	90 93 80 03 	sts	0x0380, r25
  tdma_rx_failure_cnt = 0;
     b54:	10 92 7f 03 	sts	0x037F, r1
     b58:	10 92 7e 03 	sts	0x037E, r1
  tdma_mode = mode;
     b5c:	80 93 ae 03 	sts	0x03AE, r24
  tdma_tx_slots = 0;
     b60:	10 92 b1 03 	sts	0x03B1, r1
  tdma_ttl=TDMA_DEFAULT_TTL;
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	80 93 ad 03 	sts	0x03AD, r24
  sync_status=0;
     b6a:	10 92 7d 03 	sts	0x037D, r1
    nrk_gpio_direction(NRK_MOSI,NRK_PIN_OUTPUT);
    nrk_gpio_direction(NRK_MISO,NRK_PIN_OUTPUT);
  #endif


  tdma_slots_per_cycle = TDMA_DEFAULT_SLOTS_PER_CYCLE;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	94 e0       	ldi	r25, 0x04	; 4
     b72:	90 93 a9 03 	sts	0x03A9, r25
     b76:	80 93 a8 03 	sts	0x03A8, r24

  _tdma_slot_time.nano_secs = TDMA_DEFAULT_SLOT_MS * NANOS_PER_MS;
     b7a:	80 e8       	ldi	r24, 0x80	; 128
     b7c:	96 e9       	ldi	r25, 0x96	; 150
     b7e:	a8 e9       	ldi	r26, 0x98	; 152
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	80 93 8d 03 	sts	0x038D, r24
     b86:	90 93 8e 03 	sts	0x038E, r25
     b8a:	a0 93 8f 03 	sts	0x038F, r26
     b8e:	b0 93 90 03 	sts	0x0390, r27
  _tdma_slot_time.secs = 0;
     b92:	10 92 89 03 	sts	0x0389, r1
     b96:	10 92 8a 03 	sts	0x038A, r1
     b9a:	10 92 8b 03 	sts	0x038B, r1
     b9e:	10 92 8c 03 	sts	0x038C, r1

  tdma_rx_pkt_signal = nrk_signal_create ();
     ba2:	0e 94 93 1c 	call	0x3926	; 0x3926 <nrk_signal_create>
     ba6:	c8 2f       	mov	r28, r24
     ba8:	80 93 b4 07 	sts	0x07B4, r24
  if (tdma_rx_pkt_signal == NRK_ERROR) {
     bac:	8f 3f       	cpi	r24, 0xFF	; 255
     bae:	19 f4       	brne	.+6      	; 0xbb6 <tdma_init+0x76>
    nrk_kprintf (PSTR ("TDMA ERROR: creating rx signal failed\r\n"));
     bb0:	88 e4       	ldi	r24, 0x48	; 72
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <tdma_init+0x88>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  tdma_tx_pkt_done_signal = nrk_signal_create ();
     bb6:	0e 94 93 1c 	call	0x3926	; 0x3926 <nrk_signal_create>
     bba:	c8 2f       	mov	r28, r24
     bbc:	80 93 b5 07 	sts	0x07B5, r24
  if (tdma_tx_pkt_done_signal == NRK_ERROR) {
     bc0:	8f 3f       	cpi	r24, 0xFF	; 255
     bc2:	69 f4       	brne	.+26     	; 0xbde <tdma_init+0x9e>
    nrk_kprintf (PSTR ("TDMA ERROR: creating tx signal failed\r\n"));
     bc4:	80 e2       	ldi	r24, 0x20	; 32
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     bcc:	e0 91 f9 09 	lds	r30, 0x09F9
     bd0:	f0 91 fa 09 	lds	r31, 0x09FA
     bd4:	60 85       	ldd	r22, Z+8	; 0x08
     bd6:	8e e0       	ldi	r24, 0x0E	; 14
     bd8:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
    return NRK_ERROR;
     bdc:	2d c0       	rjmp	.+90     	; 0xc38 <tdma_init+0xf8>
  }
  tdma_enable_signal = nrk_signal_create ();
     bde:	0e 94 93 1c 	call	0x3926	; 0x3926 <nrk_signal_create>
     be2:	c8 2f       	mov	r28, r24
     be4:	80 93 4e 08 	sts	0x084E, r24
  if (tdma_enable_signal == NRK_ERROR) {
     be8:	8f 3f       	cpi	r24, 0xFF	; 255
     bea:	19 f4       	brne	.+6      	; 0xbf2 <tdma_init+0xb2>
    nrk_kprintf (PSTR ("TDMA ERROR: creating enable signal failed\r\n"));
     bec:	84 ef       	ldi	r24, 0xF4	; 244
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	eb cf       	rjmp	.-42     	; 0xbc8 <tdma_init+0x88>

int8_t tdma_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
  tdma_rfRxInfo.pPayload = buf;
     bf2:	8a eb       	ldi	r24, 0xBA	; 186
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	90 93 cc 05 	sts	0x05CC, r25
     bfa:	80 93 cb 05 	sts	0x05CB, r24
  tdma_rfRxInfo.max_length = size;
     bfe:	80 e7       	ldi	r24, 0x70	; 112
     c00:	80 93 ca 05 	sts	0x05CA, r24
  }


  // Set the one main rx buffer
  tdma_rx_pkt_set_buffer (tdma_rx_buf, TDMA_MAX_PKT_SIZE);
  tdma_rx_buf_empty = 1;
     c04:	c1 e0       	ldi	r28, 0x01	; 1
     c06:	c0 93 a5 03 	sts	0x03A5, r28
  tx_data_ready = 0;
     c0a:	10 92 ac 03 	sts	0x03AC, r1


  // Setup the radio 
  rf_init (&tdma_rfRxInfo, chan, 0xffff, my_mac);
     c0e:	2d 2f       	mov	r18, r29
     c10:	30 2f       	mov	r19, r16
     c12:	4f ef       	ldi	r20, 0xFF	; 255
     c14:	5f ef       	ldi	r21, 0xFF	; 255
     c16:	61 2f       	mov	r22, r17
     c18:	86 ec       	ldi	r24, 0xC6	; 198
     c1a:	95 e0       	ldi	r25, 0x05	; 5
     c1c:	0e 94 29 0b 	call	0x1652	; 0x1652 <rf_init>
  tdma_chan = chan;
     c20:	10 93 a3 03 	sts	0x03A3, r17
  tdma_my_mac = my_mac;
     c24:	d0 93 af 03 	sts	0x03AF, r29

  //FASTSPI_SETREG (CC2420_RSSI, 0xE580); // CCA THR=-25
  //FASTSPI_SETREG (CC2420_TXCTRL, 0x80FF);       // TX TURNAROUND = 128 us
  //FASTSPI_SETREG (CC2420_RXCTRL1, 0x0A56);
  // default cca thresh of -45
  rf_set_cca_thresh (-45);
     c28:	83 ed       	ldi	r24, 0xD3	; 211
     c2a:	9f ef       	ldi	r25, 0xFF	; 255
     c2c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <rf_set_cca_thresh>

  asm volatile ("":::"memory");
  tdma_running = 1;
     c30:	c0 93 a4 03 	sts	0x03A4, r28
  tdma_is_enabled = 1;
     c34:	c0 93 a2 03 	sts	0x03A2, r28
  return NRK_OK;
}
     c38:	8c 2f       	mov	r24, r28
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <tdma_get_rx_pkt_signal>:


nrk_sig_t tdma_get_rx_pkt_signal ()
{
  nrk_signal_register (tdma_rx_pkt_signal);
     c44:	80 91 b4 07 	lds	r24, 0x07B4
     c48:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <nrk_signal_register>
  return (tdma_rx_pkt_signal);
}
     c4c:	80 91 b4 07 	lds	r24, 0x07B4
     c50:	08 95       	ret

00000c52 <tdma_get_tx_done_signal>:

nrk_sig_t tdma_get_tx_done_signal ()
{
  nrk_signal_register (tdma_tx_pkt_done_signal);
     c52:	80 91 b5 07 	lds	r24, 0x07B5
     c56:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <nrk_signal_register>
  return (tdma_tx_pkt_done_signal);
}
     c5a:	80 91 b5 07 	lds	r24, 0x07B5
     c5e:	08 95       	ret

00000c60 <tdma_rx_pkt_get>:


uint8_t *tdma_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (tdma_rx_buf_empty == 1) {
     c60:	20 91 a5 03 	lds	r18, 0x03A5
     c64:	21 30       	cpi	r18, 0x01	; 1
     c66:	39 f4       	brne	.+14     	; 0xc76 <tdma_rx_pkt_get+0x16>
    *len = 0;
     c68:	fc 01       	movw	r30, r24
     c6a:	10 82       	st	Z, r1
    *rssi = 0;
     c6c:	fb 01       	movw	r30, r22
     c6e:	10 82       	st	Z, r1
    return NULL;
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	08 95       	ret
  }
  *len = tdma_rfRxInfo.length;
     c76:	20 91 c9 05 	lds	r18, 0x05C9
     c7a:	fc 01       	movw	r30, r24
     c7c:	20 83       	st	Z, r18
  *rssi = tdma_rfRxInfo.rssi;
     c7e:	80 91 ce 05 	lds	r24, 0x05CE
     c82:	fb 01       	movw	r30, r22
     c84:	80 83       	st	Z, r24
  return tdma_rfRxInfo.pPayload;
     c86:	80 91 cb 05 	lds	r24, 0x05CB
     c8a:	90 91 cc 05 	lds	r25, 0x05CC
}
     c8e:	08 95       	ret

00000c90 <tdma_rx_pkt_release>:


int8_t tdma_rx_pkt_release(void)
{
    tdma_rx_buf_empty=1;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	80 93 a5 03 	sts	0x03A5, r24
return NRK_OK;
}
     c96:	08 95       	ret

00000c98 <tdma_disable>:


void tdma_disable ()
{
  tdma_is_enabled = 0;
     c98:	10 92 a2 03 	sts	0x03A2, r1
  rf_power_down ();
     c9c:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <rf_power_down>

00000ca0 <tdma_enable>:
}

void tdma_enable ()
{
  tdma_is_enabled = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 a2 03 	sts	0x03A2, r24
  rf_power_up ();
     ca6:	0e 94 ce 0a 	call	0x159c	; 0x159c <rf_power_up>
  nrk_event_signal (tdma_enable_signal);
     caa:	80 91 4e 08 	lds	r24, 0x084E
     cae:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <nrk_event_signal>

00000cb2 <tdma_wakeup>:

}

void tdma_wakeup()
{
tdma_wakeup_flag=1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 bd 05 	sts	0x05BD, r24
     cb8:	08 95       	ret

00000cba <tdma_started>:

}

int8_t tdma_started ()
{
  return tdma_running;
     cba:	80 91 a4 03 	lds	r24, 0x03A4
}
     cbe:	08 95       	ret

00000cc0 <_tdma_rx_master>:
{
  int8_t v, i;
  static uint8_t cnt=0;
  v = 0;
  
  if (tdma_rx_buf_empty != 1) {
     cc0:	80 91 a5 03 	lds	r24, 0x03A5
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	99 f0       	breq	.+38     	; 0xcee <_tdma_rx_master+0x2e>
    rf_rx_off();
     cc8:	0e 94 9f 0b 	call	0x173e	; 0x173e <rf_rx_off>
    rf_rx_on();
     ccc:	0e 94 99 0b 	call	0x1732	; 0x1732 <rf_rx_on>
    cnt++;
     cd0:	80 91 7a 03 	lds	r24, 0x037A
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	80 93 7a 03 	sts	0x037A, r24
    // catch annoying race condition, FIXME: why does this really happen?
    if(cnt>2){ tdma_rx_buf_empty=0;
     cda:	83 30       	cpi	r24, 0x03	; 3
     cdc:	30 f0       	brcs	.+12     	; 0xcea <_tdma_rx_master+0x2a>
     cde:	10 92 a5 03 	sts	0x03A5, r1
          nrk_event_signal (tdma_rx_pkt_signal);
     ce2:	80 91 b4 07 	lds	r24, 0x07B4
     ce6:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <nrk_event_signal>
	}
    return NRK_ERROR;
     cea:	8f ef       	ldi	r24, 0xFF	; 255
     cec:	08 95       	ret
    }
cnt=0;
     cee:	10 92 7a 03 	sts	0x037A, r1
  #ifdef GPIO_DEBUG
    nrk_gpio_set(NRK_MISO);
  #endif
//  if (rf_rx_check_fifop () == 1) {
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
     cf2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <rf_rx_packet_nonblock>
      if (v == 1) {
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	91 f5       	brne	.+100    	; 0xd5e <_tdma_rx_master+0x9e>
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
     cfa:	60 91 c9 05 	lds	r22, 0x05C9
     cfe:	6d 30       	cpi	r22, 0x0D	; 13
     d00:	6c f1       	brlt	.+90     	; 0xd5c <_tdma_rx_master+0x9c>
	if(_tdma_aes_enabled)
     d02:	80 91 b0 03 	lds	r24, 0x03B0
     d06:	81 11       	cpse	r24, r1
     d08:	07 c0       	rjmp	.+14     	; 0xd18 <_tdma_rx_master+0x58>
   		 	nrk_gpio_clr(NRK_MISO);
  		#endif
			return NRK_ERROR; 
		}
	 }
	  tdma_rx_buf_empty = 0;
     d0a:	10 92 a5 03 	sts	0x03A5, r1
          nrk_event_signal (tdma_rx_pkt_signal);
     d0e:	80 91 b4 07 	lds	r24, 0x07B4
     d12:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <nrk_event_signal>
     d16:	22 c0       	rjmp	.+68     	; 0xd5c <_tdma_rx_master+0x9c>
      if (v == 1) {
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
     d18:	80 91 cb 05 	lds	r24, 0x05CB
     d1c:	90 91 cc 05 	lds	r25, 0x05CC
     d20:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <aes_decrypt>
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     d24:	80 91 cb 05 	lds	r24, 0x05CB
     d28:	90 91 cc 05 	lds	r25, 0x05CC
     d2c:	20 91 c9 05 	lds	r18, 0x05C9
     d30:	82 0f       	add	r24, r18
     d32:	91 1d       	adc	r25, r1
     d34:	27 fd       	sbrc	r18, 7
     d36:	9a 95       	dec	r25
     d38:	fc 01       	movw	r30, r24
     d3a:	31 97       	sbiw	r30, 0x01	; 1
     d3c:	20 81       	ld	r18, Z
     d3e:	2a 3c       	cpi	r18, 0xCA	; 202
     d40:	a1 f6       	brne	.-88     	; 0xcea <_tdma_rx_master+0x2a>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     d42:	31 97       	sbiw	r30, 0x01	; 1
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     d44:	20 81       	ld	r18, Z
     d46:	2e 3f       	cpi	r18, 0xFE	; 254
     d48:	81 f6       	brne	.-96     	; 0xcea <_tdma_rx_master+0x2a>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     d4a:	31 97       	sbiw	r30, 0x01	; 1
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     d4c:	20 81       	ld	r18, Z
     d4e:	2e 3b       	cpi	r18, 0xBE	; 190
     d50:	61 f6       	brne	.-104    	; 0xcea <_tdma_rx_master+0x2a>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-4]!= 0xEF ) 
     d52:	31 97       	sbiw	r30, 0x01	; 1
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     d54:	80 81       	ld	r24, Z
     d56:	8f 3e       	cpi	r24, 0xEF	; 239
     d58:	c1 f2       	breq	.-80     	; 0xd0a <_tdma_rx_master+0x4a>
     d5a:	c7 cf       	rjmp	.-114    	; 0xcea <_tdma_rx_master+0x2a>
//  if (rf_rx_check_fifop () == 1) {
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
      if (v == 1) {
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
     d5c:	81 e0       	ldi	r24, 0x01	; 1
  #ifdef GPIO_DEBUG
    nrk_gpio_clr(NRK_MISO);
  #endif

  return v;
}
     d5e:	08 95       	ret

00000d60 <_tdma_rx>:


int8_t _tdma_rx ()
{
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
  int8_t v, i;
  v = 0;

  if (tdma_rx_buf_empty != 1)
     d64:	80 91 a5 03 	lds	r24, 0x03A5
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	11 f0       	breq	.+4      	; 0xd70 <_tdma_rx+0x10>
    return NRK_ERROR;
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	40 c0       	rjmp	.+128    	; 0xdf0 <_tdma_rx+0x90>
     d70:	d4 e6       	ldi	r29, 0x64	; 100
    nrk_gpio_set(NRK_MISO);
  #endif
//  if (rf_rx_check_fifop () == 1) {
    for (i = 0; i < 100; i++) {
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
     d72:	0e 94 a3 0c 	call	0x1946	; 0x1946 <rf_rx_packet_nonblock>
     d76:	c8 2f       	mov	r28, r24
      if (v == 1) {
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	89 f5       	brne	.+98     	; 0xdde <_tdma_rx+0x7e>
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
     d7c:	60 91 c9 05 	lds	r22, 0x05C9
     d80:	6d 30       	cpi	r22, 0x0D	; 13
     d82:	ac f1       	brlt	.+106    	; 0xdee <_tdma_rx+0x8e>
	if(_tdma_aes_enabled)
     d84:	80 91 b0 03 	lds	r24, 0x03B0
     d88:	81 11       	cpse	r24, r1
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <_tdma_rx+0x3a>
    nrk_gpio_clr(NRK_MISO);
  #endif
			return NRK_ERROR; 
			}
	 }
	  tdma_rx_buf_empty = 0;
     d8c:	10 92 a5 03 	sts	0x03A5, r1
          nrk_event_signal (tdma_rx_pkt_signal);
     d90:	80 91 b4 07 	lds	r24, 0x07B4
     d94:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <nrk_event_signal>
     d98:	2a c0       	rjmp	.+84     	; 0xdee <_tdma_rx+0x8e>
      if (v == 1) {
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
     d9a:	80 91 cb 05 	lds	r24, 0x05CB
     d9e:	90 91 cc 05 	lds	r25, 0x05CC
     da2:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <aes_decrypt>
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     da6:	80 91 cb 05 	lds	r24, 0x05CB
     daa:	90 91 cc 05 	lds	r25, 0x05CC
     dae:	20 91 c9 05 	lds	r18, 0x05C9
     db2:	82 0f       	add	r24, r18
     db4:	91 1d       	adc	r25, r1
     db6:	27 fd       	sbrc	r18, 7
     db8:	9a 95       	dec	r25
     dba:	fc 01       	movw	r30, r24
     dbc:	31 97       	sbiw	r30, 0x01	; 1
     dbe:	20 81       	ld	r18, Z
     dc0:	2a 3c       	cpi	r18, 0xCA	; 202
     dc2:	a1 f6       	brne	.-88     	; 0xd6c <_tdma_rx+0xc>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     dc4:	31 97       	sbiw	r30, 0x01	; 1
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     dc6:	20 81       	ld	r18, Z
     dc8:	2e 3f       	cpi	r18, 0xFE	; 254
     dca:	81 f6       	brne	.-96     	; 0xd6c <_tdma_rx+0xc>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     dcc:	31 97       	sbiw	r30, 0x01	; 1
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     dce:	20 81       	ld	r18, Z
     dd0:	2e 3b       	cpi	r18, 0xBE	; 190
     dd2:	61 f6       	brne	.-104    	; 0xd6c <_tdma_rx+0xc>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-4]!= 0xEF ) {
     dd4:	31 97       	sbiw	r30, 0x01	; 1
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     dd6:	80 81       	ld	r24, Z
     dd8:	8f 3e       	cpi	r24, 0xEF	; 239
     dda:	c1 f2       	breq	.-80     	; 0xd8c <_tdma_rx+0x2c>
     ddc:	c7 cf       	rjmp	.-114    	; 0xd6c <_tdma_rx+0xc>
	  tdma_rx_buf_empty = 0;
          nrk_event_signal (tdma_rx_pkt_signal);
        }
        break;
      }
      nrk_spin_wait_us (100);
     dde:	84 e6       	ldi	r24, 0x64	; 100
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <nrk_spin_wait_us>
     de6:	d1 50       	subi	r29, 0x01	; 1

  #ifdef GPIO_DEBUG
    nrk_gpio_set(NRK_MISO);
  #endif
//  if (rf_rx_check_fifop () == 1) {
    for (i = 0; i < 100; i++) {
     de8:	21 f6       	brne	.-120    	; 0xd72 <_tdma_rx+0x12>
     dea:	8c 2f       	mov	r24, r28
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <_tdma_rx+0x90>
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
     dee:	81 e0       	ldi	r24, 0x01	; 1

  #ifdef GPIO_DEBUG
    nrk_gpio_clr(NRK_MISO);
  #endif
  return v;
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <_tdma_tx>:


int8_t _tdma_tx ()
{
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
  int8_t v;
  uint8_t checksum, i;
  uint8_t *data_start, *frame_start = &TRXFBST;
 

if(_tdma_aes_enabled)
     dfc:	90 91 b0 03 	lds	r25, 0x03B0
     e00:	99 23       	and	r25, r25
     e02:	09 f4       	brne	.+2      	; 0xe06 <_tdma_tx+0x10>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <_tdma_tx+0x96>
{
   // Add 0xCAFEBEEF as a magic number for AES MAC
   tdma_rfTxInfo.length=tdma_rfTxInfo.length+4;
     e06:	20 91 7b 06 	lds	r18, 0x067B
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	82 0f       	add	r24, r18

   // Make packet a multiple of 16
   if((tdma_rfTxInfo.length%16)!=0) tdma_rfTxInfo.length=((tdma_rfTxInfo.length/16)+1)*16;
     e0e:	38 2f       	mov	r19, r24
     e10:	3f 70       	andi	r19, 0x0F	; 15
     e12:	31 f0       	breq	.+12     	; 0xe20 <_tdma_tx+0x2a>
     e14:	87 ff       	sbrs	r24, 7
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <_tdma_tx+0x26>
     e18:	83 e1       	ldi	r24, 0x13	; 19
     e1a:	82 0f       	add	r24, r18
     e1c:	80 7f       	andi	r24, 0xF0	; 240
     e1e:	80 5f       	subi	r24, 0xF0	; 240
     e20:	80 93 7b 06 	sts	0x067B, r24
   
//   printf( "l2: %d\r\n",tdma_rfTxInfo.length );
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-1]=0xCA;
     e24:	80 91 7b 06 	lds	r24, 0x067B
     e28:	e0 91 7c 06 	lds	r30, 0x067C
     e2c:	f0 91 7d 06 	lds	r31, 0x067D
     e30:	e8 0f       	add	r30, r24
     e32:	f1 1d       	adc	r31, r1
     e34:	87 fd       	sbrc	r24, 7
     e36:	fa 95       	dec	r31
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	8a ec       	ldi	r24, 0xCA	; 202
     e3c:	80 83       	st	Z, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-2]=0xFE;
     e3e:	80 91 7b 06 	lds	r24, 0x067B
     e42:	e0 91 7c 06 	lds	r30, 0x067C
     e46:	f0 91 7d 06 	lds	r31, 0x067D
     e4a:	e8 0f       	add	r30, r24
     e4c:	f1 1d       	adc	r31, r1
     e4e:	87 fd       	sbrc	r24, 7
     e50:	fa 95       	dec	r31
     e52:	32 97       	sbiw	r30, 0x02	; 2
     e54:	8e ef       	ldi	r24, 0xFE	; 254
     e56:	80 83       	st	Z, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-3]=0xBE;
     e58:	80 91 7b 06 	lds	r24, 0x067B
     e5c:	e0 91 7c 06 	lds	r30, 0x067C
     e60:	f0 91 7d 06 	lds	r31, 0x067D
     e64:	e8 0f       	add	r30, r24
     e66:	f1 1d       	adc	r31, r1
     e68:	87 fd       	sbrc	r24, 7
     e6a:	fa 95       	dec	r31
     e6c:	33 97       	sbiw	r30, 0x03	; 3
     e6e:	8e eb       	ldi	r24, 0xBE	; 190
     e70:	80 83       	st	Z, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-4]=0xEF;
     e72:	80 91 7b 06 	lds	r24, 0x067B
     e76:	e0 91 7c 06 	lds	r30, 0x067C
     e7a:	f0 91 7d 06 	lds	r31, 0x067D
     e7e:	e8 0f       	add	r30, r24
     e80:	f1 1d       	adc	r31, r1
     e82:	87 fd       	sbrc	r24, 7
     e84:	fa 95       	dec	r31
     e86:	34 97       	sbiw	r30, 0x04	; 4
     e88:	8f ee       	ldi	r24, 0xEF	; 239
     e8a:	80 83       	st	Z, r24
}
  checksum=0;
  for(i=0; i<tdma_rfTxInfo.length; i++ )
     e8c:	60 91 7b 06 	lds	r22, 0x067B
     e90:	06 2f       	mov	r16, r22
     e92:	11 27       	eor	r17, r17
     e94:	07 fd       	sbrc	r16, 7
     e96:	10 95       	com	r17
	checksum+=tdma_rfTxInfo.pPayload[i];
     e98:	e0 91 7c 06 	lds	r30, 0x067C
     e9c:	f0 91 7d 06 	lds	r31, 0x067D
     ea0:	c0 e0       	ldi	r28, 0x00	; 0
     ea2:	40 e0       	ldi	r20, 0x00	; 0
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-2]=0xFE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-3]=0xBE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-4]=0xEF;
}
  checksum=0;
  for(i=0; i<tdma_rfTxInfo.length; i++ )
     ea4:	24 2f       	mov	r18, r20
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	20 17       	cp	r18, r16
     eaa:	31 07       	cpc	r19, r17
     eac:	3c f4       	brge	.+14     	; 0xebc <_tdma_tx+0xc6>
	checksum+=tdma_rfTxInfo.pPayload[i];
     eae:	2e 0f       	add	r18, r30
     eb0:	3f 1f       	adc	r19, r31
     eb2:	d9 01       	movw	r26, r18
     eb4:	8c 91       	ld	r24, X
     eb6:	c8 0f       	add	r28, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-2]=0xFE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-3]=0xBE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-4]=0xEF;
}
  checksum=0;
  for(i=0; i<tdma_rfTxInfo.length; i++ )
     eb8:	4f 5f       	subi	r20, 0xFF	; 255
     eba:	f4 cf       	rjmp	.-24     	; 0xea4 <_tdma_tx+0xae>
	checksum+=tdma_rfTxInfo.pPayload[i];

if(_tdma_aes_enabled)   aes_encrypt(tdma_rfTxInfo.pPayload, tdma_rfTxInfo.length );
     ebc:	99 23       	and	r25, r25
     ebe:	19 f0       	breq	.+6      	; 0xec6 <_tdma_tx+0xd0>
     ec0:	cf 01       	movw	r24, r30
     ec2:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <aes_encrypt>
  

  data_start = frame_start + 9 + 1 + tdma_rfTxInfo.length;
     ec6:	e0 91 7b 06 	lds	r30, 0x067B
     eca:	ff 27       	eor	r31, r31
     ecc:	e7 fd       	sbrc	r30, 7
     ece:	f0 95       	com	r31
  memcpy(data_start, &checksum, sizeof(uint8_t));
     ed0:	e6 57       	subi	r30, 0x76	; 118
     ed2:	fe 4f       	sbci	r31, 0xFE	; 254
     ed4:	c0 83       	st	Z, r28
    nrk_gpio_set(NRK_MOSI);
  #endif

for(i=0; i<TX_PKT_RETRY; i++ )
{
  v = rf_tx_packet (&tdma_rfTxInfo);
     ed6:	89 e7       	ldi	r24, 0x79	; 121
     ed8:	96 e0       	ldi	r25, 0x06	; 6
     eda:	0e 94 a5 0b 	call	0x174a	; 0x174a <rf_tx_packet>
  // Too delay or not?
}

  tx_data_ready = 0;
     ede:	10 92 ac 03 	sts	0x03AC, r1
  nrk_event_signal (tdma_tx_pkt_done_signal);
     ee2:	80 91 b5 07 	lds	r24, 0x07B5
     ee6:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <nrk_event_signal>
  #ifdef GPIO_DEBUG
    nrk_gpio_clr(NRK_MOSI);
  #endif
  return NRK_OK;
}
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	08 95       	ret

00000ef4 <tdma_nw_task>:
  nrk_event_signal (tdma_enable_signal);
}


void tdma_nw_task ()
{
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	00 d0       	rcall	.+0      	; 0xefa <tdma_nw_task+0x6>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
  int8_t v, i;
  uint16_t slot, tmp,tmp2,sync;
  nrk_sig_mask_t event;

  do {
    nrk_wait_until_next_period ();
     efe:	0e 94 28 21 	call	0x4250	; 0x4250 <nrk_wait_until_next_period>

}

int8_t tdma_started ()
{
  return tdma_running;
     f02:	80 91 a4 03 	lds	r24, 0x03A4
  uint16_t slot, tmp,tmp2,sync;
  nrk_sig_mask_t event;

  do {
    nrk_wait_until_next_period ();
  } while (!tdma_started ());
     f06:	88 23       	and	r24, r24
     f08:	d1 f3       	breq	.-12     	; 0xefe <tdma_nw_task+0xa>

//register the signal after bmac_init has been called
  v = nrk_signal_register (tdma_enable_signal);
     f0a:	80 91 4e 08 	lds	r24, 0x084E
     f0e:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <nrk_signal_register>
     f12:	8a 83       	std	Y+2, r24	; 0x02
  if (v == NRK_ERROR)
     f14:	8f 3f       	cpi	r24, 0xFF	; 255
     f16:	21 f4       	brne	.+8      	; 0xf20 <tdma_nw_task+0x2c>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
     f18:	88 ed       	ldi	r24, 0xD8	; 216
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
      slot++;
	// For the last slot, we wakeup a bit late to make sure all other nodes have woken up in time to
	// receive the beacon message.  
      if (slot > tdma_slots_per_cycle ){
        nrk_wait_until_ticks(TDMA_WAKEUP_GAURD_TIME_MS);
	slot = 0;
     f20:	61 2c       	mov	r6, r1
     f22:	71 2c       	mov	r7, r1

      // Transmit on slot
      if (tx_data_ready == 1) {
        tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = slot & 0xff;    // slot
        tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = slot >> 8;
        tdma_rfTxInfo.destAddr = 0xffff;
     f24:	22 24       	eor	r2, r2
     f26:	2a 94       	dec	r2
     f28:	32 2c       	mov	r3, r2
//rf_set_rx (&tdma_rfRxInfo, tdma_chan);



  while (1) {
    if (tdma_mode == TDMA_HOST) {
     f2a:	80 91 ae 03 	lds	r24, 0x03AE
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	09 f0       	breq	.+2      	; 0xf34 <tdma_nw_task+0x40>
     f32:	e1 c0       	rjmp	.+450    	; 0x10f6 <tdma_nw_task+0x202>
	    sync_status=1; // HOST is always synced
     f34:	80 93 7d 03 	sts	0x037D, r24
      // This is the downstream transmit slot
      if (slot == 0) {
     f38:	61 14       	cp	r6, r1
     f3a:	71 04       	cpc	r7, r1
     f3c:	09 f0       	breq	.+2      	; 0xf40 <tdma_nw_task+0x4c>
     f3e:	88 c0       	rjmp	.+272    	; 0x1050 <tdma_nw_task+0x15c>

        //  for(i=0; i<100; i++ ) tdma_rfTxInfo.pPayload[i] = 0;  
        //rf_rx_off();
        // If there is no pending packet, lets make an empty one
        if (tx_data_ready == 0) {
     f40:	80 91 ac 03 	lds	r24, 0x03AC
     f44:	81 11       	cpse	r24, r1
     f46:	16 c0       	rjmp	.+44     	; 0xf74 <tdma_nw_task+0x80>
          tdma_rfTxInfo.pPayload = tdma_tx_buf;
     f48:	2a e2       	ldi	r18, 0x2A	; 42
     f4a:	34 e0       	ldi	r19, 0x04	; 4
     f4c:	30 93 7d 06 	sts	0x067D, r19
     f50:	20 93 7c 06 	sts	0x067C, r18
          // Setup the header data
          tdma_rfTxInfo.pPayload[TDMA_DST_LOW] = 0xff;  // dst
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	30 93 2c 04 	sts	0x042C, r19
          tdma_rfTxInfo.pPayload[TDMA_DST_HIGH] = 0xff;
     f5a:	30 93 2d 04 	sts	0x042D, r19
          tdma_rfTxInfo.pPayload[TDMA_SRC_LOW] = 0x00;  // src
     f5e:	10 92 2e 04 	sts	0x042E, r1
          tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = 0x00;
     f62:	10 92 2f 04 	sts	0x042F, r1
          tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_LOW] = 0x00;      // seq num
     f66:	10 92 30 04 	sts	0x0430, r1
          tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_HIGH] = 0x00;
     f6a:	10 92 31 04 	sts	0x0431, r1
          tdma_rfTxInfo.length = TDMA_PCF_HEADER;
     f6e:	8c e0       	ldi	r24, 0x0C	; 12
     f70:	80 93 7b 06 	sts	0x067B, r24
        }
        tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_LOW] = tdma_slots_per_cycle & 0xff;      // cycle size 
     f74:	e0 91 7c 06 	lds	r30, 0x067C
     f78:	f0 91 7d 06 	lds	r31, 0x067D
     f7c:	90 91 a8 03 	lds	r25, 0x03A8
     f80:	80 91 a9 03 	lds	r24, 0x03A9
     f84:	90 87       	std	Z+8, r25	; 0x08
        tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_HIGH] =
     f86:	81 87       	std	Z+9, r24	; 0x09
          tdma_slots_per_cycle >> 8;
        tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = 0;      // slot
     f88:	10 82       	st	Z, r1
        tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = 0;
     f8a:	e0 91 7c 06 	lds	r30, 0x067C
     f8e:	f0 91 7d 06 	lds	r31, 0x067D
     f92:	11 82       	std	Z+1, r1	; 0x01
        tdma_rfTxInfo.pPayload[TDMA_TTL] = tdma_ttl<<4 | (tdma_ttl);
     f94:	e0 91 7c 06 	lds	r30, 0x067C
     f98:	f0 91 7d 06 	lds	r31, 0x067D
     f9c:	20 91 ad 03 	lds	r18, 0x03AD
     fa0:	30 e1       	ldi	r19, 0x10	; 16
     fa2:	23 9f       	mul	r18, r19
     fa4:	c0 01       	movw	r24, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	82 2b       	or	r24, r18
     faa:	82 87       	std	Z+10, r24	; 0x0a
        tdma_rfTxInfo.pPayload[TDMA_SLOT_SIZE] = tdma_slot_len_ms;
     fac:	80 91 aa 03 	lds	r24, 0x03AA
     fb0:	83 87       	std	Z+11, r24	; 0x0b
        nrk_time_get (&_tdma_next_wakeup);
     fb2:	81 e8       	ldi	r24, 0x81	; 129
     fb4:	93 e0       	ldi	r25, 0x03	; 3
     fb6:	0e 94 d7 22 	call	0x45ae	; 0x45ae <nrk_time_get>
        tdma_rfTxInfo.destAddr = 0xffff;
     fba:	30 92 7a 06 	sts	0x067A, r3
     fbe:	20 92 79 06 	sts	0x0679, r2
        tdma_rfTxInfo.ackRequest = 0;
     fc2:	10 92 7f 06 	sts	0x067F, r1
        tdma_rfTxInfo.cca = 0;
     fc6:	10 92 7e 06 	sts	0x067E, r1
        _tdma_tx ();
     fca:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_tdma_tx>
        rf_rx_on ();
     fce:	0e 94 99 0b 	call	0x1732	; 0x1732 <rf_rx_on>
	if(tdma_wakeup_flag==1)
     fd2:	80 91 bd 05 	lds	r24, 0x05BD
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <tdma_nw_task+0xe8>
     fda:	43 c0       	rjmp	.+134    	; 0x1062 <tdma_nw_task+0x16e>
     fdc:	41 2c       	mov	r4, r1
     fde:	51 2c       	mov	r5, r1
		{
		for(slot=0; slot<1000; slot++ )
			{
				if((slot%5)==0)nrk_led_toggle(BLUE_LED);
     fe0:	c2 01       	movw	r24, r4
     fe2:	65 e0       	ldi	r22, 0x05	; 5
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <__udivmodhi4>
     fea:	89 2b       	or	r24, r25
     fec:	21 f4       	brne	.+8      	; 0xff6 <tdma_nw_task+0x102>
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 2b 13 	call	0x2656	; 0x2656 <nrk_led_toggle>
        			tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = 0xff;      // slot
     ff6:	e0 91 7c 06 	lds	r30, 0x067C
     ffa:	f0 91 7d 06 	lds	r31, 0x067D
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	80 83       	st	Z, r24
        			tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = 0xff;
    1002:	e0 91 7c 06 	lds	r30, 0x067C
    1006:	f0 91 7d 06 	lds	r31, 0x067D
    100a:	81 83       	std	Z+1, r24	; 0x01
          			tdma_rfTxInfo.pPayload[TDMA_SRC_LOW] = 0x0;  // src
    100c:	e0 91 7c 06 	lds	r30, 0x067C
    1010:	f0 91 7d 06 	lds	r31, 0x067D
    1014:	14 82       	std	Z+4, r1	; 0x04
          			tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = 0x0;
    1016:	e0 91 7c 06 	lds	r30, 0x067C
    101a:	f0 91 7d 06 	lds	r31, 0x067D
    101e:	15 82       	std	Z+5, r1	; 0x05
          			tdma_rfTxInfo.length = TDMA_PCF_HEADER;
    1020:	9c e0       	ldi	r25, 0x0C	; 12
    1022:	90 93 7b 06 	sts	0x067B, r25
        			_tdma_tx ();
    1026:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_tdma_tx>
        			//rf_rx_on ();
				nrk_wait_until_ticks(10);
    102a:	8a e0       	ldi	r24, 0x0A	; 10
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 cf 21 	call	0x439e	; 0x439e <nrk_wait_until_ticks>
        tdma_rfTxInfo.cca = 0;
        _tdma_tx ();
        rf_rx_on ();
	if(tdma_wakeup_flag==1)
		{
		for(slot=0; slot<1000; slot++ )
    1032:	ef ef       	ldi	r30, 0xFF	; 255
    1034:	4e 1a       	sub	r4, r30
    1036:	5e 0a       	sbc	r5, r30
    1038:	f8 ee       	ldi	r31, 0xE8	; 232
    103a:	4f 16       	cp	r4, r31
    103c:	f3 e0       	ldi	r31, 0x03	; 3
    103e:	5f 06       	cpc	r5, r31
    1040:	79 f6       	brne	.-98     	; 0xfe0 <tdma_nw_task+0xec>
          			tdma_rfTxInfo.length = TDMA_PCF_HEADER;
        			_tdma_tx ();
        			//rf_rx_on ();
				nrk_wait_until_ticks(10);
			}
		nrk_led_clr(BLUE_LED);
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 42 13 	call	0x2684	; 0x2684 <nrk_led_clr>
		slot=0;
		tdma_wakeup_flag=0;
    104a:	10 92 bd 05 	sts	0x05BD, r1
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <tdma_nw_task+0x16e>
        // Upstream data slot
        // This configures the packet receive interrupt to call the _tdma_rx_master function
        // The _tdma_rx_master function triggers a signal to the tdma_rx function.
        // rf_rx_on();
	// rx_end_callback(&_tdma_rx_master);
        _tdma_rx_master();
    1050:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_tdma_rx_master>
        if (v == 1)
    1054:	2a 81       	ldd	r18, Y+2	; 0x02
    1056:	21 30       	cpi	r18, 0x01	; 1
    1058:	21 f4       	brne	.+8      	; 0x1062 <tdma_nw_task+0x16e>
          tdma_last_tx_slot = slot;
    105a:	70 92 a7 03 	sts	0x03A7, r7
    105e:	60 92 a6 03 	sts	0x03A6, r6
      }
      slot++;
    1062:	3f ef       	ldi	r19, 0xFF	; 255
    1064:	63 1a       	sub	r6, r19
    1066:	73 0a       	sbc	r7, r19
	// For the last slot, we wakeup a bit late to make sure all other nodes have woken up in time to
	// receive the beacon message.  
      if (slot > tdma_slots_per_cycle ){
    1068:	80 91 a8 03 	lds	r24, 0x03A8
    106c:	90 91 a9 03 	lds	r25, 0x03A9
    1070:	86 15       	cp	r24, r6
    1072:	97 05       	cpc	r25, r7
    1074:	28 f4       	brcc	.+10     	; 0x1080 <tdma_nw_task+0x18c>
        nrk_wait_until_ticks(TDMA_WAKEUP_GAURD_TIME_MS);
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 cf 21 	call	0x439e	; 0x439e <nrk_wait_until_ticks>
    107e:	ec c1       	rjmp	.+984    	; 0x1458 <tdma_nw_task+0x564>
	slot = 0;
	}
      else {
      nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
    1080:	80 90 89 03 	lds	r8, 0x0389
    1084:	90 90 8a 03 	lds	r9, 0x038A
    1088:	a0 90 8b 03 	lds	r10, 0x038B
    108c:	b0 90 8c 03 	lds	r11, 0x038C
    1090:	c0 90 8d 03 	lds	r12, 0x038D
    1094:	d0 90 8e 03 	lds	r13, 0x038E
    1098:	e0 90 8f 03 	lds	r14, 0x038F
    109c:	f0 90 90 03 	lds	r15, 0x0390
    10a0:	00 91 81 03 	lds	r16, 0x0381
    10a4:	10 91 82 03 	lds	r17, 0x0382
    10a8:	20 91 83 03 	lds	r18, 0x0383
    10ac:	30 91 84 03 	lds	r19, 0x0384
    10b0:	40 91 85 03 	lds	r20, 0x0385
    10b4:	50 91 86 03 	lds	r21, 0x0386
    10b8:	60 91 87 03 	lds	r22, 0x0387
    10bc:	70 91 88 03 	lds	r23, 0x0388
    10c0:	81 e8       	ldi	r24, 0x81	; 129
    10c2:	93 e0       	ldi	r25, 0x03	; 3
    10c4:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <nrk_time_add>
      nrk_time_compact_nanos (&_tdma_next_wakeup);
    10c8:	81 e8       	ldi	r24, 0x81	; 129
    10ca:	93 e0       	ldi	r25, 0x03	; 3
    10cc:	0e 94 c0 23 	call	0x4780	; 0x4780 <nrk_time_compact_nanos>
      nrk_wait_until (_tdma_next_wakeup);
    10d0:	20 91 81 03 	lds	r18, 0x0381
    10d4:	30 91 82 03 	lds	r19, 0x0382
    10d8:	40 91 83 03 	lds	r20, 0x0383
    10dc:	50 91 84 03 	lds	r21, 0x0384
    10e0:	60 91 85 03 	lds	r22, 0x0385
    10e4:	70 91 86 03 	lds	r23, 0x0386
    10e8:	80 91 87 03 	lds	r24, 0x0387
    10ec:	90 91 88 03 	lds	r25, 0x0388
    10f0:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <nrk_wait_until>
    10f4:	1a cf       	rjmp	.-460    	; 0xf2a <tdma_nw_task+0x36>
	
      }
    }
    // TDMA slave node
    else {
      if (slot == 0) {
    10f6:	67 28       	or	r6, r7
    10f8:	09 f0       	breq	.+2      	; 0x10fc <tdma_nw_task+0x208>
    10fa:	57 c0       	rjmp	.+174    	; 0x11aa <tdma_nw_task+0x2b6>

	//rf_rx_off ();
	//rf_power_down();
	      	
	sync=0;
	rf_power_up();
    10fc:	0e 94 ce 0a 	call	0x159c	; 0x159c <rf_power_up>
	rf_rx_on ();
    1100:	0e 94 99 0b 	call	0x1732	; 0x1732 <rf_rx_on>
      if (slot == 0) {

	//rf_rx_off ();
	//rf_power_down();
	      	
	sync=0;
    1104:	61 2c       	mov	r6, r1
    1106:	71 2c       	mov	r7, r1
	rf_power_up();
	rf_rx_on ();
        do {
          v = _tdma_rx ();
    1108:	0e 94 b0 06 	call	0xd60	; 0xd60 <_tdma_rx>
    110c:	8a 83       	std	Y+2, r24	; 0x02
          nrk_time_get (&_tdma_next_wakeup);
    110e:	81 e8       	ldi	r24, 0x81	; 129
    1110:	93 e0       	ldi	r25, 0x03	; 3
    1112:	0e 94 d7 22 	call	0x45ae	; 0x45ae <nrk_time_get>
          if (v == NRK_OK) {
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	09 f5       	brne	.+66     	; 0x115e <tdma_nw_task+0x26a>

	    // See if its part of a wakeup packet stream
            tmp =
              (tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    111c:	e0 91 cb 05 	lds	r30, 0x05CB
    1120:	f0 91 cc 05 	lds	r31, 0x05CC
              pPayload[TDMA_SRC_LOW];
	    // Check if its slot 0 packet
            tmp2 =
              (tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
    1124:	81 81       	ldd	r24, Z+1	; 0x01
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	98 2f       	mov	r25, r24
    112a:	88 27       	eor	r24, r24
    112c:	20 81       	ld	r18, Z
    112e:	82 2b       	or	r24, r18
          nrk_time_get (&_tdma_next_wakeup);
          if (v == NRK_OK) {

	    // See if its part of a wakeup packet stream
            tmp =
              (tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    1130:	25 81       	ldd	r18, Z+5	; 0x05
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	32 2f       	mov	r19, r18
    1136:	22 27       	eor	r18, r18
    1138:	44 81       	ldd	r20, Z+4	; 0x04
    113a:	24 2b       	or	r18, r20
	    // Check if its slot 0 packet
            tmp2 =
              (tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
              pPayload[TDMA_SLOT_LOW];

	    if(tmp==0x0 && tmp2==0xffff) sync=0;
    113c:	23 2b       	or	r18, r19
    113e:	21 f4       	brne	.+8      	; 0x1148 <tdma_nw_task+0x254>
    1140:	8f 3f       	cpi	r24, 0xFF	; 255
    1142:	2f ef       	ldi	r18, 0xFF	; 255
    1144:	92 07       	cpc	r25, r18
    1146:	21 f0       	breq	.+8      	; 0x1150 <tdma_nw_task+0x25c>

            if (tmp2 != 0) {
    1148:	89 2b       	or	r24, r25
    114a:	09 f4       	brne	.+2      	; 0x114e <tdma_nw_task+0x25a>
    114c:	88 c1       	rjmp	.+784    	; 0x145e <tdma_nw_task+0x56a>
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <tdma_nw_task+0x260>
	    // Check if its slot 0 packet
            tmp2 =
              (tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
              pPayload[TDMA_SLOT_LOW];

	    if(tmp==0x0 && tmp2==0xffff) sync=0;
    1150:	61 2c       	mov	r6, r1
    1152:	71 2c       	mov	r7, r1

            if (tmp2 != 0) {
              v = NRK_ERROR;
          	tdma_rx_buf_empty = 1;
    1154:	31 e0       	ldi	r19, 0x01	; 1
    1156:	30 93 a5 03 	sts	0x03A5, r19
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	8a 83       	std	Y+2, r24	; 0x02
            _tdma_slot_time.nano_secs = tdma_slot_len_ms * NANOS_PER_MS;
            _tdma_slot_time.secs = 0;
	    }
          }
	  // Make this time based so that it doesn't get shorter with non sync packets
	  if(sync>=100) { 
    115e:	94 e6       	ldi	r25, 0x64	; 100
    1160:	69 16       	cp	r6, r25
    1162:	71 04       	cpc	r7, r1
    1164:	c0 f0       	brcs	.+48     	; 0x1196 <tdma_nw_task+0x2a2>
		  		sync_status=0; /*nrk_led_set(RED_LED);*/ 
    1166:	10 92 7d 03 	sts	0x037D, r1
				//sync=30000; 
				if(tdma_error_callback!=NULL ) i=tdma_error_callback(sync-100);
    116a:	e0 91 7b 03 	lds	r30, 0x037B
    116e:	f0 91 7c 03 	lds	r31, 0x037C
    1172:	30 97       	sbiw	r30, 0x00	; 0
    1174:	29 f0       	breq	.+10     	; 0x1180 <tdma_nw_task+0x28c>
    1176:	c3 01       	movw	r24, r6
    1178:	84 56       	subi	r24, 0x64	; 100
    117a:	91 09       	sbc	r25, r1
    117c:	09 95       	icall
    117e:	89 83       	std	Y+1, r24	; 0x01
		if(i==NRK_OK) { tdma_rx_buf_empty=1; /*nrk_kprintf( PSTR("sync=0\r\n"));*/ sync=0; }
    1180:	e9 81       	ldd	r30, Y+1	; 0x01
    1182:	e1 30       	cpi	r30, 0x01	; 1
    1184:	19 f4       	brne	.+6      	; 0x118c <tdma_nw_task+0x298>
    1186:	61 2c       	mov	r6, r1
    1188:	71 2c       	mov	r7, r1
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <tdma_nw_task+0x2a2>
	  } 
	  if(sync<30000 ) sync++;
    118c:	f0 e3       	ldi	r31, 0x30	; 48
    118e:	6f 16       	cp	r6, r31
    1190:	f5 e7       	ldi	r31, 0x75	; 117
    1192:	7f 06       	cpc	r7, r31
    1194:	18 f4       	brcc	.+6      	; 0x119c <tdma_nw_task+0x2a8>
    1196:	2f ef       	ldi	r18, 0xFF	; 255
    1198:	62 1a       	sub	r6, r18
    119a:	72 0a       	sbc	r7, r18
}


int8_t tdma_rx_pkt_release(void)
{
    tdma_rx_buf_empty=1;
    119c:	31 e0       	ldi	r19, 0x01	; 1
    119e:	30 93 a5 03 	sts	0x03A5, r19
				if(tdma_error_callback!=NULL ) i=tdma_error_callback(sync-100);
		if(i==NRK_OK) { tdma_rx_buf_empty=1; /*nrk_kprintf( PSTR("sync=0\r\n"));*/ sync=0; }
	  } 
	  if(sync<30000 ) sync++;
	tdma_rx_pkt_release();
        } while (v != NRK_OK);
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	09 f0       	breq	.+2      	; 0x11aa <tdma_nw_task+0x2b6>
    11a8:	af cf       	rjmp	.-162    	; 0x1108 <tdma_nw_task+0x214>
      //if(sync==30000)  sync_status=1; /*nrk_led_clr(RED_LED);*/ 
      }

      // Compute TTL offset
      ttl_delay=(tdma_rfRxInfo.pPayload[TDMA_TTL]>>4)-(tdma_rfRxInfo.pPayload[TDMA_TTL]&0xf);
    11aa:	e0 91 cb 05 	lds	r30, 0x05CB
    11ae:	f0 91 cc 05 	lds	r31, 0x05CC
    11b2:	92 85       	ldd	r25, Z+10	; 0x0a
    11b4:	89 2f       	mov	r24, r25
    11b6:	82 95       	swap	r24
    11b8:	8f 70       	andi	r24, 0x0F	; 15
    11ba:	9f 70       	andi	r25, 0x0F	; 15
    11bc:	89 1b       	sub	r24, r25
      if(ttl_delay>16) ttl_delay=0;
    11be:	81 31       	cpi	r24, 0x11	; 17
    11c0:	18 f4       	brcc	.+6      	; 0x11c8 <tdma_nw_task+0x2d4>
        } while (v != NRK_OK);
      //if(sync==30000)  sync_status=1; /*nrk_led_clr(RED_LED);*/ 
      }

      // Compute TTL offset
      ttl_delay=(tdma_rfRxInfo.pPayload[TDMA_TTL]>>4)-(tdma_rfRxInfo.pPayload[TDMA_TTL]&0xf);
    11c2:	80 93 a1 03 	sts	0x03A1, r24
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <tdma_nw_task+0x2d8>
      if(ttl_delay>16) ttl_delay=0;
    11c8:	10 92 a1 03 	sts	0x03A1, r1
      _ttl_delay_total.secs=0;
    11cc:	10 92 99 03 	sts	0x0399, r1
    11d0:	10 92 9a 03 	sts	0x039A, r1
    11d4:	10 92 9b 03 	sts	0x039B, r1
    11d8:	10 92 9c 03 	sts	0x039C, r1
      _ttl_delay_total.nano_secs=0;
    11dc:	10 92 9d 03 	sts	0x039D, r1
    11e0:	10 92 9e 03 	sts	0x039E, r1
    11e4:	10 92 9f 03 	sts	0x039F, r1
    11e8:	10 92 a0 03 	sts	0x03A0, r1
      _ttl_delay_per_tx.secs=0;
    11ec:	10 92 91 03 	sts	0x0391, r1
    11f0:	10 92 92 03 	sts	0x0392, r1
    11f4:	10 92 93 03 	sts	0x0393, r1
    11f8:	10 92 94 03 	sts	0x0394, r1
      _ttl_delay_per_tx.nano_secs=0;

      _ttl_delay_per_tx.secs=0;
      _ttl_delay_per_tx.nano_secs=((uint32_t)tdma_rfRxInfo.length+(uint32_t)17)*32000;   // (payload_bytes + header) * 32 us
    11fc:	a0 91 c9 05 	lds	r26, 0x05C9
    1200:	bb 27       	eor	r27, r27
    1202:	a7 fd       	sbrc	r26, 7
    1204:	b0 95       	com	r27
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	3d e7       	ldi	r19, 0x7D	; 125
    120a:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <__usmulhisi3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	93 5b       	subi	r25, 0xB3	; 179
    1214:	a7 4f       	sbci	r26, 0xF7	; 247
    1216:	bf 4f       	sbci	r27, 0xFF	; 255
    1218:	80 93 95 03 	sts	0x0395, r24
    121c:	90 93 96 03 	sts	0x0396, r25
    1220:	a0 93 97 03 	sts	0x0397, r26
    1224:	b0 93 98 03 	sts	0x0398, r27

      for (tmp = 0; tmp < ttl_delay; tmp++)
    1228:	61 2c       	mov	r6, r1
    122a:	71 2c       	mov	r7, r1
    122c:	80 91 a1 03 	lds	r24, 0x03A1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	68 16       	cp	r6, r24
    1234:	79 06       	cpc	r7, r25
    1236:	40 f5       	brcc	.+80     	; 0x1288 <tdma_nw_task+0x394>
        nrk_time_add (&_ttl_delay_total, _ttl_delay_total, _ttl_delay_per_tx);
    1238:	80 90 91 03 	lds	r8, 0x0391
    123c:	90 90 92 03 	lds	r9, 0x0392
    1240:	a0 90 93 03 	lds	r10, 0x0393
    1244:	b0 90 94 03 	lds	r11, 0x0394
    1248:	c0 90 95 03 	lds	r12, 0x0395
    124c:	d0 90 96 03 	lds	r13, 0x0396
    1250:	e0 90 97 03 	lds	r14, 0x0397
    1254:	f0 90 98 03 	lds	r15, 0x0398
    1258:	00 91 99 03 	lds	r16, 0x0399
    125c:	10 91 9a 03 	lds	r17, 0x039A
    1260:	20 91 9b 03 	lds	r18, 0x039B
    1264:	30 91 9c 03 	lds	r19, 0x039C
    1268:	40 91 9d 03 	lds	r20, 0x039D
    126c:	50 91 9e 03 	lds	r21, 0x039E
    1270:	60 91 9f 03 	lds	r22, 0x039F
    1274:	70 91 a0 03 	lds	r23, 0x03A0
    1278:	89 e9       	ldi	r24, 0x99	; 153
    127a:	93 e0       	ldi	r25, 0x03	; 3
    127c:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <nrk_time_add>
      _ttl_delay_per_tx.nano_secs=0;

      _ttl_delay_per_tx.secs=0;
      _ttl_delay_per_tx.nano_secs=((uint32_t)tdma_rfRxInfo.length+(uint32_t)17)*32000;   // (payload_bytes + header) * 32 us

      for (tmp = 0; tmp < ttl_delay; tmp++)
    1280:	9f ef       	ldi	r25, 0xFF	; 255
    1282:	69 1a       	sub	r6, r25
    1284:	79 0a       	sbc	r7, r25
    1286:	d2 cf       	rjmp	.-92     	; 0x122c <tdma_nw_task+0x338>
        nrk_time_add (&_ttl_delay_total, _ttl_delay_total, _ttl_delay_per_tx);


      sync_status=1;
    1288:	e1 e0       	ldi	r30, 0x01	; 1
    128a:	e0 93 7d 03 	sts	0x037D, r30
	rf_rx_off ();
    128e:	0e 94 9f 0b 	call	0x173e	; 0x173e <rf_rx_off>
	rf_power_down();
    1292:	0e 94 a8 0a 	call	0x1550	; 0x1550 <rf_power_down>

      // Find next slot
      slot = tdma_tx_sched[0];
    1296:	80 91 b2 03 	lds	r24, 0x03B2
    129a:	90 91 b3 03 	lds	r25, 0x03B3
      if (slot > tdma_slots_per_cycle)
    129e:	60 90 a8 03 	lds	r6, 0x03A8
    12a2:	70 90 a9 03 	lds	r7, 0x03A9
    12a6:	86 15       	cp	r24, r6
    12a8:	97 05       	cpc	r25, r7
    12aa:	08 f4       	brcc	.+2      	; 0x12ae <tdma_nw_task+0x3ba>
    12ac:	3c 01       	movw	r6, r24
        slot = tdma_slots_per_cycle;
 //         nrk_time_get (&tmp_time);
//      printf( "tt=%lu %lu\r\n",tmp_time.secs,tmp_time.nano_secs/NANOS_PER_MS);
//      printf( "nw=%lu %lu\r\n",_tdma_next_wakeup.secs,_tdma_next_wakeup.nano_secs/NANOS_PER_MS);
      for (tmp = 0; tmp < slot; tmp++)
    12ae:	41 2c       	mov	r4, r1
    12b0:	51 2c       	mov	r5, r1
    12b2:	46 14       	cp	r4, r6
    12b4:	57 04       	cpc	r5, r7
    12b6:	41 f1       	breq	.+80     	; 0x1308 <tdma_nw_task+0x414>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
    12b8:	80 90 89 03 	lds	r8, 0x0389
    12bc:	90 90 8a 03 	lds	r9, 0x038A
    12c0:	a0 90 8b 03 	lds	r10, 0x038B
    12c4:	b0 90 8c 03 	lds	r11, 0x038C
    12c8:	c0 90 8d 03 	lds	r12, 0x038D
    12cc:	d0 90 8e 03 	lds	r13, 0x038E
    12d0:	e0 90 8f 03 	lds	r14, 0x038F
    12d4:	f0 90 90 03 	lds	r15, 0x0390
    12d8:	00 91 81 03 	lds	r16, 0x0381
    12dc:	10 91 82 03 	lds	r17, 0x0382
    12e0:	20 91 83 03 	lds	r18, 0x0383
    12e4:	30 91 84 03 	lds	r19, 0x0384
    12e8:	40 91 85 03 	lds	r20, 0x0385
    12ec:	50 91 86 03 	lds	r21, 0x0386
    12f0:	60 91 87 03 	lds	r22, 0x0387
    12f4:	70 91 88 03 	lds	r23, 0x0388
    12f8:	81 e8       	ldi	r24, 0x81	; 129
    12fa:	93 e0       	ldi	r25, 0x03	; 3
    12fc:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <nrk_time_add>
      if (slot > tdma_slots_per_cycle)
        slot = tdma_slots_per_cycle;
 //         nrk_time_get (&tmp_time);
//      printf( "tt=%lu %lu\r\n",tmp_time.secs,tmp_time.nano_secs/NANOS_PER_MS);
//      printf( "nw=%lu %lu\r\n",_tdma_next_wakeup.secs,_tdma_next_wakeup.nano_secs/NANOS_PER_MS);
      for (tmp = 0; tmp < slot; tmp++)
    1300:	ff ef       	ldi	r31, 0xFF	; 255
    1302:	4f 1a       	sub	r4, r31
    1304:	5f 0a       	sbc	r5, r31
    1306:	d5 cf       	rjmp	.-86     	; 0x12b2 <tdma_nw_task+0x3be>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
      // Subtract TTL delay time
      nrk_time_sub(&_tdma_next_wakeup, _tdma_next_wakeup, _ttl_delay_total);
    1308:	80 90 99 03 	lds	r8, 0x0399
    130c:	90 90 9a 03 	lds	r9, 0x039A
    1310:	a0 90 9b 03 	lds	r10, 0x039B
    1314:	b0 90 9c 03 	lds	r11, 0x039C
    1318:	c0 90 9d 03 	lds	r12, 0x039D
    131c:	d0 90 9e 03 	lds	r13, 0x039E
    1320:	e0 90 9f 03 	lds	r14, 0x039F
    1324:	f0 90 a0 03 	lds	r15, 0x03A0
    1328:	00 91 81 03 	lds	r16, 0x0381
    132c:	10 91 82 03 	lds	r17, 0x0382
    1330:	20 91 83 03 	lds	r18, 0x0383
    1334:	30 91 84 03 	lds	r19, 0x0384
    1338:	40 91 85 03 	lds	r20, 0x0385
    133c:	50 91 86 03 	lds	r21, 0x0386
    1340:	60 91 87 03 	lds	r22, 0x0387
    1344:	70 91 88 03 	lds	r23, 0x0388
    1348:	81 e8       	ldi	r24, 0x81	; 129
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	0e 94 34 23 	call	0x4668	; 0x4668 <nrk_time_sub>

      nrk_time_compact_nanos (&_tdma_next_wakeup);
    1350:	81 e8       	ldi	r24, 0x81	; 129
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	0e 94 c0 23 	call	0x4780	; 0x4780 <nrk_time_compact_nanos>

  //    printf( "nw2=%lu %lu\r\n",_tdma_next_wakeup.secs,_tdma_next_wakeup.nano_secs/NANOS_PER_MS);
      nrk_wait_until (_tdma_next_wakeup);
    1358:	20 91 81 03 	lds	r18, 0x0381
    135c:	30 91 82 03 	lds	r19, 0x0382
    1360:	40 91 83 03 	lds	r20, 0x0383
    1364:	50 91 84 03 	lds	r21, 0x0384
    1368:	60 91 85 03 	lds	r22, 0x0385
    136c:	70 91 86 03 	lds	r23, 0x0386
    1370:	80 91 87 03 	lds	r24, 0x0387
    1374:	90 91 88 03 	lds	r25, 0x0388
    1378:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <nrk_wait_until>

      // Transmit on slot
      if (tx_data_ready == 1) {
    137c:	80 91 ac 03 	lds	r24, 0x03AC
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	b1 f4       	brne	.+44     	; 0x13b0 <tdma_nw_task+0x4bc>
        tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = slot & 0xff;    // slot
    1384:	e0 91 7c 06 	lds	r30, 0x067C
    1388:	f0 91 7d 06 	lds	r31, 0x067D
    138c:	60 82       	st	Z, r6
        tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = slot >> 8;
    138e:	e0 91 7c 06 	lds	r30, 0x067C
    1392:	f0 91 7d 06 	lds	r31, 0x067D
    1396:	71 82       	std	Z+1, r7	; 0x01
        tdma_rfTxInfo.destAddr = 0xffff;
    1398:	30 92 7a 06 	sts	0x067A, r3
    139c:	20 92 79 06 	sts	0x0679, r2
        tdma_rfTxInfo.ackRequest = 0;
    13a0:	10 92 7f 06 	sts	0x067F, r1
        tdma_rfTxInfo.cca = 0;
    13a4:	10 92 7e 06 	sts	0x067E, r1
	rf_power_up();
    13a8:	0e 94 ce 0a 	call	0x159c	; 0x159c <rf_power_up>
        _tdma_tx ();
    13ac:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_tdma_tx>
      }

      // Sleep until end of cycle 
	rf_rx_off ();
    13b0:	0e 94 9f 0b 	call	0x173e	; 0x173e <rf_rx_off>
	rf_power_down();
    13b4:	0e 94 a8 0a 	call	0x1550	; 0x1550 <rf_power_down>
      for (tmp = 0; tmp < ((uint16_t)tdma_slots_per_cycle - (uint16_t)slot); tmp++)
    13b8:	41 2c       	mov	r4, r1
    13ba:	51 2c       	mov	r5, r1
    13bc:	80 91 a8 03 	lds	r24, 0x03A8
    13c0:	90 91 a9 03 	lds	r25, 0x03A9
    13c4:	86 19       	sub	r24, r6
    13c6:	97 09       	sbc	r25, r7
    13c8:	48 16       	cp	r4, r24
    13ca:	59 06       	cpc	r5, r25
    13cc:	40 f5       	brcc	.+80     	; 0x141e <tdma_nw_task+0x52a>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
    13ce:	80 90 89 03 	lds	r8, 0x0389
    13d2:	90 90 8a 03 	lds	r9, 0x038A
    13d6:	a0 90 8b 03 	lds	r10, 0x038B
    13da:	b0 90 8c 03 	lds	r11, 0x038C
    13de:	c0 90 8d 03 	lds	r12, 0x038D
    13e2:	d0 90 8e 03 	lds	r13, 0x038E
    13e6:	e0 90 8f 03 	lds	r14, 0x038F
    13ea:	f0 90 90 03 	lds	r15, 0x0390
    13ee:	00 91 81 03 	lds	r16, 0x0381
    13f2:	10 91 82 03 	lds	r17, 0x0382
    13f6:	20 91 83 03 	lds	r18, 0x0383
    13fa:	30 91 84 03 	lds	r19, 0x0384
    13fe:	40 91 85 03 	lds	r20, 0x0385
    1402:	50 91 86 03 	lds	r21, 0x0386
    1406:	60 91 87 03 	lds	r22, 0x0387
    140a:	70 91 88 03 	lds	r23, 0x0388
    140e:	81 e8       	ldi	r24, 0x81	; 129
    1410:	93 e0       	ldi	r25, 0x03	; 3
    1412:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <nrk_time_add>
      }

      // Sleep until end of cycle 
	rf_rx_off ();
	rf_power_down();
      for (tmp = 0; tmp < ((uint16_t)tdma_slots_per_cycle - (uint16_t)slot); tmp++)
    1416:	2f ef       	ldi	r18, 0xFF	; 255
    1418:	42 1a       	sub	r4, r18
    141a:	52 0a       	sbc	r5, r18
    141c:	cf cf       	rjmp	.-98     	; 0x13bc <tdma_nw_task+0x4c8>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
      nrk_time_compact_nanos (&_tdma_next_wakeup);
    141e:	81 e8       	ldi	r24, 0x81	; 129
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	0e 94 c0 23 	call	0x4780	; 0x4780 <nrk_time_compact_nanos>
      nrk_wait_until (_tdma_next_wakeup);
    1426:	20 91 81 03 	lds	r18, 0x0381
    142a:	30 91 82 03 	lds	r19, 0x0382
    142e:	40 91 83 03 	lds	r20, 0x0383
    1432:	50 91 84 03 	lds	r21, 0x0384
    1436:	60 91 85 03 	lds	r22, 0x0385
    143a:	70 91 86 03 	lds	r23, 0x0386
    143e:	80 91 87 03 	lds	r24, 0x0387
    1442:	90 91 88 03 	lds	r25, 0x0388
    1446:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <nrk_wait_until>
      slot = 0;
      while(!tdma_is_enabled) nrk_wait_until_next_period();
    144a:	80 91 a2 03 	lds	r24, 0x03A2
    144e:	81 11       	cpse	r24, r1
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <tdma_nw_task+0x564>
    1452:	0e 94 28 21 	call	0x4250	; 0x4250 <nrk_wait_until_next_period>
    1456:	f9 cf       	rjmp	.-14     	; 0x144a <tdma_nw_task+0x556>
		
      slot=0;
    1458:	61 2c       	mov	r6, r1
    145a:	71 2c       	mov	r7, r1
    145c:	66 cd       	rjmp	.-1332   	; 0xf2a <tdma_nw_task+0x36>
	      	//rf_rx_on();
	    }
	    if(v!=NRK_ERROR)
	    {
	    // set TTL to TTL_MAX from gateway
	    tdma_ttl = tdma_rfRxInfo.pPayload[TDMA_TTL]>>4;
    145e:	82 85       	ldd	r24, Z+10	; 0x0a
    1460:	82 95       	swap	r24
    1462:	8f 70       	andi	r24, 0x0F	; 15
    1464:	80 93 ad 03 	sts	0x03AD, r24
            tdma_slots_per_cycle =
              (tdma_rfRxInfo.
               pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
    1468:	81 85       	ldd	r24, Z+9	; 0x09
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	98 2f       	mov	r25, r24
    146e:	88 27       	eor	r24, r24
    1470:	20 85       	ldd	r18, Z+8	; 0x08
    1472:	82 2b       	or	r24, r18
	    }
	    if(v!=NRK_ERROR)
	    {
	    // set TTL to TTL_MAX from gateway
	    tdma_ttl = tdma_rfRxInfo.pPayload[TDMA_TTL]>>4;
            tdma_slots_per_cycle =
    1474:	90 93 a9 03 	sts	0x03A9, r25
    1478:	80 93 a8 03 	sts	0x03A8, r24
              (tdma_rfRxInfo.
               pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
              pPayload[TDMA_CYCLE_SIZE_LOW];
            tdma_slot_len_ms = tdma_rfRxInfo.pPayload[TDMA_SLOT_SIZE];
    147c:	a3 85       	ldd	r26, Z+11	; 0x0b
    147e:	8a 2f       	mov	r24, r26
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	90 93 ab 03 	sts	0x03AB, r25
    1486:	80 93 aa 03 	sts	0x03AA, r24
            _tdma_slot_time.nano_secs = tdma_slot_len_ms * NANOS_PER_MS;
    148a:	dc 01       	movw	r26, r24
    148c:	20 e4       	ldi	r18, 0x40	; 64
    148e:	32 e4       	ldi	r19, 0x42	; 66
    1490:	4f e0       	ldi	r20, 0x0F	; 15
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <__muluhisi3>
    1498:	60 93 8d 03 	sts	0x038D, r22
    149c:	70 93 8e 03 	sts	0x038E, r23
    14a0:	80 93 8f 03 	sts	0x038F, r24
    14a4:	90 93 90 03 	sts	0x0390, r25
            _tdma_slot_time.secs = 0;
    14a8:	10 92 89 03 	sts	0x0389, r1
    14ac:	10 92 8a 03 	sts	0x038A, r1
    14b0:	10 92 8b 03 	sts	0x038B, r1
    14b4:	10 92 8c 03 	sts	0x038C, r1
    14b8:	52 ce       	rjmp	.-860    	; 0x115e <tdma_nw_task+0x26a>

000014ba <tdma_task_config>:
}


void tdma_task_config ()
{
  nrk_task_set_entry_function (&tdma_task, tdma_nw_task);
    14ba:	6a e7       	ldi	r22, 0x7A	; 122
    14bc:	77 e0       	ldi	r23, 0x07	; 7
    14be:	8a e9       	ldi	r24, 0x9A	; 154
    14c0:	95 e0       	ldi	r25, 0x05	; 5
    14c2:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <nrk_task_set_entry_function>
  nrk_task_set_stk (&tdma_task, tdma_task_stack, TDMA_STACKSIZE);
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	51 e0       	ldi	r21, 0x01	; 1
    14ca:	6a e9       	ldi	r22, 0x9A	; 154
    14cc:	74 e0       	ldi	r23, 0x04	; 4
    14ce:	8a e9       	ldi	r24, 0x9A	; 154
    14d0:	95 e0       	ldi	r25, 0x05	; 5
    14d2:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <nrk_task_set_stk>
  tdma_task.prio = TDMA_TASK_PRIORITY;
    14d6:	ea e9       	ldi	r30, 0x9A	; 154
    14d8:	f5 e0       	ldi	r31, 0x05	; 5
    14da:	84 e1       	ldi	r24, 0x14	; 20
    14dc:	80 87       	std	Z+8, r24	; 0x08
  tdma_task.FirstActivation = TRUE;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	87 83       	std	Z+7, r24	; 0x07
  tdma_task.Type = BASIC_TASK;
    14e2:	81 87       	std	Z+9, r24	; 0x09
  tdma_task.SchType = PREEMPTIVE;
    14e4:	82 87       	std	Z+10, r24	; 0x0a
  tdma_task.period.secs = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a0 e0       	ldi	r26, 0x00	; 0
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	83 87       	std	Z+11, r24	; 0x0b
    14f0:	94 87       	std	Z+12, r25	; 0x0c
    14f2:	a5 87       	std	Z+13, r26	; 0x0d
    14f4:	b6 87       	std	Z+14, r27	; 0x0e
  tdma_task.period.nano_secs = 0; // 20 * NANOS_PER_MS;
    14f6:	17 86       	std	Z+15, r1	; 0x0f
    14f8:	10 8a       	std	Z+16, r1	; 0x10
    14fa:	11 8a       	std	Z+17, r1	; 0x11
    14fc:	12 8a       	std	Z+18, r1	; 0x12
  tdma_task.cpu_reserve.secs = PCF_TDMA_TIMEOUT;       // bmac reserve , 0 to disable
    14fe:	87 e0       	ldi	r24, 0x07	; 7
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e0       	ldi	r26, 0x00	; 0
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	83 8b       	std	Z+19, r24	; 0x13
    1508:	94 8b       	std	Z+20, r25	; 0x14
    150a:	a5 8b       	std	Z+21, r26	; 0x15
    150c:	b6 8b       	std	Z+22, r27	; 0x16
  tdma_task.cpu_reserve.nano_secs = 0;
    150e:	17 8a       	std	Z+23, r1	; 0x17
    1510:	10 8e       	std	Z+24, r1	; 0x18
    1512:	11 8e       	std	Z+25, r1	; 0x19
    1514:	12 8e       	std	Z+26, r1	; 0x1a
  tdma_task.offset.secs = 0;
    1516:	13 8e       	std	Z+27, r1	; 0x1b
    1518:	14 8e       	std	Z+28, r1	; 0x1c
    151a:	15 8e       	std	Z+29, r1	; 0x1d
    151c:	16 8e       	std	Z+30, r1	; 0x1e
  tdma_task.offset.nano_secs = 0;
    151e:	17 8e       	std	Z+31, r1	; 0x1f
    1520:	10 a2       	std	Z+32, r1	; 0x20
    1522:	11 a2       	std	Z+33, r1	; 0x21
    1524:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&tdma_task);
    1526:	cf 01       	movw	r24, r30
    1528:	0c 94 96 20 	jmp	0x412c	; 0x412c <nrk_activate_task>

0000152c <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    152c:	90 91 41 01 	lds	r25, 0x0141
    1530:	9f 71       	andi	r25, 0x1F	; 31
    1532:	9f 31       	cpi	r25, 0x1F	; 31
    1534:	d9 f3       	breq	.-10     	; 0x152c <rf_cmd>
		continue;
	TRX_STATE = cmd;
    1536:	80 93 42 01 	sts	0x0142, r24
    153a:	08 95       	ret

0000153c <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
    153c:	80 93 be 05 	sts	0x05BE, r24
    1540:	08 95       	ret

00001542 <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 93 d5 08 	sts	0x08D5, r24
    1548:	08 95       	ret

0000154a <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    154a:	10 92 d5 08 	sts	0x08D5, r1
    154e:	08 95       	ret

00001550 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1550:	80 91 41 01 	lds	r24, 0x0141
    1554:	8f 71       	andi	r24, 0x1F	; 31
    1556:	8f 31       	cpi	r24, 0x1F	; 31
    1558:	d9 f3       	breq	.-10     	; 0x1550 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    155a:	80 91 41 01 	lds	r24, 0x0141
    155e:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    1560:	e1 f0       	breq	.+56     	; 0x159a <rf_power_down+0x4a>
    1562:	8f 30       	cpi	r24, 0x0F	; 15
    1564:	d1 f0       	breq	.+52     	; 0x159a <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    1566:	80 91 41 01 	lds	r24, 0x0141
    156a:	8f 71       	andi	r24, 0x1F	; 31
    156c:	88 30       	cpi	r24, 0x08	; 8
    156e:	31 f4       	brne	.+12     	; 0x157c <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    1570:	80 91 39 01 	lds	r24, 0x0139
    1574:	82 60       	ori	r24, 0x02	; 2
    1576:	80 93 39 01 	sts	0x0139, r24
    157a:	0b c0       	rjmp	.+22     	; 0x1592 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    157c:	88 e0       	ldi	r24, 0x08	; 8
    157e:	0e 94 96 0a 	call	0x152c	; 0x152c <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    1582:	80 91 41 01 	lds	r24, 0x0141
    1586:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    1588:	88 30       	cpi	r24, 0x08	; 8
    158a:	d9 f7       	brne	.-10     	; 0x1582 <rf_power_down+0x32>
    158c:	f1 cf       	rjmp	.-30     	; 0x1570 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    158e:	8f 30       	cpi	r24, 0x0F	; 15
    1590:	21 f0       	breq	.+8      	; 0x159a <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    1592:	80 91 41 01 	lds	r24, 0x0141
    1596:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    1598:	d1 f7       	brne	.-12     	; 0x158e <rf_power_down+0x3e>
    159a:	08 95       	ret

0000159c <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    159c:	80 91 41 01 	lds	r24, 0x0141
    15a0:	8f 71       	andi	r24, 0x1F	; 31
    15a2:	8f 31       	cpi	r24, 0x1F	; 31
    15a4:	d9 f3       	breq	.-10     	; 0x159c <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    15a6:	80 91 41 01 	lds	r24, 0x0141
    15aa:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <rf_power_up+0x16>
    15ae:	8f 30       	cpi	r24, 0x0F	; 15
    15b0:	51 f4       	brne	.+20     	; 0x15c6 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    15b2:	80 91 39 01 	lds	r24, 0x0139
    15b6:	8d 7f       	andi	r24, 0xFD	; 253
    15b8:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    15bc:	80 91 41 01 	lds	r24, 0x0141
    15c0:	8f 71       	andi	r24, 0x1F	; 31
    15c2:	88 30       	cpi	r24, 0x08	; 8
    15c4:	d9 f7       	brne	.-10     	; 0x15bc <rf_power_up+0x20>
    15c6:	08 95       	ret

000015c8 <rf_pll_on>:
	TRX_STATE = cmd;
}

void rf_pll_on()
{
   rf_cmd(PLL_ON);
    15c8:	89 e0       	ldi	r24, 0x09	; 9
    15ca:	0c 94 96 0a 	jmp	0x152c	; 0x152c <rf_cmd>

000015ce <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    15ce:	e5 e4       	ldi	r30, 0x45	; 69
    15d0:	f1 e0       	ldi	r31, 0x01	; 1
    15d2:	90 81       	ld	r25, Z
    15d4:	90 7f       	andi	r25, 0xF0	; 240
    15d6:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    15d8:	90 81       	ld	r25, Z
    15da:	8f 70       	andi	r24, 0x0F	; 15
    15dc:	98 2b       	or	r25, r24
    15de:	90 83       	st	Z, r25
    15e0:	08 95       	ret

000015e2 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    15e2:	e7 e5       	ldi	r30, 0x57	; 87
    15e4:	f1 e0       	ldi	r31, 0x01	; 1
    15e6:	80 81       	ld	r24, Z
    15e8:	8d 7f       	andi	r24, 0xFD	; 253
    15ea:	80 83       	st	Z, r24
    15ec:	08 95       	ret

000015ee <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    15ee:	e7 e5       	ldi	r30, 0x57	; 87
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	80 81       	ld	r24, Z
    15f4:	82 60       	ori	r24, 0x02	; 2
    15f6:	80 83       	st	Z, r24
    15f8:	08 95       	ret

000015fa <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    15fa:	ee e6       	ldi	r30, 0x6E	; 110
    15fc:	f1 e0       	ldi	r31, 0x01	; 1
    15fe:	80 81       	ld	r24, Z
    1600:	8f 7e       	andi	r24, 0xEF	; 239
    1602:	80 83       	st	Z, r24
    1604:	08 95       	ret

00001606 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1606:	ee e6       	ldi	r30, 0x6E	; 110
    1608:	f1 e0       	ldi	r31, 0x01	; 1
    160a:	80 81       	ld	r24, Z
    160c:	80 61       	ori	r24, 0x10	; 16
    160e:	80 83       	st	Z, r24
    1610:	08 95       	ret

00001612 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    1612:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1616:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    161a:	90 93 df 08 	sts	0x08DF, r25
    161e:	80 93 de 08 	sts	0x08DE, r24
    1622:	08 95       	ret

00001624 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1624:	90 93 d9 08 	sts	0x08D9, r25
    1628:	80 93 d8 08 	sts	0x08D8, r24
	PHY_CC_CCA &= ~(0x1F);
    162c:	e8 e4       	ldi	r30, 0x48	; 72
    162e:	f1 e0       	ldi	r31, 0x01	; 1
    1630:	80 81       	ld	r24, Z
    1632:	80 7e       	andi	r24, 0xE0	; 224
    1634:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1636:	80 81       	ld	r24, Z
    1638:	68 2b       	or	r22, r24
    163a:	60 83       	st	Z, r22
    163c:	08 95       	ret

0000163e <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    163e:	90 93 c2 05 	sts	0x05C2, r25
    1642:	80 93 c1 05 	sts	0x05C1, r24
    1646:	08 95       	ret

00001648 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    1648:	90 93 c0 05 	sts	0x05C0, r25
    164c:	80 93 bf 05 	sts	0x05BF, r24
    1650:	08 95       	ret

00001652 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	fc 01       	movw	r30, r24
    165c:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    165e:	80 e2       	ldi	r24, 0x20	; 32
    1660:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    1664:	80 ec       	ldi	r24, 0xC0	; 192
    1666:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    166a:	60 62       	ori	r22, 0x20	; 32
    166c:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1670:	85 ec       	ldi	r24, 0xC5	; 197
    1672:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    1676:	87 ea       	ldi	r24, 0xA7	; 167
    1678:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    167c:	80 e8       	ldi	r24, 0x80	; 128
    167e:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    1682:	20 93 60 01 	sts	0x0160, r18
    1686:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    168a:	40 93 62 01 	sts	0x0162, r20
    168e:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1692:	c6 e4       	ldi	r28, 0x46	; 70
    1694:	d1 e0       	ldi	r29, 0x01	; 1
    1696:	08 81       	ld	r16, Y
    1698:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    169a:	98 81       	ld	r25, Y
    169c:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    169e:	30 2f       	mov	r19, r16
    16a0:	32 95       	swap	r19
    16a2:	36 95       	lsr	r19
    16a4:	37 70       	andi	r19, 0x07	; 7
    16a6:	60 e4       	ldi	r22, 0x40	; 64
    16a8:	36 9f       	mul	r19, r22
    16aa:	80 01       	movw	r16, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	22 95       	swap	r18
    16b0:	26 95       	lsr	r18
    16b2:	23 70       	andi	r18, 0x03	; 3
    16b4:	62 2f       	mov	r22, r18
    16b6:	60 2b       	or	r22, r16
    16b8:	82 95       	swap	r24
    16ba:	86 95       	lsr	r24
    16bc:	83 70       	andi	r24, 0x03	; 3
    16be:	70 e1       	ldi	r23, 0x10	; 16
    16c0:	87 9f       	mul	r24, r23
    16c2:	90 01       	movw	r18, r0
    16c4:	11 24       	eor	r1, r1
    16c6:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    16c8:	92 95       	swap	r25
    16ca:	96 95       	lsr	r25
    16cc:	93 70       	andi	r25, 0x03	; 3
    16ce:	84 e0       	ldi	r24, 0x04	; 4
    16d0:	98 9f       	mul	r25, r24
    16d2:	b0 01       	movw	r22, r0
    16d4:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    16d6:	62 2b       	or	r22, r18
    16d8:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    16dc:	88 81       	ld	r24, Y
    16de:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    16e0:	92 95       	swap	r25
    16e2:	96 95       	lsr	r25
    16e4:	93 70       	andi	r25, 0x03	; 3
    16e6:	39 2f       	mov	r19, r25
    16e8:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    16ea:	98 2f       	mov	r25, r24
    16ec:	92 95       	swap	r25
    16ee:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    16f0:	93 2b       	or	r25, r19
    16f2:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    16f6:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Enable all radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    1700:	c8 ed       	ldi	r28, 0xD8	; 216
    1702:	d8 e0       	ldi	r29, 0x08	; 8
    1704:	f9 83       	std	Y+1, r31	; 0x01
    1706:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    1708:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    170a:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    170c:	5d 83       	std	Y+5, r21	; 0x05
    170e:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    1710:	bf 83       	std	Y+7, r27	; 0x07
    1712:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    1714:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	80 93 f2 08 	sts	0x08F2, r24
   rx_ready = 0;
    171c:	10 92 09 09 	sts	0x0909, r1
   tx_done = 0;
    1720:	10 92 e1 08 	sts	0x08E1, r1

	use_glossy = 0;
    1724:	10 92 d5 08 	sts	0x08D5, r1

} // rf_init() 
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	08 95       	ret

00001732 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    1732:	86 e1       	ldi	r24, 0x16	; 22
    1734:	0c 94 96 0a 	jmp	0x152c	; 0x152c <rf_cmd>

00001738 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    1738:	86 e1       	ldi	r24, 0x16	; 22
    173a:	0c 94 96 0a 	jmp	0x152c	; 0x152c <rf_cmd>

0000173e <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
   rf_cmd(TRX_OFF);
    173e:	88 e0       	ldi	r24, 0x08	; 8
    1740:	0e 94 96 0a 	call	0x152c	; 0x152c <rf_cmd>
   rx_ready = 0;
    1744:	10 92 09 09 	sts	0x0909, r1
    1748:	08 95       	ret

0000174a <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	fc 01       	movw	r30, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    1754:	80 91 f2 08 	lds	r24, 0x08F2
    1758:	81 11       	cpse	r24, r1
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <rf_tx_packet+0x16>
		return NRK_ERROR;
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	ab c0       	rjmp	.+342    	; 0x18b6 <rf_tx_packet+0x16c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    1760:	26 81       	ldd	r18, Z+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    1762:	80 91 da 08 	lds	r24, 0x08DA
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	80 93 da 08 	sts	0x08DA, r24
	machead->fcf = fcf;
    176c:	90 91 81 01 	lds	r25, 0x0181
    1770:	90 7e       	andi	r25, 0xE0	; 224
    1772:	91 60       	ori	r25, 0x01	; 1
    1774:	20 fb       	bst	r18, 0
    1776:	95 f9       	bld	r25, 5
    1778:	9f 73       	andi	r25, 0x3F	; 63
    177a:	90 64       	ori	r25, 0x40	; 64
    177c:	90 93 81 01 	sts	0x0181, r25
    1780:	88 e8       	ldi	r24, 0x88	; 136
    1782:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    1786:	80 91 d5 08 	lds	r24, 0x08D5
    178a:	88 23       	and	r24, r24
    178c:	61 f0       	breq	.+24     	; 0x17a6 <rf_tx_packet+0x5c>
		machead->seq_num = 0xFF;
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    1794:	8a ea       	ldi	r24, 0xAA	; 170
    1796:	9a ea       	ldi	r25, 0xAA	; 170
    1798:	90 93 89 01 	sts	0x0189, r25
    179c:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	9f ef       	ldi	r25, 0xFF	; 255
    17a4:	10 c0       	rjmp	.+32     	; 0x17c6 <rf_tx_packet+0x7c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    17a6:	80 91 da 08 	lds	r24, 0x08DA
    17aa:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    17ae:	20 91 61 01 	lds	r18, 0x0161
    17b2:	80 91 60 01 	lds	r24, 0x0160
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	92 2b       	or	r25, r18
    17ba:	90 93 89 01 	sts	0x0189, r25
    17be:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	90 93 87 01 	sts	0x0187, r25
    17ca:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    17ce:	20 91 63 01 	lds	r18, 0x0163
    17d2:	80 91 62 01 	lds	r24, 0x0162
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	92 2b       	or	r25, r18
    17da:	90 93 85 01 	sts	0x0185, r25
    17de:	80 93 84 01 	sts	0x0184, r24
    17e2:	8f 01       	movw	r16, r30
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    17e4:	42 81       	ldd	r20, Z+2	; 0x02
    17e6:	55 27       	eor	r21, r21
    17e8:	47 fd       	sbrc	r20, 7
    17ea:	50 95       	com	r21
    17ec:	63 81       	ldd	r22, Z+3	; 0x03
    17ee:	74 81       	ldd	r23, Z+4	; 0x04
    17f0:	8a e8       	ldi	r24, 0x8A	; 138
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	0e 94 80 30 	call	0x6100	; 0x6100 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    17f8:	f8 01       	movw	r30, r16
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	85 5f       	subi	r24, 0xF5	; 245
    17fe:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1802:	80 91 41 01 	lds	r24, 0x0141
    1806:	d8 2f       	mov	r29, r24
    1808:	df 71       	andi	r29, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    180a:	9f ef       	ldi	r25, 0xFF	; 255
    180c:	9d 0f       	add	r25, r29
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    180e:	92 30       	cpi	r25, 0x02	; 2
    1810:	c0 f3       	brcs	.-16     	; 0x1802 <rf_tx_packet+0xb8>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1812:	d1 31       	cpi	r29, 0x11	; 17
    1814:	b1 f3       	breq	.-20     	; 0x1802 <rf_tx_packet+0xb8>
    1816:	d2 31       	cpi	r29, 0x12	; 18
    1818:	a1 f3       	breq	.-24     	; 0x1802 <rf_tx_packet+0xb8>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    181a:	df 31       	cpi	r29, 0x1F	; 31
    181c:	91 f3       	breq	.-28     	; 0x1802 <rf_tx_packet+0xb8>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    181e:	98 ef       	ldi	r25, 0xF8	; 248
    1820:	9d 0f       	add	r25, r29
    1822:	92 30       	cpi	r25, 0x02	; 2
    1824:	20 f0       	brcs	.+8      	; 0x182e <rf_tx_packet+0xe4>
    1826:	8f 70       	andi	r24, 0x0F	; 15
    1828:	86 30       	cpi	r24, 0x06	; 6
    182a:	09 f0       	breq	.+2      	; 0x182e <rf_tx_packet+0xe4>
    182c:	97 cf       	rjmp	.-210    	; 0x175c <rf_tx_packet+0x12>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    182e:	86 e1       	ldi	r24, 0x16	; 22
    1830:	0e 94 96 0a 	call	0x152c	; 0x152c <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1834:	f8 01       	movw	r30, r16
    1836:	85 81       	ldd	r24, Z+5	; 0x05
    1838:	81 11       	cpse	r24, r1
    183a:	0b c0       	rjmp	.+22     	; 0x1852 <rf_tx_packet+0x108>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    183c:	89 e0       	ldi	r24, 0x09	; 9
    183e:	0e 94 96 0a 	call	0x152c	; 0x152c <rf_cmd>
	if(pRTI->ackRequest)
    1842:	f8 01       	movw	r30, r16
    1844:	86 81       	ldd	r24, Z+6	; 0x06
    1846:	88 23       	and	r24, r24
    1848:	91 f0       	breq	.+36     	; 0x186e <rf_tx_packet+0x124>
		rf_cmd(TX_ARET_ON);
    184a:	89 e1       	ldi	r24, 0x19	; 25
    184c:	0e 94 96 0a 	call	0x152c	; 0x152c <rf_cmd>
    1850:	0e c0       	rjmp	.+28     	; 0x186e <rf_tx_packet+0x124>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    1852:	80 91 48 01 	lds	r24, 0x0148
    1856:	80 68       	ori	r24, 0x80	; 128
    1858:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    185c:	80 91 41 01 	lds	r24, 0x0141
    1860:	87 ff       	sbrs	r24, 7
    1862:	fc cf       	rjmp	.-8      	; 0x185c <rf_tx_packet+0x112>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    1864:	80 91 41 01 	lds	r24, 0x0141
    1868:	86 ff       	sbrs	r24, 6
    186a:	78 cf       	rjmp	.-272    	; 0x175c <rf_tx_packet+0x12>
    186c:	e7 cf       	rjmp	.-50     	; 0x183c <rf_tx_packet+0xf2>
	
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

   tx_done = 0;
    186e:	10 92 e1 08 	sts	0x08E1, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	0e 94 96 0a 	call	0x152c	; 0x152c <rf_cmd>
   for(i=0; (i<65000) && !tx_done; i++){
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	20 91 e1 08 	lds	r18, 0x08E1
    1880:	21 11       	cpse	r18, r1
    1882:	05 c0       	rjmp	.+10     	; 0x188e <rf_tx_packet+0x144>
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	88 3e       	cpi	r24, 0xE8	; 232
    1888:	fd ef       	ldi	r31, 0xFD	; 253
    188a:	9f 07       	cpc	r25, r31
    188c:	b9 f7       	brne	.-18     	; 0x187c <rf_tx_packet+0x132>
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    188e:	f8 01       	movw	r30, r16
    1890:	26 81       	ldd	r18, Z+6	; 0x06
    1892:	22 23       	and	r18, r18
    1894:	31 f0       	breq	.+12     	; 0x18a2 <rf_tx_packet+0x158>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    1896:	20 91 42 01 	lds	r18, 0x0142
    189a:	22 95       	swap	r18
    189c:	26 95       	lsr	r18
    189e:	27 70       	andi	r18, 0x07	; 7
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    18a0:	29 f4       	brne	.+10     	; 0x18ac <rf_tx_packet+0x162>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    18a2:	88 3e       	cpi	r24, 0xE8	; 232
    18a4:	9d 4f       	sbci	r25, 0xFD	; 253
    18a6:	11 f0       	breq	.+4      	; 0x18ac <rf_tx_packet+0x162>
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    18a8:	c1 e0       	ldi	r28, 0x01	; 1
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <rf_tx_packet+0x164>
    18ac:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    18ae:	8d 2f       	mov	r24, r29
    18b0:	0e 94 96 0a 	call	0x152c	; 0x152c <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    18b4:	8c 2f       	mov	r24, r28
}
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	08 95       	ret

000018c0 <rf_tx_packet_resend>:
uint8_t rf_tx_packet_resend()
{
   uint8_t trx_error;
   uint16_t i;

   tx_done = 0;
    18c0:	10 92 e1 08 	sts	0x08E1, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	0e 94 96 0a 	call	0x152c	; 0x152c <rf_cmd>
    18ca:	88 ee       	ldi	r24, 0xE8	; 232
    18cc:	9d ef       	ldi	r25, 0xFD	; 253
   for(i=0; (i<65000) && !tx_done; i++)
    18ce:	20 91 e1 08 	lds	r18, 0x08E1
    18d2:	21 11       	cpse	r18, r1
    18d4:	04 c0       	rjmp	.+8      	; 0x18de <rf_tx_packet_resend+0x1e>
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	d1 f7       	brne	.-12     	; 0x18ce <rf_tx_packet_resend+0xe>
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
    18da:	8f ef       	ldi	r24, 0xFF	; 255

   return trx_error;
}
    18dc:	08 95       	ret
   tx_done = 0;
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; (i<65000) && !tx_done; i++)
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	08 95       	ret

000018e2 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    18e6:	80 91 f2 08 	lds	r24, 0x08F2
    18ea:	88 23       	and	r24, r24
    18ec:	41 f1       	breq	.+80     	; 0x193e <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    18ee:	80 91 41 01 	lds	r24, 0x0141
    18f2:	c8 2f       	mov	r28, r24
    18f4:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    18f6:	9f ef       	ldi	r25, 0xFF	; 255
    18f8:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    18fa:	92 30       	cpi	r25, 0x02	; 2
    18fc:	c0 f3       	brcs	.-16     	; 0x18ee <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    18fe:	c1 31       	cpi	r28, 0x11	; 17
    1900:	b1 f3       	breq	.-20     	; 0x18ee <rf_cca_check+0xc>
    1902:	c2 31       	cpi	r28, 0x12	; 18
    1904:	a1 f3       	breq	.-24     	; 0x18ee <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1906:	cf 31       	cpi	r28, 0x1F	; 31
    1908:	91 f3       	breq	.-28     	; 0x18ee <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    190a:	c8 30       	cpi	r28, 0x08	; 8
    190c:	19 f0       	breq	.+6      	; 0x1914 <rf_cca_check+0x32>
    190e:	8f 70       	andi	r24, 0x0F	; 15
    1910:	86 30       	cpi	r24, 0x06	; 6
    1912:	a9 f4       	brne	.+42     	; 0x193e <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    1914:	86 e1       	ldi	r24, 0x16	; 22
    1916:	0e 94 96 0a 	call	0x152c	; 0x152c <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    191a:	80 91 48 01 	lds	r24, 0x0148
    191e:	80 68       	ori	r24, 0x80	; 128
    1920:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    1924:	80 91 41 01 	lds	r24, 0x0141
    1928:	87 ff       	sbrs	r24, 7
    192a:	fc cf       	rjmp	.-8      	; 0x1924 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    192c:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    1930:	8c 2f       	mov	r24, r28
    1932:	0e 94 96 0a 	call	0x152c	; 0x152c <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1936:	d6 fb       	bst	r29, 6
    1938:	88 27       	eor	r24, r24
    193a:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    193e:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    1946:	80 91 f2 08 	lds	r24, 0x08F2
    194a:	88 23       	and	r24, r24
    194c:	09 f4       	brne	.+2      	; 0x1950 <rf_rx_packet_nonblock+0xa>
    194e:	e3 c0       	rjmp	.+454    	; 0x1b16 <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;

   if(!rx_ready)
    1950:	80 91 09 09 	lds	r24, 0x0909
    1954:	88 23       	and	r24, r24
    1956:	09 f4       	brne	.+2      	; 0x195a <rf_rx_packet_nonblock+0x14>
    1958:	dc c0       	rjmp	.+440    	; 0x1b12 <rf_rx_packet_nonblock+0x1cc>
      return 0;
   else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    195a:	80 91 7b 01 	lds	r24, 0x017B
    195e:	e0 91 d8 08 	lds	r30, 0x08D8
    1962:	f0 91 d9 08 	lds	r31, 0x08D9
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 97       	sbiw	r24, 0x02	; 2
    196a:	24 81       	ldd	r18, Z+4	; 0x04
    196c:	33 27       	eor	r19, r19
    196e:	27 fd       	sbrc	r18, 7
    1970:	30 95       	com	r19
    1972:	28 17       	cp	r18, r24
    1974:	39 07       	cpc	r19, r25
    1976:	0c f4       	brge	.+2      	; 0x197a <rf_rx_packet_nonblock+0x34>
    1978:	ce c0       	rjmp	.+412    	; 0x1b16 <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;


	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    197a:	e0 91 d8 08 	lds	r30, 0x08D8
    197e:	f0 91 d9 08 	lds	r31, 0x08D9
    1982:	80 91 82 01 	lds	r24, 0x0182
    1986:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    1988:	e0 91 d8 08 	lds	r30, 0x08D8
    198c:	f0 91 d9 08 	lds	r31, 0x08D9
    1990:	80 91 87 01 	lds	r24, 0x0187
    1994:	90 91 88 01 	lds	r25, 0x0188
    1998:	92 83       	std	Z+2, r25	; 0x02
    199a:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    199c:	e0 91 d8 08 	lds	r30, 0x08D8
    19a0:	f0 91 d9 08 	lds	r31, 0x08D9
    19a4:	80 91 7b 01 	lds	r24, 0x017B
    19a8:	8b 50       	subi	r24, 0x0B	; 11
    19aa:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    19ac:	a0 91 d8 08 	lds	r26, 0x08D8
    19b0:	b0 91 d9 08 	lds	r27, 0x08D9
    19b4:	e0 91 d8 08 	lds	r30, 0x08D8
    19b8:	f0 91 d9 08 	lds	r31, 0x08D9
    19bc:	13 96       	adiw	r26, 0x03	; 3
    19be:	9c 91       	ld	r25, X
    19c0:	84 81       	ldd	r24, Z+4	; 0x04
    19c2:	89 17       	cp	r24, r25
    19c4:	3c f0       	brlt	.+14     	; 0x19d4 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    19c6:	e0 91 d8 08 	lds	r30, 0x08D8
    19ca:	f0 91 d9 08 	lds	r31, 0x08D9
    19ce:	83 81       	ldd	r24, Z+3	; 0x03
    19d0:	87 ff       	sbrs	r24, 7
    19d2:	0d c0       	rjmp	.+26     	; 0x19ee <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    19d4:	10 92 09 09 	sts	0x0909, r1
      TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    19d8:	80 91 4c 01 	lds	r24, 0x014C
    19dc:	8f 77       	andi	r24, 0x7F	; 127
    19de:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    19e2:	80 91 4c 01 	lds	r24, 0x014C
    19e6:	80 68       	ori	r24, 0x80	; 128
    19e8:	80 93 4c 01 	sts	0x014C, r24
    19ec:	94 c0       	rjmp	.+296    	; 0x1b16 <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    19ee:	a0 91 d8 08 	lds	r26, 0x08D8
    19f2:	b0 91 d9 08 	lds	r27, 0x08D9
      TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    19f6:	e0 91 d8 08 	lds	r30, 0x08D8
    19fa:	f0 91 d9 08 	lds	r31, 0x08D9
    19fe:	13 96       	adiw	r26, 0x03	; 3
    1a00:	4c 91       	ld	r20, X
    1a02:	55 27       	eor	r21, r21
    1a04:	47 fd       	sbrc	r20, 7
    1a06:	50 95       	com	r21
    1a08:	69 e8       	ldi	r22, 0x89	; 137
    1a0a:	71 e0       	ldi	r23, 0x01	; 1
    1a0c:	85 81       	ldd	r24, Z+5	; 0x05
    1a0e:	96 81       	ldd	r25, Z+6	; 0x06
    1a10:	0e 94 80 30 	call	0x6100	; 0x6100 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
    1a14:	80 91 be 05 	lds	r24, 0x05BE
    1a18:	88 23       	and	r24, r24
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <rf_rx_packet_nonblock+0xd8>
    1a1c:	3e c0       	rjmp	.+124    	; 0x1a9a <rf_rx_packet_nonblock+0x154>
    1a1e:	e0 91 d8 08 	lds	r30, 0x08D8
    1a22:	f0 91 d9 08 	lds	r31, 0x08D9
    1a26:	83 81       	ldd	r24, Z+3	; 0x03
    1a28:	80 31       	cpi	r24, 0x10	; 16
    1a2a:	b9 f5       	brne	.+110    	; 0x1a9a <rf_rx_packet_nonblock+0x154>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
    1a2c:	e0 91 d8 08 	lds	r30, 0x08D8
    1a30:	f0 91 d9 08 	lds	r31, 0x08D9
    1a34:	65 81       	ldd	r22, Z+5	; 0x05
    1a36:	76 81       	ldd	r23, Z+6	; 0x06
    1a38:	44 e0       	ldi	r20, 0x04	; 4
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	80 e1       	ldi	r24, 0x10	; 16
    1a3e:	92 e0       	ldi	r25, 0x02	; 2
    1a40:	0e 94 89 30 	call	0x6112	; 0x6112 <strncmp>
    1a44:	89 2b       	or	r24, r25
    1a46:	49 f5       	brne	.+82     	; 0x1a9a <rf_rx_packet_nonblock+0x154>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
    1a48:	e0 91 d8 08 	lds	r30, 0x08D8
    1a4c:	f0 91 d9 08 	lds	r31, 0x08D9
    1a50:	65 81       	ldd	r22, Z+5	; 0x05
    1a52:	76 81       	ldd	r23, Z+6	; 0x06
    1a54:	40 e1       	ldi	r20, 0x10	; 16
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	80 e1       	ldi	r24, 0x10	; 16
    1a5a:	92 e0       	ldi	r25, 0x02	; 2
    1a5c:	0e 94 89 30 	call	0x6112	; 0x6112 <strncmp>
    1a60:	89 2b       	or	r24, r25
    1a62:	d9 f4       	brne	.+54     	; 0x1a9a <rf_rx_packet_nonblock+0x154>
            wdt_enable(WDTO_500MS);
    1a64:	9d e0       	ldi	r25, 0x0D	; 13
    1a66:	88 e1       	ldi	r24, 0x18	; 24
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	a8 95       	wdr
    1a6e:	80 93 60 00 	sts	0x0060, r24
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 59 13 	call	0x26b2	; 0x26b2 <nrk_led_set>
            nrk_led_set(1);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 59 13 	call	0x26b2	; 0x26b2 <nrk_led_set>
            nrk_led_set(2);
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 59 13 	call	0x26b2	; 0x26b2 <nrk_led_set>
            nrk_led_set(3);
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e 94 59 13 	call	0x26b2	; 0x26b2 <nrk_led_set>
    1a98:	ff cf       	rjmp	.-2      	; 0x1a98 <rf_rx_packet_nonblock+0x152>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    1a9a:	e0 91 d8 08 	lds	r30, 0x08D8
    1a9e:	f0 91 d9 08 	lds	r31, 0x08D9
    1aa2:	80 91 80 01 	lds	r24, 0x0180
    1aa6:	85 fb       	bst	r24, 5
    1aa8:	88 27       	eor	r24, r24
    1aaa:	80 f9       	bld	r24, 0
    1aac:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    1aae:	e0 91 d8 08 	lds	r30, 0x08D8
    1ab2:	f0 91 d9 08 	lds	r31, 0x08D9
    1ab6:	80 91 47 01 	lds	r24, 0x0147
    1aba:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    1abc:	e0 91 d8 08 	lds	r30, 0x08D8
    1ac0:	f0 91 d9 08 	lds	r31, 0x08D9
    1ac4:	80 91 46 01 	lds	r24, 0x0146
    1ac8:	86 95       	lsr	r24
    1aca:	86 95       	lsr	r24
    1acc:	86 95       	lsr	r24
    1ace:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    1ad0:	e0 91 d8 08 	lds	r30, 0x08D8
    1ad4:	f0 91 d9 08 	lds	r31, 0x08D9
    1ad8:	80 91 47 01 	lds	r24, 0x0147
    1adc:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    1ade:	a0 91 d8 08 	lds	r26, 0x08D8
    1ae2:	b0 91 d9 08 	lds	r27, 0x08D9
    1ae6:	e0 91 7b 01 	lds	r30, 0x017B
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	e0 58       	subi	r30, 0x80	; 128
    1aee:	fe 4f       	sbci	r31, 0xFE	; 254
    1af0:	80 81       	ld	r24, Z
    1af2:	1b 96       	adiw	r26, 0x0b	; 11
    1af4:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    1af6:	10 92 09 09 	sts	0x0909, r1
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1afa:	80 91 4c 01 	lds	r24, 0x014C
    1afe:	8f 77       	andi	r24, 0x7F	; 127
    1b00:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1b04:	80 91 4c 01 	lds	r24, 0x014C
    1b08:	80 68       	ori	r24, 0x80	; 128
    1b0a:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

   if(!rx_ready)
      return 0;
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    1b16:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1b18:	08 95       	ret

00001b1a <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1b1a:	1f 92       	push	r1
    1b1c:	0f 92       	push	r0
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	0f 92       	push	r0
    1b22:	11 24       	eor	r1, r1
    1b24:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1b26:	80 e8       	ldi	r24, 0x80	; 128
    1b28:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1b2c:	8f 91       	pop	r24
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	1f 90       	pop	r1
    1b36:	18 95       	reti

00001b38 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
    1b42:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	80 93 e1 08 	sts	0x08E1, r24
   IRQ_STATUS = (1 << TX_END);
    1b4a:	80 e4       	ldi	r24, 0x40	; 64
    1b4c:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    1b50:	8f 91       	pop	r24
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	0f 90       	pop	r0
    1b58:	1f 90       	pop	r1
    1b5a:	18 95       	reti

00001b5c <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    1b5c:	1f 92       	push	r1
    1b5e:	0f 92       	push	r0
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	0f 92       	push	r0
    1b64:	11 24       	eor	r1, r1
    1b66:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    1b68:	80 e2       	ldi	r24, 0x20	; 32
    1b6a:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1b6e:	8f 91       	pop	r24
    1b70:	0f 90       	pop	r0
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti

00001b7a <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    1b7a:	1f 92       	push	r1
    1b7c:	0f 92       	push	r0
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	0f 92       	push	r0
    1b82:	11 24       	eor	r1, r1
    1b84:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    1b86:	80 e1       	ldi	r24, 0x10	; 16
    1b88:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1b8c:	8f 91       	pop	r24
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	0b b6       	in	r0, 0x3b	; 59
    1ba4:	0f 92       	push	r0
    1ba6:	2f 93       	push	r18
    1ba8:	3f 93       	push	r19
    1baa:	4f 93       	push	r20
    1bac:	5f 93       	push	r21
    1bae:	6f 93       	push	r22
    1bb0:	7f 93       	push	r23
    1bb2:	8f 93       	push	r24
    1bb4:	9f 93       	push	r25
    1bb6:	af 93       	push	r26
    1bb8:	bf 93       	push	r27
    1bba:	ef 93       	push	r30
    1bbc:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    1bbe:	84 e0       	ldi	r24, 0x04	; 4
    1bc0:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    1bc4:	e0 91 c1 05 	lds	r30, 0x05C1
    1bc8:	f0 91 c2 05 	lds	r31, 0x05C2
    1bcc:	30 97       	sbiw	r30, 0x00	; 0
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <__vector_59+0x3a>
		rx_start_func();
    1bd0:	09 95       	icall

	return;
}
    1bd2:	ff 91       	pop	r31
    1bd4:	ef 91       	pop	r30
    1bd6:	bf 91       	pop	r27
    1bd8:	af 91       	pop	r26
    1bda:	9f 91       	pop	r25
    1bdc:	8f 91       	pop	r24
    1bde:	7f 91       	pop	r23
    1be0:	6f 91       	pop	r22
    1be2:	5f 91       	pop	r21
    1be4:	4f 91       	pop	r20
    1be6:	3f 91       	pop	r19
    1be8:	2f 91       	pop	r18
    1bea:	0f 90       	pop	r0
    1bec:	0b be       	out	0x3b, r0	; 59
    1bee:	0f 90       	pop	r0
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	0f 90       	pop	r0
    1bf4:	1f 90       	pop	r1
    1bf6:	18 95       	reti

00001bf8 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1bf8:	1f 92       	push	r1
    1bfa:	0f 92       	push	r0
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	0f 92       	push	r0
    1c00:	11 24       	eor	r1, r1
    1c02:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1c0a:	8f 91       	pop	r24
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    1c16:	1f 92       	push	r1
    1c18:	0f 92       	push	r0
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	0f 92       	push	r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1c28:	8f 91       	pop	r24
    1c2a:	0f 90       	pop	r0
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	0f 90       	pop	r0
    1c30:	1f 90       	pop	r1
    1c32:	18 95       	reti

00001c34 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    1c34:	e9 e4       	ldi	r30, 0x49	; 73
    1c36:	f1 e0       	ldi	r31, 0x01	; 1
    1c38:	90 81       	ld	r25, Z
    1c3a:	90 7f       	andi	r25, 0xF0	; 240
    1c3c:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    1c3e:	90 81       	ld	r25, Z
    1c40:	8f 70       	andi	r24, 0x0F	; 15
    1c42:	98 2b       	or	r25, r24
    1c44:	90 83       	st	Z, r25
    1c46:	08 95       	ret

00001c48 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	08 95       	ret

00001c4c <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    1c4c:	08 95       	ret

00001c4e <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    1c4e:	08 95       	ret

00001c50 <rf_security_disable>:
}



void rf_security_disable()
{
    1c50:	08 95       	ret

00001c52 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    1c52:	8f ef       	ldi	r24, 0xFF	; 255
    1c54:	08 95       	ret

00001c56 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1c56:	80 91 d3 08 	lds	r24, 0x08D3
    1c5a:	90 91 d4 08 	lds	r25, 0x08D4
    1c5e:	08 95       	ret

00001c60 <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
    1c60:	08 95       	ret

00001c62 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	08 95       	ret

00001c66 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	08 95       	ret

00001c6a <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	08 95       	ret

00001c6e <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    1c6e:	08 95       	ret

00001c70 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    1c70:	08 95       	ret

00001c72 <rf_test_mode>:
}



void rf_test_mode()
{
    1c72:	08 95       	ret

00001c74 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    1c74:	08 95       	ret

00001c76 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    1c76:	08 95       	ret

00001c78 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    1c78:	08 95       	ret

00001c7a <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    1c7a:	08 95       	ret

00001c7c <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    1c7c:	08 95       	ret

00001c7e <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
    1c7e:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
    1c80:	8d b1       	in	r24, 0x0d	; 13
    1c82:	80 6e       	ori	r24, 0xE0	; 224
    1c84:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
    1c86:	8e b1       	in	r24, 0x0e	; 14
    1c88:	80 6a       	ori	r24, 0xA0	; 160
    1c8a:	8e b9       	out	0x0e, r24	; 14
    1c8c:	08 95       	ret

00001c8e <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
    1c8e:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
    1c90:	8d b1       	in	r24, 0x0d	; 13
    1c92:	80 6e       	ori	r24, 0xE0	; 224
    1c94:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
    1c96:	8e b1       	in	r24, 0x0e	; 14
    1c98:	80 66       	ori	r24, 0x60	; 96
    1c9a:	8e b9       	out	0x0e, r24	; 14
    1c9c:	08 95       	ret

00001c9e <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    1c9e:	cf 92       	push	r12
    1ca0:	df 92       	push	r13
    1ca2:	ef 92       	push	r14
    1ca4:	ff 92       	push	r15
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	27 97       	sbiw	r28, 0x07	; 7
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    1cbe:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    1cc2:	e0 91 d8 08 	lds	r30, 0x08D8
    1cc6:	f0 91 d9 08 	lds	r31, 0x08D9
    1cca:	c0 80       	ld	r12, Z
    1ccc:	d3 80       	ldd	r13, Z+3	; 0x03
    1cce:	e5 80       	ldd	r14, Z+5	; 0x05
    1cd0:	f6 80       	ldd	r15, Z+6	; 0x06
    1cd2:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    1cd4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <rf_rx_packet_nonblock>
	if (err < 1) {
    1cd8:	18 16       	cp	r1, r24
    1cda:	1c f0       	brlt	.+6      	; 0x1ce2 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    1cdc:	8a e8       	ldi	r24, 0x8A	; 138
    1cde:	92 e0       	ldi	r25, 0x02	; 2
    1ce0:	06 c0       	rjmp	.+12     	; 0x1cee <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    1ce2:	f7 01       	movw	r30, r14
    1ce4:	10 81       	ld	r17, Z
	if (ttl == 0) {
    1ce6:	11 11       	cpse	r17, r1
    1ce8:	07 c0       	rjmp	.+14     	; 0x1cf8 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    1cea:	89 ea       	ldi	r24, 0xA9	; 169
    1cec:	92 e0       	ldi	r25, 0x02	; 2
    1cee:	0e 94 34 31 	call	0x6268	; 0x6268 <puts>
#endif
		nrk_int_enable();
    1cf2:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
		return;
    1cf6:	31 c0       	rjmp	.+98     	; 0x1d5a <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    1cf8:	15 30       	cpi	r17, 0x05	; 5
    1cfa:	21 f4       	brne	.+8      	; 0x1d04 <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    1cfc:	8a e0       	ldi	r24, 0x0A	; 10
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 2e 31 	call	0x625c	; 0x625c <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    1d04:	c7 01       	movw	r24, r14
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	9f 93       	push	r25
    1d0a:	8f 93       	push	r24
    1d0c:	80 2f       	mov	r24, r16
    1d0e:	99 27       	eor	r25, r25
    1d10:	87 fd       	sbrc	r24, 7
    1d12:	90 95       	com	r25
    1d14:	9f 93       	push	r25
    1d16:	0f 93       	push	r16
    1d18:	1f 92       	push	r1
    1d1a:	1f 93       	push	r17
    1d1c:	1f 92       	push	r1
    1d1e:	cf 92       	push	r12
    1d20:	8b ec       	ldi	r24, 0xCB	; 203
    1d22:	92 e0       	ldi	r25, 0x02	; 2
    1d24:	9f 93       	push	r25
    1d26:	8f 93       	push	r24
    1d28:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    1d2c:	fd 82       	std	Y+5, r15	; 0x05
    1d2e:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    1d30:	11 50       	subi	r17, 0x01	; 1
    1d32:	f7 01       	movw	r30, r14
    1d34:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    1d36:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    1d38:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    1d3a:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	9f ef       	ldi	r25, 0xFF	; 255
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    1d44:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    1d48:	ce 01       	movw	r24, r28
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	0e 94 a5 0b 	call	0x174a	; 0x174a <rf_tx_packet>
#endif
	return;
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
}
    1d5a:	27 96       	adiw	r28, 0x07	; 7
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	ff 90       	pop	r15
    1d70:	ef 90       	pop	r14
    1d72:	df 90       	pop	r13
    1d74:	cf 90       	pop	r12
    1d76:	08 95       	ret

00001d78 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    1d78:	1f 92       	push	r1
    1d7a:	0f 92       	push	r0
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	0f 92       	push	r0
    1d80:	11 24       	eor	r1, r1
    1d82:	0b b6       	in	r0, 0x3b	; 59
    1d84:	0f 92       	push	r0
    1d86:	2f 93       	push	r18
    1d88:	3f 93       	push	r19
    1d8a:	4f 93       	push	r20
    1d8c:	5f 93       	push	r21
    1d8e:	6f 93       	push	r22
    1d90:	7f 93       	push	r23
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	af 93       	push	r26
    1d98:	bf 93       	push	r27
    1d9a:	ef 93       	push	r30
    1d9c:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 91 7b 01 	lds	r25, 0x017B
    1da4:	89 17       	cp	r24, r25
    1da6:	10 f4       	brcc	.+4      	; 0x1dac <__vector_60+0x34>
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	fa cf       	rjmp	.-12     	; 0x1da0 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

   if((PHY_RSSI >> RX_CRC_VALID) & 0x1){
    1dac:	80 91 46 01 	lds	r24, 0x0146
    1db0:	87 ff       	sbrs	r24, 7
    1db2:	04 c0       	rjmp	.+8      	; 0x1dbc <__vector_60+0x44>
      rx_ready = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	80 93 09 09 	sts	0x0909, r24
    1dba:	04 c0       	rjmp	.+8      	; 0x1dc4 <__vector_60+0x4c>
   } else {
      printf("RX end failed checksum!\r\n");
    1dbc:	84 ef       	ldi	r24, 0xF4	; 244
    1dbe:	92 e0       	ldi	r25, 0x02	; 2
    1dc0:	0e 94 34 31 	call	0x6268	; 0x6268 <puts>
   }
   IRQ_STATUS = (1 << RX_END);
    1dc4:	88 e0       	ldi	r24, 0x08	; 8
    1dc6:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1dca:	80 91 46 01 	lds	r24, 0x0146
    1dce:	87 ff       	sbrs	r24, 7
    1dd0:	05 c0       	rjmp	.+10     	; 0x1ddc <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    1dd2:	80 91 d5 08 	lds	r24, 0x08D5
    1dd6:	81 11       	cpse	r24, r1
    1dd8:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1ddc:	e0 91 bf 05 	lds	r30, 0x05BF
    1de0:	f0 91 c0 05 	lds	r31, 0x05C0
    1de4:	30 97       	sbiw	r30, 0x00	; 0
    1de6:	09 f0       	breq	.+2      	; 0x1dea <__vector_60+0x72>
		rx_end_func();
    1de8:	09 95       	icall

	return;
}
    1dea:	ff 91       	pop	r31
    1dec:	ef 91       	pop	r30
    1dee:	bf 91       	pop	r27
    1df0:	af 91       	pop	r26
    1df2:	9f 91       	pop	r25
    1df4:	8f 91       	pop	r24
    1df6:	7f 91       	pop	r23
    1df8:	6f 91       	pop	r22
    1dfa:	5f 91       	pop	r21
    1dfc:	4f 91       	pop	r20
    1dfe:	3f 91       	pop	r19
    1e00:	2f 91       	pop	r18
    1e02:	0f 90       	pop	r0
    1e04:	0b be       	out	0x3b, r0	; 59
    1e06:	0f 90       	pop	r0
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	0f 90       	pop	r0
    1e0c:	1f 90       	pop	r1
    1e0e:	18 95       	reti

00001e10 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    1e10:	a2 ee       	ldi	r26, 0xE2	; 226
    1e12:	b8 e0       	ldi	r27, 0x08	; 8
    1e14:	fc 01       	movw	r30, r24
    1e16:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    1e18:	20 81       	ld	r18, Z
    1e1a:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    1e1c:	21 91       	ld	r18, Z+
    1e1e:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1e22:	e8 17       	cp	r30, r24
    1e24:	f9 07       	cpc	r31, r25
    1e26:	c1 f7       	brne	.-16     	; 0x1e18 <aes_setkey+0x8>
    1e28:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1e2a:	10 92 3e 01 	sts	0x013E, r1
    1e2e:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1e30:	e1 f7       	brne	.-8      	; 0x1e2a <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    1e32:	80 e8       	ldi	r24, 0x80	; 128
    1e34:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    1e38:	80 91 3d 01 	lds	r24, 0x013D
    1e3c:	80 ff       	sbrs	r24, 0
    1e3e:	fc cf       	rjmp	.-8      	; 0x1e38 <aes_setkey+0x28>
    1e40:	e3 ef       	ldi	r30, 0xF3	; 243
    1e42:	f8 e0       	ldi	r31, 0x08	; 8
    1e44:	80 e1       	ldi	r24, 0x10	; 16
    1e46:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    1e48:	90 91 3f 01 	lds	r25, 0x013F
    1e4c:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    1e4e:	8e 13       	cpse	r24, r30
    1e50:	fb cf       	rjmp	.-10     	; 0x1e48 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    1e52:	08 95       	ret

00001e54 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1e5a:	66 23       	and	r22, r22
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <aes_encrypt+0xc>
    1e5e:	45 c0       	rjmp	.+138    	; 0x1eea <aes_encrypt+0x96>
    1e60:	86 2f       	mov	r24, r22
    1e62:	8f 70       	andi	r24, 0x0F	; 15
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <aes_encrypt+0x14>
    1e66:	41 c0       	rjmp	.+130    	; 0x1eea <aes_encrypt+0x96>
    1e68:	e2 ee       	ldi	r30, 0xE2	; 226
    1e6a:	f8 e0       	ldi	r31, 0x08	; 8
    1e6c:	90 e1       	ldi	r25, 0x10	; 16
    1e6e:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    1e70:	21 91       	ld	r18, Z+
    1e72:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1e76:	9e 13       	cpse	r25, r30
    1e78:	fb cf       	rjmp	.-10     	; 0x1e70 <aes_encrypt+0x1c>
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1e7e:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1e80:	40 e1       	ldi	r20, 0x10	; 16
    1e82:	94 9f       	mul	r25, r20
    1e84:	90 01       	movw	r18, r0
    1e86:	11 24       	eor	r1, r1
    1e88:	26 17       	cp	r18, r22
    1e8a:	37 07       	cpc	r19, r23
    1e8c:	7c f5       	brge	.+94     	; 0x1eec <aes_encrypt+0x98>
      if(i==0)
    1e8e:	91 11       	cpse	r25, r1
    1e90:	03 c0       	rjmp	.+6      	; 0x1e98 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    1e92:	10 92 3c 01 	sts	0x013C, r1
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1e98:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	50 e0       	ldi	r21, 0x00	; 0
    1ea0:	2a 0f       	add	r18, r26
    1ea2:	3b 1f       	adc	r19, r27
    1ea4:	e9 01       	movw	r28, r18
    1ea6:	c4 0f       	add	r28, r20
    1ea8:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1eaa:	f8 81       	ld	r31, Y
    1eac:	f0 93 3e 01 	sts	0x013E, r31
    1eb0:	4f 5f       	subi	r20, 0xFF	; 255
    1eb2:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    1eb4:	40 31       	cpi	r20, 0x10	; 16
    1eb6:	51 05       	cpc	r21, r1
    1eb8:	a9 f7       	brne	.-22     	; 0x1ea4 <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1eba:	40 91 3c 01 	lds	r20, 0x013C
    1ebe:	40 68       	ori	r20, 0x80	; 128
    1ec0:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    1ec4:	40 91 3d 01 	lds	r20, 0x013D
    1ec8:	40 ff       	sbrs	r20, 0
    1eca:	fc cf       	rjmp	.-8      	; 0x1ec4 <aes_encrypt+0x70>
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    1ed0:	f0 91 3e 01 	lds	r31, 0x013E
    1ed4:	e9 01       	movw	r28, r18
    1ed6:	c4 0f       	add	r28, r20
    1ed8:	d5 1f       	adc	r29, r21
    1eda:	f8 83       	st	Y, r31
    1edc:	4f 5f       	subi	r20, 0xFF	; 255
    1ede:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    1ee0:	40 31       	cpi	r20, 0x10	; 16
    1ee2:	51 05       	cpc	r21, r1
    1ee4:	a9 f7       	brne	.-22     	; 0x1ed0 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1ee6:	9f 5f       	subi	r25, 0xFF	; 255
    1ee8:	cb cf       	rjmp	.-106    	; 0x1e80 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	08 95       	ret

00001ef2 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1efc:	61 30       	cpi	r22, 0x01	; 1
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <aes_decrypt+0x10>
    1f00:	58 c0       	rjmp	.+176    	; 0x1fb2 <aes_decrypt+0xc0>
    1f02:	86 2f       	mov	r24, r22
    1f04:	8f 70       	andi	r24, 0x0F	; 15
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <aes_decrypt+0x18>
    1f08:	54 c0       	rjmp	.+168    	; 0x1fb2 <aes_decrypt+0xc0>
    1f0a:	e3 ef       	ldi	r30, 0xF3	; 243
    1f0c:	f8 e0       	ldi	r31, 0x08	; 8
    1f0e:	90 e1       	ldi	r25, 0x10	; 16
    1f10:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    1f12:	21 91       	ld	r18, Z+
    1f14:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1f18:	9e 13       	cpse	r25, r30
    1f1a:	fb cf       	rjmp	.-10     	; 0x1f12 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1f1c:	62 95       	swap	r22
    1f1e:	6f 70       	andi	r22, 0x0F	; 15
    1f20:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1f22:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1f24:	6f 3f       	cpi	r22, 0xFF	; 255
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <aes_decrypt+0x38>
    1f28:	45 c0       	rjmp	.+138    	; 0x1fb4 <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1f2a:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1f2e:	46 2f       	mov	r20, r22
    1f30:	55 27       	eor	r21, r21
    1f32:	47 fd       	sbrc	r20, 7
    1f34:	50 95       	com	r21
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	ed 01       	movw	r28, r26
    1f3c:	90 e1       	ldi	r25, 0x10	; 16
    1f3e:	69 02       	muls	r22, r25
    1f40:	c0 0d       	add	r28, r0
    1f42:	d1 1d       	adc	r29, r1
    1f44:	11 24       	eor	r1, r1
    1f46:	fe 01       	movw	r30, r28
    1f48:	e2 0f       	add	r30, r18
    1f4a:	f3 1f       	adc	r31, r19
    1f4c:	90 81       	ld	r25, Z
    1f4e:	90 93 3e 01 	sts	0x013E, r25
    1f52:	2f 5f       	subi	r18, 0xFF	; 255
    1f54:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1f56:	20 31       	cpi	r18, 0x10	; 16
    1f58:	31 05       	cpc	r19, r1
    1f5a:	a9 f7       	brne	.-22     	; 0x1f46 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1f5c:	90 91 3c 01 	lds	r25, 0x013C
    1f60:	90 68       	ori	r25, 0x80	; 128
    1f62:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    1f66:	90 91 3d 01 	lds	r25, 0x013D
    1f6a:	90 ff       	sbrs	r25, 0
    1f6c:	fc cf       	rjmp	.-8      	; 0x1f66 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    1f6e:	41 50       	subi	r20, 0x01	; 1
    1f70:	51 09       	sbc	r21, r1
    1f72:	94 e0       	ldi	r25, 0x04	; 4
    1f74:	44 0f       	add	r20, r20
    1f76:	55 1f       	adc	r21, r21
    1f78:	9a 95       	dec	r25
    1f7a:	e1 f7       	brne	.-8      	; 0x1f74 <aes_decrypt+0x82>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1f80:	90 91 3e 01 	lds	r25, 0x013E
    1f84:	8e 01       	movw	r16, r28
    1f86:	02 0f       	add	r16, r18
    1f88:	13 1f       	adc	r17, r19
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	90 83       	st	Z, r25
         if(i!=0)
    1f8e:	66 23       	and	r22, r22
    1f90:	49 f0       	breq	.+18     	; 0x1fa4 <aes_decrypt+0xb2>
    1f92:	f9 01       	movw	r30, r18
    1f94:	e4 0f       	add	r30, r20
    1f96:	f5 1f       	adc	r31, r21
    1f98:	ea 0f       	add	r30, r26
    1f9a:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    1f9c:	e0 81       	ld	r30, Z
    1f9e:	9e 27       	eor	r25, r30
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	90 83       	st	Z, r25
    1fa4:	2f 5f       	subi	r18, 0xFF	; 255
    1fa6:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    1fa8:	20 31       	cpi	r18, 0x10	; 16
    1faa:	31 05       	cpc	r19, r1
    1fac:	49 f7       	brne	.-46     	; 0x1f80 <aes_decrypt+0x8e>
    1fae:	61 50       	subi	r22, 0x01	; 1
    1fb0:	b9 cf       	rjmp	.-142    	; 0x1f24 <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	08 95       	ret

00001fbe <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    1fbe:	80 91 c0 00 	lds	r24, 0x00C0
    1fc2:	87 ff       	sbrs	r24, 7
    1fc4:	fc cf       	rjmp	.-8      	; 0x1fbe <getc0>
    1fc6:	80 91 c0 00 	lds	r24, 0x00C0
    1fca:	8f 77       	andi	r24, 0x7F	; 127
    1fcc:	80 93 c0 00 	sts	0x00C0, r24
    1fd0:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    1fd4:	08 95       	ret

00001fd6 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1fd6:	90 91 c0 00 	lds	r25, 0x00C0
    1fda:	95 ff       	sbrs	r25, 5
    1fdc:	fc cf       	rjmp	.-8      	; 0x1fd6 <putc0>
    1fde:	90 91 c0 00 	lds	r25, 0x00C0
    1fe2:	9f 7d       	andi	r25, 0xDF	; 223
    1fe4:	90 93 c0 00 	sts	0x00C0, r25
    1fe8:	80 93 c6 00 	sts	0x00C6, r24
    1fec:	08 95       	ret

00001fee <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1fee:	8f ef       	ldi	r24, 0xFF	; 255
    1ff0:	08 95       	ret

00001ff2 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	19 f4       	brne	.+6      	; 0x1ffc <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1ff6:	80 91 c8 00 	lds	r24, 0x00C8
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
    1ffc:	81 11       	cpse	r24, r1
    1ffe:	06 c0       	rjmp	.+12     	; 0x200c <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    2000:	80 91 c0 00 	lds	r24, 0x00C0
    2004:	88 1f       	adc	r24, r24
    2006:	88 27       	eor	r24, r24
    2008:	88 1f       	adc	r24, r24
    200a:	08 95       	ret
        }
return 0;
    200c:	80 e0       	ldi	r24, 0x00	; 0
}
    200e:	08 95       	ret

00002010 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    2014:	fc 01       	movw	r30, r24
    2016:	24 91       	lpm	r18, Z
    2018:	ec 01       	movw	r28, r24
    201a:	21 96       	adiw	r28, 0x01	; 1
    201c:	22 23       	and	r18, r18
    201e:	51 f0       	breq	.+20     	; 0x2034 <nrk_kprintf+0x24>
        putchar(c);
    2020:	60 91 5e 0a 	lds	r22, 0x0A5E
    2024:	70 91 5f 0a 	lds	r23, 0x0A5F
    2028:	82 2f       	mov	r24, r18
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    2030:	ce 01       	movw	r24, r28
    2032:	f0 cf       	rjmp	.-32     	; 0x2014 <nrk_kprintf+0x4>
}
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    203a:	86 e0       	ldi	r24, 0x06	; 6
    203c:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    203e:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    2040:	88 ef       	ldi	r24, 0xF8	; 248
    2042:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    2044:	80 ef       	ldi	r24, 0xF0	; 240
    2046:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	8d b9       	out	0x0d, r24	; 13
    204c:	08 95       	ret

0000204e <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    204e:	0c 94 1d 10 	jmp	0x203a	; 0x203a <PORT_INIT>

00002052 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2052:	8f 3f       	cpi	r24, 0xFF	; 255
    2054:	09 f4       	brne	.+2      	; 0x2058 <nrk_gpio_set+0x6>
    2056:	6c c0       	rjmp	.+216    	; 0x2130 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    2058:	e8 2f       	mov	r30, r24
    205a:	e7 70       	andi	r30, 0x07	; 7
    205c:	4e 2f       	mov	r20, r30
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	47 30       	cpi	r20, 0x07	; 7
    2062:	51 05       	cpc	r21, r1
    2064:	08 f0       	brcs	.+2      	; 0x2068 <nrk_gpio_set+0x16>
    2066:	64 c0       	rjmp	.+200    	; 0x2130 <nrk_gpio_set+0xde>
    2068:	fa 01       	movw	r30, r20
    206a:	e0 57       	subi	r30, 0x70	; 112
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	86 95       	lsr	r24
    2070:	86 95       	lsr	r24
    2072:	86 95       	lsr	r24
    2074:	0c 94 60 30 	jmp	0x60c0	; 0x60c0 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2078:	42 b1       	in	r20, 0x02	; 2
    207a:	21 e0       	ldi	r18, 0x01	; 1
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	b9 01       	movw	r22, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <nrk_gpio_set+0x34>
    2082:	66 0f       	add	r22, r22
    2084:	77 1f       	adc	r23, r23
    2086:	8a 95       	dec	r24
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <nrk_gpio_set+0x30>
    208a:	cb 01       	movw	r24, r22
    208c:	84 2b       	or	r24, r20
    208e:	82 b9       	out	0x02, r24	; 2
    2090:	4d c0       	rjmp	.+154    	; 0x212c <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2092:	45 b1       	in	r20, 0x05	; 5
    2094:	21 e0       	ldi	r18, 0x01	; 1
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	b9 01       	movw	r22, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <nrk_gpio_set+0x4e>
    209c:	66 0f       	add	r22, r22
    209e:	77 1f       	adc	r23, r23
    20a0:	8a 95       	dec	r24
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <nrk_gpio_set+0x4a>
    20a4:	cb 01       	movw	r24, r22
    20a6:	84 2b       	or	r24, r20
    20a8:	85 b9       	out	0x05, r24	; 5
    20aa:	40 c0       	rjmp	.+128    	; 0x212c <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20ac:	48 b1       	in	r20, 0x08	; 8
    20ae:	21 e0       	ldi	r18, 0x01	; 1
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	b9 01       	movw	r22, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <nrk_gpio_set+0x68>
    20b6:	66 0f       	add	r22, r22
    20b8:	77 1f       	adc	r23, r23
    20ba:	8a 95       	dec	r24
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <nrk_gpio_set+0x64>
    20be:	cb 01       	movw	r24, r22
    20c0:	84 2b       	or	r24, r20
    20c2:	88 b9       	out	0x08, r24	; 8
    20c4:	33 c0       	rjmp	.+102    	; 0x212c <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20c6:	4b b1       	in	r20, 0x0b	; 11
    20c8:	21 e0       	ldi	r18, 0x01	; 1
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	b9 01       	movw	r22, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <nrk_gpio_set+0x82>
    20d0:	66 0f       	add	r22, r22
    20d2:	77 1f       	adc	r23, r23
    20d4:	8a 95       	dec	r24
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <nrk_gpio_set+0x7e>
    20d8:	cb 01       	movw	r24, r22
    20da:	84 2b       	or	r24, r20
    20dc:	8b b9       	out	0x0b, r24	; 11
    20de:	26 c0       	rjmp	.+76     	; 0x212c <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20e0:	4e b1       	in	r20, 0x0e	; 14
    20e2:	21 e0       	ldi	r18, 0x01	; 1
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	b9 01       	movw	r22, r18
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <nrk_gpio_set+0x9c>
    20ea:	66 0f       	add	r22, r22
    20ec:	77 1f       	adc	r23, r23
    20ee:	8a 95       	dec	r24
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <nrk_gpio_set+0x98>
    20f2:	cb 01       	movw	r24, r22
    20f4:	84 2b       	or	r24, r20
    20f6:	8e b9       	out	0x0e, r24	; 14
    20f8:	19 c0       	rjmp	.+50     	; 0x212c <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20fa:	41 b3       	in	r20, 0x11	; 17
    20fc:	21 e0       	ldi	r18, 0x01	; 1
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	b9 01       	movw	r22, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <nrk_gpio_set+0xb6>
    2104:	66 0f       	add	r22, r22
    2106:	77 1f       	adc	r23, r23
    2108:	8a 95       	dec	r24
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <nrk_gpio_set+0xb2>
    210c:	cb 01       	movw	r24, r22
    210e:	84 2b       	or	r24, r20
    2110:	81 bb       	out	0x11, r24	; 17
    2112:	0c c0       	rjmp	.+24     	; 0x212c <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2114:	44 b3       	in	r20, 0x14	; 20
    2116:	21 e0       	ldi	r18, 0x01	; 1
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	b9 01       	movw	r22, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <nrk_gpio_set+0xd0>
    211e:	66 0f       	add	r22, r22
    2120:	77 1f       	adc	r23, r23
    2122:	8a 95       	dec	r24
    2124:	e2 f7       	brpl	.-8      	; 0x211e <nrk_gpio_set+0xcc>
    2126:	cb 01       	movw	r24, r22
    2128:	84 2b       	or	r24, r20
    212a:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    212c:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    212e:	08 95       	ret
                default: return -1;
    2130:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2132:	08 95       	ret

00002134 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2134:	8f 3f       	cpi	r24, 0xFF	; 255
    2136:	09 f4       	brne	.+2      	; 0x213a <nrk_gpio_clr+0x6>
    2138:	73 c0       	rjmp	.+230    	; 0x2220 <nrk_gpio_clr+0xec>
        switch (pin & 0x07) {
    213a:	e8 2f       	mov	r30, r24
    213c:	e7 70       	andi	r30, 0x07	; 7
    213e:	4e 2f       	mov	r20, r30
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	47 30       	cpi	r20, 0x07	; 7
    2144:	51 05       	cpc	r21, r1
    2146:	08 f0       	brcs	.+2      	; 0x214a <nrk_gpio_clr+0x16>
    2148:	6b c0       	rjmp	.+214    	; 0x2220 <nrk_gpio_clr+0xec>
    214a:	fa 01       	movw	r30, r20
    214c:	e9 56       	subi	r30, 0x69	; 105
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	86 95       	lsr	r24
    2152:	86 95       	lsr	r24
    2154:	86 95       	lsr	r24
    2156:	0c 94 60 30 	jmp	0x60c0	; 0x60c0 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    215a:	42 b1       	in	r20, 0x02	; 2
    215c:	21 e0       	ldi	r18, 0x01	; 1
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	b9 01       	movw	r22, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <nrk_gpio_clr+0x34>
    2164:	66 0f       	add	r22, r22
    2166:	77 1f       	adc	r23, r23
    2168:	8a 95       	dec	r24
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <nrk_gpio_clr+0x30>
    216c:	cb 01       	movw	r24, r22
    216e:	80 95       	com	r24
    2170:	84 23       	and	r24, r20
    2172:	82 b9       	out	0x02, r24	; 2
    2174:	53 c0       	rjmp	.+166    	; 0x221c <nrk_gpio_clr+0xe8>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2176:	45 b1       	in	r20, 0x05	; 5
    2178:	21 e0       	ldi	r18, 0x01	; 1
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	b9 01       	movw	r22, r18
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <nrk_gpio_clr+0x50>
    2180:	66 0f       	add	r22, r22
    2182:	77 1f       	adc	r23, r23
    2184:	8a 95       	dec	r24
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <nrk_gpio_clr+0x4c>
    2188:	cb 01       	movw	r24, r22
    218a:	80 95       	com	r24
    218c:	84 23       	and	r24, r20
    218e:	85 b9       	out	0x05, r24	; 5
    2190:	45 c0       	rjmp	.+138    	; 0x221c <nrk_gpio_clr+0xe8>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2192:	48 b1       	in	r20, 0x08	; 8
    2194:	21 e0       	ldi	r18, 0x01	; 1
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	b9 01       	movw	r22, r18
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <nrk_gpio_clr+0x6c>
    219c:	66 0f       	add	r22, r22
    219e:	77 1f       	adc	r23, r23
    21a0:	8a 95       	dec	r24
    21a2:	e2 f7       	brpl	.-8      	; 0x219c <nrk_gpio_clr+0x68>
    21a4:	cb 01       	movw	r24, r22
    21a6:	80 95       	com	r24
    21a8:	84 23       	and	r24, r20
    21aa:	88 b9       	out	0x08, r24	; 8
    21ac:	37 c0       	rjmp	.+110    	; 0x221c <nrk_gpio_clr+0xe8>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21ae:	4b b1       	in	r20, 0x0b	; 11
    21b0:	21 e0       	ldi	r18, 0x01	; 1
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	b9 01       	movw	r22, r18
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <nrk_gpio_clr+0x88>
    21b8:	66 0f       	add	r22, r22
    21ba:	77 1f       	adc	r23, r23
    21bc:	8a 95       	dec	r24
    21be:	e2 f7       	brpl	.-8      	; 0x21b8 <nrk_gpio_clr+0x84>
    21c0:	cb 01       	movw	r24, r22
    21c2:	80 95       	com	r24
    21c4:	84 23       	and	r24, r20
    21c6:	8b b9       	out	0x0b, r24	; 11
    21c8:	29 c0       	rjmp	.+82     	; 0x221c <nrk_gpio_clr+0xe8>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21ca:	4e b1       	in	r20, 0x0e	; 14
    21cc:	21 e0       	ldi	r18, 0x01	; 1
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	b9 01       	movw	r22, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <nrk_gpio_clr+0xa4>
    21d4:	66 0f       	add	r22, r22
    21d6:	77 1f       	adc	r23, r23
    21d8:	8a 95       	dec	r24
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <nrk_gpio_clr+0xa0>
    21dc:	cb 01       	movw	r24, r22
    21de:	80 95       	com	r24
    21e0:	84 23       	and	r24, r20
    21e2:	8e b9       	out	0x0e, r24	; 14
    21e4:	1b c0       	rjmp	.+54     	; 0x221c <nrk_gpio_clr+0xe8>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21e6:	41 b3       	in	r20, 0x11	; 17
    21e8:	21 e0       	ldi	r18, 0x01	; 1
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	b9 01       	movw	r22, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <nrk_gpio_clr+0xc0>
    21f0:	66 0f       	add	r22, r22
    21f2:	77 1f       	adc	r23, r23
    21f4:	8a 95       	dec	r24
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <nrk_gpio_clr+0xbc>
    21f8:	cb 01       	movw	r24, r22
    21fa:	80 95       	com	r24
    21fc:	84 23       	and	r24, r20
    21fe:	81 bb       	out	0x11, r24	; 17
    2200:	0d c0       	rjmp	.+26     	; 0x221c <nrk_gpio_clr+0xe8>
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2202:	44 b3       	in	r20, 0x14	; 20
    2204:	21 e0       	ldi	r18, 0x01	; 1
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	b9 01       	movw	r22, r18
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <nrk_gpio_clr+0xdc>
    220c:	66 0f       	add	r22, r22
    220e:	77 1f       	adc	r23, r23
    2210:	8a 95       	dec	r24
    2212:	e2 f7       	brpl	.-8      	; 0x220c <nrk_gpio_clr+0xd8>
    2214:	cb 01       	movw	r24, r22
    2216:	80 95       	com	r24
    2218:	84 23       	and	r24, r20
    221a:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    221e:	08 95       	ret
                default: return -1;
    2220:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2222:	08 95       	ret

00002224 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2224:	8f 3f       	cpi	r24, 0xFF	; 255
    2226:	31 f1       	breq	.+76     	; 0x2274 <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    2228:	e8 2f       	mov	r30, r24
    222a:	e7 70       	andi	r30, 0x07	; 7
    222c:	4e 2f       	mov	r20, r30
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	47 30       	cpi	r20, 0x07	; 7
    2232:	51 05       	cpc	r21, r1
    2234:	f8 f4       	brcc	.+62     	; 0x2274 <nrk_gpio_get+0x50>
    2236:	fa 01       	movw	r30, r20
    2238:	e2 56       	subi	r30, 0x62	; 98
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	28 2f       	mov	r18, r24
    223e:	26 95       	lsr	r18
    2240:	26 95       	lsr	r18
    2242:	26 95       	lsr	r18
    2244:	0c 94 60 30 	jmp	0x60c0	; 0x60c0 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2248:	90 b1       	in	r25, 0x00	; 0
    224a:	0b c0       	rjmp	.+22     	; 0x2262 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    224c:	93 b1       	in	r25, 0x03	; 3
    224e:	09 c0       	rjmp	.+18     	; 0x2262 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2250:	96 b1       	in	r25, 0x06	; 6
    2252:	07 c0       	rjmp	.+14     	; 0x2262 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2254:	99 b1       	in	r25, 0x09	; 9
    2256:	05 c0       	rjmp	.+10     	; 0x2262 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2258:	9c b1       	in	r25, 0x0c	; 12
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    225c:	9f b1       	in	r25, 0x0f	; 15
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    2260:	92 b3       	in	r25, 0x12	; 18
    2262:	89 2f       	mov	r24, r25
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	02 c0       	rjmp	.+4      	; 0x226c <nrk_gpio_get+0x48>
    2268:	95 95       	asr	r25
    226a:	87 95       	ror	r24
    226c:	2a 95       	dec	r18
    226e:	e2 f7       	brpl	.-8      	; 0x2268 <nrk_gpio_get+0x44>
    2270:	81 70       	andi	r24, 0x01	; 1
    2272:	08 95       	ret
                default: return -1;
    2274:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2276:	08 95       	ret

00002278 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2278:	8f 3f       	cpi	r24, 0xFF	; 255
    227a:	09 f4       	brne	.+2      	; 0x227e <nrk_gpio_toggle+0x6>
    227c:	06 c1       	rjmp	.+524    	; 0x248a <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    227e:	e8 2f       	mov	r30, r24
    2280:	e7 70       	andi	r30, 0x07	; 7
    2282:	4e 2f       	mov	r20, r30
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	47 30       	cpi	r20, 0x07	; 7
    2288:	51 05       	cpc	r21, r1
    228a:	08 f0       	brcs	.+2      	; 0x228e <nrk_gpio_toggle+0x16>
    228c:	fe c0       	rjmp	.+508    	; 0x248a <nrk_gpio_toggle+0x212>
    228e:	fa 01       	movw	r30, r20
    2290:	eb 55       	subi	r30, 0x5B	; 91
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	86 95       	lsr	r24
    2296:	86 95       	lsr	r24
    2298:	86 95       	lsr	r24
    229a:	0c 94 60 30 	jmp	0x60c0	; 0x60c0 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    229e:	20 b1       	in	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	08 2e       	mov	r0, r24
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <nrk_gpio_toggle+0x32>
    22a6:	35 95       	asr	r19
    22a8:	27 95       	ror	r18
    22aa:	0a 94       	dec	r0
    22ac:	e2 f7       	brpl	.-8      	; 0x22a6 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    22ae:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    22b0:	20 fd       	sbrc	r18, 0
    22b2:	0b c0       	rjmp	.+22     	; 0x22ca <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    22b4:	21 e0       	ldi	r18, 0x01	; 1
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	b9 01       	movw	r22, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <nrk_gpio_toggle+0x48>
    22bc:	66 0f       	add	r22, r22
    22be:	77 1f       	adc	r23, r23
    22c0:	8a 95       	dec	r24
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <nrk_gpio_toggle+0x44>
    22c4:	cb 01       	movw	r24, r22
    22c6:	84 2b       	or	r24, r20
    22c8:	0b c0       	rjmp	.+22     	; 0x22e0 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    22ca:	21 e0       	ldi	r18, 0x01	; 1
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	b9 01       	movw	r22, r18
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <nrk_gpio_toggle+0x5e>
    22d2:	66 0f       	add	r22, r22
    22d4:	77 1f       	adc	r23, r23
    22d6:	8a 95       	dec	r24
    22d8:	e2 f7       	brpl	.-8      	; 0x22d2 <nrk_gpio_toggle+0x5a>
    22da:	cb 01       	movw	r24, r22
    22dc:	80 95       	com	r24
    22de:	84 23       	and	r24, r20
    22e0:	82 b9       	out	0x02, r24	; 2
    22e2:	16 c0       	rjmp	.+44     	; 0x2310 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    22e4:	23 b1       	in	r18, 0x03	; 3
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	08 2e       	mov	r0, r24
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <nrk_gpio_toggle+0x78>
    22ec:	35 95       	asr	r19
    22ee:	27 95       	ror	r18
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    22f4:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    22f6:	20 fd       	sbrc	r18, 0
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    22fa:	21 e0       	ldi	r18, 0x01	; 1
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	b9 01       	movw	r22, r18
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <nrk_gpio_toggle+0x8e>
    2302:	66 0f       	add	r22, r22
    2304:	77 1f       	adc	r23, r23
    2306:	8a 95       	dec	r24
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <nrk_gpio_toggle+0x8a>
    230a:	cb 01       	movw	r24, r22
    230c:	84 2b       	or	r24, r20
    230e:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2314:	21 e0       	ldi	r18, 0x01	; 1
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	b9 01       	movw	r22, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <nrk_gpio_toggle+0xa8>
    231c:	66 0f       	add	r22, r22
    231e:	77 1f       	adc	r23, r23
    2320:	8a 95       	dec	r24
    2322:	e2 f7       	brpl	.-8      	; 0x231c <nrk_gpio_toggle+0xa4>
    2324:	cb 01       	movw	r24, r22
    2326:	80 95       	com	r24
    2328:	84 23       	and	r24, r20
    232a:	f1 cf       	rjmp	.-30     	; 0x230e <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    232c:	26 b1       	in	r18, 0x06	; 6
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	08 2e       	mov	r0, r24
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <nrk_gpio_toggle+0xc0>
    2334:	35 95       	asr	r19
    2336:	27 95       	ror	r18
    2338:	0a 94       	dec	r0
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    233c:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    233e:	20 fd       	sbrc	r18, 0
    2340:	0b c0       	rjmp	.+22     	; 0x2358 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2342:	21 e0       	ldi	r18, 0x01	; 1
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	b9 01       	movw	r22, r18
    2348:	02 c0       	rjmp	.+4      	; 0x234e <nrk_gpio_toggle+0xd6>
    234a:	66 0f       	add	r22, r22
    234c:	77 1f       	adc	r23, r23
    234e:	8a 95       	dec	r24
    2350:	e2 f7       	brpl	.-8      	; 0x234a <nrk_gpio_toggle+0xd2>
    2352:	cb 01       	movw	r24, r22
    2354:	84 2b       	or	r24, r20
    2356:	0b c0       	rjmp	.+22     	; 0x236e <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2358:	21 e0       	ldi	r18, 0x01	; 1
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	b9 01       	movw	r22, r18
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <nrk_gpio_toggle+0xec>
    2360:	66 0f       	add	r22, r22
    2362:	77 1f       	adc	r23, r23
    2364:	8a 95       	dec	r24
    2366:	e2 f7       	brpl	.-8      	; 0x2360 <nrk_gpio_toggle+0xe8>
    2368:	cb 01       	movw	r24, r22
    236a:	80 95       	com	r24
    236c:	84 23       	and	r24, r20
    236e:	88 b9       	out	0x08, r24	; 8
    2370:	cf cf       	rjmp	.-98     	; 0x2310 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2372:	29 b1       	in	r18, 0x09	; 9
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	08 2e       	mov	r0, r24
    2378:	02 c0       	rjmp	.+4      	; 0x237e <nrk_gpio_toggle+0x106>
    237a:	35 95       	asr	r19
    237c:	27 95       	ror	r18
    237e:	0a 94       	dec	r0
    2380:	e2 f7       	brpl	.-8      	; 0x237a <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2382:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2384:	20 fd       	sbrc	r18, 0
    2386:	0b c0       	rjmp	.+22     	; 0x239e <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2388:	21 e0       	ldi	r18, 0x01	; 1
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	b9 01       	movw	r22, r18
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <nrk_gpio_toggle+0x11c>
    2390:	66 0f       	add	r22, r22
    2392:	77 1f       	adc	r23, r23
    2394:	8a 95       	dec	r24
    2396:	e2 f7       	brpl	.-8      	; 0x2390 <nrk_gpio_toggle+0x118>
    2398:	cb 01       	movw	r24, r22
    239a:	84 2b       	or	r24, r20
    239c:	0b c0       	rjmp	.+22     	; 0x23b4 <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    239e:	21 e0       	ldi	r18, 0x01	; 1
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	b9 01       	movw	r22, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <nrk_gpio_toggle+0x132>
    23a6:	66 0f       	add	r22, r22
    23a8:	77 1f       	adc	r23, r23
    23aa:	8a 95       	dec	r24
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <nrk_gpio_toggle+0x12e>
    23ae:	cb 01       	movw	r24, r22
    23b0:	80 95       	com	r24
    23b2:	84 23       	and	r24, r20
    23b4:	8b b9       	out	0x0b, r24	; 11
    23b6:	ac cf       	rjmp	.-168    	; 0x2310 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    23b8:	2c b1       	in	r18, 0x0c	; 12
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	08 2e       	mov	r0, r24
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <nrk_gpio_toggle+0x14c>
    23c0:	35 95       	asr	r19
    23c2:	27 95       	ror	r18
    23c4:	0a 94       	dec	r0
    23c6:	e2 f7       	brpl	.-8      	; 0x23c0 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    23c8:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    23ca:	20 fd       	sbrc	r18, 0
    23cc:	0b c0       	rjmp	.+22     	; 0x23e4 <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    23ce:	21 e0       	ldi	r18, 0x01	; 1
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	b9 01       	movw	r22, r18
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <nrk_gpio_toggle+0x162>
    23d6:	66 0f       	add	r22, r22
    23d8:	77 1f       	adc	r23, r23
    23da:	8a 95       	dec	r24
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <nrk_gpio_toggle+0x15e>
    23de:	cb 01       	movw	r24, r22
    23e0:	84 2b       	or	r24, r20
    23e2:	0b c0       	rjmp	.+22     	; 0x23fa <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    23e4:	21 e0       	ldi	r18, 0x01	; 1
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	b9 01       	movw	r22, r18
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <nrk_gpio_toggle+0x178>
    23ec:	66 0f       	add	r22, r22
    23ee:	77 1f       	adc	r23, r23
    23f0:	8a 95       	dec	r24
    23f2:	e2 f7       	brpl	.-8      	; 0x23ec <nrk_gpio_toggle+0x174>
    23f4:	cb 01       	movw	r24, r22
    23f6:	80 95       	com	r24
    23f8:	84 23       	and	r24, r20
    23fa:	8e b9       	out	0x0e, r24	; 14
    23fc:	89 cf       	rjmp	.-238    	; 0x2310 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    23fe:	2f b1       	in	r18, 0x0f	; 15
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	08 2e       	mov	r0, r24
    2404:	02 c0       	rjmp	.+4      	; 0x240a <nrk_gpio_toggle+0x192>
    2406:	35 95       	asr	r19
    2408:	27 95       	ror	r18
    240a:	0a 94       	dec	r0
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    240e:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2410:	20 fd       	sbrc	r18, 0
    2412:	0b c0       	rjmp	.+22     	; 0x242a <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2414:	21 e0       	ldi	r18, 0x01	; 1
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	b9 01       	movw	r22, r18
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <nrk_gpio_toggle+0x1a8>
    241c:	66 0f       	add	r22, r22
    241e:	77 1f       	adc	r23, r23
    2420:	8a 95       	dec	r24
    2422:	e2 f7       	brpl	.-8      	; 0x241c <nrk_gpio_toggle+0x1a4>
    2424:	cb 01       	movw	r24, r22
    2426:	84 2b       	or	r24, r20
    2428:	0b c0       	rjmp	.+22     	; 0x2440 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    242a:	21 e0       	ldi	r18, 0x01	; 1
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	b9 01       	movw	r22, r18
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <nrk_gpio_toggle+0x1be>
    2432:	66 0f       	add	r22, r22
    2434:	77 1f       	adc	r23, r23
    2436:	8a 95       	dec	r24
    2438:	e2 f7       	brpl	.-8      	; 0x2432 <nrk_gpio_toggle+0x1ba>
    243a:	cb 01       	movw	r24, r22
    243c:	80 95       	com	r24
    243e:	84 23       	and	r24, r20
    2440:	81 bb       	out	0x11, r24	; 17
    2442:	66 cf       	rjmp	.-308    	; 0x2310 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2444:	22 b3       	in	r18, 0x12	; 18
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	08 2e       	mov	r0, r24
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <nrk_gpio_toggle+0x1d8>
    244c:	35 95       	asr	r19
    244e:	27 95       	ror	r18
    2450:	0a 94       	dec	r0
    2452:	e2 f7       	brpl	.-8      	; 0x244c <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2454:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2456:	20 fd       	sbrc	r18, 0
    2458:	0b c0       	rjmp	.+22     	; 0x2470 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    245a:	21 e0       	ldi	r18, 0x01	; 1
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	b9 01       	movw	r22, r18
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <nrk_gpio_toggle+0x1ee>
    2462:	66 0f       	add	r22, r22
    2464:	77 1f       	adc	r23, r23
    2466:	8a 95       	dec	r24
    2468:	e2 f7       	brpl	.-8      	; 0x2462 <nrk_gpio_toggle+0x1ea>
    246a:	cb 01       	movw	r24, r22
    246c:	84 2b       	or	r24, r20
    246e:	0b c0       	rjmp	.+22     	; 0x2486 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    2470:	21 e0       	ldi	r18, 0x01	; 1
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	b9 01       	movw	r22, r18
    2476:	02 c0       	rjmp	.+4      	; 0x247c <nrk_gpio_toggle+0x204>
    2478:	66 0f       	add	r22, r22
    247a:	77 1f       	adc	r23, r23
    247c:	8a 95       	dec	r24
    247e:	e2 f7       	brpl	.-8      	; 0x2478 <nrk_gpio_toggle+0x200>
    2480:	cb 01       	movw	r24, r22
    2482:	80 95       	com	r24
    2484:	84 23       	and	r24, r20
    2486:	84 bb       	out	0x14, r24	; 20
    2488:	43 cf       	rjmp	.-378    	; 0x2310 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    248a:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    248c:	08 95       	ret

0000248e <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    248e:	8f 3f       	cpi	r24, 0xFF	; 255
    2490:	09 f4       	brne	.+2      	; 0x2494 <nrk_gpio_direction+0x6>
    2492:	d5 c0       	rjmp	.+426    	; 0x263e <nrk_gpio_direction+0x1b0>
    2494:	e8 2f       	mov	r30, r24
    2496:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    2498:	4e 2f       	mov	r20, r30
    249a:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    249c:	61 11       	cpse	r22, r1
    249e:	67 c0       	rjmp	.+206    	; 0x256e <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    24a0:	47 30       	cpi	r20, 0x07	; 7
    24a2:	51 05       	cpc	r21, r1
    24a4:	08 f0       	brcs	.+2      	; 0x24a8 <nrk_gpio_direction+0x1a>
    24a6:	cb c0       	rjmp	.+406    	; 0x263e <nrk_gpio_direction+0x1b0>
    24a8:	fa 01       	movw	r30, r20
    24aa:	e4 55       	subi	r30, 0x54	; 84
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	86 95       	lsr	r24
    24b0:	86 95       	lsr	r24
    24b2:	86 95       	lsr	r24
    24b4:	0c 94 60 30 	jmp	0x60c0	; 0x60c0 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    24b8:	41 b1       	in	r20, 0x01	; 1
    24ba:	21 e0       	ldi	r18, 0x01	; 1
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	b9 01       	movw	r22, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <nrk_gpio_direction+0x38>
    24c2:	66 0f       	add	r22, r22
    24c4:	77 1f       	adc	r23, r23
    24c6:	8a 95       	dec	r24
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <nrk_gpio_direction+0x34>
    24ca:	cb 01       	movw	r24, r22
    24cc:	80 95       	com	r24
    24ce:	84 23       	and	r24, r20
    24d0:	65 c0       	rjmp	.+202    	; 0x259c <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    24d2:	44 b1       	in	r20, 0x04	; 4
    24d4:	21 e0       	ldi	r18, 0x01	; 1
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	b9 01       	movw	r22, r18
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <nrk_gpio_direction+0x52>
    24dc:	66 0f       	add	r22, r22
    24de:	77 1f       	adc	r23, r23
    24e0:	8a 95       	dec	r24
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <nrk_gpio_direction+0x4e>
    24e4:	cb 01       	movw	r24, r22
    24e6:	80 95       	com	r24
    24e8:	84 23       	and	r24, r20
    24ea:	65 c0       	rjmp	.+202    	; 0x25b6 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    24ec:	47 b1       	in	r20, 0x07	; 7
    24ee:	21 e0       	ldi	r18, 0x01	; 1
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	b9 01       	movw	r22, r18
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <nrk_gpio_direction+0x6c>
    24f6:	66 0f       	add	r22, r22
    24f8:	77 1f       	adc	r23, r23
    24fa:	8a 95       	dec	r24
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <nrk_gpio_direction+0x68>
    24fe:	cb 01       	movw	r24, r22
    2500:	80 95       	com	r24
    2502:	84 23       	and	r24, r20
    2504:	65 c0       	rjmp	.+202    	; 0x25d0 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    2506:	4a b1       	in	r20, 0x0a	; 10
    2508:	21 e0       	ldi	r18, 0x01	; 1
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	b9 01       	movw	r22, r18
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <nrk_gpio_direction+0x86>
    2510:	66 0f       	add	r22, r22
    2512:	77 1f       	adc	r23, r23
    2514:	8a 95       	dec	r24
    2516:	e2 f7       	brpl	.-8      	; 0x2510 <nrk_gpio_direction+0x82>
    2518:	cb 01       	movw	r24, r22
    251a:	80 95       	com	r24
    251c:	84 23       	and	r24, r20
    251e:	65 c0       	rjmp	.+202    	; 0x25ea <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2520:	4d b1       	in	r20, 0x0d	; 13
    2522:	21 e0       	ldi	r18, 0x01	; 1
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	b9 01       	movw	r22, r18
    2528:	02 c0       	rjmp	.+4      	; 0x252e <nrk_gpio_direction+0xa0>
    252a:	66 0f       	add	r22, r22
    252c:	77 1f       	adc	r23, r23
    252e:	8a 95       	dec	r24
    2530:	e2 f7       	brpl	.-8      	; 0x252a <nrk_gpio_direction+0x9c>
    2532:	cb 01       	movw	r24, r22
    2534:	80 95       	com	r24
    2536:	84 23       	and	r24, r20
    2538:	65 c0       	rjmp	.+202    	; 0x2604 <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    253a:	40 b3       	in	r20, 0x10	; 16
    253c:	21 e0       	ldi	r18, 0x01	; 1
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	b9 01       	movw	r22, r18
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <nrk_gpio_direction+0xba>
    2544:	66 0f       	add	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	8a 95       	dec	r24
    254a:	e2 f7       	brpl	.-8      	; 0x2544 <nrk_gpio_direction+0xb6>
    254c:	cb 01       	movw	r24, r22
    254e:	80 95       	com	r24
    2550:	84 23       	and	r24, r20
    2552:	65 c0       	rjmp	.+202    	; 0x261e <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    2554:	43 b3       	in	r20, 0x13	; 19
    2556:	21 e0       	ldi	r18, 0x01	; 1
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	b9 01       	movw	r22, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <nrk_gpio_direction+0xd4>
    255e:	66 0f       	add	r22, r22
    2560:	77 1f       	adc	r23, r23
    2562:	8a 95       	dec	r24
    2564:	e2 f7       	brpl	.-8      	; 0x255e <nrk_gpio_direction+0xd0>
    2566:	cb 01       	movw	r24, r22
    2568:	80 95       	com	r24
    256a:	84 23       	and	r24, r20
    256c:	65 c0       	rjmp	.+202    	; 0x2638 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    256e:	47 30       	cpi	r20, 0x07	; 7
    2570:	51 05       	cpc	r21, r1
    2572:	08 f0       	brcs	.+2      	; 0x2576 <nrk_gpio_direction+0xe8>
    2574:	64 c0       	rjmp	.+200    	; 0x263e <nrk_gpio_direction+0x1b0>
    2576:	fa 01       	movw	r30, r20
    2578:	ed 54       	subi	r30, 0x4D	; 77
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	86 95       	lsr	r24
    257e:	86 95       	lsr	r24
    2580:	86 95       	lsr	r24
    2582:	0c 94 60 30 	jmp	0x60c0	; 0x60c0 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    2586:	41 b1       	in	r20, 0x01	; 1
    2588:	21 e0       	ldi	r18, 0x01	; 1
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	b9 01       	movw	r22, r18
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <nrk_gpio_direction+0x106>
    2590:	66 0f       	add	r22, r22
    2592:	77 1f       	adc	r23, r23
    2594:	8a 95       	dec	r24
    2596:	e2 f7       	brpl	.-8      	; 0x2590 <nrk_gpio_direction+0x102>
    2598:	cb 01       	movw	r24, r22
    259a:	84 2b       	or	r24, r20
    259c:	81 b9       	out	0x01, r24	; 1
    259e:	4d c0       	rjmp	.+154    	; 0x263a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    25a0:	44 b1       	in	r20, 0x04	; 4
    25a2:	21 e0       	ldi	r18, 0x01	; 1
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	b9 01       	movw	r22, r18
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <nrk_gpio_direction+0x120>
    25aa:	66 0f       	add	r22, r22
    25ac:	77 1f       	adc	r23, r23
    25ae:	8a 95       	dec	r24
    25b0:	e2 f7       	brpl	.-8      	; 0x25aa <nrk_gpio_direction+0x11c>
    25b2:	cb 01       	movw	r24, r22
    25b4:	84 2b       	or	r24, r20
    25b6:	84 b9       	out	0x04, r24	; 4
    25b8:	40 c0       	rjmp	.+128    	; 0x263a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    25ba:	47 b1       	in	r20, 0x07	; 7
    25bc:	21 e0       	ldi	r18, 0x01	; 1
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	b9 01       	movw	r22, r18
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <nrk_gpio_direction+0x13a>
    25c4:	66 0f       	add	r22, r22
    25c6:	77 1f       	adc	r23, r23
    25c8:	8a 95       	dec	r24
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <nrk_gpio_direction+0x136>
    25cc:	cb 01       	movw	r24, r22
    25ce:	84 2b       	or	r24, r20
    25d0:	87 b9       	out	0x07, r24	; 7
    25d2:	33 c0       	rjmp	.+102    	; 0x263a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    25d4:	4a b1       	in	r20, 0x0a	; 10
    25d6:	21 e0       	ldi	r18, 0x01	; 1
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	b9 01       	movw	r22, r18
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <nrk_gpio_direction+0x154>
    25de:	66 0f       	add	r22, r22
    25e0:	77 1f       	adc	r23, r23
    25e2:	8a 95       	dec	r24
    25e4:	e2 f7       	brpl	.-8      	; 0x25de <nrk_gpio_direction+0x150>
    25e6:	cb 01       	movw	r24, r22
    25e8:	84 2b       	or	r24, r20
    25ea:	8a b9       	out	0x0a, r24	; 10
    25ec:	26 c0       	rjmp	.+76     	; 0x263a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    25ee:	4d b1       	in	r20, 0x0d	; 13
    25f0:	21 e0       	ldi	r18, 0x01	; 1
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	b9 01       	movw	r22, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <nrk_gpio_direction+0x16e>
    25f8:	66 0f       	add	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	8a 95       	dec	r24
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <nrk_gpio_direction+0x16a>
    2600:	cb 01       	movw	r24, r22
    2602:	84 2b       	or	r24, r20
    2604:	8d b9       	out	0x0d, r24	; 13
    2606:	19 c0       	rjmp	.+50     	; 0x263a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    2608:	40 b3       	in	r20, 0x10	; 16
    260a:	21 e0       	ldi	r18, 0x01	; 1
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	b9 01       	movw	r22, r18
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <nrk_gpio_direction+0x188>
    2612:	66 0f       	add	r22, r22
    2614:	77 1f       	adc	r23, r23
    2616:	8a 95       	dec	r24
    2618:	e2 f7       	brpl	.-8      	; 0x2612 <nrk_gpio_direction+0x184>
    261a:	cb 01       	movw	r24, r22
    261c:	84 2b       	or	r24, r20
    261e:	80 bb       	out	0x10, r24	; 16
    2620:	0c c0       	rjmp	.+24     	; 0x263a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2622:	43 b3       	in	r20, 0x13	; 19
    2624:	21 e0       	ldi	r18, 0x01	; 1
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	b9 01       	movw	r22, r18
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <nrk_gpio_direction+0x1a2>
    262c:	66 0f       	add	r22, r22
    262e:	77 1f       	adc	r23, r23
    2630:	8a 95       	dec	r24
    2632:	e2 f7       	brpl	.-8      	; 0x262c <nrk_gpio_direction+0x19e>
    2634:	cb 01       	movw	r24, r22
    2636:	84 2b       	or	r24, r20
    2638:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    263c:	08 95       	ret
                        default: return -1;
    263e:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    2640:	08 95       	ret

00002642 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2642:	81 11       	cpse	r24, r1
    2644:	06 c0       	rjmp	.+12     	; 0x2652 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    2646:	80 b1       	in	r24, 0x00	; 0
    2648:	86 95       	lsr	r24
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	91 e0       	ldi	r25, 0x01	; 1
    264e:	89 27       	eor	r24, r25
    2650:	08 95       	ret
	} 
return -1;
    2652:	8f ef       	ldi	r24, 0xFF	; 255
}
    2654:	08 95       	ret

00002656 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	11 f4       	brne	.+4      	; 0x265e <nrk_led_toggle+0x8>
    265a:	83 e2       	ldi	r24, 0x23	; 35
    265c:	0d c0       	rjmp	.+26     	; 0x2678 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	91 05       	cpc	r25, r1
    2662:	11 f4       	brne	.+4      	; 0x2668 <nrk_led_toggle+0x12>
    2664:	8b e2       	ldi	r24, 0x2B	; 43
    2666:	08 c0       	rjmp	.+16     	; 0x2678 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2668:	82 30       	cpi	r24, 0x02	; 2
    266a:	91 05       	cpc	r25, r1
    266c:	11 f4       	brne	.+4      	; 0x2672 <nrk_led_toggle+0x1c>
    266e:	83 e3       	ldi	r24, 0x33	; 51
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2672:	03 97       	sbiw	r24, 0x03	; 3
    2674:	29 f4       	brne	.+10     	; 0x2680 <nrk_led_toggle+0x2a>
    2676:	8b e3       	ldi	r24, 0x3B	; 59
    2678:	0e 94 3c 11 	call	0x2278	; 0x2278 <nrk_gpio_toggle>
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	08 95       	ret
return -1;
    2680:	8f ef       	ldi	r24, 0xFF	; 255
}
    2682:	08 95       	ret

00002684 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	11 f4       	brne	.+4      	; 0x268c <nrk_led_clr+0x8>
    2688:	83 e2       	ldi	r24, 0x23	; 35
    268a:	0d c0       	rjmp	.+26     	; 0x26a6 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	91 05       	cpc	r25, r1
    2690:	11 f4       	brne	.+4      	; 0x2696 <nrk_led_clr+0x12>
    2692:	8b e2       	ldi	r24, 0x2B	; 43
    2694:	08 c0       	rjmp	.+16     	; 0x26a6 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    2696:	82 30       	cpi	r24, 0x02	; 2
    2698:	91 05       	cpc	r25, r1
    269a:	11 f4       	brne	.+4      	; 0x26a0 <nrk_led_clr+0x1c>
    269c:	83 e3       	ldi	r24, 0x33	; 51
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    26a0:	03 97       	sbiw	r24, 0x03	; 3
    26a2:	29 f4       	brne	.+10     	; 0x26ae <nrk_led_clr+0x2a>
    26a4:	8b e3       	ldi	r24, 0x3B	; 59
    26a6:	0e 94 29 10 	call	0x2052	; 0x2052 <nrk_gpio_set>
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	08 95       	ret
return -1;
    26ae:	8f ef       	ldi	r24, 0xFF	; 255
}
    26b0:	08 95       	ret

000026b2 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	11 f4       	brne	.+4      	; 0x26ba <nrk_led_set+0x8>
    26b6:	83 e2       	ldi	r24, 0x23	; 35
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    26ba:	81 30       	cpi	r24, 0x01	; 1
    26bc:	91 05       	cpc	r25, r1
    26be:	11 f4       	brne	.+4      	; 0x26c4 <nrk_led_set+0x12>
    26c0:	8b e2       	ldi	r24, 0x2B	; 43
    26c2:	08 c0       	rjmp	.+16     	; 0x26d4 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    26c4:	82 30       	cpi	r24, 0x02	; 2
    26c6:	91 05       	cpc	r25, r1
    26c8:	11 f4       	brne	.+4      	; 0x26ce <nrk_led_set+0x1c>
    26ca:	83 e3       	ldi	r24, 0x33	; 51
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    26ce:	03 97       	sbiw	r24, 0x03	; 3
    26d0:	29 f4       	brne	.+10     	; 0x26dc <nrk_led_set+0x2a>
    26d2:	8b e3       	ldi	r24, 0x3B	; 59
    26d4:	0e 94 9a 10 	call	0x2134	; 0x2134 <nrk_gpio_clr>
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	08 95       	ret
return -1;
    26dc:	8f ef       	ldi	r24, 0xFF	; 255
}
    26de:	08 95       	ret

000026e0 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    26e0:	88 23       	and	r24, r24
    26e2:	19 f0       	breq	.+6      	; 0x26ea <nrk_gpio_pullups+0xa>
    26e4:	85 b7       	in	r24, 0x35	; 53
    26e6:	8f 7e       	andi	r24, 0xEF	; 239
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    26ea:	85 b7       	in	r24, 0x35	; 53
    26ec:	80 61       	ori	r24, 0x10	; 16
    26ee:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	08 95       	ret

000026f4 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    26f4:	90 91 c8 00 	lds	r25, 0x00C8
    26f8:	95 ff       	sbrs	r25, 5
    26fa:	fc cf       	rjmp	.-8      	; 0x26f4 <putc1>
    26fc:	80 93 ce 00 	sts	0x00CE, r24
    2700:	08 95       	ret

00002702 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2702:	90 93 c5 00 	sts	0x00C5, r25
    2706:	80 93 c4 00 	sts	0x00C4, r24
    270a:	86 e0       	ldi	r24, 0x06	; 6
    270c:	80 93 c2 00 	sts	0x00C2, r24
    2710:	e1 ec       	ldi	r30, 0xC1	; 193
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	8b 7f       	andi	r24, 0xFB	; 251
    2718:	80 83       	st	Z, r24
    271a:	a0 ec       	ldi	r26, 0xC0	; 192
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	8c 91       	ld	r24, X
    2720:	82 60       	ori	r24, 0x02	; 2
    2722:	8c 93       	st	X, r24
ENABLE_UART0();
    2724:	80 81       	ld	r24, Z
    2726:	88 61       	ori	r24, 0x18	; 24
    2728:	80 83       	st	Z, r24
    272a:	08 95       	ret

0000272c <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    272c:	90 93 cd 00 	sts	0x00CD, r25
    2730:	80 93 cc 00 	sts	0x00CC, r24
    2734:	86 e0       	ldi	r24, 0x06	; 6
    2736:	80 93 ca 00 	sts	0x00CA, r24
    273a:	e9 ec       	ldi	r30, 0xC9	; 201
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8b 7f       	andi	r24, 0xFB	; 251
    2742:	80 83       	st	Z, r24
    2744:	a8 ec       	ldi	r26, 0xC8	; 200
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	8c 91       	ld	r24, X
    274a:	82 60       	ori	r24, 0x02	; 2
    274c:	8c 93       	st	X, r24
ENABLE_UART1();
    274e:	80 81       	ld	r24, Z
    2750:	88 61       	ori	r24, 0x18	; 24
    2752:	80 83       	st	Z, r24
    2754:	08 95       	ret

00002756 <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    275a:	0e 94 81 13 	call	0x2702	; 0x2702 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    275e:	6f ed       	ldi	r22, 0xDF	; 223
    2760:	7f e0       	ldi	r23, 0x0F	; 15
    2762:	8b ee       	ldi	r24, 0xEB	; 235
    2764:	9f e0       	ldi	r25, 0x0F	; 15
    2766:	0e 94 97 30 	call	0x612e	; 0x612e <fdevopen>
    276a:	cc e5       	ldi	r28, 0x5C	; 92
    276c:	da e0       	ldi	r29, 0x0A	; 10
    276e:	9b 83       	std	Y+3, r25	; 0x03
    2770:	8a 83       	std	Y+2, r24	; 0x02
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    2772:	6f ed       	ldi	r22, 0xDF	; 223
    2774:	7f e0       	ldi	r23, 0x0F	; 15
    2776:	8b ee       	ldi	r24, 0xEB	; 235
    2778:	9f e0       	ldi	r25, 0x0F	; 15
    277a:	0e 94 97 30 	call	0x612e	; 0x612e <fdevopen>
    277e:	99 83       	std	Y+1, r25	; 0x01
    2780:	88 83       	st	Y, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	08 95       	ret

00002788 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    2788:	80 91 c8 00 	lds	r24, 0x00C8
    278c:	87 ff       	sbrs	r24, 7
    278e:	fc cf       	rjmp	.-8      	; 0x2788 <getc1>
    2790:	80 91 c8 00 	lds	r24, 0x00C8
    2794:	8f 77       	andi	r24, 0x7F	; 127
    2796:	80 93 c8 00 	sts	0x00C8, r24
    279a:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    279e:	08 95       	ret

000027a0 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	d1 f7       	brne	.-12     	; 0x27a0 <halWait>

} // halWait
    27ac:	08 95       	ret

000027ae <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    27ae:	0c 94 f2 31 	jmp	0x63e4	; 0x63e4 <__eerd_byte_m128rfa1>

000027b2 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    27b2:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <__eewr_byte_m128rfa1>
}
    27b6:	08 95       	ret

000027b8 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    27b8:	ef 92       	push	r14
    27ba:	ff 92       	push	r15
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__eerd_byte_m128rfa1>
    27ce:	18 2f       	mov	r17, r24
    27d0:	f7 01       	movw	r30, r14
    27d2:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__eerd_byte_m128rfa1>
    27dc:	08 2f       	mov	r16, r24
    27de:	f7 01       	movw	r30, r14
    27e0:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__eerd_byte_m128rfa1>
    27ea:	d8 2f       	mov	r29, r24
    27ec:	f7 01       	movw	r30, r14
    27ee:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    27f0:	83 e0       	ldi	r24, 0x03	; 3
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__eerd_byte_m128rfa1>
    27f8:	c8 2f       	mov	r28, r24
    27fa:	f7 01       	movw	r30, r14
    27fc:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    27fe:	84 e0       	ldi	r24, 0x04	; 4
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__eerd_byte_m128rfa1>
    2806:	10 0f       	add	r17, r16
    2808:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    280a:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    280c:	8c 17       	cp	r24, r28
    280e:	11 f0       	breq	.+4      	; 0x2814 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    2810:	8f ef       	ldi	r24, 0xFF	; 255
    2812:	01 c0       	rjmp	.+2      	; 0x2816 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    2814:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	ff 90       	pop	r15
    2820:	ef 90       	pop	r14
    2822:	08 95       	ret

00002824 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    282a:	85 e0       	ldi	r24, 0x05	; 5
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__eerd_byte_m128rfa1>
    2832:	88 83       	st	Y, r24
return NRK_OK;
}
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	08 95       	ret

0000283c <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    283c:	fc 01       	movw	r30, r24
    283e:	60 81       	ld	r22, Z
    2840:	86 e0       	ldi	r24, 0x06	; 6
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	08 95       	ret

0000284c <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2852:	86 e0       	ldi	r24, 0x06	; 6
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__eerd_byte_m128rfa1>
    285a:	88 83       	st	Y, r24
  return NRK_OK;
}
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	08 95       	ret

00002864 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	8c 01       	movw	r16, r24
    286e:	c0 e0       	ldi	r28, 0x00	; 0
    2870:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2872:	ce 01       	movw	r24, r28
    2874:	08 96       	adiw	r24, 0x08	; 8
    2876:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__eerd_byte_m128rfa1>
    287a:	f8 01       	movw	r30, r16
    287c:	81 93       	st	Z+, r24
    287e:	8f 01       	movw	r16, r30
    2880:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2882:	c0 31       	cpi	r28, 0x10	; 16
    2884:	d1 05       	cpc	r29, r1
    2886:	a9 f7       	brne	.-22     	; 0x2872 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	1f 91       	pop	r17
    2890:	0f 91       	pop	r16
    2892:	08 95       	ret

00002894 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2894:	0f 93       	push	r16
    2896:	1f 93       	push	r17
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	8c 01       	movw	r16, r24
    289e:	c0 e0       	ldi	r28, 0x00	; 0
    28a0:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    28a2:	f8 01       	movw	r30, r16
    28a4:	61 91       	ld	r22, Z+
    28a6:	8f 01       	movw	r16, r30
    28a8:	ce 01       	movw	r24, r28
    28aa:	08 96       	adiw	r24, 0x08	; 8
    28ac:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <__eewr_byte_m128rfa1>
    28b0:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    28b2:	c0 31       	cpi	r28, 0x10	; 16
    28b4:	d1 05       	cpc	r29, r1
    28b6:	a9 f7       	brne	.-22     	; 0x28a2 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	08 95       	ret

000028c4 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    28ca:	87 e0       	ldi	r24, 0x07	; 7
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__eerd_byte_m128rfa1>
    28d2:	88 83       	st	Y, r24
  return NRK_OK;
}
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	08 95       	ret

000028dc <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    28dc:	fc 01       	movw	r30, r24
    28de:	60 81       	ld	r22, Z
    28e0:	87 e0       	ldi	r24, 0x07	; 7
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	08 95       	ret

000028ec <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    28ec:	f8 94       	cli
    28ee:	08 95       	ret

000028f0 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    28f0:	78 94       	sei
    28f2:	08 95       	ret

000028f4 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    28f4:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
while(1);
    28f8:	ff cf       	rjmp	.-2      	; 0x28f8 <nrk_halt+0x4>

000028fa <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	a3 97       	sbiw	r28, 0x23	; 35
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    290e:	0e 94 93 1c 	call	0x3926	; 0x3926 <nrk_signal_create>
    2912:	80 93 e9 09 	sts	0x09E9, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    2916:	8f 3f       	cpi	r24, 0xFF	; 255
    2918:	21 f4       	brne	.+8      	; 0x2922 <nrk_init+0x28>
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	8e e0       	ldi	r24, 0x0E	; 14
    291e:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    2922:	0e 94 44 2b 	call	0x5688	; 0x5688 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    2926:	80 ff       	sbrs	r24, 0
    2928:	04 c0       	rjmp	.+8      	; 0x2932 <nrk_init+0x38>
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	86 e0       	ldi	r24, 0x06	; 6
    292e:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
	   }
   #endif
   #endif

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
    2932:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <nrk_watchdog_check>
    2936:	8f 3f       	cpi	r24, 0xFF	; 255
    2938:	31 f4       	brne	.+12     	; 0x2946 <nrk_init+0x4c>
	{
    	nrk_watchdog_disable();
    293a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <nrk_watchdog_disable>
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	80 e1       	ldi	r24, 0x10	; 16
    2942:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
	}
    nrk_watchdog_enable();
    2946:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <nrk_watchdog_enable>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    294a:	10 92 ec 09 	sts	0x09EC, r1
    nrk_cur_task_TCB = NULL;
    294e:	10 92 fa 09 	sts	0x09FA, r1
    2952:	10 92 f9 09 	sts	0x09F9, r1
    
    nrk_high_ready_TCB = NULL;
    2956:	10 92 eb 09 	sts	0x09EB, r1
    295a:	10 92 ea 09 	sts	0x09EA, r1
    nrk_high_ready_prio = 0; 
    295e:	10 92 fb 09 	sts	0x09FB, r1

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
    2962:	0e 94 20 16 	call	0x2c40	; 0x2c40 <nrk_stats_reset>
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2966:	10 92 f8 09 	sts	0x09F8, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    296a:	8f ef       	ldi	r24, 0xFF	; 255
    296c:	80 93 e5 09 	sts	0x09E5, r24
    nrk_sem_list[i].value=-1;
    2970:	80 93 e7 09 	sts	0x09E7, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2974:	80 93 e6 09 	sts	0x09E6, r24
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    297c:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    297e:	2f ef       	ldi	r18, 0xFF	; 255
    2980:	fc 01       	movw	r30, r24
    2982:	e4 5f       	subi	r30, 0xF4	; 244
    2984:	f6 4f       	sbci	r31, 0xF6	; 246
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2986:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    2988:	20 87       	std	Z+8, r18	; 0x08
    298a:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    298c:	87 3d       	cpi	r24, 0xD7	; 215
    298e:	91 05       	cpc	r25, r1
    2990:	b9 f7       	brne	.-18     	; 0x2980 <nrk_init+0x86>
    2992:	e5 e3       	ldi	r30, 0x35	; 53
    2994:	fa e0       	ldi	r31, 0x0A	; 10
    2996:	cf 01       	movw	r24, r30
    2998:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    299a:	94 83       	std	Z+4, r25	; 0x04
    299c:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    299e:	f7 83       	std	Z+7, r31	; 0x07
    29a0:	e6 83       	std	Z+6, r30	; 0x06
    29a2:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    29a4:	8a e0       	ldi	r24, 0x0A	; 10
    29a6:	ee 34       	cpi	r30, 0x4E	; 78
    29a8:	f8 07       	cpc	r31, r24
    29aa:	a9 f7       	brne	.-22     	; 0x2996 <nrk_init+0x9c>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    29ac:	10 92 37 0a 	sts	0x0A37, r1
    29b0:	10 92 36 0a 	sts	0x0A36, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    29b4:	10 92 52 0a 	sts	0x0A52, r1
    29b8:	10 92 51 0a 	sts	0x0A51, r1
	_head_node = NULL;
    29bc:	10 92 ef 09 	sts	0x09EF, r1
    29c0:	10 92 ee 09 	sts	0x09EE, r1
	_free_node = &_nrk_readyQ[0];
    29c4:	85 e3       	ldi	r24, 0x35	; 53
    29c6:	9a e0       	ldi	r25, 0x0A	; 10
    29c8:	90 93 0b 09 	sts	0x090B, r25
    29cc:	80 93 0a 09 	sts	0x090A, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    29d0:	61 e6       	ldi	r22, 0x61	; 97
    29d2:	75 e2       	ldi	r23, 0x25	; 37
    29d4:	ce 01       	movw	r24, r28
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    29dc:	40 e8       	ldi	r20, 0x80	; 128
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	6f e4       	ldi	r22, 0x4F	; 79
    29e2:	78 e0       	ldi	r23, 0x08	; 8
    29e4:	ce 01       	movw	r24, r28
    29e6:	01 96       	adiw	r24, 0x01	; 1
    29e8:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    29ec:	85 e5       	ldi	r24, 0x55	; 85
    29ee:	80 93 4f 08 	sts	0x084F, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    29f2:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    29f4:	1c 86       	std	Y+12, r1	; 0x0c
    29f6:	1d 86       	std	Y+13, r1	; 0x0d
    29f8:	1e 86       	std	Y+14, r1	; 0x0e
    29fa:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    29fc:	18 8a       	std	Y+16, r1	; 0x10
    29fe:	19 8a       	std	Y+17, r1	; 0x11
    2a00:	1a 8a       	std	Y+18, r1	; 0x12
    2a02:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2a04:	1c 8a       	std	Y+20, r1	; 0x14
    2a06:	1d 8a       	std	Y+21, r1	; 0x15
    2a08:	1e 8a       	std	Y+22, r1	; 0x16
    2a0a:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    2a0c:	18 8e       	std	Y+24, r1	; 0x18
    2a0e:	19 8e       	std	Y+25, r1	; 0x19
    2a10:	1a 8e       	std	Y+26, r1	; 0x1a
    2a12:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2a14:	1c 8e       	std	Y+28, r1	; 0x1c
    2a16:	1d 8e       	std	Y+29, r1	; 0x1d
    2a18:	1e 8e       	std	Y+30, r1	; 0x1e
    2a1a:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2a1c:	18 a2       	std	Y+32, r1	; 0x20
    2a1e:	19 a2       	std	Y+33, r1	; 0x21
    2a20:	1a a2       	std	Y+34, r1	; 0x22
    2a22:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2a28:	92 e0       	ldi	r25, 0x02	; 2
    2a2a:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2a2c:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2a2e:	ce 01       	movw	r24, r28
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	0e 94 96 20 	call	0x412c	; 0x412c <nrk_activate_task>
	
}
    2a36:	a3 96       	adiw	r28, 0x23	; 35
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	08 95       	ret

00002a48 <nrk_start>:




void nrk_start (void)
{
    2a48:	04 e1       	ldi	r16, 0x14	; 20
    2a4a:	19 e0       	ldi	r17, 0x09	; 9
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2a4c:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2a4e:	f8 01       	movw	r30, r16
    2a50:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    2a52:	ff ef       	ldi	r31, 0xFF	; 255
    2a54:	df 12       	cpse	r13, r31
    2a56:	22 c0       	rjmp	.+68     	; 0x2a9c <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2a58:	cf 5f       	subi	r28, 0xFF	; 255
    2a5a:	05 5d       	subi	r16, 0xD5	; 213
    2a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5e:	c5 30       	cpi	r28, 0x05	; 5
    2a60:	b1 f7       	brne	.-20     	; 0x2a4e <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2a62:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2a66:	2b e2       	ldi	r18, 0x2B	; 43
    2a68:	82 02       	muls	r24, r18
    2a6a:	c0 01       	movw	r24, r0
    2a6c:	11 24       	eor	r1, r1
    2a6e:	fc 01       	movw	r30, r24
    2a70:	e4 5f       	subi	r30, 0xF4	; 244
    2a72:	f6 4f       	sbci	r31, 0xF6	; 246
    2a74:	82 85       	ldd	r24, Z+10	; 0x0a
    2a76:	80 93 fb 09 	sts	0x09FB, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2a7a:	f0 93 fa 09 	sts	0x09FA, r31
    2a7e:	e0 93 f9 09 	sts	0x09F9, r30
    2a82:	f0 93 eb 09 	sts	0x09EB, r31
    2a86:	e0 93 ea 09 	sts	0x09EA, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2a8a:	80 93 ec 09 	sts	0x09EC, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2a8e:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <nrk_target_start>
    nrk_stack_pointer_init(); 
    2a92:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2a96:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <nrk_start_high_ready_task>
    2a9a:	16 c0       	rjmp	.+44     	; 0x2ac8 <nrk_start+0x80>
    2a9c:	84 e1       	ldi	r24, 0x14	; 20
    2a9e:	e8 2e       	mov	r14, r24
    2aa0:	89 e0       	ldi	r24, 0x09	; 9
    2aa2:	f8 2e       	mov	r15, r24
    2aa4:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2aa6:	cd 17       	cp	r28, r29
    2aa8:	41 f0       	breq	.+16     	; 0x2aba <nrk_start+0x72>
    2aaa:	f7 01       	movw	r30, r14
    2aac:	80 81       	ld	r24, Z
    2aae:	d8 12       	cpse	r13, r24
    2ab0:	04 c0       	rjmp	.+8      	; 0x2aba <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2ab2:	6d 2d       	mov	r22, r13
    2ab4:	85 e0       	ldi	r24, 0x05	; 5
    2ab6:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    2aba:	df 5f       	subi	r29, 0xFF	; 255
    2abc:	fb e2       	ldi	r31, 0x2B	; 43
    2abe:	ef 0e       	add	r14, r31
    2ac0:	f1 1c       	adc	r15, r1
    2ac2:	d5 30       	cpi	r29, 0x05	; 5
    2ac4:	81 f7       	brne	.-32     	; 0x2aa6 <nrk_start+0x5e>
    2ac6:	c8 cf       	rjmp	.-112    	; 0x2a58 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    2ac8:	ff cf       	rjmp	.-2      	; 0x2ac8 <nrk_start+0x80>

00002aca <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2aca:	cf 92       	push	r12
    2acc:	df 92       	push	r13
    2ace:	ef 92       	push	r14
    2ad0:	ff 92       	push	r15
    2ad2:	0f 93       	push	r16
    2ad4:	1f 93       	push	r17
    2ad6:	cf 93       	push	r28
    2ad8:	df 93       	push	r29
    2ada:	ec 01       	movw	r28, r24
    2adc:	8b 01       	movw	r16, r22
    2ade:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2ae0:	89 85       	ldd	r24, Y+9	; 0x09
    2ae2:	82 30       	cpi	r24, 0x02	; 2
    2ae4:	21 f0       	breq	.+8      	; 0x2aee <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2ae6:	80 91 e8 09 	lds	r24, 0x09E8
    2aea:	88 83       	st	Y, r24
    2aec:	01 c0       	rjmp	.+2      	; 0x2af0 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2aee:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2af0:	80 91 e8 09 	lds	r24, 0x09E8
    2af4:	85 30       	cpi	r24, 0x05	; 5
    2af6:	20 f0       	brcs	.+8      	; 0x2b00 <nrk_TCB_init+0x36>
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	87 e0       	ldi	r24, 0x07	; 7
    2afc:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2b00:	89 85       	ldd	r24, Y+9	; 0x09
    2b02:	82 30       	cpi	r24, 0x02	; 2
    2b04:	29 f0       	breq	.+10     	; 0x2b10 <nrk_TCB_init+0x46>
    2b06:	80 91 e8 09 	lds	r24, 0x09E8
    2b0a:	8f 5f       	subi	r24, 0xFF	; 255
    2b0c:	80 93 e8 09 	sts	0x09E8, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2b10:	80 91 e8 09 	lds	r24, 0x09E8
    2b14:	81 11       	cpse	r24, r1
    2b16:	03 c0       	rjmp	.+6      	; 0x2b1e <nrk_TCB_init+0x54>
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	80 93 e8 09 	sts	0x09E8, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2b1e:	38 81       	ld	r19, Y
    2b20:	2b e2       	ldi	r18, 0x2B	; 43
    2b22:	32 03       	mulsu	r19, r18
    2b24:	f0 01       	movw	r30, r0
    2b26:	11 24       	eor	r1, r1
    2b28:	e4 5f       	subi	r30, 0xF4	; 244
    2b2a:	f6 4f       	sbci	r31, 0xF6	; 246
    2b2c:	11 83       	std	Z+1, r17	; 0x01
    2b2e:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2b30:	88 85       	ldd	r24, Y+8	; 0x08
    2b32:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2b34:	38 81       	ld	r19, Y
    2b36:	32 03       	mulsu	r19, r18
    2b38:	f0 01       	movw	r30, r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	e4 5f       	subi	r30, 0xF4	; 244
    2b3e:	f6 4f       	sbci	r31, 0xF6	; 246
    2b40:	83 e0       	ldi	r24, 0x03	; 3
    2b42:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2b44:	38 81       	ld	r19, Y
    2b46:	32 03       	mulsu	r19, r18
    2b48:	f0 01       	movw	r30, r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	e4 5f       	subi	r30, 0xF4	; 244
    2b4e:	f6 4f       	sbci	r31, 0xF6	; 246
    2b50:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2b52:	08 81       	ld	r16, Y
    2b54:	02 03       	mulsu	r16, r18
    2b56:	80 01       	movw	r16, r0
    2b58:	11 24       	eor	r1, r1
    2b5a:	04 5f       	subi	r16, 0xF4	; 244
    2b5c:	16 4f       	sbci	r17, 0xF6	; 246
    2b5e:	f8 01       	movw	r30, r16
    2b60:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    2b62:	ce 01       	movw	r24, r28
    2b64:	0b 96       	adiw	r24, 0x0b	; 11
    2b66:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <_nrk_time_to_ticks_long>
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	61 a3       	std	Z+33, r22	; 0x21
    2b6e:	72 a3       	std	Z+34, r23	; 0x22
    2b70:	83 a3       	std	Z+35, r24	; 0x23
    2b72:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    2b74:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b76:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b78:	ad 85       	ldd	r26, Y+13	; 0x0d
    2b7a:	be 85       	ldd	r27, Y+14	; 0x0e
    2b7c:	88 33       	cpi	r24, 0x38	; 56
    2b7e:	99 48       	sbci	r25, 0x89	; 137
    2b80:	a1 44       	sbci	r26, 0x41	; 65
    2b82:	b1 05       	cpc	r27, r1
    2b84:	20 f0       	brcs	.+8      	; 0x2b8e <nrk_TCB_init+0xc4>
    2b86:	68 81       	ld	r22, Y
    2b88:	86 e1       	ldi	r24, 0x16	; 22
    2b8a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2b8e:	c8 80       	ld	r12, Y
    2b90:	dd 24       	eor	r13, r13
    2b92:	c7 fc       	sbrc	r12, 7
    2b94:	d0 94       	com	r13
    2b96:	ce 01       	movw	r24, r28
    2b98:	4b 96       	adiw	r24, 0x1b	; 27
    2b9a:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <_nrk_time_to_ticks_long>
    2b9e:	1b e2       	ldi	r17, 0x2B	; 43
    2ba0:	1c 9d       	mul	r17, r12
    2ba2:	f0 01       	movw	r30, r0
    2ba4:	1d 9d       	mul	r17, r13
    2ba6:	f0 0d       	add	r31, r0
    2ba8:	11 24       	eor	r1, r1
    2baa:	e4 5f       	subi	r30, 0xF4	; 244
    2bac:	f6 4f       	sbci	r31, 0xF6	; 246
    2bae:	65 8b       	std	Z+21, r22	; 0x15
    2bb0:	76 8b       	std	Z+22, r23	; 0x16
    2bb2:	87 8b       	std	Z+23, r24	; 0x17
    2bb4:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    2bb6:	28 81       	ld	r18, Y
    2bb8:	21 03       	mulsu	r18, r17
    2bba:	c0 01       	movw	r24, r0
    2bbc:	11 24       	eor	r1, r1
    2bbe:	9c 01       	movw	r18, r24
    2bc0:	24 5f       	subi	r18, 0xF4	; 244
    2bc2:	36 4f       	sbci	r19, 0xF6	; 246
    2bc4:	69 01       	movw	r12, r18
    2bc6:	f9 01       	movw	r30, r18
    2bc8:	45 89       	ldd	r20, Z+21	; 0x15
    2bca:	56 89       	ldd	r21, Z+22	; 0x16
    2bcc:	67 89       	ldd	r22, Z+23	; 0x17
    2bce:	70 8d       	ldd	r23, Z+24	; 0x18
    2bd0:	81 a1       	ldd	r24, Z+33	; 0x21
    2bd2:	92 a1       	ldd	r25, Z+34	; 0x22
    2bd4:	a3 a1       	ldd	r26, Z+35	; 0x23
    2bd6:	b4 a1       	ldd	r27, Z+36	; 0x24
    2bd8:	84 0f       	add	r24, r20
    2bda:	95 1f       	adc	r25, r21
    2bdc:	a6 1f       	adc	r26, r22
    2bde:	b7 1f       	adc	r27, r23
    2be0:	81 8f       	std	Z+25, r24	; 0x19
    2be2:	92 8f       	std	Z+26, r25	; 0x1a
    2be4:	a3 8f       	std	Z+27, r26	; 0x1b
    2be6:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    2be8:	ce 01       	movw	r24, r28
    2bea:	43 96       	adiw	r24, 0x13	; 19
    2bec:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <_nrk_time_to_ticks_long>
    2bf0:	f6 01       	movw	r30, r12
    2bf2:	65 a3       	std	Z+37, r22	; 0x25
    2bf4:	76 a3       	std	Z+38, r23	; 0x26
    2bf6:	87 a3       	std	Z+39, r24	; 0x27
    2bf8:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    2bfa:	28 81       	ld	r18, Y
    2bfc:	21 03       	mulsu	r18, r17
    2bfe:	f0 01       	movw	r30, r0
    2c00:	11 24       	eor	r1, r1
    2c02:	e4 5f       	subi	r30, 0xF4	; 244
    2c04:	f6 4f       	sbci	r31, 0xF6	; 246
    2c06:	85 a1       	ldd	r24, Z+37	; 0x25
    2c08:	96 a1       	ldd	r25, Z+38	; 0x26
    2c0a:	a7 a1       	ldd	r26, Z+39	; 0x27
    2c0c:	b0 a5       	ldd	r27, Z+40	; 0x28
    2c0e:	85 8f       	std	Z+29, r24	; 0x1d
    2c10:	96 8f       	std	Z+30, r25	; 0x1e
    2c12:	a7 8f       	std	Z+31, r26	; 0x1f
    2c14:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	92 a7       	std	Z+42, r25	; 0x2a
    2c1c:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    2c1e:	f3 82       	std	Z+3, r15	; 0x03
    2c20:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2c22:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	1f 91       	pop	r17
    2c2a:	0f 91       	pop	r16
    2c2c:	ff 90       	pop	r15
    2c2e:	ef 90       	pop	r14
    2c30:	df 90       	pop	r13
    2c32:	cf 90       	pop	r12
    2c34:	08 95       	ret

00002c36 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2c36:	0c 94 7b 25 	jmp	0x4af6	; 0x4af6 <_nrk_scheduler>

00002c3a <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    2c3a:	85 e6       	ldi	r24, 0x65	; 101
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	08 95       	ret

00002c40 <nrk_stats_reset>:
#ifdef NRK_STATS_TRACKER
void nrk_stats_reset()
{
    uint8_t i;

    _nrk_stats_sleep_time.secs=0;
    2c40:	10 92 80 06 	sts	0x0680, r1
    2c44:	10 92 81 06 	sts	0x0681, r1
    2c48:	10 92 82 06 	sts	0x0682, r1
    2c4c:	10 92 83 06 	sts	0x0683, r1
    _nrk_stats_sleep_time.nano_secs=0;
    2c50:	10 92 84 06 	sts	0x0684, r1
    2c54:	10 92 85 06 	sts	0x0685, r1
    2c58:	10 92 86 06 	sts	0x0686, r1
    2c5c:	10 92 87 06 	sts	0x0687, r1
    2c60:	e7 eb       	ldi	r30, 0xB7	; 183
    2c62:	f7 e0       	ldi	r31, 0x07	; 7
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        cur_task_stats[i].total_ticks=0;
    2c68:	10 82       	st	Z, r1
    2c6a:	11 82       	std	Z+1, r1	; 0x01
    2c6c:	12 82       	std	Z+2, r1	; 0x02
    2c6e:	13 82       	std	Z+3, r1	; 0x03
        cur_task_stats[i].max_exec_ticks=0;
    2c70:	10 86       	std	Z+8, r1	; 0x08
    2c72:	11 86       	std	Z+9, r1	; 0x09
    2c74:	12 86       	std	Z+10, r1	; 0x0a
    2c76:	13 86       	std	Z+11, r1	; 0x0b
        cur_task_stats[i].min_exec_ticks=0;
    2c78:	14 82       	std	Z+4, r1	; 0x04
    2c7a:	15 82       	std	Z+5, r1	; 0x05
    2c7c:	16 82       	std	Z+6, r1	; 0x06
    2c7e:	17 82       	std	Z+7, r1	; 0x07
        cur_task_stats[i].last_exec_ticks=0;
    2c80:	14 86       	std	Z+12, r1	; 0x0c
    2c82:	15 86       	std	Z+13, r1	; 0x0d
    2c84:	16 86       	std	Z+14, r1	; 0x0e
    2c86:	17 86       	std	Z+15, r1	; 0x0f
        cur_task_stats[i].swapped_in=0;
    2c88:	10 8a       	std	Z+16, r1	; 0x10
    2c8a:	11 8a       	std	Z+17, r1	; 0x11
    2c8c:	12 8a       	std	Z+18, r1	; 0x12
    2c8e:	13 8a       	std	Z+19, r1	; 0x13
        cur_task_stats[i].preempted=0;
    2c90:	10 8e       	std	Z+24, r1	; 0x18
    2c92:	11 8e       	std	Z+25, r1	; 0x19
    2c94:	12 8e       	std	Z+26, r1	; 0x1a
    2c96:	13 8e       	std	Z+27, r1	; 0x1b
    2c98:	dc 01       	movw	r26, r24
    2c9a:	a9 54       	subi	r26, 0x49	; 73
    2c9c:	b8 4f       	sbci	r27, 0xF8	; 248
        cur_task_stats[i].violations=0;
    2c9e:	5c 96       	adiw	r26, 0x1c	; 28
    2ca0:	1c 92       	st	X, r1
    2ca2:	5c 97       	sbiw	r26, 0x1c	; 28
        cur_task_stats[i].overflow=0;
    2ca4:	5d 96       	adiw	r26, 0x1d	; 29
    2ca6:	1c 92       	st	X, r1
    2ca8:	7e 96       	adiw	r30, 0x1e	; 30
    2caa:	4e 96       	adiw	r24, 0x1e	; 30
{
    uint8_t i;

    _nrk_stats_sleep_time.secs=0;
    _nrk_stats_sleep_time.nano_secs=0;
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2cac:	86 39       	cpi	r24, 0x96	; 150
    2cae:	91 05       	cpc	r25, r1
    2cb0:	d9 f6       	brne	.-74     	; 0x2c68 <nrk_stats_reset+0x28>
        cur_task_stats[i].preempted=0;
        cur_task_stats[i].violations=0;
        cur_task_stats[i].overflow=0;
    }

}
    2cb2:	08 95       	ret

00002cb4 <_nrk_stats_sleep>:


void _nrk_stats_sleep(uint8_t t)
{
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
//_nrk_stats_sleep_time+=t;
    _nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
    2cb8:	e0 e8       	ldi	r30, 0x80	; 128
    2cba:	f6 e0       	ldi	r31, 0x06	; 6
    2cbc:	a8 2f       	mov	r26, r24
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	23 eb       	ldi	r18, 0xB3	; 179
    2cc2:	36 ee       	ldi	r19, 0xE6	; 230
    2cc4:	4e e0       	ldi	r20, 0x0E	; 14
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <__muluhisi3>
    2ccc:	04 81       	ldd	r16, Z+4	; 0x04
    2cce:	15 81       	ldd	r17, Z+5	; 0x05
    2cd0:	26 81       	ldd	r18, Z+6	; 0x06
    2cd2:	37 81       	ldd	r19, Z+7	; 0x07
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	80 0f       	add	r24, r16
    2cda:	91 1f       	adc	r25, r17
    2cdc:	a2 1f       	adc	r26, r18
    2cde:	b3 1f       	adc	r27, r19
    2ce0:	84 83       	std	Z+4, r24	; 0x04
    2ce2:	95 83       	std	Z+5, r25	; 0x05
    2ce4:	a6 83       	std	Z+6, r26	; 0x06
    2ce6:	b7 83       	std	Z+7, r27	; 0x07
    nrk_time_compact_nanos(&_nrk_stats_sleep_time);
    2ce8:	cf 01       	movw	r24, r30
}
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16

void _nrk_stats_sleep(uint8_t t)
{
//_nrk_stats_sleep_time+=t;
    _nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
    nrk_time_compact_nanos(&_nrk_stats_sleep_time);
    2cee:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <nrk_time_compact_nanos>

00002cf2 <nrk_stats_get_deep_sleep>:
}

void nrk_stats_get_deep_sleep(nrk_time_t *t)
{
    t->secs=_nrk_stats_sleep_time.secs;
    2cf2:	e0 e8       	ldi	r30, 0x80	; 128
    2cf4:	f6 e0       	ldi	r31, 0x06	; 6
    2cf6:	40 81       	ld	r20, Z
    2cf8:	51 81       	ldd	r21, Z+1	; 0x01
    2cfa:	62 81       	ldd	r22, Z+2	; 0x02
    2cfc:	73 81       	ldd	r23, Z+3	; 0x03
    2cfe:	dc 01       	movw	r26, r24
    2d00:	4d 93       	st	X+, r20
    2d02:	5d 93       	st	X+, r21
    2d04:	6d 93       	st	X+, r22
    2d06:	7c 93       	st	X, r23
    2d08:	13 97       	sbiw	r26, 0x03	; 3
    t->nano_secs=_nrk_stats_sleep_time.nano_secs;
    2d0a:	44 81       	ldd	r20, Z+4	; 0x04
    2d0c:	55 81       	ldd	r21, Z+5	; 0x05
    2d0e:	66 81       	ldd	r22, Z+6	; 0x06
    2d10:	77 81       	ldd	r23, Z+7	; 0x07
    2d12:	fc 01       	movw	r30, r24
    2d14:	44 83       	std	Z+4, r20	; 0x04
    2d16:	55 83       	std	Z+5, r21	; 0x05
    2d18:	66 83       	std	Z+6, r22	; 0x06
    2d1a:	77 83       	std	Z+7, r23	; 0x07
    2d1c:	08 95       	ret

00002d1e <_nrk_stats_add_violation>:
}

void _nrk_stats_add_violation(uint8_t task_id)
{
    if( cur_task_stats[task_id].overflow==1) return;
    2d1e:	2e e1       	ldi	r18, 0x1E	; 30
    2d20:	82 9f       	mul	r24, r18
    2d22:	c0 01       	movw	r24, r0
    2d24:	11 24       	eor	r1, r1
    2d26:	fc 01       	movw	r30, r24
    2d28:	e9 54       	subi	r30, 0x49	; 73
    2d2a:	f8 4f       	sbci	r31, 0xF8	; 248
    2d2c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d2e:	81 30       	cpi	r24, 0x01	; 1
    2d30:	39 f0       	breq	.+14     	; 0x2d40 <_nrk_stats_add_violation+0x22>
    cur_task_stats[task_id].violations++;
    2d32:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d34:	8f 5f       	subi	r24, 0xFF	; 255
    2d36:	84 8f       	std	Z+28, r24	; 0x1c
    if(cur_task_stats[task_id].violations==255) cur_task_stats[task_id].overflow=1;
    2d38:	8f 3f       	cpi	r24, 0xFF	; 255
    2d3a:	11 f4       	brne	.+4      	; 0x2d40 <_nrk_stats_add_violation+0x22>
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	85 8f       	std	Z+29, r24	; 0x1d
    2d40:	08 95       	ret

00002d42 <_nrk_stats_task_start>:


// task_id is the PID of the task in question
void _nrk_stats_task_start(uint8_t task_id)
{
    if( cur_task_stats[task_id].overflow==1) return;
    2d42:	2e e1       	ldi	r18, 0x1E	; 30
    2d44:	82 9f       	mul	r24, r18
    2d46:	c0 01       	movw	r24, r0
    2d48:	11 24       	eor	r1, r1
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	e9 54       	subi	r30, 0x49	; 73
    2d4e:	f8 4f       	sbci	r31, 0xF8	; 248
    2d50:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d52:	81 30       	cpi	r24, 0x01	; 1
    2d54:	b1 f0       	breq	.+44     	; 0x2d82 <_nrk_stats_task_start+0x40>
    cur_task_stats[task_id].cur_ticks=0;
    2d56:	14 8a       	std	Z+20, r1	; 0x14
    2d58:	15 8a       	std	Z+21, r1	; 0x15
    2d5a:	16 8a       	std	Z+22, r1	; 0x16
    2d5c:	17 8a       	std	Z+23, r1	; 0x17
    cur_task_stats[task_id].swapped_in++;
    2d5e:	80 89       	ldd	r24, Z+16	; 0x10
    2d60:	91 89       	ldd	r25, Z+17	; 0x11
    2d62:	a2 89       	ldd	r26, Z+18	; 0x12
    2d64:	b3 89       	ldd	r27, Z+19	; 0x13
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	a1 1d       	adc	r26, r1
    2d6a:	b1 1d       	adc	r27, r1
    2d6c:	80 8b       	std	Z+16, r24	; 0x10
    2d6e:	91 8b       	std	Z+17, r25	; 0x11
    2d70:	a2 8b       	std	Z+18, r26	; 0x12
    2d72:	b3 8b       	std	Z+19, r27	; 0x13
    if(cur_task_stats[task_id].swapped_in==(UINT32_MAX-1)) cur_task_stats[task_id].overflow=1;
    2d74:	8e 3f       	cpi	r24, 0xFE	; 254
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	af 4f       	sbci	r26, 0xFF	; 255
    2d7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7c:	11 f4       	brne	.+4      	; 0x2d82 <_nrk_stats_task_start+0x40>
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	85 8f       	std	Z+29, r24	; 0x1d
    2d82:	08 95       	ret

00002d84 <_nrk_stats_task_preempted>:
}


void _nrk_stats_task_preempted(uint8_t task_id, uint8_t ticks)
{
    2d84:	0f 93       	push	r16
    2d86:	1f 93       	push	r17
    if( cur_task_stats[task_id].overflow==1) return;
    2d88:	2e e1       	ldi	r18, 0x1E	; 30
    2d8a:	82 9f       	mul	r24, r18
    2d8c:	c0 01       	movw	r24, r0
    2d8e:	11 24       	eor	r1, r1
    2d90:	fc 01       	movw	r30, r24
    2d92:	e9 54       	subi	r30, 0x49	; 73
    2d94:	f8 4f       	sbci	r31, 0xF8	; 248
    2d96:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d98:	81 30       	cpi	r24, 0x01	; 1
    2d9a:	71 f1       	breq	.+92     	; 0x2df8 <_nrk_stats_task_preempted+0x74>
    cur_task_stats[task_id].preempted++;
    2d9c:	80 8d       	ldd	r24, Z+24	; 0x18
    2d9e:	91 8d       	ldd	r25, Z+25	; 0x19
    2da0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2da2:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2da4:	01 96       	adiw	r24, 0x01	; 1
    2da6:	a1 1d       	adc	r26, r1
    2da8:	b1 1d       	adc	r27, r1
    2daa:	80 8f       	std	Z+24, r24	; 0x18
    2dac:	91 8f       	std	Z+25, r25	; 0x19
    2dae:	a2 8f       	std	Z+26, r26	; 0x1a
    2db0:	b3 8f       	std	Z+27, r27	; 0x1b
    cur_task_stats[task_id].cur_ticks+=ticks;
    2db2:	46 2f       	mov	r20, r22
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	04 89       	ldd	r16, Z+20	; 0x14
    2dbc:	15 89       	ldd	r17, Z+21	; 0x15
    2dbe:	26 89       	ldd	r18, Z+22	; 0x16
    2dc0:	37 89       	ldd	r19, Z+23	; 0x17
    2dc2:	04 0f       	add	r16, r20
    2dc4:	15 1f       	adc	r17, r21
    2dc6:	26 1f       	adc	r18, r22
    2dc8:	37 1f       	adc	r19, r23
    2dca:	04 8b       	std	Z+20, r16	; 0x14
    2dcc:	15 8b       	std	Z+21, r17	; 0x15
    2dce:	26 8b       	std	Z+22, r18	; 0x16
    2dd0:	37 8b       	std	Z+23, r19	; 0x17
    cur_task_stats[task_id].total_ticks+=ticks;
    2dd2:	00 81       	ld	r16, Z
    2dd4:	11 81       	ldd	r17, Z+1	; 0x01
    2dd6:	22 81       	ldd	r18, Z+2	; 0x02
    2dd8:	33 81       	ldd	r19, Z+3	; 0x03
    2dda:	40 0f       	add	r20, r16
    2ddc:	51 1f       	adc	r21, r17
    2dde:	62 1f       	adc	r22, r18
    2de0:	73 1f       	adc	r23, r19
    2de2:	40 83       	st	Z, r20
    2de4:	51 83       	std	Z+1, r21	; 0x01
    2de6:	62 83       	std	Z+2, r22	; 0x02
    2de8:	73 83       	std	Z+3, r23	; 0x03
    if(cur_task_stats[task_id].preempted==(UINT32_MAX-1)) cur_task_stats[task_id].overflow=1;
    2dea:	8e 3f       	cpi	r24, 0xFE	; 254
    2dec:	9f 4f       	sbci	r25, 0xFF	; 255
    2dee:	af 4f       	sbci	r26, 0xFF	; 255
    2df0:	bf 4f       	sbci	r27, 0xFF	; 255
    2df2:	11 f4       	brne	.+4      	; 0x2df8 <_nrk_stats_task_preempted+0x74>
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	85 8f       	std	Z+29, r24	; 0x1d
}
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	08 95       	ret

00002dfe <_nrk_stats_task_suspend>:

void _nrk_stats_task_suspend(uint8_t task_id, uint8_t ticks)
{
    2dfe:	cf 92       	push	r12
    2e00:	df 92       	push	r13
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    if( cur_task_stats[task_id].overflow==1) return;
    2e06:	28 2f       	mov	r18, r24
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	9e e1       	ldi	r25, 0x1E	; 30
    2e0c:	89 9f       	mul	r24, r25
    2e0e:	f0 01       	movw	r30, r0
    2e10:	11 24       	eor	r1, r1
    2e12:	e9 54       	subi	r30, 0x49	; 73
    2e14:	f8 4f       	sbci	r31, 0xF8	; 248
    2e16:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e18:	81 30       	cpi	r24, 0x01	; 1
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <_nrk_stats_task_suspend+0x20>
    2e1c:	4b c0       	rjmp	.+150    	; 0x2eb4 <_nrk_stats_task_suspend+0xb6>
    cur_task_stats[task_id].last_exec_ticks = cur_task_stats[task_id].cur_ticks+ticks;
    2e1e:	46 2f       	mov	r20, r22
    2e20:	50 e0       	ldi	r21, 0x00	; 0
    2e22:	60 e0       	ldi	r22, 0x00	; 0
    2e24:	70 e0       	ldi	r23, 0x00	; 0
    2e26:	84 89       	ldd	r24, Z+20	; 0x14
    2e28:	95 89       	ldd	r25, Z+21	; 0x15
    2e2a:	a6 89       	ldd	r26, Z+22	; 0x16
    2e2c:	b7 89       	ldd	r27, Z+23	; 0x17
    2e2e:	84 0f       	add	r24, r20
    2e30:	95 1f       	adc	r25, r21
    2e32:	a6 1f       	adc	r26, r22
    2e34:	b7 1f       	adc	r27, r23
    2e36:	84 87       	std	Z+12, r24	; 0x0c
    2e38:	95 87       	std	Z+13, r25	; 0x0d
    2e3a:	a6 87       	std	Z+14, r26	; 0x0e
    2e3c:	b7 87       	std	Z+15, r27	; 0x0f
    cur_task_stats[task_id].total_ticks+=ticks;
    2e3e:	c0 80       	ld	r12, Z
    2e40:	d1 80       	ldd	r13, Z+1	; 0x01
    2e42:	e2 80       	ldd	r14, Z+2	; 0x02
    2e44:	f3 80       	ldd	r15, Z+3	; 0x03
    2e46:	4c 0d       	add	r20, r12
    2e48:	5d 1d       	adc	r21, r13
    2e4a:	6e 1d       	adc	r22, r14
    2e4c:	7f 1d       	adc	r23, r15
    2e4e:	40 83       	st	Z, r20
    2e50:	51 83       	std	Z+1, r21	; 0x01
    2e52:	62 83       	std	Z+2, r22	; 0x02
    2e54:	73 83       	std	Z+3, r23	; 0x03

    if(cur_task_stats[task_id].min_exec_ticks==0 || cur_task_stats[task_id].last_exec_ticks<cur_task_stats[task_id].min_exec_ticks)
    2e56:	44 81       	ldd	r20, Z+4	; 0x04
    2e58:	55 81       	ldd	r21, Z+5	; 0x05
    2e5a:	66 81       	ldd	r22, Z+6	; 0x06
    2e5c:	77 81       	ldd	r23, Z+7	; 0x07
    2e5e:	41 15       	cp	r20, r1
    2e60:	51 05       	cpc	r21, r1
    2e62:	61 05       	cpc	r22, r1
    2e64:	71 05       	cpc	r23, r1
    2e66:	29 f0       	breq	.+10     	; 0x2e72 <_nrk_stats_task_suspend+0x74>
    2e68:	84 17       	cp	r24, r20
    2e6a:	95 07       	cpc	r25, r21
    2e6c:	a6 07       	cpc	r26, r22
    2e6e:	b7 07       	cpc	r27, r23
    2e70:	60 f4       	brcc	.+24     	; 0x2e8a <_nrk_stats_task_suspend+0x8c>
        cur_task_stats[task_id].min_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    2e72:	4e e1       	ldi	r20, 0x1E	; 30
    2e74:	42 9f       	mul	r20, r18
    2e76:	f0 01       	movw	r30, r0
    2e78:	43 9f       	mul	r20, r19
    2e7a:	f0 0d       	add	r31, r0
    2e7c:	11 24       	eor	r1, r1
    2e7e:	e9 54       	subi	r30, 0x49	; 73
    2e80:	f8 4f       	sbci	r31, 0xF8	; 248
    2e82:	84 83       	std	Z+4, r24	; 0x04
    2e84:	95 83       	std	Z+5, r25	; 0x05
    2e86:	a6 83       	std	Z+6, r26	; 0x06
    2e88:	b7 83       	std	Z+7, r27	; 0x07

    if(cur_task_stats[task_id].last_exec_ticks>cur_task_stats[task_id].max_exec_ticks)
    2e8a:	4e e1       	ldi	r20, 0x1E	; 30
    2e8c:	42 9f       	mul	r20, r18
    2e8e:	f0 01       	movw	r30, r0
    2e90:	43 9f       	mul	r20, r19
    2e92:	f0 0d       	add	r31, r0
    2e94:	11 24       	eor	r1, r1
    2e96:	e9 54       	subi	r30, 0x49	; 73
    2e98:	f8 4f       	sbci	r31, 0xF8	; 248
    2e9a:	40 85       	ldd	r20, Z+8	; 0x08
    2e9c:	51 85       	ldd	r21, Z+9	; 0x09
    2e9e:	62 85       	ldd	r22, Z+10	; 0x0a
    2ea0:	73 85       	ldd	r23, Z+11	; 0x0b
    2ea2:	48 17       	cp	r20, r24
    2ea4:	59 07       	cpc	r21, r25
    2ea6:	6a 07       	cpc	r22, r26
    2ea8:	7b 07       	cpc	r23, r27
    2eaa:	20 f4       	brcc	.+8      	; 0x2eb4 <_nrk_stats_task_suspend+0xb6>
        cur_task_stats[task_id].max_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    2eac:	80 87       	std	Z+8, r24	; 0x08
    2eae:	91 87       	std	Z+9, r25	; 0x09
    2eb0:	a2 87       	std	Z+10, r26	; 0x0a
    2eb2:	b3 87       	std	Z+11, r27	; 0x0b

}
    2eb4:	ff 90       	pop	r15
    2eb6:	ef 90       	pop	r14
    2eb8:	df 90       	pop	r13
    2eba:	cf 90       	pop	r12
    2ebc:	08 95       	ret

00002ebe <nrk_stats_display_pid>:



void nrk_stats_display_pid(uint8_t pid)
{
    2ebe:	8f 92       	push	r8
    2ec0:	9f 92       	push	r9
    2ec2:	af 92       	push	r10
    2ec4:	bf 92       	push	r11
    2ec6:	cf 92       	push	r12
    2ec8:	df 92       	push	r13
    2eca:	ef 92       	push	r14
    2ecc:	ff 92       	push	r15
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	28 97       	sbiw	r28, 0x08	; 8
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	18 2f       	mov	r17, r24
    nrk_time_t t;

    nrk_kprintf( PSTR( " Task ID: "));
    2ee8:	88 e9       	ldi	r24, 0x98	; 152
    2eea:	93 e0       	ldi	r25, 0x03	; 3
    2eec:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    printf( "%d",pid );
    2ef0:	a1 2e       	mov	r10, r17
    2ef2:	b1 2c       	mov	r11, r1
    2ef4:	1f 92       	push	r1
    2ef6:	1f 93       	push	r17
    2ef8:	8d e0       	ldi	r24, 0x0D	; 13
    2efa:	93 e0       	ldi	r25, 0x03	; 3
    2efc:	9f 93       	push	r25
    2efe:	8f 93       	push	r24
    2f00:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    if(pid==NRK_IDLE_TASK_ID)
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	11 11       	cpse	r17, r1
    2f0e:	52 c0       	rjmp	.+164    	; 0x2fb4 <nrk_stats_display_pid+0xf6>
    {
        nrk_kprintf( PSTR( "\r\n   Total System Uptime: "));
    2f10:	8d e7       	ldi	r24, 0x7D	; 125
    2f12:	93 e0       	ldi	r25, 0x03	; 3
    2f14:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
        nrk_time_get(&t);
    2f18:	ce 01       	movw	r24, r28
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	0e 94 d7 22 	call	0x45ae	; 0x45ae <nrk_time_get>
        printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    2f20:	6d 81       	ldd	r22, Y+5	; 0x05
    2f22:	7e 81       	ldd	r23, Y+6	; 0x06
    2f24:	8f 81       	ldd	r24, Y+7	; 0x07
    2f26:	98 85       	ldd	r25, Y+8	; 0x08
    2f28:	e0 e4       	ldi	r30, 0x40	; 64
    2f2a:	ce 2e       	mov	r12, r30
    2f2c:	e2 e4       	ldi	r30, 0x42	; 66
    2f2e:	de 2e       	mov	r13, r30
    2f30:	ef e0       	ldi	r30, 0x0F	; 15
    2f32:	ee 2e       	mov	r14, r30
    2f34:	f1 2c       	mov	r15, r1
    2f36:	a7 01       	movw	r20, r14
    2f38:	96 01       	movw	r18, r12
    2f3a:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    2f3e:	5f 93       	push	r21
    2f40:	4f 93       	push	r20
    2f42:	3f 93       	push	r19
    2f44:	2f 93       	push	r18
    2f46:	8c 81       	ldd	r24, Y+4	; 0x04
    2f48:	8f 93       	push	r24
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4c:	8f 93       	push	r24
    2f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f50:	8f 93       	push	r24
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	8f 93       	push	r24
    2f56:	00 e1       	ldi	r16, 0x10	; 16
    2f58:	13 e0       	ldi	r17, 0x03	; 3
    2f5a:	1f 93       	push	r17
    2f5c:	0f 93       	push	r16
    2f5e:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
        nrk_kprintf( PSTR( "\r\n   Idle Task Deep Sleep Time: "));
    2f62:	8c e5       	ldi	r24, 0x5C	; 92
    2f64:	93 e0       	ldi	r25, 0x03	; 3
    2f66:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
        //t=_nrk_ticks_to_time(_nrk_stats_sleep_time);
        //printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
        printf( "%lu secs %lu ms", _nrk_stats_sleep_time.secs, _nrk_stats_sleep_time.nano_secs/NANOS_PER_MS);
    2f6a:	60 91 84 06 	lds	r22, 0x0684
    2f6e:	70 91 85 06 	lds	r23, 0x0685
    2f72:	80 91 86 06 	lds	r24, 0x0686
    2f76:	90 91 87 06 	lds	r25, 0x0687
    2f7a:	a7 01       	movw	r20, r14
    2f7c:	96 01       	movw	r18, r12
    2f7e:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    2f82:	5f 93       	push	r21
    2f84:	4f 93       	push	r20
    2f86:	3f 93       	push	r19
    2f88:	2f 93       	push	r18
    2f8a:	80 91 83 06 	lds	r24, 0x0683
    2f8e:	8f 93       	push	r24
    2f90:	80 91 82 06 	lds	r24, 0x0682
    2f94:	8f 93       	push	r24
    2f96:	80 91 81 06 	lds	r24, 0x0681
    2f9a:	8f 93       	push	r24
    2f9c:	80 91 80 06 	lds	r24, 0x0680
    2fa0:	8f 93       	push	r24
    2fa2:	1f 93       	push	r17
    2fa4:	0f 93       	push	r16
    2fa6:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    }
    nrk_kprintf( PSTR( "\r\n   Total CPU: "));
    2fb4:	8b e4       	ldi	r24, 0x4B	; 75
    2fb6:	93 e0       	ldi	r25, 0x03	; 3
    2fb8:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].total_ticks);
    2fbc:	8e e1       	ldi	r24, 0x1E	; 30
    2fbe:	8a 9d       	mul	r24, r10
    2fc0:	80 01       	movw	r16, r0
    2fc2:	8b 9d       	mul	r24, r11
    2fc4:	10 0d       	add	r17, r0
    2fc6:	11 24       	eor	r1, r1
    2fc8:	09 54       	subi	r16, 0x49	; 73
    2fca:	18 4f       	sbci	r17, 0xF8	; 248
    2fcc:	f8 01       	movw	r30, r16
    2fce:	60 81       	ld	r22, Z
    2fd0:	71 81       	ldd	r23, Z+1	; 0x01
    2fd2:	82 81       	ldd	r24, Z+2	; 0x02
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	0e 94 bc 24 	call	0x4978	; 0x4978 <_nrk_ticks_to_time>
    2fda:	29 83       	std	Y+1, r18	; 0x01
    2fdc:	3a 83       	std	Y+2, r19	; 0x02
    2fde:	4b 83       	std	Y+3, r20	; 0x03
    2fe0:	5c 83       	std	Y+4, r21	; 0x04
    2fe2:	6d 83       	std	Y+5, r22	; 0x05
    2fe4:	7e 83       	std	Y+6, r23	; 0x06
    2fe6:	8f 83       	std	Y+7, r24	; 0x07
    2fe8:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    2fea:	6d 81       	ldd	r22, Y+5	; 0x05
    2fec:	7e 81       	ldd	r23, Y+6	; 0x06
    2fee:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff0:	98 85       	ldd	r25, Y+8	; 0x08
    2ff2:	20 e4       	ldi	r18, 0x40	; 64
    2ff4:	82 2e       	mov	r8, r18
    2ff6:	22 e4       	ldi	r18, 0x42	; 66
    2ff8:	92 2e       	mov	r9, r18
    2ffa:	2f e0       	ldi	r18, 0x0F	; 15
    2ffc:	a2 2e       	mov	r10, r18
    2ffe:	b1 2c       	mov	r11, r1
    3000:	a5 01       	movw	r20, r10
    3002:	94 01       	movw	r18, r8
    3004:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    3008:	5f 93       	push	r21
    300a:	4f 93       	push	r20
    300c:	3f 93       	push	r19
    300e:	2f 93       	push	r18
    3010:	8c 81       	ldd	r24, Y+4	; 0x04
    3012:	8f 93       	push	r24
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	8f 93       	push	r24
    3018:	8a 81       	ldd	r24, Y+2	; 0x02
    301a:	8f 93       	push	r24
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	8f 93       	push	r24
    3020:	30 e1       	ldi	r19, 0x10	; 16
    3022:	e3 2e       	mov	r14, r19
    3024:	33 e0       	ldi	r19, 0x03	; 3
    3026:	f3 2e       	mov	r15, r19
    3028:	ff 92       	push	r15
    302a:	ef 92       	push	r14
    302c:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    nrk_kprintf( PSTR( "\r\n   Time [Min,Last,Max]: "));
    3030:	80 e3       	ldi	r24, 0x30	; 48
    3032:	93 e0       	ldi	r25, 0x03	; 3
    3034:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].min_exec_ticks);
    3038:	f8 01       	movw	r30, r16
    303a:	64 81       	ldd	r22, Z+4	; 0x04
    303c:	75 81       	ldd	r23, Z+5	; 0x05
    303e:	86 81       	ldd	r24, Z+6	; 0x06
    3040:	97 81       	ldd	r25, Z+7	; 0x07
    3042:	0e 94 bc 24 	call	0x4978	; 0x4978 <_nrk_ticks_to_time>
    3046:	29 83       	std	Y+1, r18	; 0x01
    3048:	3a 83       	std	Y+2, r19	; 0x02
    304a:	4b 83       	std	Y+3, r20	; 0x03
    304c:	5c 83       	std	Y+4, r21	; 0x04
    304e:	6d 83       	std	Y+5, r22	; 0x05
    3050:	7e 83       	std	Y+6, r23	; 0x06
    3052:	8f 83       	std	Y+7, r24	; 0x07
    3054:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    3056:	6d 81       	ldd	r22, Y+5	; 0x05
    3058:	7e 81       	ldd	r23, Y+6	; 0x06
    305a:	8f 81       	ldd	r24, Y+7	; 0x07
    305c:	98 85       	ldd	r25, Y+8	; 0x08
    305e:	a5 01       	movw	r20, r10
    3060:	94 01       	movw	r18, r8
    3062:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    3066:	5f 93       	push	r21
    3068:	4f 93       	push	r20
    306a:	3f 93       	push	r19
    306c:	2f 93       	push	r18
    306e:	8c 81       	ldd	r24, Y+4	; 0x04
    3070:	8f 93       	push	r24
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	8f 93       	push	r24
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	8f 93       	push	r24
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	8f 93       	push	r24
    307e:	40 e2       	ldi	r20, 0x20	; 32
    3080:	c4 2e       	mov	r12, r20
    3082:	43 e0       	ldi	r20, 0x03	; 3
    3084:	d4 2e       	mov	r13, r20
    3086:	df 92       	push	r13
    3088:	cf 92       	push	r12
    308a:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].last_exec_ticks);
    308e:	f8 01       	movw	r30, r16
    3090:	64 85       	ldd	r22, Z+12	; 0x0c
    3092:	75 85       	ldd	r23, Z+13	; 0x0d
    3094:	86 85       	ldd	r24, Z+14	; 0x0e
    3096:	97 85       	ldd	r25, Z+15	; 0x0f
    3098:	0e 94 bc 24 	call	0x4978	; 0x4978 <_nrk_ticks_to_time>
    309c:	29 83       	std	Y+1, r18	; 0x01
    309e:	3a 83       	std	Y+2, r19	; 0x02
    30a0:	4b 83       	std	Y+3, r20	; 0x03
    30a2:	5c 83       	std	Y+4, r21	; 0x04
    30a4:	6d 83       	std	Y+5, r22	; 0x05
    30a6:	7e 83       	std	Y+6, r23	; 0x06
    30a8:	8f 83       	std	Y+7, r24	; 0x07
    30aa:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    30ac:	6d 81       	ldd	r22, Y+5	; 0x05
    30ae:	7e 81       	ldd	r23, Y+6	; 0x06
    30b0:	8f 81       	ldd	r24, Y+7	; 0x07
    30b2:	98 85       	ldd	r25, Y+8	; 0x08
    30b4:	a5 01       	movw	r20, r10
    30b6:	94 01       	movw	r18, r8
    30b8:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    30bc:	5f 93       	push	r21
    30be:	4f 93       	push	r20
    30c0:	3f 93       	push	r19
    30c2:	2f 93       	push	r18
    30c4:	8c 81       	ldd	r24, Y+4	; 0x04
    30c6:	8f 93       	push	r24
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	8f 93       	push	r24
    30cc:	8a 81       	ldd	r24, Y+2	; 0x02
    30ce:	8f 93       	push	r24
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	8f 93       	push	r24
    30d4:	df 92       	push	r13
    30d6:	cf 92       	push	r12
    30d8:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].max_exec_ticks);
    30dc:	f8 01       	movw	r30, r16
    30de:	60 85       	ldd	r22, Z+8	; 0x08
    30e0:	71 85       	ldd	r23, Z+9	; 0x09
    30e2:	82 85       	ldd	r24, Z+10	; 0x0a
    30e4:	93 85       	ldd	r25, Z+11	; 0x0b
    30e6:	0e 94 bc 24 	call	0x4978	; 0x4978 <_nrk_ticks_to_time>
    30ea:	29 83       	std	Y+1, r18	; 0x01
    30ec:	3a 83       	std	Y+2, r19	; 0x02
    30ee:	4b 83       	std	Y+3, r20	; 0x03
    30f0:	5c 83       	std	Y+4, r21	; 0x04
    30f2:	6d 83       	std	Y+5, r22	; 0x05
    30f4:	7e 83       	std	Y+6, r23	; 0x06
    30f6:	8f 83       	std	Y+7, r24	; 0x07
    30f8:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    30fa:	6d 81       	ldd	r22, Y+5	; 0x05
    30fc:	7e 81       	ldd	r23, Y+6	; 0x06
    30fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3100:	98 85       	ldd	r25, Y+8	; 0x08
    3102:	a5 01       	movw	r20, r10
    3104:	94 01       	movw	r18, r8
    3106:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    310a:	5f 93       	push	r21
    310c:	4f 93       	push	r20
    310e:	3f 93       	push	r19
    3110:	2f 93       	push	r18
    3112:	8c 81       	ldd	r24, Y+4	; 0x04
    3114:	8f 93       	push	r24
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	8f 93       	push	r24
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	8f 93       	push	r24
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	8f 93       	push	r24
    3122:	ff 92       	push	r15
    3124:	ef 92       	push	r14
    3126:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    nrk_kprintf( PSTR( "\r\n   Swap-ins: "));
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	80 e2       	ldi	r24, 0x20	; 32
    3136:	93 e0       	ldi	r25, 0x03	; 3
    3138:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    printf( "%lu",cur_task_stats[pid].swapped_in );
    313c:	f8 01       	movw	r30, r16
    313e:	70 96       	adiw	r30, 0x10	; 16
    3140:	83 81       	ldd	r24, Z+3	; 0x03
    3142:	8f 93       	push	r24
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	8f 93       	push	r24
    3148:	81 81       	ldd	r24, Z+1	; 0x01
    314a:	8f 93       	push	r24
    314c:	f8 01       	movw	r30, r16
    314e:	80 89       	ldd	r24, Z+16	; 0x10
    3150:	8f 93       	push	r24
    3152:	52 e3       	ldi	r21, 0x32	; 50
    3154:	e5 2e       	mov	r14, r21
    3156:	53 e0       	ldi	r21, 0x03	; 3
    3158:	f5 2e       	mov	r15, r21
    315a:	ff 92       	push	r15
    315c:	ef 92       	push	r14
    315e:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    nrk_kprintf( PSTR( "\r\n   Preemptions: "));
    3162:	8d e0       	ldi	r24, 0x0D	; 13
    3164:	93 e0       	ldi	r25, 0x03	; 3
    3166:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    printf( "%lu",cur_task_stats[pid].preempted);
    316a:	f8 01       	movw	r30, r16
    316c:	78 96       	adiw	r30, 0x18	; 24
    316e:	83 81       	ldd	r24, Z+3	; 0x03
    3170:	8f 93       	push	r24
    3172:	82 81       	ldd	r24, Z+2	; 0x02
    3174:	8f 93       	push	r24
    3176:	81 81       	ldd	r24, Z+1	; 0x01
    3178:	8f 93       	push	r24
    317a:	f8 01       	movw	r30, r16
    317c:	80 8d       	ldd	r24, Z+24	; 0x18
    317e:	8f 93       	push	r24
    3180:	ff 92       	push	r15
    3182:	ef 92       	push	r14
    3184:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    nrk_kprintf( PSTR( "\r\n   Kernel Violations: "));
    3188:	84 ef       	ldi	r24, 0xF4	; 244
    318a:	92 e0       	ldi	r25, 0x02	; 2
    318c:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    printf( "%u",cur_task_stats[pid].violations);
    3190:	f8 01       	movw	r30, r16
    3192:	84 8d       	ldd	r24, Z+28	; 0x1c
    3194:	1f 92       	push	r1
    3196:	8f 93       	push	r24
    3198:	66 e3       	ldi	r22, 0x36	; 54
    319a:	e6 2e       	mov	r14, r22
    319c:	63 e0       	ldi	r22, 0x03	; 3
    319e:	f6 2e       	mov	r15, r22
    31a0:	ff 92       	push	r15
    31a2:	ef 92       	push	r14
    31a4:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    nrk_kprintf( PSTR( "\r\n   Overflow Error Status: "));
    31a8:	87 ed       	ldi	r24, 0xD7	; 215
    31aa:	92 e0       	ldi	r25, 0x02	; 2
    31ac:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    printf( "%u",cur_task_stats[pid].overflow);
    31b0:	f8 01       	movw	r30, r16
    31b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    31b4:	1f 92       	push	r1
    31b6:	8f 93       	push	r24
    31b8:	ff 92       	push	r15
    31ba:	ef 92       	push	r14
    31bc:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    nrk_kprintf( PSTR("\r\n") );
    31c0:	84 ed       	ldi	r24, 0xD4	; 212
    31c2:	92 e0       	ldi	r25, 0x02	; 2
    31c4:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
    31c8:	0f b6       	in	r0, 0x3f	; 63
    31ca:	f8 94       	cli
    31cc:	de bf       	out	0x3e, r29	; 62
    31ce:	0f be       	out	0x3f, r0	; 63
    31d0:	cd bf       	out	0x3d, r28	; 61

}
    31d2:	28 96       	adiw	r28, 0x08	; 8
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	ff 90       	pop	r15
    31e8:	ef 90       	pop	r14
    31ea:	df 90       	pop	r13
    31ec:	cf 90       	pop	r12
    31ee:	bf 90       	pop	r11
    31f0:	af 90       	pop	r10
    31f2:	9f 90       	pop	r9
    31f4:	8f 90       	pop	r8
    31f6:	08 95       	ret

000031f8 <nrk_stats_display_all>:


void nrk_stats_display_all()
{
    31f8:	cf 93       	push	r28
    uint8_t i;
    nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));
    31fa:	87 eb       	ldi	r24, 0xB7	; 183
    31fc:	92 e0       	ldi	r25, 0x02	; 2
    31fe:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>

    for(i=0; i<NRK_MAX_TASKS; i++ )
    3202:	c0 e0       	ldi	r28, 0x00	; 0
        nrk_stats_display_pid(i);
    3204:	8c 2f       	mov	r24, r28
    3206:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <nrk_stats_display_pid>
void nrk_stats_display_all()
{
    uint8_t i;
    nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));

    for(i=0; i<NRK_MAX_TASKS; i++ )
    320a:	cf 5f       	subi	r28, 0xFF	; 255
    320c:	c5 30       	cpi	r28, 0x05	; 5
    320e:	d1 f7       	brne	.-12     	; 0x3204 <nrk_stats_display_all+0xc>
        nrk_stats_display_pid(i);
}
    3210:	cf 91       	pop	r28
    3212:	08 95       	ret

00003214 <nrk_stats_get>:


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    3214:	db 01       	movw	r26, r22
    if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    3216:	85 30       	cpi	r24, 0x05	; 5
    3218:	08 f0       	brcs	.+2      	; 0x321c <nrk_stats_get+0x8>
    321a:	54 c0       	rjmp	.+168    	; 0x32c4 <nrk_stats_get+0xb0>

    t->total_ticks=cur_task_stats[pid].total_ticks;
    321c:	9e e1       	ldi	r25, 0x1E	; 30
    321e:	89 9f       	mul	r24, r25
    3220:	f0 01       	movw	r30, r0
    3222:	11 24       	eor	r1, r1
    3224:	e9 54       	subi	r30, 0x49	; 73
    3226:	f8 4f       	sbci	r31, 0xF8	; 248
    3228:	40 81       	ld	r20, Z
    322a:	51 81       	ldd	r21, Z+1	; 0x01
    322c:	62 81       	ldd	r22, Z+2	; 0x02
    322e:	73 81       	ldd	r23, Z+3	; 0x03
    3230:	4d 93       	st	X+, r20
    3232:	5d 93       	st	X+, r21
    3234:	6d 93       	st	X+, r22
    3236:	7c 93       	st	X, r23
    3238:	13 97       	sbiw	r26, 0x03	; 3
    t->min_exec_ticks=cur_task_stats[pid].min_exec_ticks;
    323a:	44 81       	ldd	r20, Z+4	; 0x04
    323c:	55 81       	ldd	r21, Z+5	; 0x05
    323e:	66 81       	ldd	r22, Z+6	; 0x06
    3240:	77 81       	ldd	r23, Z+7	; 0x07
    3242:	14 96       	adiw	r26, 0x04	; 4
    3244:	4d 93       	st	X+, r20
    3246:	5d 93       	st	X+, r21
    3248:	6d 93       	st	X+, r22
    324a:	7c 93       	st	X, r23
    324c:	17 97       	sbiw	r26, 0x07	; 7
    t->max_exec_ticks=cur_task_stats[pid].max_exec_ticks;
    324e:	40 85       	ldd	r20, Z+8	; 0x08
    3250:	51 85       	ldd	r21, Z+9	; 0x09
    3252:	62 85       	ldd	r22, Z+10	; 0x0a
    3254:	73 85       	ldd	r23, Z+11	; 0x0b
    3256:	18 96       	adiw	r26, 0x08	; 8
    3258:	4d 93       	st	X+, r20
    325a:	5d 93       	st	X+, r21
    325c:	6d 93       	st	X+, r22
    325e:	7c 93       	st	X, r23
    3260:	1b 97       	sbiw	r26, 0x0b	; 11
    t->last_exec_ticks=cur_task_stats[pid].last_exec_ticks;
    3262:	44 85       	ldd	r20, Z+12	; 0x0c
    3264:	55 85       	ldd	r21, Z+13	; 0x0d
    3266:	66 85       	ldd	r22, Z+14	; 0x0e
    3268:	77 85       	ldd	r23, Z+15	; 0x0f
    326a:	1c 96       	adiw	r26, 0x0c	; 12
    326c:	4d 93       	st	X+, r20
    326e:	5d 93       	st	X+, r21
    3270:	6d 93       	st	X+, r22
    3272:	7c 93       	st	X, r23
    3274:	1f 97       	sbiw	r26, 0x0f	; 15
    t->swapped_in=cur_task_stats[pid].swapped_in;
    3276:	40 89       	ldd	r20, Z+16	; 0x10
    3278:	51 89       	ldd	r21, Z+17	; 0x11
    327a:	62 89       	ldd	r22, Z+18	; 0x12
    327c:	73 89       	ldd	r23, Z+19	; 0x13
    327e:	50 96       	adiw	r26, 0x10	; 16
    3280:	4d 93       	st	X+, r20
    3282:	5d 93       	st	X+, r21
    3284:	6d 93       	st	X+, r22
    3286:	7c 93       	st	X, r23
    3288:	53 97       	sbiw	r26, 0x13	; 19
    t->cur_ticks=cur_task_stats[pid].cur_ticks;
    328a:	44 89       	ldd	r20, Z+20	; 0x14
    328c:	55 89       	ldd	r21, Z+21	; 0x15
    328e:	66 89       	ldd	r22, Z+22	; 0x16
    3290:	77 89       	ldd	r23, Z+23	; 0x17
    3292:	54 96       	adiw	r26, 0x14	; 20
    3294:	4d 93       	st	X+, r20
    3296:	5d 93       	st	X+, r21
    3298:	6d 93       	st	X+, r22
    329a:	7c 93       	st	X, r23
    329c:	57 97       	sbiw	r26, 0x17	; 23
    t->preempted=cur_task_stats[pid].preempted;
    329e:	40 8d       	ldd	r20, Z+24	; 0x18
    32a0:	51 8d       	ldd	r21, Z+25	; 0x19
    32a2:	62 8d       	ldd	r22, Z+26	; 0x1a
    32a4:	73 8d       	ldd	r23, Z+27	; 0x1b
    32a6:	58 96       	adiw	r26, 0x18	; 24
    32a8:	4d 93       	st	X+, r20
    32aa:	5d 93       	st	X+, r21
    32ac:	6d 93       	st	X+, r22
    32ae:	7c 93       	st	X, r23
    32b0:	5b 97       	sbiw	r26, 0x1b	; 27
    t->violations=cur_task_stats[pid].violations;
    32b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    32b4:	5c 96       	adiw	r26, 0x1c	; 28
    32b6:	8c 93       	st	X, r24
    32b8:	5c 97       	sbiw	r26, 0x1c	; 28
    t->overflow=cur_task_stats[pid].overflow;
    32ba:	85 8d       	ldd	r24, Z+29	; 0x1d
    32bc:	5d 96       	adiw	r26, 0x1d	; 29
    32be:	8c 93       	st	X, r24

    return NRK_OK;
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	08 95       	ret
}


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    32c4:	8f ef       	ldi	r24, 0xFF	; 255
    t->preempted=cur_task_stats[pid].preempted;
    t->violations=cur_task_stats[pid].violations;
    t->overflow=cur_task_stats[pid].overflow;

    return NRK_OK;
}
    32c6:	08 95       	ret

000032c8 <_nrk_errno_set>:
inline void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    32c8:	e0 91 f9 09 	lds	r30, 0x09F9
    32cc:	f0 91 fa 09 	lds	r31, 0x09FA
    32d0:	84 87       	std	Z+12, r24	; 0x0c
    32d2:	08 95       	ret

000032d4 <nrk_errno_get>:
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    32d4:	e0 91 f9 09 	lds	r30, 0x09F9
    32d8:	f0 91 fa 09 	lds	r31, 0x09FA
}
    32dc:	84 85       	ldd	r24, Z+12	; 0x0c
    32de:	08 95       	ret

000032e0 <_nrk_log_error>:

#ifdef NRK_LOG_ERRORS
void _nrk_log_error(uint8_t error_num, uint8_t error_task)
{
    32e0:	cf 93       	push	r28
    32e2:	df 93       	push	r29
    32e4:	d8 2f       	mov	r29, r24
    32e6:	c6 2f       	mov	r28, r22

    // 1) Load error cnt and add 1
    error_cnt=nrk_eeprom_read_byte(NRK_ERROR_EEPROM_INDEX);
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	92 e0       	ldi	r25, 0x02	; 2
    32ec:	0e 94 d7 13 	call	0x27ae	; 0x27ae <nrk_eeprom_read_byte>
    error_cnt++;
    32f0:	8f 5f       	subi	r24, 0xFF	; 255
    if(error_cnt==255) error_cnt=0;
    32f2:	8f 3f       	cpi	r24, 0xFF	; 255
    32f4:	19 f0       	breq	.+6      	; 0x32fc <_nrk_log_error+0x1c>
void _nrk_log_error(uint8_t error_num, uint8_t error_task)
{

    // 1) Load error cnt and add 1
    error_cnt=nrk_eeprom_read_byte(NRK_ERROR_EEPROM_INDEX);
    error_cnt++;
    32f6:	80 93 c3 05 	sts	0x05C3, r24
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <_nrk_log_error+0x20>
    if(error_cnt==255) error_cnt=0;
    32fc:	10 92 c3 05 	sts	0x05C3, r1
    // 2) write error
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6),error_num);
    3300:	20 91 c3 05 	lds	r18, 0x05C3
    3304:	36 e0       	ldi	r19, 0x06	; 6
    3306:	23 9f       	mul	r18, r19
    3308:	c0 01       	movw	r24, r0
    330a:	11 24       	eor	r1, r1
    330c:	6d 2f       	mov	r22, r29
    330e:	8f 5f       	subi	r24, 0xFF	; 255
    3310:	9d 4f       	sbci	r25, 0xFD	; 253
    3312:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+1),error_task);
    3316:	80 91 c3 05 	lds	r24, 0x05C3
    331a:	46 e0       	ldi	r20, 0x06	; 6
    331c:	84 9f       	mul	r24, r20
    331e:	c0 01       	movw	r24, r0
    3320:	11 24       	eor	r1, r1
    3322:	6c 2f       	mov	r22, r28
    3324:	8e 5f       	subi	r24, 0xFE	; 254
    3326:	9d 4f       	sbci	r25, 0xFD	; 253
    3328:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+2),(nrk_system_time.secs>>24)&0xff);
    332c:	20 91 c3 05 	lds	r18, 0x05C3
    3330:	40 91 f0 09 	lds	r20, 0x09F0
    3334:	50 91 f1 09 	lds	r21, 0x09F1
    3338:	60 91 f2 09 	lds	r22, 0x09F2
    333c:	70 91 f3 09 	lds	r23, 0x09F3
    3340:	67 2f       	mov	r22, r23
    3342:	77 27       	eor	r23, r23
    3344:	88 27       	eor	r24, r24
    3346:	99 27       	eor	r25, r25
    3348:	46 e0       	ldi	r20, 0x06	; 6
    334a:	24 9f       	mul	r18, r20
    334c:	90 01       	movw	r18, r0
    334e:	11 24       	eor	r1, r1
    3350:	c9 01       	movw	r24, r18
    3352:	8d 5f       	subi	r24, 0xFD	; 253
    3354:	9d 4f       	sbci	r25, 0xFD	; 253
    3356:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+3),(nrk_system_time.secs>>16)&0xff);
    335a:	20 91 c3 05 	lds	r18, 0x05C3
    335e:	40 91 f0 09 	lds	r20, 0x09F0
    3362:	50 91 f1 09 	lds	r21, 0x09F1
    3366:	60 91 f2 09 	lds	r22, 0x09F2
    336a:	70 91 f3 09 	lds	r23, 0x09F3
    336e:	88 27       	eor	r24, r24
    3370:	99 27       	eor	r25, r25
    3372:	46 e0       	ldi	r20, 0x06	; 6
    3374:	24 9f       	mul	r18, r20
    3376:	90 01       	movw	r18, r0
    3378:	11 24       	eor	r1, r1
    337a:	c9 01       	movw	r24, r18
    337c:	8c 5f       	subi	r24, 0xFC	; 252
    337e:	9d 4f       	sbci	r25, 0xFD	; 253
    3380:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+4),(nrk_system_time.secs>>8)&0xff);
    3384:	20 91 c3 05 	lds	r18, 0x05C3
    3388:	40 91 f0 09 	lds	r20, 0x09F0
    338c:	50 91 f1 09 	lds	r21, 0x09F1
    3390:	60 91 f2 09 	lds	r22, 0x09F2
    3394:	70 91 f3 09 	lds	r23, 0x09F3
    3398:	99 27       	eor	r25, r25
    339a:	87 2f       	mov	r24, r23
    339c:	76 2f       	mov	r23, r22
    339e:	65 2f       	mov	r22, r21
    33a0:	46 e0       	ldi	r20, 0x06	; 6
    33a2:	24 9f       	mul	r18, r20
    33a4:	90 01       	movw	r18, r0
    33a6:	11 24       	eor	r1, r1
    33a8:	c9 01       	movw	r24, r18
    33aa:	8b 5f       	subi	r24, 0xFB	; 251
    33ac:	9d 4f       	sbci	r25, 0xFD	; 253
    33ae:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+5),(nrk_system_time.secs)&0xff);
    33b2:	80 91 c3 05 	lds	r24, 0x05C3
    33b6:	26 e0       	ldi	r18, 0x06	; 6
    33b8:	82 9f       	mul	r24, r18
    33ba:	c0 01       	movw	r24, r0
    33bc:	11 24       	eor	r1, r1
    33be:	60 91 f0 09 	lds	r22, 0x09F0
    33c2:	8a 5f       	subi	r24, 0xFA	; 250
    33c4:	9d 4f       	sbci	r25, 0xFD	; 253
    33c6:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <nrk_eeprom_write_byte>
    // 3) write error cnt back
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX,error_cnt);
    33ca:	60 91 c3 05 	lds	r22, 0x05C3
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	92 e0       	ldi	r25, 0x02	; 2
}
    33d2:	df 91       	pop	r29
    33d4:	cf 91       	pop	r28
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+2),(nrk_system_time.secs>>24)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+3),(nrk_system_time.secs>>16)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+4),(nrk_system_time.secs>>8)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+5),(nrk_system_time.secs)&0xff);
    // 3) write error cnt back
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX,error_cnt);
    33d6:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <nrk_eeprom_write_byte>

000033da <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    33da:	fc 01       	movw	r30, r24
    if (error_num == 0)
    33dc:	80 91 4d 08 	lds	r24, 0x084D
    33e0:	88 23       	and	r24, r24
    33e2:	31 f0       	breq	.+12     	; 0x33f0 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    33e4:	db 01       	movw	r26, r22
    33e6:	8c 93       	st	X, r24
    *task_id = error_task;
    33e8:	80 91 52 06 	lds	r24, 0x0652
    33ec:	80 83       	st	Z, r24
    return 1;
    33ee:	81 e0       	ldi	r24, 0x01	; 1
}
    33f0:	08 95       	ret

000033f2 <nrk_error_print>:
uint8_t i,t;




    if (error_num == 0)
    33f2:	80 91 4d 08 	lds	r24, 0x084D
    33f6:	88 23       	and	r24, r24
    33f8:	09 f4       	brne	.+2      	; 0x33fc <nrk_error_print+0xa>
    33fa:	83 c0       	rjmp	.+262    	; 0x3502 <nrk_error_print+0x110>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    33fc:	8f ec       	ldi	r24, 0xCF	; 207
    33fe:	95 e0       	ldi	r25, 0x05	; 5
    3400:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
        printf ("%d", error_task);
    3404:	80 91 52 06 	lds	r24, 0x0652
    3408:	1f 92       	push	r1
    340a:	8f 93       	push	r24
    340c:	8d e0       	ldi	r24, 0x0D	; 13
    340e:	93 e0       	ldi	r25, 0x03	; 3
    3410:	9f 93       	push	r25
    3412:	8f 93       	push	r24
    3414:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
        nrk_kprintf (PSTR ("): "));
    3418:	8b ec       	ldi	r24, 0xCB	; 203
    341a:	95 e0       	ldi	r25, 0x05	; 5
    341c:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	80 91 4d 08 	lds	r24, 0x084D
    342c:	88 31       	cpi	r24, 0x18	; 24
    342e:	10 f0       	brcs	.+4      	; 0x3434 <nrk_error_print+0x42>
            error_num = NRK_UNKOWN;
    3430:	10 92 4d 08 	sts	0x084D, r1
        switch (error_num)
    3434:	e0 91 4d 08 	lds	r30, 0x084D
    3438:	8e 2f       	mov	r24, r30
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	fc 01       	movw	r30, r24
    343e:	31 97       	sbiw	r30, 0x01	; 1
    3440:	e6 31       	cpi	r30, 0x16	; 22
    3442:	f1 05       	cpc	r31, r1
    3444:	08 f0       	brcs	.+2      	; 0x3448 <nrk_error_print+0x56>
    3446:	46 c0       	rjmp	.+140    	; 0x34d4 <nrk_error_print+0xe2>
    3448:	e6 54       	subi	r30, 0x46	; 70
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	0c 94 60 30 	jmp	0x60c0	; 0x60c0 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    3450:	8f e8       	ldi	r24, 0x8F	; 143
    3452:	95 e0       	ldi	r25, 0x05	; 5
    3454:	41 c0       	rjmp	.+130    	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    3456:	88 e6       	ldi	r24, 0x68	; 104
    3458:	95 e0       	ldi	r25, 0x05	; 5
    345a:	3e c0       	rjmp	.+124    	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    345c:	84 e5       	ldi	r24, 0x54	; 84
    345e:	95 e0       	ldi	r25, 0x05	; 5
    3460:	3b c0       	rjmp	.+118    	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    3462:	8e e3       	ldi	r24, 0x3E	; 62
    3464:	95 e0       	ldi	r25, 0x05	; 5
    3466:	38 c0       	rjmp	.+112    	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    3468:	83 e2       	ldi	r24, 0x23	; 35
    346a:	95 e0       	ldi	r25, 0x05	; 5
    346c:	35 c0       	rjmp	.+106    	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    346e:	8d e0       	ldi	r24, 0x0D	; 13
    3470:	95 e0       	ldi	r25, 0x05	; 5
    3472:	32 c0       	rjmp	.+100    	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    3474:	85 ef       	ldi	r24, 0xF5	; 245
    3476:	94 e0       	ldi	r25, 0x04	; 4
    3478:	2f c0       	rjmp	.+94     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    347a:	82 ee       	ldi	r24, 0xE2	; 226
    347c:	94 e0       	ldi	r25, 0x04	; 4
    347e:	2c c0       	rjmp	.+88     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    3480:	8f ec       	ldi	r24, 0xCF	; 207
    3482:	94 e0       	ldi	r25, 0x04	; 4
    3484:	29 c0       	rjmp	.+82     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    3486:	81 eb       	ldi	r24, 0xB1	; 177
    3488:	94 e0       	ldi	r25, 0x04	; 4
    348a:	26 c0       	rjmp	.+76     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    348c:	8c e8       	ldi	r24, 0x8C	; 140
    348e:	94 e0       	ldi	r25, 0x04	; 4
    3490:	23 c0       	rjmp	.+70     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    3492:	80 e8       	ldi	r24, 0x80	; 128
    3494:	94 e0       	ldi	r25, 0x04	; 4
    3496:	20 c0       	rjmp	.+64     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    3498:	85 e6       	ldi	r24, 0x65	; 101
    349a:	94 e0       	ldi	r25, 0x04	; 4
    349c:	1d c0       	rjmp	.+58     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    349e:	86 e5       	ldi	r24, 0x56	; 86
    34a0:	94 e0       	ldi	r25, 0x04	; 4
    34a2:	1a c0       	rjmp	.+52     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    34a4:	82 e4       	ldi	r24, 0x42	; 66
    34a6:	94 e0       	ldi	r25, 0x04	; 4
    34a8:	17 c0       	rjmp	.+46     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    34aa:	81 e3       	ldi	r24, 0x31	; 49
    34ac:	94 e0       	ldi	r25, 0x04	; 4
    34ae:	14 c0       	rjmp	.+40     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    34b0:	8d e1       	ldi	r24, 0x1D	; 29
    34b2:	94 e0       	ldi	r25, 0x04	; 4
    34b4:	11 c0       	rjmp	.+34     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    34b6:	8d ef       	ldi	r24, 0xFD	; 253
    34b8:	93 e0       	ldi	r25, 0x03	; 3
    34ba:	0e c0       	rjmp	.+28     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    34bc:	85 ee       	ldi	r24, 0xE5	; 229
    34be:	93 e0       	ldi	r25, 0x03	; 3
    34c0:	0b c0       	rjmp	.+22     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    34c2:	8a ec       	ldi	r24, 0xCA	; 202
    34c4:	93 e0       	ldi	r25, 0x03	; 3
    34c6:	08 c0       	rjmp	.+16     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    34c8:	89 eb       	ldi	r24, 0xB9	; 185
    34ca:	93 e0       	ldi	r25, 0x03	; 3
    34cc:	05 c0       	rjmp	.+10     	; 0x34d8 <nrk_error_print+0xe6>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    34ce:	8a ea       	ldi	r24, 0xAA	; 170
    34d0:	93 e0       	ldi	r25, 0x03	; 3
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <nrk_error_print+0xe6>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    34d4:	83 ea       	ldi	r24, 0xA3	; 163
    34d6:	93 e0       	ldi	r25, 0x03	; 3
    34d8:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
        }
        putchar ('\r');
    34dc:	60 91 5e 0a 	lds	r22, 0x0A5E
    34e0:	70 91 5f 0a 	lds	r23, 0x0A5F
    34e4:	8d e0       	ldi	r24, 0x0D	; 13
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
        putchar ('\n');
    34ec:	60 91 5e 0a 	lds	r22, 0x0A5E
    34f0:	70 91 5f 0a 	lds	r23, 0x0A5F
    34f4:	8a e0       	ldi	r24, 0x0A	; 10
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
}


#endif

    return error_num;
    34fc:	80 91 4d 08 	lds	r24, 0x084D
    3500:	08 95       	ret




    if (error_num == 0)
        return 0;
    3502:	80 e0       	ldi	r24, 0x00	; 0


#endif

    return error_num;
}
    3504:	08 95       	ret

00003506 <clear_regs>:

inline void clear_regs()
{

        GTCCR=0;
    3506:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    3508:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    350c:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    350e:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    3510:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    3512:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    3514:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    3516:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    3518:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    351a:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    351c:	10 92 9b 00 	sts	0x009B, r1
    3520:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    3524:	10 92 99 00 	sts	0x0099, r1
    3528:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    352c:	10 92 95 00 	sts	0x0095, r1
    3530:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    3534:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    3538:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    353c:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    353e:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    3542:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    3546:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    354a:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    354e:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    3552:	e0 eb       	ldi	r30, 0xB0	; 176
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	10 82       	st	Z, r1
        TCCR2A=0;
    3558:	10 82       	st	Z, r1
        TIFR2=0;
    355a:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    355c:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    3560:	8f ef       	ldi	r24, 0xFF	; 255
    3562:	84 bf       	out	0x34, r24	; 52
    3564:	08 95       	ret

00003566 <nrk_error_handle>:
    		nrk_watchdog_disable();
	#endif
#endif

#ifdef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    3566:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    nrk_watchdog_disable();
    356a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <nrk_watchdog_disable>
                        ::);
#endif

#ifdef NRK_REBOOT_ON_ERROR
        // wait for watchdog to kick in
        if(error_num!=NRK_WATCHDOG_ERROR && error_num!=NRK_BOD_ERROR && error_num!=NRK_EXT_RST_ERROR)
    356e:	80 91 4d 08 	lds	r24, 0x084D
    3572:	80 31       	cpi	r24, 0x10	; 16
    3574:	71 f0       	breq	.+28     	; 0x3592 <nrk_error_handle+0x2c>
    3576:	83 51       	subi	r24, 0x13	; 19
    3578:	82 30       	cpi	r24, 0x02	; 2
    357a:	58 f0       	brcs	.+22     	; 0x3592 <nrk_error_handle+0x2c>
        {
	    clear_regs();
    357c:	0e 94 83 1a 	call	0x3506	; 0x3506 <clear_regs>
	    #ifdef NRK_REPORT_ERRORS
	    nrk_kprintf(PSTR("NRK Reboot...\r\n" ));
    3580:	8b ed       	ldi	r24, 0xDB	; 219
    3582:	95 e0       	ldi	r25, 0x05	; 5
    3584:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>
	    #endif NRK_REPORT_ERRORS
            nrk_watchdog_enable();
    3588:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <nrk_watchdog_enable>
            nrk_int_disable();
    358c:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    3590:	ff cf       	rjmp	.-2      	; 0x3590 <nrk_error_handle+0x2a>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    3592:	10 92 4d 08 	sts	0x084D, r1
    3596:	08 95       	ret

00003598 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    3598:	80 93 4d 08 	sts	0x084D, r24
    error_task = nrk_cur_task_TCB->task_ID;
    359c:	e0 91 f9 09 	lds	r30, 0x09F9
    35a0:	f0 91 fa 09 	lds	r31, 0x09FA
    35a4:	60 85       	ldd	r22, Z+8	; 0x08
    35a6:	60 93 52 06 	sts	0x0652, r22

#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
    35aa:	0e 94 70 19 	call	0x32e0	; 0x32e0 <_nrk_log_error>
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    35ae:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <nrk_error_print>
#endif 

nrk_error_handle();
    35b2:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <nrk_error_handle>

000035b6 <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    35b6:	80 93 4d 08 	sts	0x084D, r24
    error_task = task;
    35ba:	60 93 52 06 	sts	0x0652, r22

#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
    35be:	0e 94 70 19 	call	0x32e0	; 0x32e0 <_nrk_log_error>
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    35c2:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <nrk_error_print>
#endif 

nrk_error_handle();
    35c6:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <nrk_error_handle>

000035ca <pause>:
    }

}

void pause()
{
    35ca:	cf 93       	push	r28
    35cc:	df 93       	push	r29
    35ce:	1f 92       	push	r1
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    35d4:	19 82       	std	Y+1, r1	; 0x01
    35d6:	89 81       	ldd	r24, Y+1	; 0x01
    35d8:	84 36       	cpi	r24, 0x64	; 100
    35da:	40 f4       	brcc	.+16     	; 0x35ec <pause+0x22>
        nrk_spin_wait_us (2000);
    35dc:	80 ed       	ldi	r24, 0xD0	; 208
    35de:	97 e0       	ldi	r25, 0x07	; 7
    35e0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
    35e6:	8f 5f       	subi	r24, 0xFF	; 255
    35e8:	89 83       	std	Y+1, r24	; 0x01
    35ea:	f5 cf       	rjmp	.-22     	; 0x35d6 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    35ec:	0f 90       	pop	r0
    35ee:	df 91       	pop	r29
    35f0:	cf 91       	pop	r28
    35f2:	08 95       	ret

000035f4 <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	0e 94 59 13 	call	0x26b2	; 0x26b2 <nrk_led_set>
    pause();
    35fc:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <pause>
    pause();
    3600:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <pause>
    pause();
    3604:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <pause>
    nrk_led_clr(GREEN_LED);
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0e 94 42 13 	call	0x2684	; 0x2684 <nrk_led_clr>
    pause();
    3610:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <pause>

00003614 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	0e 94 59 13 	call	0x26b2	; 0x26b2 <nrk_led_set>
    pause();
    361c:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <pause>
    nrk_led_clr(GREEN_LED);
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	0e 94 42 13 	call	0x2684	; 0x2684 <nrk_led_clr>
    pause();
    3628:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <pause>

0000362c <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    362c:	ff 92       	push	r15
    362e:	0f 93       	push	r16
    3630:	1f 93       	push	r17
    3632:	cf 93       	push	r28
    3634:	df 93       	push	r29
    3636:	00 d0       	rcall	.+0      	; 0x3638 <blink_morse_code_error+0xc>
    3638:	1f 92       	push	r1
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    363e:	1f 92       	push	r1
    3640:	8f 93       	push	r24
    3642:	8d e0       	ldi	r24, 0x0D	; 13
    3644:	93 e0       	ldi	r25, 0x03	; 3
    3646:	9f 93       	push	r25
    3648:	8f 93       	push	r24
    364a:	8e 01       	movw	r16, r28
    364c:	0f 5f       	subi	r16, 0xFF	; 255
    364e:	1f 4f       	sbci	r17, 0xFF	; 255
    3650:	1f 93       	push	r17
    3652:	0f 93       	push	r16
    3654:	0e 94 64 31 	call	0x62c8	; 0x62c8 <sprintf>

    for(i=0; i<strlen(str); i++ )
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	f1 2c       	mov	r15, r1
    3666:	f8 01       	movw	r30, r16
    3668:	01 90       	ld	r0, Z+
    366a:	00 20       	and	r0, r0
    366c:	e9 f7       	brne	.-6      	; 0x3668 <blink_morse_code_error+0x3c>
    366e:	31 97       	sbiw	r30, 0x01	; 1
    3670:	e0 1b       	sub	r30, r16
    3672:	f1 0b       	sbc	r31, r17
    3674:	8f 2d       	mov	r24, r15
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	8e 17       	cp	r24, r30
    367a:	9f 07       	cpc	r25, r31
    367c:	08 f0       	brcs	.+2      	; 0x3680 <blink_morse_code_error+0x54>
    367e:	5d c0       	rjmp	.+186    	; 0x373a <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    3680:	f8 01       	movw	r30, r16
    3682:	e8 0f       	add	r30, r24
    3684:	f9 1f       	adc	r31, r25
    3686:	e0 81       	ld	r30, Z
    3688:	8e 2f       	mov	r24, r30
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	fc 01       	movw	r30, r24
    368e:	f0 97       	sbiw	r30, 0x30	; 48
    3690:	ea 30       	cpi	r30, 0x0A	; 10
    3692:	f1 05       	cpc	r31, r1
    3694:	08 f0       	brcs	.+2      	; 0x3698 <blink_morse_code_error+0x6c>
    3696:	49 c0       	rjmp	.+146    	; 0x372a <blink_morse_code_error+0xfe>
    3698:	e0 53       	subi	r30, 0x30	; 48
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	0c 94 60 30 	jmp	0x60c0	; 0x60c0 <__tablejump2__>
        {
        case '0':
            blink_dash();
    36a0:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
    36a4:	02 c0       	rjmp	.+4      	; 0x36aa <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    36a6:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
            blink_dash();
    36aa:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dash();
    36ae:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dash();
    36b2:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dash();
    36b6:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            break;
    36ba:	37 c0       	rjmp	.+110    	; 0x372a <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    36bc:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
            blink_dot();
    36c0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
    36c4:	f4 cf       	rjmp	.-24     	; 0x36ae <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    36c6:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
            blink_dot();
    36ca:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
            blink_dot();
    36ce:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
    36d2:	ef cf       	rjmp	.-34     	; 0x36b2 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    36d4:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
            blink_dot();
    36d8:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
            blink_dot();
    36dc:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
            blink_dot();
    36e0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
    36e4:	e8 cf       	rjmp	.-48     	; 0x36b6 <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    36e6:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
    36ea:	02 c0       	rjmp	.+4      	; 0x36f0 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    36ec:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dot();
    36f0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
    36f4:	04 c0       	rjmp	.+8      	; 0x36fe <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    36f6:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dash();
    36fa:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dot();
    36fe:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
    3702:	06 c0       	rjmp	.+12     	; 0x3710 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    3704:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dash();
    3708:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dash();
    370c:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dot();
    3710:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
    3714:	08 c0       	rjmp	.+16     	; 0x3726 <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    3716:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dash();
    371a:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dash();
    371e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dash();
    3722:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <blink_dash>
            blink_dot();
    3726:	0e 94 0a 1b 	call	0x3614	; 0x3614 <blink_dot>
            break;
        }
        pause();
    372a:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <pause>
        pause();
    372e:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <pause>
        pause();
    3732:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    3736:	f3 94       	inc	r15
    3738:	96 cf       	rjmp	.-212    	; 0x3666 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	df 91       	pop	r29
    3742:	cf 91       	pop	r28
    3744:	1f 91       	pop	r17
    3746:	0f 91       	pop	r16
    3748:	ff 90       	pop	r15
    374a:	08 95       	ret

0000374c <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    374c:	6f 92       	push	r6
    374e:	7f 92       	push	r7
    3750:	8f 92       	push	r8
    3752:	9f 92       	push	r9
    3754:	af 92       	push	r10
    3756:	bf 92       	push	r11
    3758:	cf 92       	push	r12
    375a:	df 92       	push	r13
    375c:	ef 92       	push	r14
    375e:	ff 92       	push	r15
    3760:	0f 93       	push	r16
    3762:	1f 93       	push	r17
    3764:	cf 93       	push	r28
    3766:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    3768:	8b ee       	ldi	r24, 0xEB	; 235
    376a:	95 e0       	ldi	r25, 0x05	; 5
    376c:	0e 94 08 10 	call	0x2010	; 0x2010 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    3770:	e0 91 f9 09 	lds	r30, 0x09F9
    3774:	f0 91 fa 09 	lds	r31, 0x09FA
    3778:	80 85       	ldd	r24, Z+8	; 0x08
    377a:	28 2f       	mov	r18, r24
    377c:	33 27       	eor	r19, r19
    377e:	27 fd       	sbrc	r18, 7
    3780:	30 95       	com	r19
    3782:	3f 93       	push	r19
    3784:	8f 93       	push	r24
    3786:	89 e3       	ldi	r24, 0x39	; 57
    3788:	93 e0       	ldi	r25, 0x03	; 3
    378a:	9f 93       	push	r25
    378c:	8f 93       	push	r24
    378e:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    3792:	e0 91 f9 09 	lds	r30, 0x09F9
    3796:	f0 91 fa 09 	lds	r31, 0x09FA
    379a:	c2 81       	ldd	r28, Z+2	; 0x02
    379c:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	8d e6       	ldi	r24, 0x6D	; 109
    37a4:	93 e0       	ldi	r25, 0x03	; 3
    37a6:	9f 93       	push	r25
    37a8:	8f 93       	push	r24
    37aa:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    printf( "canary = %x ",*stkc );
    37ae:	88 81       	ld	r24, Y
    37b0:	1f 92       	push	r1
    37b2:	8f 93       	push	r24
    37b4:	82 e4       	ldi	r24, 0x42	; 66
    37b6:	93 e0       	ldi	r25, 0x03	; 3
    37b8:	9f 93       	push	r25
    37ba:	8f 93       	push	r24
    37bc:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    37c0:	e0 91 f9 09 	lds	r30, 0x09F9
    37c4:	f0 91 fa 09 	lds	r31, 0x09FA
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    37c8:	81 81       	ldd	r24, Z+1	; 0x01
    37ca:	8f 93       	push	r24
    37cc:	80 81       	ld	r24, Z
    37ce:	8f 93       	push	r24
    37d0:	8f e4       	ldi	r24, 0x4F	; 79
    37d2:	93 e0       	ldi	r25, 0x03	; 3
    37d4:	9f 93       	push	r25
    37d6:	8f 93       	push	r24
    37d8:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    37dc:	80 91 fa 09 	lds	r24, 0x09FA
    37e0:	8f 93       	push	r24
    37e2:	80 91 f9 09 	lds	r24, 0x09F9
    37e6:	8f 93       	push	r24
    37e8:	89 e5       	ldi	r24, 0x59	; 89
    37ea:	93 e0       	ldi	r25, 0x03	; 3
    37ec:	9f 93       	push	r25
    37ee:	8f 93       	push	r24
    37f0:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    37f4:	cc e0       	ldi	r28, 0x0C	; 12
    37f6:	d9 e0       	ldi	r29, 0x09	; 9
    37f8:	ed b7       	in	r30, 0x3d	; 61
    37fa:	fe b7       	in	r31, 0x3e	; 62
    37fc:	74 96       	adiw	r30, 0x14	; 20
    37fe:	0f b6       	in	r0, 0x3f	; 63
    3800:	f8 94       	cli
    3802:	fe bf       	out	0x3e, r31	; 62
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	ed bf       	out	0x3d, r30	; 61
    3808:	00 e0       	ldi	r16, 0x00	; 0
    380a:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    380c:	89 e6       	ldi	r24, 0x69	; 105
    380e:	68 2e       	mov	r6, r24
    3810:	83 e0       	ldi	r24, 0x03	; 3
    3812:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    3814:	92 e4       	ldi	r25, 0x42	; 66
    3816:	89 2e       	mov	r8, r25
    3818:	93 e0       	ldi	r25, 0x03	; 3
    381a:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    381c:	2f e4       	ldi	r18, 0x4F	; 79
    381e:	a2 2e       	mov	r10, r18
    3820:	23 e0       	ldi	r18, 0x03	; 3
    3822:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3824:	39 e5       	ldi	r19, 0x59	; 89
    3826:	c3 2e       	mov	r12, r19
    3828:	33 e0       	ldi	r19, 0x03	; 3
    382a:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    382c:	ea 80       	ldd	r14, Y+2	; 0x02
    382e:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3830:	ff 92       	push	r15
    3832:	ef 92       	push	r14
    3834:	1f 93       	push	r17
    3836:	0f 93       	push	r16
    3838:	7f 92       	push	r7
    383a:	6f 92       	push	r6
    383c:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
        printf( "canary = %x ",*stkc );
    3840:	f7 01       	movw	r30, r14
    3842:	80 81       	ld	r24, Z
    3844:	1f 92       	push	r1
    3846:	8f 93       	push	r24
    3848:	9f 92       	push	r9
    384a:	8f 92       	push	r8
    384c:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	8f 93       	push	r24
    3854:	88 81       	ld	r24, Y
    3856:	8f 93       	push	r24
    3858:	bf 92       	push	r11
    385a:	af 92       	push	r10
    385c:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3860:	df 93       	push	r29
    3862:	cf 93       	push	r28
    3864:	df 92       	push	r13
    3866:	cf 92       	push	r12
    3868:	0e 94 1a 31 	call	0x6234	; 0x6234 <printf>
    386c:	0f 5f       	subi	r16, 0xFF	; 255
    386e:	1f 4f       	sbci	r17, 0xFF	; 255
    3870:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    3872:	ed b7       	in	r30, 0x3d	; 61
    3874:	fe b7       	in	r31, 0x3e	; 62
    3876:	72 96       	adiw	r30, 0x12	; 18
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	fe bf       	out	0x3e, r31	; 62
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	ed bf       	out	0x3d, r30	; 61
    3882:	05 30       	cpi	r16, 0x05	; 5
    3884:	11 05       	cpc	r17, r1
    3886:	91 f6       	brne	.-92     	; 0x382c <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    3888:	df 91       	pop	r29
    388a:	cf 91       	pop	r28
    388c:	1f 91       	pop	r17
    388e:	0f 91       	pop	r16
    3890:	ff 90       	pop	r15
    3892:	ef 90       	pop	r14
    3894:	df 90       	pop	r13
    3896:	cf 90       	pop	r12
    3898:	bf 90       	pop	r11
    389a:	af 90       	pop	r10
    389c:	9f 90       	pop	r9
    389e:	8f 90       	pop	r8
    38a0:	7f 90       	pop	r7
    38a2:	6f 90       	pop	r6
    38a4:	08 95       	ret

000038a6 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    38a6:	cf 93       	push	r28
    38a8:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    38aa:	e0 91 f9 09 	lds	r30, 0x09F9
    38ae:	f0 91 fa 09 	lds	r31, 0x09FA
    38b2:	c2 81       	ldd	r28, Z+2	; 0x02
    38b4:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    38b6:	88 81       	ld	r24, Y
    38b8:	85 35       	cpi	r24, 0x55	; 85
    38ba:	39 f0       	breq	.+14     	; 0x38ca <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    38bc:	0e 94 a6 1b 	call	0x374c	; 0x374c <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	0e 94 cc 1a 	call	0x3598	; 0x3598 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    38c6:	85 e5       	ldi	r24, 0x55	; 85
    38c8:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    38ca:	e0 91 f9 09 	lds	r30, 0x09F9
    38ce:	f0 91 fa 09 	lds	r31, 0x09FA
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    38d2:	80 81       	ld	r24, Z
    38d4:	91 81       	ldd	r25, Z+1	; 0x01
    38d6:	81 15       	cp	r24, r1
    38d8:	92 44       	sbci	r25, 0x42	; 66
    38da:	38 f0       	brcs	.+14     	; 0x38ea <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    38dc:	0e 94 a6 1b 	call	0x374c	; 0x374c <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    38e0:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    38e2:	df 91       	pop	r29
    38e4:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    38e6:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <nrk_error_add>




#endif
}
    38ea:	df 91       	pop	r29
    38ec:	cf 91       	pop	r28
    38ee:	08 95       	ret

000038f0 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    38f0:	2b e2       	ldi	r18, 0x2B	; 43
    38f2:	82 02       	muls	r24, r18
    38f4:	c0 01       	movw	r24, r0
    38f6:	11 24       	eor	r1, r1
    38f8:	fc 01       	movw	r30, r24
    38fa:	e4 5f       	subi	r30, 0xF4	; 244
    38fc:	f6 4f       	sbci	r31, 0xF6	; 246
    38fe:	a2 81       	ldd	r26, Z+2	; 0x02
    3900:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3902:	8c 91       	ld	r24, X
    3904:	85 35       	cpi	r24, 0x55	; 85
    3906:	19 f0       	breq	.+6      	; 0x390e <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    3908:	85 e5       	ldi	r24, 0x55	; 85
    390a:	8c 93       	st	X, r24
    390c:	08 c0       	rjmp	.+16     	; 0x391e <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    390e:	80 81       	ld	r24, Z
    3910:	91 81       	ldd	r25, Z+1	; 0x01
    3912:	81 15       	cp	r24, r1
    3914:	92 44       	sbci	r25, 0x42	; 66
    3916:	28 f0       	brcs	.+10     	; 0x3922 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3918:	82 e1       	ldi	r24, 0x12	; 18
    391a:	0e 94 cc 1a 	call	0x3598	; 0x3598 <nrk_error_add>
        return NRK_ERROR;
    391e:	8f ef       	ldi	r24, 0xFF	; 255
    3920:	08 95       	ret
    }
#endif
    return NRK_OK;
    3922:	81 e0       	ldi	r24, 0x01	; 1
}
    3924:	08 95       	ret

00003926 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    3926:	0f 93       	push	r16
    3928:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    392a:	40 91 88 06 	lds	r20, 0x0688
    392e:	50 91 89 06 	lds	r21, 0x0689
    3932:	60 91 8a 06 	lds	r22, 0x068A
    3936:	70 91 8b 06 	lds	r23, 0x068B
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	8a 01       	movw	r16, r20
    3940:	9b 01       	movw	r18, r22
    3942:	08 2e       	mov	r0, r24
    3944:	04 c0       	rjmp	.+8      	; 0x394e <nrk_signal_create+0x28>
    3946:	36 95       	lsr	r19
    3948:	27 95       	ror	r18
    394a:	17 95       	ror	r17
    394c:	07 95       	ror	r16
    394e:	0a 94       	dec	r0
    3950:	d2 f7       	brpl	.-12     	; 0x3946 <nrk_signal_create+0x20>
    3952:	00 fd       	sbrc	r16, 0
    3954:	19 c0       	rjmp	.+50     	; 0x3988 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    3956:	01 e0       	ldi	r16, 0x01	; 1
    3958:	10 e0       	ldi	r17, 0x00	; 0
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	08 2e       	mov	r0, r24
    3960:	04 c0       	rjmp	.+8      	; 0x396a <nrk_signal_create+0x44>
    3962:	00 0f       	add	r16, r16
    3964:	11 1f       	adc	r17, r17
    3966:	22 1f       	adc	r18, r18
    3968:	33 1f       	adc	r19, r19
    396a:	0a 94       	dec	r0
    396c:	d2 f7       	brpl	.-12     	; 0x3962 <nrk_signal_create+0x3c>
    396e:	40 2b       	or	r20, r16
    3970:	51 2b       	or	r21, r17
    3972:	62 2b       	or	r22, r18
    3974:	73 2b       	or	r23, r19
    3976:	40 93 88 06 	sts	0x0688, r20
    397a:	50 93 89 06 	sts	0x0689, r21
    397e:	60 93 8a 06 	sts	0x068A, r22
    3982:	70 93 8b 06 	sts	0x068B, r23
			return i;
    3986:	05 c0       	rjmp	.+10     	; 0x3992 <nrk_signal_create+0x6c>
    3988:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    398a:	80 32       	cpi	r24, 0x20	; 32
    398c:	91 05       	cpc	r25, r1
    398e:	b9 f6       	brne	.-82     	; 0x393e <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    3990:	8f ef       	ldi	r24, 0xFF	; 255


}
    3992:	1f 91       	pop	r17
    3994:	0f 91       	pop	r16
    3996:	08 95       	ret

00003998 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    3998:	e0 91 f9 09 	lds	r30, 0x09F9
    399c:	f0 91 fa 09 	lds	r31, 0x09FA
    39a0:	65 85       	ldd	r22, Z+13	; 0x0d
    39a2:	76 85       	ldd	r23, Z+14	; 0x0e
    39a4:	87 85       	ldd	r24, Z+15	; 0x0f
    39a6:	90 89       	ldd	r25, Z+16	; 0x10
}
    39a8:	08 95       	ret

000039aa <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    39aa:	cf 92       	push	r12
    39ac:	df 92       	push	r13
    39ae:	ef 92       	push	r14
    39b0:	ff 92       	push	r15
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    39ba:	c1 2c       	mov	r12, r1
    39bc:	d1 2c       	mov	r13, r1
    39be:	76 01       	movw	r14, r12
    39c0:	c3 94       	inc	r12
    39c2:	08 2e       	mov	r0, r24
    39c4:	04 c0       	rjmp	.+8      	; 0x39ce <nrk_signal_delete+0x24>
    39c6:	cc 0c       	add	r12, r12
    39c8:	dd 1c       	adc	r13, r13
    39ca:	ee 1c       	adc	r14, r14
    39cc:	ff 1c       	adc	r15, r15
    39ce:	0a 94       	dec	r0
    39d0:	d2 f7       	brpl	.-12     	; 0x39c6 <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    39d2:	40 91 88 06 	lds	r20, 0x0688
    39d6:	50 91 89 06 	lds	r21, 0x0689
    39da:	60 91 8a 06 	lds	r22, 0x068A
    39de:	70 91 8b 06 	lds	r23, 0x068B
    39e2:	4c 21       	and	r20, r12
    39e4:	5d 21       	and	r21, r13
    39e6:	6e 21       	and	r22, r14
    39e8:	7f 21       	and	r23, r15
    39ea:	45 2b       	or	r20, r21
    39ec:	46 2b       	or	r20, r22
    39ee:	47 2b       	or	r20, r23
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <nrk_signal_delete+0x4a>
    39f2:	60 c0       	rjmp	.+192    	; 0x3ab4 <nrk_signal_delete+0x10a>
    39f4:	08 2f       	mov	r16, r24

	nrk_int_disable();
    39f6:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    39fa:	e5 e1       	ldi	r30, 0x15	; 21
    39fc:	f9 e0       	ldi	r31, 0x09	; 9
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    39fe:	b7 01       	movw	r22, r14
    3a00:	a6 01       	movw	r20, r12
    3a02:	40 95       	com	r20
    3a04:	50 95       	com	r21
    3a06:	60 95       	com	r22
    3a08:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3a0a:	13 e0       	ldi	r17, 0x03	; 3
    3a0c:	df 01       	movw	r26, r30
    3a0e:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3a10:	8c 91       	ld	r24, X
    3a12:	8f 3f       	cpi	r24, 0xFF	; 255
    3a14:	39 f1       	breq	.+78     	; 0x3a64 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    3a16:	84 81       	ldd	r24, Z+4	; 0x04
    3a18:	95 81       	ldd	r25, Z+5	; 0x05
    3a1a:	a6 81       	ldd	r26, Z+6	; 0x06
    3a1c:	b7 81       	ldd	r27, Z+7	; 0x07
    3a1e:	8c 15       	cp	r24, r12
    3a20:	9d 05       	cpc	r25, r13
    3a22:	ae 05       	cpc	r26, r14
    3a24:	bf 05       	cpc	r27, r15
    3a26:	51 f4       	brne	.+20     	; 0x3a3c <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3a28:	10 86       	std	Z+8, r1	; 0x08
    3a2a:	11 86       	std	Z+9, r1	; 0x09
    3a2c:	12 86       	std	Z+10, r1	; 0x0a
    3a2e:	13 86       	std	Z+11, r1	; 0x0b
    3a30:	9f 01       	movw	r18, r30
    3a32:	22 50       	subi	r18, 0x02	; 2
    3a34:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    3a36:	e9 01       	movw	r28, r18
    3a38:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3a3a:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3a3c:	84 23       	and	r24, r20
    3a3e:	95 23       	and	r25, r21
    3a40:	a6 23       	and	r26, r22
    3a42:	b7 23       	and	r27, r23
    3a44:	84 83       	std	Z+4, r24	; 0x04
    3a46:	95 83       	std	Z+5, r25	; 0x05
    3a48:	a6 83       	std	Z+6, r26	; 0x06
    3a4a:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3a4c:	80 85       	ldd	r24, Z+8	; 0x08
    3a4e:	91 85       	ldd	r25, Z+9	; 0x09
    3a50:	a2 85       	ldd	r26, Z+10	; 0x0a
    3a52:	b3 85       	ldd	r27, Z+11	; 0x0b
    3a54:	84 23       	and	r24, r20
    3a56:	95 23       	and	r25, r21
    3a58:	a6 23       	and	r26, r22
    3a5a:	b7 23       	and	r27, r23
    3a5c:	80 87       	std	Z+8, r24	; 0x08
    3a5e:	91 87       	std	Z+9, r25	; 0x09
    3a60:	a2 87       	std	Z+10, r26	; 0x0a
    3a62:	b3 87       	std	Z+11, r27	; 0x0b
    3a64:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3a66:	d9 e0       	ldi	r29, 0x09	; 9
    3a68:	ec 3e       	cpi	r30, 0xEC	; 236
    3a6a:	fd 07       	cpc	r31, r29
    3a6c:	79 f6       	brne	.-98     	; 0x3a0c <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    3a6e:	8e ef       	ldi	r24, 0xFE	; 254
    3a70:	9f ef       	ldi	r25, 0xFF	; 255
    3a72:	af ef       	ldi	r26, 0xFF	; 255
    3a74:	bf ef       	ldi	r27, 0xFF	; 255
    3a76:	04 c0       	rjmp	.+8      	; 0x3a80 <nrk_signal_delete+0xd6>
    3a78:	88 0f       	add	r24, r24
    3a7a:	99 1f       	adc	r25, r25
    3a7c:	aa 1f       	adc	r26, r26
    3a7e:	bb 1f       	adc	r27, r27
    3a80:	0a 95       	dec	r16
    3a82:	d2 f7       	brpl	.-12     	; 0x3a78 <nrk_signal_delete+0xce>
    3a84:	40 91 88 06 	lds	r20, 0x0688
    3a88:	50 91 89 06 	lds	r21, 0x0689
    3a8c:	60 91 8a 06 	lds	r22, 0x068A
    3a90:	70 91 8b 06 	lds	r23, 0x068B
    3a94:	84 23       	and	r24, r20
    3a96:	95 23       	and	r25, r21
    3a98:	a6 23       	and	r26, r22
    3a9a:	b7 23       	and	r27, r23
    3a9c:	80 93 88 06 	sts	0x0688, r24
    3aa0:	90 93 89 06 	sts	0x0689, r25
    3aa4:	a0 93 8a 06 	sts	0x068A, r26
    3aa8:	b0 93 8b 06 	sts	0x068B, r27
	nrk_int_enable();
    3aac:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>

	return NRK_OK;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	01 c0       	rjmp	.+2      	; 0x3ab6 <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3ab4:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    3ab6:	df 91       	pop	r29
    3ab8:	cf 91       	pop	r28
    3aba:	1f 91       	pop	r17
    3abc:	0f 91       	pop	r16
    3abe:	ff 90       	pop	r15
    3ac0:	ef 90       	pop	r14
    3ac2:	df 90       	pop	r13
    3ac4:	cf 90       	pop	r12
    3ac6:	08 95       	ret

00003ac8 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3ac8:	0f 93       	push	r16
    3aca:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3acc:	41 e0       	ldi	r20, 0x01	; 1
    3ace:	50 e0       	ldi	r21, 0x00	; 0
    3ad0:	60 e0       	ldi	r22, 0x00	; 0
    3ad2:	70 e0       	ldi	r23, 0x00	; 0
    3ad4:	8a 01       	movw	r16, r20
    3ad6:	9b 01       	movw	r18, r22
    3ad8:	04 c0       	rjmp	.+8      	; 0x3ae2 <nrk_signal_unregister+0x1a>
    3ada:	00 0f       	add	r16, r16
    3adc:	11 1f       	adc	r17, r17
    3ade:	22 1f       	adc	r18, r18
    3ae0:	33 1f       	adc	r19, r19
    3ae2:	8a 95       	dec	r24
    3ae4:	d2 f7       	brpl	.-12     	; 0x3ada <nrk_signal_unregister+0x12>
    3ae6:	d9 01       	movw	r26, r18
    3ae8:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3aea:	e0 91 f9 09 	lds	r30, 0x09F9
    3aee:	f0 91 fa 09 	lds	r31, 0x09FA
    3af2:	45 85       	ldd	r20, Z+13	; 0x0d
    3af4:	56 85       	ldd	r21, Z+14	; 0x0e
    3af6:	67 85       	ldd	r22, Z+15	; 0x0f
    3af8:	70 89       	ldd	r23, Z+16	; 0x10
    3afa:	04 23       	and	r16, r20
    3afc:	15 23       	and	r17, r21
    3afe:	26 23       	and	r18, r22
    3b00:	37 23       	and	r19, r23
    3b02:	01 2b       	or	r16, r17
    3b04:	02 2b       	or	r16, r18
    3b06:	03 2b       	or	r16, r19
    3b08:	d1 f0       	breq	.+52     	; 0x3b3e <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3b0a:	80 95       	com	r24
    3b0c:	90 95       	com	r25
    3b0e:	a0 95       	com	r26
    3b10:	b0 95       	com	r27
    3b12:	48 23       	and	r20, r24
    3b14:	59 23       	and	r21, r25
    3b16:	6a 23       	and	r22, r26
    3b18:	7b 23       	and	r23, r27
    3b1a:	45 87       	std	Z+13, r20	; 0x0d
    3b1c:	56 87       	std	Z+14, r21	; 0x0e
    3b1e:	67 87       	std	Z+15, r22	; 0x0f
    3b20:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3b22:	41 89       	ldd	r20, Z+17	; 0x11
    3b24:	52 89       	ldd	r21, Z+18	; 0x12
    3b26:	63 89       	ldd	r22, Z+19	; 0x13
    3b28:	74 89       	ldd	r23, Z+20	; 0x14
    3b2a:	84 23       	and	r24, r20
    3b2c:	95 23       	and	r25, r21
    3b2e:	a6 23       	and	r26, r22
    3b30:	b7 23       	and	r27, r23
    3b32:	81 8b       	std	Z+17, r24	; 0x11
    3b34:	92 8b       	std	Z+18, r25	; 0x12
    3b36:	a3 8b       	std	Z+19, r26	; 0x13
    3b38:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	01 c0       	rjmp	.+2      	; 0x3b40 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    3b3e:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    3b40:	1f 91       	pop	r17
    3b42:	0f 91       	pop	r16
    3b44:	08 95       	ret

00003b46 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    3b46:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3b48:	40 91 88 06 	lds	r20, 0x0688
    3b4c:	50 91 89 06 	lds	r21, 0x0689
    3b50:	60 91 8a 06 	lds	r22, 0x068A
    3b54:	70 91 8b 06 	lds	r23, 0x068B
    3b58:	08 2e       	mov	r0, r24
    3b5a:	04 c0       	rjmp	.+8      	; 0x3b64 <nrk_signal_register+0x1e>
    3b5c:	76 95       	lsr	r23
    3b5e:	67 95       	ror	r22
    3b60:	57 95       	ror	r21
    3b62:	47 95       	ror	r20
    3b64:	0a 94       	dec	r0
    3b66:	d2 f7       	brpl	.-12     	; 0x3b5c <nrk_signal_register+0x16>
    3b68:	40 ff       	sbrs	r20, 0
    3b6a:	1d c0       	rjmp	.+58     	; 0x3ba6 <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3b6c:	e0 91 f9 09 	lds	r30, 0x09F9
    3b70:	f0 91 fa 09 	lds	r31, 0x09FA
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	a0 e0       	ldi	r26, 0x00	; 0
    3b7a:	b0 e0       	ldi	r27, 0x00	; 0
    3b7c:	04 c0       	rjmp	.+8      	; 0x3b86 <nrk_signal_register+0x40>
    3b7e:	88 0f       	add	r24, r24
    3b80:	99 1f       	adc	r25, r25
    3b82:	aa 1f       	adc	r26, r26
    3b84:	bb 1f       	adc	r27, r27
    3b86:	2a 95       	dec	r18
    3b88:	d2 f7       	brpl	.-12     	; 0x3b7e <nrk_signal_register+0x38>
    3b8a:	45 85       	ldd	r20, Z+13	; 0x0d
    3b8c:	56 85       	ldd	r21, Z+14	; 0x0e
    3b8e:	67 85       	ldd	r22, Z+15	; 0x0f
    3b90:	70 89       	ldd	r23, Z+16	; 0x10
    3b92:	84 2b       	or	r24, r20
    3b94:	95 2b       	or	r25, r21
    3b96:	a6 2b       	or	r26, r22
    3b98:	b7 2b       	or	r27, r23
    3b9a:	85 87       	std	Z+13, r24	; 0x0d
    3b9c:	96 87       	std	Z+14, r25	; 0x0e
    3b9e:	a7 87       	std	Z+15, r26	; 0x0f
    3ba0:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	08 95       	ret
	}
            
	return NRK_ERROR;
    3ba6:	8f ef       	ldi	r24, 0xFF	; 255
}
    3ba8:	08 95       	ret

00003baa <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    3baa:	cf 92       	push	r12
    3bac:	df 92       	push	r13
    3bae:	ef 92       	push	r14
    3bb0:	ff 92       	push	r15
    3bb2:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    3bb4:	c1 2c       	mov	r12, r1
    3bb6:	d1 2c       	mov	r13, r1
    3bb8:	76 01       	movw	r14, r12
    3bba:	c3 94       	inc	r12
    3bbc:	04 c0       	rjmp	.+8      	; 0x3bc6 <nrk_event_signal+0x1c>
    3bbe:	cc 0c       	add	r12, r12
    3bc0:	dd 1c       	adc	r13, r13
    3bc2:	ee 1c       	adc	r14, r14
    3bc4:	ff 1c       	adc	r15, r15
    3bc6:	8a 95       	dec	r24
    3bc8:	d2 f7       	brpl	.-12     	; 0x3bbe <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3bca:	80 91 88 06 	lds	r24, 0x0688
    3bce:	90 91 89 06 	lds	r25, 0x0689
    3bd2:	a0 91 8a 06 	lds	r26, 0x068A
    3bd6:	b0 91 8b 06 	lds	r27, 0x068B
    3bda:	8c 21       	and	r24, r12
    3bdc:	9d 21       	and	r25, r13
    3bde:	ae 21       	and	r26, r14
    3be0:	bf 21       	and	r27, r15
    3be2:	89 2b       	or	r24, r25
    3be4:	8a 2b       	or	r24, r26
    3be6:	8b 2b       	or	r24, r27
    3be8:	11 f4       	brne	.+4      	; 0x3bee <nrk_event_signal+0x44>
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	44 c0       	rjmp	.+136    	; 0x3c76 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    3bee:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    3bf2:	e3 e1       	ldi	r30, 0x13	; 19
    3bf4:	f9 e0       	ldi	r31, 0x09	; 9
    3bf6:	a5 e1       	ldi	r26, 0x15	; 21
    3bf8:	b9 e0       	ldi	r27, 0x09	; 9

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3bfa:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3bfc:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    3bfe:	90 81       	ld	r25, Z
    3c00:	91 30       	cpi	r25, 0x01	; 1
    3c02:	b9 f4       	brne	.+46     	; 0x3c32 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    3c04:	42 85       	ldd	r20, Z+10	; 0x0a
    3c06:	53 85       	ldd	r21, Z+11	; 0x0b
    3c08:	64 85       	ldd	r22, Z+12	; 0x0c
    3c0a:	75 85       	ldd	r23, Z+13	; 0x0d
    3c0c:	4c 21       	and	r20, r12
    3c0e:	5d 21       	and	r21, r13
    3c10:	6e 21       	and	r22, r14
    3c12:	7f 21       	and	r23, r15
    3c14:	45 2b       	or	r20, r21
    3c16:	46 2b       	or	r20, r22
    3c18:	47 2b       	or	r20, r23
    3c1a:	59 f0       	breq	.+22     	; 0x3c32 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3c1c:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3c1e:	16 86       	std	Z+14, r1	; 0x0e
    3c20:	17 86       	std	Z+15, r1	; 0x0f
    3c22:	10 8a       	std	Z+16, r1	; 0x10
    3c24:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3c26:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3c28:	c2 86       	std	Z+10, r12	; 0x0a
    3c2a:	d3 86       	std	Z+11, r13	; 0x0b
    3c2c:	e4 86       	std	Z+12, r14	; 0x0c
    3c2e:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    3c30:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3c32:	90 81       	ld	r25, Z
    3c34:	92 30       	cpi	r25, 0x02	; 2
    3c36:	a1 f4       	brne	.+40     	; 0x3c60 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3c38:	42 85       	ldd	r20, Z+10	; 0x0a
    3c3a:	53 85       	ldd	r21, Z+11	; 0x0b
    3c3c:	64 85       	ldd	r22, Z+12	; 0x0c
    3c3e:	75 85       	ldd	r23, Z+13	; 0x0d
    3c40:	4c 15       	cp	r20, r12
    3c42:	5d 05       	cpc	r21, r13
    3c44:	6e 05       	cpc	r22, r14
    3c46:	7f 05       	cpc	r23, r15
    3c48:	59 f4       	brne	.+22     	; 0x3c60 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3c4a:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3c4c:	16 86       	std	Z+14, r1	; 0x0e
    3c4e:	17 86       	std	Z+15, r1	; 0x0f
    3c50:	10 8a       	std	Z+16, r1	; 0x10
    3c52:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3c54:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3c56:	12 86       	std	Z+10, r1	; 0x0a
    3c58:	13 86       	std	Z+11, r1	; 0x0b
    3c5a:	14 86       	std	Z+12, r1	; 0x0c
    3c5c:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    3c5e:	c1 e0       	ldi	r28, 0x01	; 1
    3c60:	bb 96       	adiw	r30, 0x2b	; 43
    3c62:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3c64:	99 e0       	ldi	r25, 0x09	; 9
    3c66:	ea 3e       	cpi	r30, 0xEA	; 234
    3c68:	f9 07       	cpc	r31, r25
    3c6a:	49 f6       	brne	.-110    	; 0x3bfe <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3c6c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
	if(event_occured)
    3c70:	c1 11       	cpse	r28, r1
    3c72:	05 c0       	rjmp	.+10     	; 0x3c7e <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    3c74:	82 e0       	ldi	r24, 0x02	; 2
    3c76:	0e 94 64 19 	call	0x32c8	; 0x32c8 <_nrk_errno_set>
	return NRK_ERROR;
    3c7a:	8f ef       	ldi	r24, 0xFF	; 255
    3c7c:	01 c0       	rjmp	.+2      	; 0x3c80 <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    3c80:	cf 91       	pop	r28
    3c82:	ff 90       	pop	r15
    3c84:	ef 90       	pop	r14
    3c86:	df 90       	pop	r13
    3c88:	cf 90       	pop	r12
    3c8a:	08 95       	ret

00003c8c <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    3c8c:	0f 93       	push	r16
    3c8e:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    3c90:	e0 91 f9 09 	lds	r30, 0x09F9
    3c94:	f0 91 fa 09 	lds	r31, 0x09FA
    3c98:	05 85       	ldd	r16, Z+13	; 0x0d
    3c9a:	16 85       	ldd	r17, Z+14	; 0x0e
    3c9c:	27 85       	ldd	r18, Z+15	; 0x0f
    3c9e:	30 89       	ldd	r19, Z+16	; 0x10
    3ca0:	06 23       	and	r16, r22
    3ca2:	17 23       	and	r17, r23
    3ca4:	28 23       	and	r18, r24
    3ca6:	39 23       	and	r19, r25
    3ca8:	01 15       	cp	r16, r1
    3caa:	11 05       	cpc	r17, r1
    3cac:	21 05       	cpc	r18, r1
    3cae:	31 05       	cpc	r19, r1
    3cb0:	11 f1       	breq	.+68     	; 0x3cf6 <nrk_event_wait+0x6a>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    3cb6:	81 8b       	std	Z+17, r24	; 0x11
    3cb8:	92 8b       	std	Z+18, r25	; 0x12
    3cba:	a3 8b       	std	Z+19, r26	; 0x13
    3cbc:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3cbe:	21 e0       	ldi	r18, 0x01	; 1
    3cc0:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    3cc2:	00 90 e9 09 	lds	r0, 0x09E9
    3cc6:	04 c0       	rjmp	.+8      	; 0x3cd0 <nrk_event_wait+0x44>
    3cc8:	b6 95       	lsr	r27
    3cca:	a7 95       	ror	r26
    3ccc:	97 95       	ror	r25
    3cce:	87 95       	ror	r24
    3cd0:	0a 94       	dec	r0
    3cd2:	d2 f7       	brpl	.-12     	; 0x3cc8 <nrk_event_wait+0x3c>
    3cd4:	80 ff       	sbrs	r24, 0
    3cd6:	03 c0       	rjmp	.+6      	; 0x3cde <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    3cd8:	0e 94 fe 21 	call	0x43fc	; 0x43fc <nrk_wait_until_nw>
    3cdc:	04 c0       	rjmp	.+8      	; 0x3ce6 <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	0e 94 cf 21 	call	0x439e	; 0x439e <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    3ce6:	e0 91 f9 09 	lds	r30, 0x09F9
    3cea:	f0 91 fa 09 	lds	r31, 0x09FA
    3cee:	01 89       	ldd	r16, Z+17	; 0x11
    3cf0:	12 89       	ldd	r17, Z+18	; 0x12
    3cf2:	23 89       	ldd	r18, Z+19	; 0x13
    3cf4:	34 89       	ldd	r19, Z+20	; 0x14
}
    3cf6:	c9 01       	movw	r24, r18
    3cf8:	b8 01       	movw	r22, r16
    3cfa:	1f 91       	pop	r17
    3cfc:	0f 91       	pop	r16
    3cfe:	08 95       	ret

00003d00 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	08 95       	ret

00003d06 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    3d06:	21 e0       	ldi	r18, 0x01	; 1
    3d08:	85 5e       	subi	r24, 0xE5	; 229
    3d0a:	99 40       	sbci	r25, 0x09	; 9
    3d0c:	09 f4       	brne	.+2      	; 0x3d10 <nrk_get_resource_index+0xa>
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    3d10:	82 2f       	mov	r24, r18
    3d12:	81 95       	neg	r24
    3d14:	08 95       	ret

00003d16 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3d16:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3d1a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d1c:	11 f4       	brne	.+4      	; 0x3d22 <nrk_sem_query+0xc>
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	03 c0       	rjmp	.+6      	; 0x3d28 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3d22:	81 30       	cpi	r24, 0x01	; 1
    3d24:	29 f4       	brne	.+10     	; 0x3d30 <nrk_sem_query+0x1a>
    3d26:	82 e0       	ldi	r24, 0x02	; 2
    3d28:	0e 94 64 19 	call	0x32c8	; 0x32c8 <_nrk_errno_set>
    3d2c:	8f ef       	ldi	r24, 0xFF	; 255
    3d2e:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    3d30:	99 27       	eor	r25, r25
    3d32:	87 fd       	sbrc	r24, 7
    3d34:	90 95       	com	r25
    3d36:	fc 01       	movw	r30, r24
    3d38:	ee 0f       	add	r30, r30
    3d3a:	ff 1f       	adc	r31, r31
    3d3c:	8e 0f       	add	r24, r30
    3d3e:	9f 1f       	adc	r25, r31
    3d40:	fc 01       	movw	r30, r24
    3d42:	eb 51       	subi	r30, 0x1B	; 27
    3d44:	f6 4f       	sbci	r31, 0xF6	; 246
    3d46:	82 81       	ldd	r24, Z+2	; 0x02
}
    3d48:	08 95       	ret

00003d4a <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    3d4a:	ef 92       	push	r14
    3d4c:	ff 92       	push	r15
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	1f 92       	push	r1
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3d5c:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3d60:	8f 3f       	cpi	r24, 0xFF	; 255
    3d62:	11 f4       	brne	.+4      	; 0x3d68 <nrk_sem_pend+0x1e>
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	03 c0       	rjmp	.+6      	; 0x3d6e <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3d68:	81 30       	cpi	r24, 0x01	; 1
    3d6a:	29 f4       	brne	.+10     	; 0x3d76 <nrk_sem_pend+0x2c>
    3d6c:	82 e0       	ldi	r24, 0x02	; 2
    3d6e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <_nrk_errno_set>
    3d72:	8f ef       	ldi	r24, 0xFF	; 255
    3d74:	41 c0       	rjmp	.+130    	; 0x3df8 <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    3d76:	89 83       	std	Y+1, r24	; 0x01
    3d78:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	e8 2e       	mov	r14, r24
    3d80:	ff 24       	eor	r15, r15
    3d82:	e7 fc       	sbrc	r14, 7
    3d84:	f0 94       	com	r15
    3d86:	87 01       	movw	r16, r14
    3d88:	00 0f       	add	r16, r16
    3d8a:	11 1f       	adc	r17, r17
    3d8c:	f8 01       	movw	r30, r16
    3d8e:	ee 0d       	add	r30, r14
    3d90:	ff 1d       	adc	r31, r15
    3d92:	eb 51       	subi	r30, 0x1B	; 27
    3d94:	f6 4f       	sbci	r31, 0xF6	; 246
    3d96:	92 81       	ldd	r25, Z+2	; 0x02
    3d98:	91 11       	cpse	r25, r1
    3d9a:	16 c0       	rjmp	.+44     	; 0x3dc8 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    3d9c:	e0 91 f9 09 	lds	r30, 0x09F9
    3da0:	f0 91 fa 09 	lds	r31, 0x09FA
    3da4:	97 81       	ldd	r25, Z+7	; 0x07
    3da6:	92 60       	ori	r25, 0x02	; 2
    3da8:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    3daa:	99 27       	eor	r25, r25
    3dac:	87 fd       	sbrc	r24, 7
    3dae:	90 95       	com	r25
    3db0:	a9 2f       	mov	r26, r25
    3db2:	b9 2f       	mov	r27, r25
    3db4:	81 8b       	std	Z+17, r24	; 0x11
    3db6:	92 8b       	std	Z+18, r25	; 0x12
    3db8:	a3 8b       	std	Z+19, r26	; 0x13
    3dba:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    3dbc:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	0e 94 cf 21 	call	0x439e	; 0x439e <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3dc8:	0e 0d       	add	r16, r14
    3dca:	1f 1d       	adc	r17, r15
    3dcc:	d8 01       	movw	r26, r16
    3dce:	ab 51       	subi	r26, 0x1B	; 27
    3dd0:	b6 4f       	sbci	r27, 0xF6	; 246
    3dd2:	12 96       	adiw	r26, 0x02	; 2
    3dd4:	8c 91       	ld	r24, X
    3dd6:	12 97       	sbiw	r26, 0x02	; 2
    3dd8:	81 50       	subi	r24, 0x01	; 1
    3dda:	12 96       	adiw	r26, 0x02	; 2
    3ddc:	8c 93       	st	X, r24
    3dde:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    3de0:	e0 91 f9 09 	lds	r30, 0x09F9
    3de4:	f0 91 fa 09 	lds	r31, 0x09FA
    3de8:	11 96       	adiw	r26, 0x01	; 1
    3dea:	8c 91       	ld	r24, X
    3dec:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    3df2:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>

	return NRK_OK;
    3df6:	81 e0       	ldi	r24, 0x01	; 1
}
    3df8:	0f 90       	pop	r0
    3dfa:	df 91       	pop	r29
    3dfc:	cf 91       	pop	r28
    3dfe:	1f 91       	pop	r17
    3e00:	0f 91       	pop	r16
    3e02:	ff 90       	pop	r15
    3e04:	ef 90       	pop	r14
    3e06:	08 95       	ret

00003e08 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    3e08:	0f 93       	push	r16
    3e0a:	1f 93       	push	r17
    3e0c:	cf 93       	push	r28
    3e0e:	df 93       	push	r29
    3e10:	1f 92       	push	r1
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    3e16:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3e1a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e1c:	11 f4       	brne	.+4      	; 0x3e22 <nrk_sem_post+0x1a>
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	03 c0       	rjmp	.+6      	; 0x3e28 <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3e22:	81 30       	cpi	r24, 0x01	; 1
    3e24:	29 f4       	brne	.+10     	; 0x3e30 <nrk_sem_post+0x28>
    3e26:	82 e0       	ldi	r24, 0x02	; 2
    3e28:	0e 94 64 19 	call	0x32c8	; 0x32c8 <_nrk_errno_set>
    3e2c:	8f ef       	ldi	r24, 0xFF	; 255
    3e2e:	44 c0       	rjmp	.+136    	; 0x3eb8 <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    3e30:	48 2f       	mov	r20, r24
    3e32:	55 27       	eor	r21, r21
    3e34:	47 fd       	sbrc	r20, 7
    3e36:	50 95       	com	r21
    3e38:	9a 01       	movw	r18, r20
    3e3a:	22 0f       	add	r18, r18
    3e3c:	33 1f       	adc	r19, r19
    3e3e:	24 0f       	add	r18, r20
    3e40:	35 1f       	adc	r19, r21
    3e42:	89 01       	movw	r16, r18
    3e44:	0b 51       	subi	r16, 0x1B	; 27
    3e46:	16 4f       	sbci	r17, 0xF6	; 246
    3e48:	f8 01       	movw	r30, r16
    3e4a:	22 81       	ldd	r18, Z+2	; 0x02
    3e4c:	90 81       	ld	r25, Z
    3e4e:	29 17       	cp	r18, r25
    3e50:	94 f5       	brge	.+100    	; 0x3eb6 <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    3e52:	89 83       	std	Y+1, r24	; 0x01
    3e54:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>

		nrk_sem_list[id].value++;
    3e58:	f8 01       	movw	r30, r16
    3e5a:	92 81       	ldd	r25, Z+2	; 0x02
    3e5c:	9f 5f       	subi	r25, 0xFF	; 255
    3e5e:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    3e60:	e0 91 f9 09 	lds	r30, 0x09F9
    3e64:	f0 91 fa 09 	lds	r31, 0x09FA
    3e68:	14 82       	std	Z+4, r1	; 0x04
    3e6a:	e3 e1       	ldi	r30, 0x13	; 19
    3e6c:	f9 e0       	ldi	r31, 0x09	; 9

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	99 27       	eor	r25, r25
    3e72:	87 fd       	sbrc	r24, 7
    3e74:	90 95       	com	r25
    3e76:	a9 2f       	mov	r26, r25
    3e78:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3e7a:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3e7c:	30 81       	ld	r19, Z
    3e7e:	32 30       	cpi	r19, 0x02	; 2
    3e80:	99 f4       	brne	.+38     	; 0x3ea8 <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3e82:	42 85       	ldd	r20, Z+10	; 0x0a
    3e84:	53 85       	ldd	r21, Z+11	; 0x0b
    3e86:	64 85       	ldd	r22, Z+12	; 0x0c
    3e88:	75 85       	ldd	r23, Z+13	; 0x0d
    3e8a:	48 17       	cp	r20, r24
    3e8c:	59 07       	cpc	r21, r25
    3e8e:	6a 07       	cpc	r22, r26
    3e90:	7b 07       	cpc	r23, r27
    3e92:	51 f4       	brne	.+20     	; 0x3ea8 <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3e94:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3e96:	16 86       	std	Z+14, r1	; 0x0e
    3e98:	17 86       	std	Z+15, r1	; 0x0f
    3e9a:	10 8a       	std	Z+16, r1	; 0x10
    3e9c:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3e9e:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3ea0:	12 86       	std	Z+10, r1	; 0x0a
    3ea2:	13 86       	std	Z+11, r1	; 0x0b
    3ea4:	14 86       	std	Z+12, r1	; 0x0c
    3ea6:	15 86       	std	Z+13, r1	; 0x0d
    3ea8:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3eaa:	39 e0       	ldi	r19, 0x09	; 9
    3eac:	ea 3e       	cpi	r30, 0xEA	; 234
    3eae:	f3 07       	cpc	r31, r19
    3eb0:	29 f7       	brne	.-54     	; 0x3e7c <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    3eb2:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
	}
		
return NRK_OK;
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
}
    3eb8:	0f 90       	pop	r0
    3eba:	df 91       	pop	r29
    3ebc:	cf 91       	pop	r28
    3ebe:	1f 91       	pop	r17
    3ec0:	0f 91       	pop	r16
    3ec2:	08 95       	ret

00003ec4 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    3ec4:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3ec8:	8f 3f       	cpi	r24, 0xFF	; 255
    3eca:	11 f4       	brne	.+4      	; 0x3ed0 <nrk_sem_delete+0xc>
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	03 c0       	rjmp	.+6      	; 0x3ed6 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3ed0:	81 30       	cpi	r24, 0x01	; 1
    3ed2:	29 f4       	brne	.+10     	; 0x3ede <nrk_sem_delete+0x1a>
    3ed4:	82 e0       	ldi	r24, 0x02	; 2
    3ed6:	0e 94 64 19 	call	0x32c8	; 0x32c8 <_nrk_errno_set>
    3eda:	8f ef       	ldi	r24, 0xFF	; 255
    3edc:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3ede:	99 27       	eor	r25, r25
    3ee0:	87 fd       	sbrc	r24, 7
    3ee2:	90 95       	com	r25
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	ee 0f       	add	r30, r30
    3ee8:	ff 1f       	adc	r31, r31
    3eea:	8e 0f       	add	r24, r30
    3eec:	9f 1f       	adc	r25, r31
    3eee:	fc 01       	movw	r30, r24
    3ef0:	eb 51       	subi	r30, 0x1B	; 27
    3ef2:	f6 4f       	sbci	r31, 0xF6	; 246
    3ef4:	8f ef       	ldi	r24, 0xFF	; 255
    3ef6:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3ef8:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    3efa:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    3efc:	80 91 f8 09 	lds	r24, 0x09F8
    3f00:	81 50       	subi	r24, 0x01	; 1
    3f02:	80 93 f8 09 	sts	0x09F8, r24
return NRK_OK;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
}
    3f08:	08 95       	ret

00003f0a <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3f0a:	e0 91 ee 09 	lds	r30, 0x09EE
    3f0e:	f0 91 ef 09 	lds	r31, 0x09EF
}
    3f12:	80 81       	ld	r24, Z
    3f14:	08 95       	ret

00003f16 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    3f16:	e0 91 ee 09 	lds	r30, 0x09EE
    3f1a:	f0 91 ef 09 	lds	r31, 0x09EF
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3f1e:	30 97       	sbiw	r30, 0x00	; 0
    3f20:	21 f0       	breq	.+8      	; 0x3f2a <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3f22:	03 80       	ldd	r0, Z+3	; 0x03
    3f24:	f4 81       	ldd	r31, Z+4	; 0x04
    3f26:	e0 2d       	mov	r30, r0
    3f28:	fa cf       	rjmp	.-12     	; 0x3f1e <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    3f2a:	08 95       	ret

00003f2c <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3f2c:	af 92       	push	r10
    3f2e:	bf 92       	push	r11
    3f30:	cf 92       	push	r12
    3f32:	df 92       	push	r13
    3f34:	ef 92       	push	r14
    3f36:	ff 92       	push	r15
    3f38:	0f 93       	push	r16
    3f3a:	1f 93       	push	r17
    3f3c:	cf 93       	push	r28
    3f3e:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3f40:	e0 91 0a 09 	lds	r30, 0x090A
    3f44:	f0 91 0b 09 	lds	r31, 0x090B
    3f48:	30 97       	sbiw	r30, 0x00	; 0
    3f4a:	09 f4       	brne	.+2      	; 0x3f4e <nrk_add_to_readyQ+0x22>
    3f4c:	94 c0       	rjmp	.+296    	; 0x4076 <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    3f4e:	00 91 ee 09 	lds	r16, 0x09EE
    3f52:	10 91 ef 09 	lds	r17, 0x09EF
    CurNode = _free_node;

    if (_head_node != NULL)
    3f56:	01 15       	cp	r16, r1
    3f58:	11 05       	cpc	r17, r1
    3f5a:	09 f4       	brne	.+2      	; 0x3f5e <nrk_add_to_readyQ+0x32>
    3f5c:	4c c0       	rjmp	.+152    	; 0x3ff6 <nrk_add_to_readyQ+0xca>
    3f5e:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3f60:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    3f62:	58 2f       	mov	r21, r24
    3f64:	54 03       	mulsu	r21, r20
    3f66:	90 01       	movw	r18, r0
    3f68:	11 24       	eor	r1, r1
    3f6a:	24 5f       	subi	r18, 0xF4	; 244
    3f6c:	36 4f       	sbci	r19, 0xF6	; 246
    3f6e:	79 01       	movw	r14, r18
    3f70:	9a e0       	ldi	r25, 0x0A	; 10
    3f72:	e9 0e       	add	r14, r25
    3f74:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3f76:	69 01       	movw	r12, r18
    3f78:	c4 e0       	ldi	r28, 0x04	; 4
    3f7a:	cc 0e       	add	r12, r28
    3f7c:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    3f7e:	59 01       	movw	r10, r18
    3f80:	db e0       	ldi	r29, 0x0B	; 11
    3f82:	ad 0e       	add	r10, r29
    3f84:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3f86:	2c 91       	ld	r18, X
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	42 9f       	mul	r20, r18
    3f8c:	b0 01       	movw	r22, r0
    3f8e:	43 9f       	mul	r20, r19
    3f90:	70 0d       	add	r23, r0
    3f92:	11 24       	eor	r1, r1
    3f94:	64 5f       	subi	r22, 0xF4	; 244
    3f96:	76 4f       	sbci	r23, 0xF6	; 246
    3f98:	eb 01       	movw	r28, r22
    3f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9c:	99 23       	and	r25, r25
    3f9e:	29 f0       	breq	.+10     	; 0x3faa <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3fa0:	5b 85       	ldd	r21, Y+11	; 0x0b
    3fa2:	e7 01       	movw	r28, r14
    3fa4:	98 81       	ld	r25, Y
    3fa6:	59 17       	cp	r21, r25
    3fa8:	40 f1       	brcs	.+80     	; 0x3ffa <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3faa:	e6 01       	movw	r28, r12
    3fac:	98 81       	ld	r25, Y
    3fae:	99 23       	and	r25, r25
    3fb0:	69 f0       	breq	.+26     	; 0x3fcc <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3fb2:	42 9f       	mul	r20, r18
    3fb4:	b0 01       	movw	r22, r0
    3fb6:	43 9f       	mul	r20, r19
    3fb8:	70 0d       	add	r23, r0
    3fba:	11 24       	eor	r1, r1
    3fbc:	64 5f       	subi	r22, 0xF4	; 244
    3fbe:	76 4f       	sbci	r23, 0xF6	; 246
    3fc0:	eb 01       	movw	r28, r22
    3fc2:	5a 85       	ldd	r21, Y+10	; 0x0a
    3fc4:	e5 01       	movw	r28, r10
    3fc6:	98 81       	ld	r25, Y
    3fc8:	59 17       	cp	r21, r25
    3fca:	b8 f0       	brcs	.+46     	; 0x3ffa <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3fcc:	42 9f       	mul	r20, r18
    3fce:	b0 01       	movw	r22, r0
    3fd0:	43 9f       	mul	r20, r19
    3fd2:	70 0d       	add	r23, r0
    3fd4:	11 24       	eor	r1, r1
    3fd6:	9b 01       	movw	r18, r22
    3fd8:	24 5f       	subi	r18, 0xF4	; 244
    3fda:	36 4f       	sbci	r19, 0xF6	; 246
    3fdc:	e9 01       	movw	r28, r18
    3fde:	2a 85       	ldd	r18, Y+10	; 0x0a
    3fe0:	e7 01       	movw	r28, r14
    3fe2:	98 81       	ld	r25, Y
    3fe4:	29 17       	cp	r18, r25
    3fe6:	48 f0       	brcs	.+18     	; 0x3ffa <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3fe8:	13 96       	adiw	r26, 0x03	; 3
    3fea:	0d 90       	ld	r0, X+
    3fec:	bc 91       	ld	r27, X
    3fee:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3ff0:	10 97       	sbiw	r26, 0x00	; 0
    3ff2:	49 f6       	brne	.-110    	; 0x3f86 <nrk_add_to_readyQ+0x5a>
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <nrk_add_to_readyQ+0xce>
    3ff6:	a0 e0       	ldi	r26, 0x00	; 0
    3ff8:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    3ffa:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3ffc:	c3 81       	ldd	r28, Z+3	; 0x03
    3ffe:	d4 81       	ldd	r29, Z+4	; 0x04
    4000:	d0 93 0b 09 	sts	0x090B, r29
    4004:	c0 93 0a 09 	sts	0x090A, r28

    if (NextNode == _head_node)
    4008:	a0 17       	cp	r26, r16
    400a:	b1 07       	cpc	r27, r17
    400c:	b1 f4       	brne	.+44     	; 0x403a <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    400e:	10 97       	sbiw	r26, 0x00	; 0
    4010:	49 f0       	breq	.+18     	; 0x4024 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    4012:	b4 83       	std	Z+4, r27	; 0x04
    4014:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    4016:	12 82       	std	Z+2, r1	; 0x02
    4018:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    401a:	12 96       	adiw	r26, 0x02	; 2
    401c:	fc 93       	st	X, r31
    401e:	ee 93       	st	-X, r30
    4020:	11 97       	sbiw	r26, 0x01	; 1
    4022:	06 c0       	rjmp	.+12     	; 0x4030 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    4024:	14 82       	std	Z+4, r1	; 0x04
    4026:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    4028:	12 82       	std	Z+2, r1	; 0x02
    402a:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    402c:	fa 83       	std	Y+2, r31	; 0x02
    402e:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    4030:	f0 93 ef 09 	sts	0x09EF, r31
    4034:	e0 93 ee 09 	sts	0x09EE, r30
    4038:	1e c0       	rjmp	.+60     	; 0x4076 <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    403a:	ac 17       	cp	r26, r28
    403c:	bd 07       	cpc	r27, r29
    403e:	79 f0       	breq	.+30     	; 0x405e <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    4040:	11 96       	adiw	r26, 0x01	; 1
    4042:	8d 91       	ld	r24, X+
    4044:	9c 91       	ld	r25, X
    4046:	12 97       	sbiw	r26, 0x02	; 2
    4048:	92 83       	std	Z+2, r25	; 0x02
    404a:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    404c:	b4 83       	std	Z+4, r27	; 0x04
    404e:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    4050:	11 96       	adiw	r26, 0x01	; 1
    4052:	cd 91       	ld	r28, X+
    4054:	dc 91       	ld	r29, X
    4056:	12 97       	sbiw	r26, 0x02	; 2
    4058:	fc 83       	std	Y+4, r31	; 0x04
    405a:	eb 83       	std	Y+3, r30	; 0x03
    405c:	08 c0       	rjmp	.+16     	; 0x406e <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    405e:	14 82       	std	Z+4, r1	; 0x04
    4060:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    4062:	11 96       	adiw	r26, 0x01	; 1
    4064:	8d 91       	ld	r24, X+
    4066:	9c 91       	ld	r25, X
    4068:	12 97       	sbiw	r26, 0x02	; 2
    406a:	92 83       	std	Z+2, r25	; 0x02
    406c:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    406e:	12 96       	adiw	r26, 0x02	; 2
    4070:	fc 93       	st	X, r31
    4072:	ee 93       	st	-X, r30
    4074:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    4076:	df 91       	pop	r29
    4078:	cf 91       	pop	r28
    407a:	1f 91       	pop	r17
    407c:	0f 91       	pop	r16
    407e:	ff 90       	pop	r15
    4080:	ef 90       	pop	r14
    4082:	df 90       	pop	r13
    4084:	cf 90       	pop	r12
    4086:	bf 90       	pop	r11
    4088:	af 90       	pop	r10
    408a:	08 95       	ret

0000408c <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    408c:	cf 93       	push	r28
    408e:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    4090:	e0 91 ee 09 	lds	r30, 0x09EE
    4094:	f0 91 ef 09 	lds	r31, 0x09EF
    4098:	30 97       	sbiw	r30, 0x00	; 0
    409a:	09 f4       	brne	.+2      	; 0x409e <nrk_rem_from_readyQ+0x12>
    409c:	44 c0       	rjmp	.+136    	; 0x4126 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    409e:	99 27       	eor	r25, r25
    40a0:	87 fd       	sbrc	r24, 7
    40a2:	90 95       	com	r25
    40a4:	20 81       	ld	r18, Z
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	28 17       	cp	r18, r24
    40aa:	39 07       	cpc	r19, r25
    40ac:	81 f4       	brne	.+32     	; 0x40ce <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    40ae:	a3 81       	ldd	r26, Z+3	; 0x03
    40b0:	b4 81       	ldd	r27, Z+4	; 0x04
    40b2:	b0 93 ef 09 	sts	0x09EF, r27
    40b6:	a0 93 ee 09 	sts	0x09EE, r26
        _head_node->Prev = NULL;
    40ba:	12 96       	adiw	r26, 0x02	; 2
    40bc:	1c 92       	st	X, r1
    40be:	1e 92       	st	-X, r1
    40c0:	11 97       	sbiw	r26, 0x01	; 1
    40c2:	18 c0       	rjmp	.+48     	; 0x40f4 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    40c4:	03 80       	ldd	r0, Z+3	; 0x03
    40c6:	f4 81       	ldd	r31, Z+4	; 0x04
    40c8:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    40ca:	30 97       	sbiw	r30, 0x00	; 0
    40cc:	61 f1       	breq	.+88     	; 0x4126 <nrk_rem_from_readyQ+0x9a>
    40ce:	20 81       	ld	r18, Z
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	28 17       	cp	r18, r24
    40d4:	39 07       	cpc	r19, r25
    40d6:	b1 f7       	brne	.-20     	; 0x40c4 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    40d8:	c1 81       	ldd	r28, Z+1	; 0x01
    40da:	d2 81       	ldd	r29, Z+2	; 0x02
    40dc:	83 81       	ldd	r24, Z+3	; 0x03
    40de:	94 81       	ldd	r25, Z+4	; 0x04
    40e0:	9c 83       	std	Y+4, r25	; 0x04
    40e2:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    40e4:	a3 81       	ldd	r26, Z+3	; 0x03
    40e6:	b4 81       	ldd	r27, Z+4	; 0x04
    40e8:	10 97       	sbiw	r26, 0x00	; 0
    40ea:	21 f0       	breq	.+8      	; 0x40f4 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    40ec:	12 96       	adiw	r26, 0x02	; 2
    40ee:	dc 93       	st	X, r29
    40f0:	ce 93       	st	-X, r28
    40f2:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    40f4:	a0 91 0a 09 	lds	r26, 0x090A
    40f8:	b0 91 0b 09 	lds	r27, 0x090B
    40fc:	10 97       	sbiw	r26, 0x00	; 0
    40fe:	39 f4       	brne	.+14     	; 0x410e <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    4100:	f0 93 0b 09 	sts	0x090B, r31
    4104:	e0 93 0a 09 	sts	0x090A, r30
        _free_node->Next = NULL;
    4108:	14 82       	std	Z+4, r1	; 0x04
    410a:	13 82       	std	Z+3, r1	; 0x03
    410c:	0a c0       	rjmp	.+20     	; 0x4122 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    410e:	b4 83       	std	Z+4, r27	; 0x04
    4110:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    4112:	12 96       	adiw	r26, 0x02	; 2
    4114:	fc 93       	st	X, r31
    4116:	ee 93       	st	-X, r30
    4118:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    411a:	f0 93 0b 09 	sts	0x090B, r31
    411e:	e0 93 0a 09 	sts	0x090A, r30
    }
    _free_node->Prev = NULL;
    4122:	12 82       	std	Z+2, r1	; 0x02
    4124:	11 82       	std	Z+1, r1	; 0x01
}
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    412c:	ef 92       	push	r14
    412e:	ff 92       	push	r15
    4130:	0f 93       	push	r16
    4132:	1f 93       	push	r17
    4134:	cf 93       	push	r28
    4136:	df 93       	push	r29
    4138:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    413a:	4b 81       	ldd	r20, Y+3	; 0x03
    413c:	5c 81       	ldd	r21, Y+4	; 0x04
    413e:	69 81       	ldd	r22, Y+1	; 0x01
    4140:	7a 81       	ldd	r23, Y+2	; 0x02
    4142:	8d 81       	ldd	r24, Y+5	; 0x05
    4144:	9e 81       	ldd	r25, Y+6	; 0x06
    4146:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    414a:	2f 81       	ldd	r18, Y+7	; 0x07
    414c:	22 23       	and	r18, r18
    414e:	71 f0       	breq	.+28     	; 0x416c <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    4150:	4b 81       	ldd	r20, Y+3	; 0x03
    4152:	5c 81       	ldd	r21, Y+4	; 0x04
    4154:	e1 2c       	mov	r14, r1
    4156:	f1 2c       	mov	r15, r1
    4158:	00 e0       	ldi	r16, 0x00	; 0
    415a:	10 e0       	ldi	r17, 0x00	; 0
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	bc 01       	movw	r22, r24
    4162:	ce 01       	movw	r24, r28
    4164:	0e 94 65 15 	call	0x2aca	; 0x2aca <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    4168:	1f 82       	std	Y+7, r1	; 0x07
    416a:	0c c0       	rjmp	.+24     	; 0x4184 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    416c:	e8 81       	ld	r30, Y
    416e:	2b e2       	ldi	r18, 0x2B	; 43
    4170:	e2 02       	muls	r30, r18
    4172:	f0 01       	movw	r30, r0
    4174:	11 24       	eor	r1, r1
    4176:	e4 5f       	subi	r30, 0xF4	; 244
    4178:	f6 4f       	sbci	r31, 0xF6	; 246
    417a:	21 85       	ldd	r18, Z+9	; 0x09
    417c:	23 30       	cpi	r18, 0x03	; 3
    417e:	b9 f4       	brne	.+46     	; 0x41ae <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    4180:	91 83       	std	Z+1, r25	; 0x01
    4182:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    4184:	e8 81       	ld	r30, Y
    4186:	8b e2       	ldi	r24, 0x2B	; 43
    4188:	e8 02       	muls	r30, r24
    418a:	f0 01       	movw	r30, r0
    418c:	11 24       	eor	r1, r1
    418e:	e4 5f       	subi	r30, 0xF4	; 244
    4190:	f6 4f       	sbci	r31, 0xF6	; 246
    4192:	85 89       	ldd	r24, Z+21	; 0x15
    4194:	96 89       	ldd	r25, Z+22	; 0x16
    4196:	a7 89       	ldd	r26, Z+23	; 0x17
    4198:	b0 8d       	ldd	r27, Z+24	; 0x18
    419a:	89 2b       	or	r24, r25
    419c:	8a 2b       	or	r24, r26
    419e:	8b 2b       	or	r24, r27
    41a0:	41 f4       	brne	.+16     	; 0x41b2 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    41a6:	88 81       	ld	r24, Y
    41a8:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <nrk_add_to_readyQ>
    41ac:	02 c0       	rjmp	.+4      	; 0x41b2 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    41ae:	8f ef       	ldi	r24, 0xFF	; 255
    41b0:	01 c0       	rjmp	.+2      	; 0x41b4 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    41b2:	81 e0       	ldi	r24, 0x01	; 1
}
    41b4:	df 91       	pop	r29
    41b6:	cf 91       	pop	r28
    41b8:	1f 91       	pop	r17
    41ba:	0f 91       	pop	r16
    41bc:	ff 90       	pop	r15
    41be:	ef 90       	pop	r14
    41c0:	08 95       	ret

000041c2 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    41c2:	1f 93       	push	r17
    41c4:	cf 93       	push	r28
    41c6:	df 93       	push	r29
    41c8:	cd b7       	in	r28, 0x3d	; 61
    41ca:	de b7       	in	r29, 0x3e	; 62
    41cc:	28 97       	sbiw	r28, 0x08	; 8
    41ce:	0f b6       	in	r0, 0x3f	; 63
    41d0:	f8 94       	cli
    41d2:	de bf       	out	0x3e, r29	; 62
    41d4:	0f be       	out	0x3f, r0	; 63
    41d6:	cd bf       	out	0x3d, r28	; 61
    41d8:	29 83       	std	Y+1, r18	; 0x01
    41da:	3a 83       	std	Y+2, r19	; 0x02
    41dc:	4b 83       	std	Y+3, r20	; 0x03
    41de:	5c 83       	std	Y+4, r21	; 0x04
    41e0:	6d 83       	std	Y+5, r22	; 0x05
    41e2:	7e 83       	std	Y+6, r23	; 0x06
    41e4:	8f 83       	std	Y+7, r24	; 0x07
    41e6:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    41e8:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    41ec:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_os_timer_get>
    41f0:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    41f2:	ce 01       	movw	r24, r28
    41f4:	01 96       	adiw	r24, 0x01	; 1
    41f6:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    41fa:	63 30       	cpi	r22, 0x03	; 3
    41fc:	71 05       	cpc	r23, r1
    41fe:	98 f0       	brcs	.+38     	; 0x4226 <__stack+0x27>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    4200:	e0 91 f9 09 	lds	r30, 0x09F9
    4204:	f0 91 fa 09 	lds	r31, 0x09FA
    4208:	21 2f       	mov	r18, r17
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	62 0f       	add	r22, r18
    420e:	73 1f       	adc	r23, r19
    4210:	cb 01       	movw	r24, r22
    4212:	a0 e0       	ldi	r26, 0x00	; 0
    4214:	b0 e0       	ldi	r27, 0x00	; 0
    4216:	85 8b       	std	Z+21, r24	; 0x15
    4218:	96 8b       	std	Z+22, r25	; 0x16
    421a:	a7 8b       	std	Z+23, r26	; 0x17
    421c:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    421e:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>

    return NRK_OK;
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	01 c0       	rjmp	.+2      	; 0x4228 <__stack+0x29>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    4226:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    4228:	28 96       	adiw	r28, 0x08	; 8
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	f8 94       	cli
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	cd bf       	out	0x3d, r28	; 61
    4234:	df 91       	pop	r29
    4236:	cf 91       	pop	r28
    4238:	1f 91       	pop	r17
    423a:	08 95       	ret

0000423c <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    423c:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    4240:	e0 91 f9 09 	lds	r30, 0x09F9
    4244:	f0 91 fa 09 	lds	r31, 0x09FA
    4248:	85 81       	ldd	r24, Z+5	; 0x05
    424a:	81 11       	cpse	r24, r1
    424c:	f7 cf       	rjmp	.-18     	; 0x423c <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    424e:	08 95       	ret

00004250 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    4250:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    4252:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    4256:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    425a:	e0 91 f9 09 	lds	r30, 0x09F9
    425e:	f0 91 fa 09 	lds	r31, 0x09FA
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	92 a7       	std	Z+42, r25	; 0x2a
    4268:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    426a:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    426c:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_os_timer_get>
    4270:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    4272:	88 3f       	cpi	r24, 0xF8	; 248
    4274:	80 f4       	brcc	.+32     	; 0x4296 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4276:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <_nrk_get_next_wakeup>
    427a:	2c 2f       	mov	r18, r28
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	2f 5f       	subi	r18, 0xFF	; 255
    4280:	3f 4f       	sbci	r19, 0xFF	; 255
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	28 17       	cp	r18, r24
    4286:	39 07       	cpc	r19, r25
    4288:	34 f4       	brge	.+12     	; 0x4296 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    428a:	82 e0       	ldi	r24, 0x02	; 2
    428c:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    428e:	80 93 b6 07 	sts	0x07B6, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    4292:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    4296:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    429a:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	cf 91       	pop	r28
    42a2:	08 95       	ret

000042a4 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    42a4:	e0 91 f9 09 	lds	r30, 0x09F9
    42a8:	f0 91 fa 09 	lds	r31, 0x09FA
    42ac:	80 85       	ldd	r24, Z+8	; 0x08
    42ae:	0e 94 46 20 	call	0x408c	; 0x408c <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    42b2:	e0 91 f9 09 	lds	r30, 0x09F9
    42b6:	f0 91 fa 09 	lds	r31, 0x09FA
    42ba:	84 e0       	ldi	r24, 0x04	; 4
    42bc:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    42be:	0e 94 28 21 	call	0x4250	; 0x4250 <nrk_wait_until_next_period>
    return NRK_OK;
}
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	08 95       	ret

000042c6 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    42c6:	cf 93       	push	r28
    42c8:	df 93       	push	r29
    42ca:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    42cc:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <nrk_stack_check>

    if (p == 0)
    42d0:	20 97       	sbiw	r28, 0x00	; 0
    42d2:	11 f4       	brne	.+4      	; 0x42d8 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    42d4:	c1 e0       	ldi	r28, 0x01	; 1
    42d6:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    42d8:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    42dc:	e0 91 f9 09 	lds	r30, 0x09F9
    42e0:	f0 91 fa 09 	lds	r31, 0x09FA
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    42e8:	d2 a7       	std	Z+42, r29	; 0x2a
    42ea:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    42ec:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_os_timer_get>
    42f0:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    42f2:	88 3f       	cpi	r24, 0xF8	; 248
    42f4:	80 f4       	brcc	.+32     	; 0x4316 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    42f6:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <_nrk_get_next_wakeup>
    42fa:	2c 2f       	mov	r18, r28
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	2f 5f       	subi	r18, 0xFF	; 255
    4300:	3f 4f       	sbci	r19, 0xFF	; 255
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	28 17       	cp	r18, r24
    4306:	39 07       	cpc	r19, r25
    4308:	34 f4       	brge	.+12     	; 0x4316 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    430a:	82 e0       	ldi	r24, 0x02	; 2
    430c:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    430e:	80 93 b6 07 	sts	0x07B6, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    4312:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    4316:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    431a:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	df 91       	pop	r29
    4322:	cf 91       	pop	r28
    4324:	08 95       	ret

00004326 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    4326:	ef 92       	push	r14
    4328:	ff 92       	push	r15
    432a:	0f 93       	push	r16
    432c:	1f 93       	push	r17
    432e:	cf 93       	push	r28
    4330:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    4332:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4336:	e0 91 f9 09 	lds	r30, 0x09F9
    433a:	f0 91 fa 09 	lds	r31, 0x09FA
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    4342:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_os_timer_get>
    4346:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    4348:	e0 91 f9 09 	lds	r30, 0x09F9
    434c:	f0 91 fa 09 	lds	r31, 0x09FA
    4350:	e8 2e       	mov	r14, r24
    4352:	f1 2c       	mov	r15, r1
    4354:	c7 01       	movw	r24, r14
    4356:	80 0f       	add	r24, r16
    4358:	91 1f       	adc	r25, r17
    435a:	a0 e0       	ldi	r26, 0x00	; 0
    435c:	b0 e0       	ldi	r27, 0x00	; 0
    435e:	85 8b       	std	Z+21, r24	; 0x15
    4360:	96 8b       	std	Z+22, r25	; 0x16
    4362:	a7 8b       	std	Z+23, r26	; 0x17
    4364:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4366:	c8 3f       	cpi	r28, 0xF8	; 248
    4368:	78 f4       	brcc	.+30     	; 0x4388 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    436a:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <_nrk_get_next_wakeup>
    436e:	9f ef       	ldi	r25, 0xFF	; 255
    4370:	e9 1a       	sub	r14, r25
    4372:	f9 0a       	sbc	r15, r25
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	e8 16       	cp	r14, r24
    4378:	f9 06       	cpc	r15, r25
    437a:	34 f4       	brge	.+12     	; 0x4388 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    437c:	82 e0       	ldi	r24, 0x02	; 2
    437e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4380:	80 93 b6 07 	sts	0x07B6, r24
            _nrk_set_next_wakeup (timer);
    4384:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4388:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    438c:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4390:	81 e0       	ldi	r24, 0x01	; 1
    4392:	cf 91       	pop	r28
    4394:	1f 91       	pop	r17
    4396:	0f 91       	pop	r16
    4398:	ff 90       	pop	r15
    439a:	ef 90       	pop	r14
    439c:	08 95       	ret

0000439e <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    439e:	cf 93       	push	r28
    43a0:	df 93       	push	r29
    43a2:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    43a4:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    43a8:	e0 91 f9 09 	lds	r30, 0x09F9
    43ac:	f0 91 fa 09 	lds	r31, 0x09FA
    43b0:	21 e0       	ldi	r18, 0x01	; 1
    43b2:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    43b4:	ce 01       	movw	r24, r28
    43b6:	a0 e0       	ldi	r26, 0x00	; 0
    43b8:	b0 e0       	ldi	r27, 0x00	; 0
    43ba:	85 8b       	std	Z+21, r24	; 0x15
    43bc:	96 8b       	std	Z+22, r25	; 0x16
    43be:	a7 8b       	std	Z+23, r26	; 0x17
    43c0:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    43c2:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_os_timer_get>
    43c6:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    43c8:	88 3f       	cpi	r24, 0xF8	; 248
    43ca:	80 f4       	brcc	.+32     	; 0x43ec <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    43cc:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <_nrk_get_next_wakeup>
    43d0:	2c 2f       	mov	r18, r28
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	2f 5f       	subi	r18, 0xFF	; 255
    43d6:	3f 4f       	sbci	r19, 0xFF	; 255
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	28 17       	cp	r18, r24
    43dc:	39 07       	cpc	r19, r25
    43de:	34 f4       	brge	.+12     	; 0x43ec <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    43e0:	82 e0       	ldi	r24, 0x02	; 2
    43e2:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    43e4:	80 93 b6 07 	sts	0x07B6, r24
            _nrk_set_next_wakeup (timer);
    43e8:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    43ec:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    43f0:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	df 91       	pop	r29
    43f8:	cf 91       	pop	r28
    43fa:	08 95       	ret

000043fc <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    43fc:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    43fe:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4402:	e0 91 f9 09 	lds	r30, 0x09F9
    4406:	f0 91 fa 09 	lds	r31, 0x09FA
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    440e:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    4410:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_os_timer_get>
    4414:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4416:	88 3f       	cpi	r24, 0xF8	; 248
    4418:	80 f4       	brcc	.+32     	; 0x443a <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    441a:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <_nrk_get_next_wakeup>
    441e:	2c 2f       	mov	r18, r28
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	2f 5f       	subi	r18, 0xFF	; 255
    4424:	3f 4f       	sbci	r19, 0xFF	; 255
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	28 17       	cp	r18, r24
    442a:	39 07       	cpc	r19, r25
    442c:	34 f4       	brge	.+12     	; 0x443a <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    442e:	82 e0       	ldi	r24, 0x02	; 2
    4430:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4432:	80 93 b6 07 	sts	0x07B6, r24
            _nrk_set_next_wakeup (timer);
    4436:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    443a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    443e:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4442:	81 e0       	ldi	r24, 0x01	; 1
    4444:	cf 91       	pop	r28
    4446:	08 95       	ret

00004448 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    4448:	1f 93       	push	r17
    444a:	cf 93       	push	r28
    444c:	df 93       	push	r29
    444e:	cd b7       	in	r28, 0x3d	; 61
    4450:	de b7       	in	r29, 0x3e	; 62
    4452:	28 97       	sbiw	r28, 0x08	; 8
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	cd bf       	out	0x3d, r28	; 61
    445e:	29 83       	std	Y+1, r18	; 0x01
    4460:	3a 83       	std	Y+2, r19	; 0x02
    4462:	4b 83       	std	Y+3, r20	; 0x03
    4464:	5c 83       	std	Y+4, r21	; 0x04
    4466:	6d 83       	std	Y+5, r22	; 0x05
    4468:	7e 83       	std	Y+6, r23	; 0x06
    446a:	8f 83       	std	Y+7, r24	; 0x07
    446c:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    446e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <nrk_stack_check>

    nrk_int_disable ();
    4472:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4476:	e0 91 f9 09 	lds	r30, 0x09F9
    447a:	f0 91 fa 09 	lds	r31, 0x09FA
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	92 a7       	std	Z+42, r25	; 0x2a
    4488:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    448a:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_os_timer_get>
    448e:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    4490:	ce 01       	movw	r24, r28
    4492:	01 96       	adiw	r24, 0x01	; 1
    4494:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    4498:	e0 91 f9 09 	lds	r30, 0x09F9
    449c:	f0 91 fa 09 	lds	r31, 0x09FA
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	81 0f       	add	r24, r17
    44a6:	91 1d       	adc	r25, r1
    44a8:	a1 1d       	adc	r26, r1
    44aa:	b1 1d       	adc	r27, r1
    44ac:	85 8b       	std	Z+21, r24	; 0x15
    44ae:	96 8b       	std	Z+22, r25	; 0x16
    44b0:	a7 8b       	std	Z+23, r26	; 0x17
    44b2:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    44b4:	18 3f       	cpi	r17, 0xF8	; 248
    44b6:	80 f4       	brcc	.+32     	; 0x44d8 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    44b8:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <_nrk_get_next_wakeup>
    44bc:	21 2f       	mov	r18, r17
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	2f 5f       	subi	r18, 0xFF	; 255
    44c2:	3f 4f       	sbci	r19, 0xFF	; 255
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	28 17       	cp	r18, r24
    44c8:	39 07       	cpc	r19, r25
    44ca:	34 f4       	brge	.+12     	; 0x44d8 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    44cc:	82 e0       	ldi	r24, 0x02	; 2
    44ce:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    44d0:	80 93 b6 07 	sts	0x07B6, r24
            _nrk_set_next_wakeup (timer);
    44d4:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    44d8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    44dc:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	28 96       	adiw	r28, 0x08	; 8
    44e4:	0f b6       	in	r0, 0x3f	; 63
    44e6:	f8 94       	cli
    44e8:	de bf       	out	0x3e, r29	; 62
    44ea:	0f be       	out	0x3f, r0	; 63
    44ec:	cd bf       	out	0x3d, r28	; 61
    44ee:	df 91       	pop	r29
    44f0:	cf 91       	pop	r28
    44f2:	1f 91       	pop	r17
    44f4:	08 95       	ret

000044f6 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    44f6:	8f 92       	push	r8
    44f8:	9f 92       	push	r9
    44fa:	af 92       	push	r10
    44fc:	bf 92       	push	r11
    44fe:	cf 92       	push	r12
    4500:	df 92       	push	r13
    4502:	ef 92       	push	r14
    4504:	ff 92       	push	r15
    4506:	0f 93       	push	r16
    4508:	1f 93       	push	r17
    450a:	cf 93       	push	r28
    450c:	df 93       	push	r29
    450e:	cd b7       	in	r28, 0x3d	; 61
    4510:	de b7       	in	r29, 0x3e	; 62
    4512:	60 97       	sbiw	r28, 0x10	; 16
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	f8 94       	cli
    4518:	de bf       	out	0x3e, r29	; 62
    451a:	0f be       	out	0x3f, r0	; 63
    451c:	cd bf       	out	0x3d, r28	; 61
    451e:	29 87       	std	Y+9, r18	; 0x09
    4520:	3a 87       	std	Y+10, r19	; 0x0a
    4522:	4b 87       	std	Y+11, r20	; 0x0b
    4524:	5c 87       	std	Y+12, r21	; 0x0c
    4526:	6d 87       	std	Y+13, r22	; 0x0d
    4528:	7e 87       	std	Y+14, r23	; 0x0e
    452a:	8f 87       	std	Y+15, r24	; 0x0f
    452c:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    452e:	ce 01       	movw	r24, r28
    4530:	01 96       	adiw	r24, 0x01	; 1
    4532:	0e 94 d7 22 	call	0x45ae	; 0x45ae <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    4536:	89 80       	ldd	r8, Y+1	; 0x01
    4538:	9a 80       	ldd	r9, Y+2	; 0x02
    453a:	ab 80       	ldd	r10, Y+3	; 0x03
    453c:	bc 80       	ldd	r11, Y+4	; 0x04
    453e:	cd 80       	ldd	r12, Y+5	; 0x05
    4540:	de 80       	ldd	r13, Y+6	; 0x06
    4542:	ef 80       	ldd	r14, Y+7	; 0x07
    4544:	f8 84       	ldd	r15, Y+8	; 0x08
    4546:	09 85       	ldd	r16, Y+9	; 0x09
    4548:	1a 85       	ldd	r17, Y+10	; 0x0a
    454a:	2b 85       	ldd	r18, Y+11	; 0x0b
    454c:	3c 85       	ldd	r19, Y+12	; 0x0c
    454e:	4d 85       	ldd	r20, Y+13	; 0x0d
    4550:	5e 85       	ldd	r21, Y+14	; 0x0e
    4552:	6f 85       	ldd	r22, Y+15	; 0x0f
    4554:	78 89       	ldd	r23, Y+16	; 0x10
    4556:	ce 01       	movw	r24, r28
    4558:	09 96       	adiw	r24, 0x09	; 9
    455a:	0e 94 34 23 	call	0x4668	; 0x4668 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    455e:	8f 3f       	cpi	r24, 0xFF	; 255
    4560:	61 f0       	breq	.+24     	; 0x457a <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    4562:	29 85       	ldd	r18, Y+9	; 0x09
    4564:	3a 85       	ldd	r19, Y+10	; 0x0a
    4566:	4b 85       	ldd	r20, Y+11	; 0x0b
    4568:	5c 85       	ldd	r21, Y+12	; 0x0c
    456a:	6d 85       	ldd	r22, Y+13	; 0x0d
    456c:	7e 85       	ldd	r23, Y+14	; 0x0e
    456e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4570:	98 89       	ldd	r25, Y+16	; 0x10
    4572:	0e 94 24 22 	call	0x4448	; 0x4448 <nrk_wait>

    return NRK_OK;
    4576:	81 e0       	ldi	r24, 0x01	; 1
    4578:	01 c0       	rjmp	.+2      	; 0x457c <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    457a:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    457c:	60 96       	adiw	r28, 0x10	; 16
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	f8 94       	cli
    4582:	de bf       	out	0x3e, r29	; 62
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	cd bf       	out	0x3d, r28	; 61
    4588:	df 91       	pop	r29
    458a:	cf 91       	pop	r28
    458c:	1f 91       	pop	r17
    458e:	0f 91       	pop	r16
    4590:	ff 90       	pop	r15
    4592:	ef 90       	pop	r14
    4594:	df 90       	pop	r13
    4596:	cf 90       	pop	r12
    4598:	bf 90       	pop	r11
    459a:	af 90       	pop	r10
    459c:	9f 90       	pop	r9
    459e:	8f 90       	pop	r8
    45a0:	08 95       	ret

000045a2 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    45a2:	e0 91 f9 09 	lds	r30, 0x09F9
    45a6:	f0 91 fa 09 	lds	r31, 0x09FA
}
    45aa:	80 85       	ldd	r24, Z+8	; 0x08
    45ac:	08 95       	ret

000045ae <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    45ae:	0f 93       	push	r16
    45b0:	1f 93       	push	r17
    45b2:	cf 93       	push	r28
    45b4:	df 93       	push	r29
    45b6:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    45b8:	1c 82       	std	Y+4, r1	; 0x04
    45ba:	1d 82       	std	Y+5, r1	; 0x05
    45bc:	1e 82       	std	Y+6, r1	; 0x06
    45be:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    45c0:	80 91 f0 09 	lds	r24, 0x09F0
    45c4:	90 91 f1 09 	lds	r25, 0x09F1
    45c8:	a0 91 f2 09 	lds	r26, 0x09F2
    45cc:	b0 91 f3 09 	lds	r27, 0x09F3
    45d0:	88 83       	st	Y, r24
    45d2:	99 83       	std	Y+1, r25	; 0x01
    45d4:	aa 83       	std	Y+2, r26	; 0x02
    45d6:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    45d8:	80 91 f4 09 	lds	r24, 0x09F4
    45dc:	90 91 f5 09 	lds	r25, 0x09F5
    45e0:	a0 91 f6 09 	lds	r26, 0x09F6
    45e4:	b0 91 f7 09 	lds	r27, 0x09F7
    45e8:	8c 83       	std	Y+4, r24	; 0x04
    45ea:	9d 83       	std	Y+5, r25	; 0x05
    45ec:	ae 83       	std	Y+6, r26	; 0x06
    45ee:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    45f0:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_os_timer_get>
    45f4:	a8 2f       	mov	r26, r24
    45f6:	b0 e0       	ldi	r27, 0x00	; 0
    45f8:	23 eb       	ldi	r18, 0xB3	; 179
    45fa:	36 ee       	ldi	r19, 0xE6	; 230
    45fc:	4e e0       	ldi	r20, 0x0E	; 14
    45fe:	50 e0       	ldi	r21, 0x00	; 0
    4600:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <__muluhisi3>
    4604:	0c 81       	ldd	r16, Y+4	; 0x04
    4606:	1d 81       	ldd	r17, Y+5	; 0x05
    4608:	2e 81       	ldd	r18, Y+6	; 0x06
    460a:	3f 81       	ldd	r19, Y+7	; 0x07
    460c:	dc 01       	movw	r26, r24
    460e:	cb 01       	movw	r24, r22
    4610:	80 0f       	add	r24, r16
    4612:	91 1f       	adc	r25, r17
    4614:	a2 1f       	adc	r26, r18
    4616:	b3 1f       	adc	r27, r19
    4618:	8c 83       	std	Y+4, r24	; 0x04
    461a:	9d 83       	std	Y+5, r25	; 0x05
    461c:	ae 83       	std	Y+6, r26	; 0x06
    461e:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    4620:	8c 81       	ldd	r24, Y+4	; 0x04
    4622:	9d 81       	ldd	r25, Y+5	; 0x05
    4624:	ae 81       	ldd	r26, Y+6	; 0x06
    4626:	bf 81       	ldd	r27, Y+7	; 0x07
    4628:	81 15       	cp	r24, r1
    462a:	2a ec       	ldi	r18, 0xCA	; 202
    462c:	92 07       	cpc	r25, r18
    462e:	2a e9       	ldi	r18, 0x9A	; 154
    4630:	a2 07       	cpc	r26, r18
    4632:	2b e3       	ldi	r18, 0x3B	; 59
    4634:	b2 07       	cpc	r27, r18
    4636:	98 f0       	brcs	.+38     	; 0x465e <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    4638:	9a 5c       	subi	r25, 0xCA	; 202
    463a:	aa 49       	sbci	r26, 0x9A	; 154
    463c:	bb 43       	sbci	r27, 0x3B	; 59
    463e:	8c 83       	std	Y+4, r24	; 0x04
    4640:	9d 83       	std	Y+5, r25	; 0x05
    4642:	ae 83       	std	Y+6, r26	; 0x06
    4644:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    4646:	88 81       	ld	r24, Y
    4648:	99 81       	ldd	r25, Y+1	; 0x01
    464a:	aa 81       	ldd	r26, Y+2	; 0x02
    464c:	bb 81       	ldd	r27, Y+3	; 0x03
    464e:	01 96       	adiw	r24, 0x01	; 1
    4650:	a1 1d       	adc	r26, r1
    4652:	b1 1d       	adc	r27, r1
    4654:	88 83       	st	Y, r24
    4656:	99 83       	std	Y+1, r25	; 0x01
    4658:	aa 83       	std	Y+2, r26	; 0x02
    465a:	bb 83       	std	Y+3, r27	; 0x03
    465c:	e1 cf       	rjmp	.-62     	; 0x4620 <nrk_time_get+0x72>
    }

}
    465e:	df 91       	pop	r29
    4660:	cf 91       	pop	r28
    4662:	1f 91       	pop	r17
    4664:	0f 91       	pop	r16
    4666:	08 95       	ret

00004668 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    4668:	8f 92       	push	r8
    466a:	9f 92       	push	r9
    466c:	af 92       	push	r10
    466e:	bf 92       	push	r11
    4670:	cf 92       	push	r12
    4672:	df 92       	push	r13
    4674:	ef 92       	push	r14
    4676:	ff 92       	push	r15
    4678:	0f 93       	push	r16
    467a:	1f 93       	push	r17
    467c:	cf 93       	push	r28
    467e:	df 93       	push	r29
    4680:	cd b7       	in	r28, 0x3d	; 61
    4682:	de b7       	in	r29, 0x3e	; 62
    4684:	60 97       	sbiw	r28, 0x10	; 16
    4686:	0f b6       	in	r0, 0x3f	; 63
    4688:	f8 94       	cli
    468a:	de bf       	out	0x3e, r29	; 62
    468c:	0f be       	out	0x3f, r0	; 63
    468e:	cd bf       	out	0x3d, r28	; 61
    4690:	fc 01       	movw	r30, r24
    4692:	09 83       	std	Y+1, r16	; 0x01
    4694:	1a 83       	std	Y+2, r17	; 0x02
    4696:	2b 83       	std	Y+3, r18	; 0x03
    4698:	3c 83       	std	Y+4, r19	; 0x04
    469a:	4d 83       	std	Y+5, r20	; 0x05
    469c:	5e 83       	std	Y+6, r21	; 0x06
    469e:	6f 83       	std	Y+7, r22	; 0x07
    46a0:	78 87       	std	Y+8, r23	; 0x08
    46a2:	89 86       	std	Y+9, r8	; 0x09
    46a4:	9a 86       	std	Y+10, r9	; 0x0a
    46a6:	ab 86       	std	Y+11, r10	; 0x0b
    46a8:	bc 86       	std	Y+12, r11	; 0x0c
    46aa:	cd 86       	std	Y+13, r12	; 0x0d
    46ac:	de 86       	std	Y+14, r13	; 0x0e
    46ae:	ef 86       	std	Y+15, r14	; 0x0f
    46b0:	f8 8a       	std	Y+16, r15	; 0x10
    46b2:	09 81       	ldd	r16, Y+1	; 0x01
    46b4:	1a 81       	ldd	r17, Y+2	; 0x02
    46b6:	2b 81       	ldd	r18, Y+3	; 0x03
    46b8:	3c 81       	ldd	r19, Y+4	; 0x04
    46ba:	4d 81       	ldd	r20, Y+5	; 0x05
    46bc:	5e 81       	ldd	r21, Y+6	; 0x06
    46be:	6f 81       	ldd	r22, Y+7	; 0x07
    46c0:	78 85       	ldd	r23, Y+8	; 0x08
    46c2:	c9 84       	ldd	r12, Y+9	; 0x09
    46c4:	da 84       	ldd	r13, Y+10	; 0x0a
    46c6:	eb 84       	ldd	r14, Y+11	; 0x0b
    46c8:	fc 84       	ldd	r15, Y+12	; 0x0c
    46ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    46cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ce:	af 85       	ldd	r26, Y+15	; 0x0f
    46d0:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    46d2:	0c 15       	cp	r16, r12
    46d4:	1d 05       	cpc	r17, r13
    46d6:	2e 05       	cpc	r18, r14
    46d8:	3f 05       	cpc	r19, r15
    46da:	f0 f1       	brcs	.+124    	; 0x4758 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    46dc:	c0 16       	cp	r12, r16
    46de:	d1 06       	cpc	r13, r17
    46e0:	e2 06       	cpc	r14, r18
    46e2:	f3 06       	cpc	r15, r19
    46e4:	91 f4       	brne	.+36     	; 0x470a <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    46e6:	48 17       	cp	r20, r24
    46e8:	59 07       	cpc	r21, r25
    46ea:	6a 07       	cpc	r22, r26
    46ec:	7b 07       	cpc	r23, r27
    46ee:	a0 f1       	brcs	.+104    	; 0x4758 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    46f0:	48 1b       	sub	r20, r24
    46f2:	59 0b       	sbc	r21, r25
    46f4:	6a 0b       	sbc	r22, r26
    46f6:	7b 0b       	sbc	r23, r27
    46f8:	44 83       	std	Z+4, r20	; 0x04
    46fa:	55 83       	std	Z+5, r21	; 0x05
    46fc:	66 83       	std	Z+6, r22	; 0x06
    46fe:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    4700:	10 82       	st	Z, r1
    4702:	11 82       	std	Z+1, r1	; 0x01
    4704:	12 82       	std	Z+2, r1	; 0x02
    4706:	13 82       	std	Z+3, r1	; 0x03
    4708:	25 c0       	rjmp	.+74     	; 0x4754 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    470a:	48 17       	cp	r20, r24
    470c:	59 07       	cpc	r21, r25
    470e:	6a 07       	cpc	r22, r26
    4710:	7b 07       	cpc	r23, r27
    4712:	80 f4       	brcc	.+32     	; 0x4734 <nrk_time_sub+0xcc>
{
	high.secs--;
    4714:	01 50       	subi	r16, 0x01	; 1
    4716:	11 09       	sbc	r17, r1
    4718:	21 09       	sbc	r18, r1
    471a:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    471c:	0c 19       	sub	r16, r12
    471e:	1d 09       	sbc	r17, r13
    4720:	2e 09       	sbc	r18, r14
    4722:	3f 09       	sbc	r19, r15
    4724:	00 83       	st	Z, r16
    4726:	11 83       	std	Z+1, r17	; 0x01
    4728:	22 83       	std	Z+2, r18	; 0x02
    472a:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    472c:	56 53       	subi	r21, 0x36	; 54
    472e:	65 46       	sbci	r22, 0x65	; 101
    4730:	74 4c       	sbci	r23, 0xC4	; 196
    4732:	08 c0       	rjmp	.+16     	; 0x4744 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    4734:	0c 19       	sub	r16, r12
    4736:	1d 09       	sbc	r17, r13
    4738:	2e 09       	sbc	r18, r14
    473a:	3f 09       	sbc	r19, r15
    473c:	00 83       	st	Z, r16
    473e:	11 83       	std	Z+1, r17	; 0x01
    4740:	22 83       	std	Z+2, r18	; 0x02
    4742:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    4744:	48 1b       	sub	r20, r24
    4746:	59 0b       	sbc	r21, r25
    4748:	6a 0b       	sbc	r22, r26
    474a:	7b 0b       	sbc	r23, r27
    474c:	44 83       	std	Z+4, r20	; 0x04
    474e:	55 83       	std	Z+5, r21	; 0x05
    4750:	66 83       	std	Z+6, r22	; 0x06
    4752:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	01 c0       	rjmp	.+2      	; 0x475a <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    4758:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    475a:	60 96       	adiw	r28, 0x10	; 16
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	cd bf       	out	0x3d, r28	; 61
    4766:	df 91       	pop	r29
    4768:	cf 91       	pop	r28
    476a:	1f 91       	pop	r17
    476c:	0f 91       	pop	r16
    476e:	ff 90       	pop	r15
    4770:	ef 90       	pop	r14
    4772:	df 90       	pop	r13
    4774:	cf 90       	pop	r12
    4776:	bf 90       	pop	r11
    4778:	af 90       	pop	r10
    477a:	9f 90       	pop	r9
    477c:	8f 90       	pop	r8
    477e:	08 95       	ret

00004780 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    4780:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    4782:	44 81       	ldd	r20, Z+4	; 0x04
    4784:	55 81       	ldd	r21, Z+5	; 0x05
    4786:	66 81       	ldd	r22, Z+6	; 0x06
    4788:	77 81       	ldd	r23, Z+7	; 0x07
    478a:	41 15       	cp	r20, r1
    478c:	8a ec       	ldi	r24, 0xCA	; 202
    478e:	58 07       	cpc	r21, r24
    4790:	8a e9       	ldi	r24, 0x9A	; 154
    4792:	68 07       	cpc	r22, r24
    4794:	8b e3       	ldi	r24, 0x3B	; 59
    4796:	78 07       	cpc	r23, r24
    4798:	98 f0       	brcs	.+38     	; 0x47c0 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    479a:	5a 5c       	subi	r21, 0xCA	; 202
    479c:	6a 49       	sbci	r22, 0x9A	; 154
    479e:	7b 43       	sbci	r23, 0x3B	; 59
    47a0:	44 83       	std	Z+4, r20	; 0x04
    47a2:	55 83       	std	Z+5, r21	; 0x05
    47a4:	66 83       	std	Z+6, r22	; 0x06
    47a6:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    47a8:	80 81       	ld	r24, Z
    47aa:	91 81       	ldd	r25, Z+1	; 0x01
    47ac:	a2 81       	ldd	r26, Z+2	; 0x02
    47ae:	b3 81       	ldd	r27, Z+3	; 0x03
    47b0:	01 96       	adiw	r24, 0x01	; 1
    47b2:	a1 1d       	adc	r26, r1
    47b4:	b1 1d       	adc	r27, r1
    47b6:	80 83       	st	Z, r24
    47b8:	91 83       	std	Z+1, r25	; 0x01
    47ba:	a2 83       	std	Z+2, r26	; 0x02
    47bc:	b3 83       	std	Z+3, r27	; 0x03
    47be:	e1 cf       	rjmp	.-62     	; 0x4782 <nrk_time_compact_nanos+0x2>
    }
}
    47c0:	08 95       	ret

000047c2 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    47c2:	8f 92       	push	r8
    47c4:	9f 92       	push	r9
    47c6:	af 92       	push	r10
    47c8:	bf 92       	push	r11
    47ca:	cf 92       	push	r12
    47cc:	df 92       	push	r13
    47ce:	ef 92       	push	r14
    47d0:	ff 92       	push	r15
    47d2:	0f 93       	push	r16
    47d4:	1f 93       	push	r17
    47d6:	cf 93       	push	r28
    47d8:	df 93       	push	r29
    47da:	cd b7       	in	r28, 0x3d	; 61
    47dc:	de b7       	in	r29, 0x3e	; 62
    47de:	60 97       	sbiw	r28, 0x10	; 16
    47e0:	0f b6       	in	r0, 0x3f	; 63
    47e2:	f8 94       	cli
    47e4:	de bf       	out	0x3e, r29	; 62
    47e6:	0f be       	out	0x3f, r0	; 63
    47e8:	cd bf       	out	0x3d, r28	; 61
    47ea:	09 83       	std	Y+1, r16	; 0x01
    47ec:	1a 83       	std	Y+2, r17	; 0x02
    47ee:	2b 83       	std	Y+3, r18	; 0x03
    47f0:	3c 83       	std	Y+4, r19	; 0x04
    47f2:	4d 83       	std	Y+5, r20	; 0x05
    47f4:	5e 83       	std	Y+6, r21	; 0x06
    47f6:	6f 83       	std	Y+7, r22	; 0x07
    47f8:	78 87       	std	Y+8, r23	; 0x08
    47fa:	89 86       	std	Y+9, r8	; 0x09
    47fc:	9a 86       	std	Y+10, r9	; 0x0a
    47fe:	ab 86       	std	Y+11, r10	; 0x0b
    4800:	bc 86       	std	Y+12, r11	; 0x0c
    4802:	cd 86       	std	Y+13, r12	; 0x0d
    4804:	de 86       	std	Y+14, r13	; 0x0e
    4806:	ef 86       	std	Y+15, r14	; 0x0f
    4808:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    480a:	09 85       	ldd	r16, Y+9	; 0x09
    480c:	1a 85       	ldd	r17, Y+10	; 0x0a
    480e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4810:	3c 85       	ldd	r19, Y+12	; 0x0c
    4812:	49 81       	ldd	r20, Y+1	; 0x01
    4814:	5a 81       	ldd	r21, Y+2	; 0x02
    4816:	6b 81       	ldd	r22, Y+3	; 0x03
    4818:	7c 81       	ldd	r23, Y+4	; 0x04
    481a:	40 0f       	add	r20, r16
    481c:	51 1f       	adc	r21, r17
    481e:	62 1f       	adc	r22, r18
    4820:	73 1f       	adc	r23, r19
    4822:	fc 01       	movw	r30, r24
    4824:	40 83       	st	Z, r20
    4826:	51 83       	std	Z+1, r21	; 0x01
    4828:	62 83       	std	Z+2, r22	; 0x02
    482a:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    482c:	0d 85       	ldd	r16, Y+13	; 0x0d
    482e:	1e 85       	ldd	r17, Y+14	; 0x0e
    4830:	2f 85       	ldd	r18, Y+15	; 0x0f
    4832:	38 89       	ldd	r19, Y+16	; 0x10
    4834:	4d 81       	ldd	r20, Y+5	; 0x05
    4836:	5e 81       	ldd	r21, Y+6	; 0x06
    4838:	6f 81       	ldd	r22, Y+7	; 0x07
    483a:	78 85       	ldd	r23, Y+8	; 0x08
    483c:	40 0f       	add	r20, r16
    483e:	51 1f       	adc	r21, r17
    4840:	62 1f       	adc	r22, r18
    4842:	73 1f       	adc	r23, r19
    4844:	44 83       	std	Z+4, r20	; 0x04
    4846:	55 83       	std	Z+5, r21	; 0x05
    4848:	66 83       	std	Z+6, r22	; 0x06
    484a:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    484c:	0e 94 c0 23 	call	0x4780	; 0x4780 <nrk_time_compact_nanos>
return NRK_OK;
}
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	60 96       	adiw	r28, 0x10	; 16
    4854:	0f b6       	in	r0, 0x3f	; 63
    4856:	f8 94       	cli
    4858:	de bf       	out	0x3e, r29	; 62
    485a:	0f be       	out	0x3f, r0	; 63
    485c:	cd bf       	out	0x3d, r28	; 61
    485e:	df 91       	pop	r29
    4860:	cf 91       	pop	r28
    4862:	1f 91       	pop	r17
    4864:	0f 91       	pop	r16
    4866:	ff 90       	pop	r15
    4868:	ef 90       	pop	r14
    486a:	df 90       	pop	r13
    486c:	cf 90       	pop	r12
    486e:	bf 90       	pop	r11
    4870:	af 90       	pop	r10
    4872:	9f 90       	pop	r9
    4874:	8f 90       	pop	r8
    4876:	08 95       	ret

00004878 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    4878:	e0 ef       	ldi	r30, 0xF0	; 240
    487a:	f9 e0       	ldi	r31, 0x09	; 9
    487c:	60 83       	st	Z, r22
    487e:	71 83       	std	Z+1, r23	; 0x01
    4880:	82 83       	std	Z+2, r24	; 0x02
    4882:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    4884:	24 83       	std	Z+4, r18	; 0x04
    4886:	35 83       	std	Z+5, r19	; 0x05
    4888:	46 83       	std	Z+6, r20	; 0x06
    488a:	57 83       	std	Z+7, r21	; 0x07
    488c:	08 95       	ret

0000488e <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    488e:	2f 92       	push	r2
    4890:	3f 92       	push	r3
    4892:	4f 92       	push	r4
    4894:	5f 92       	push	r5
    4896:	6f 92       	push	r6
    4898:	7f 92       	push	r7
    489a:	8f 92       	push	r8
    489c:	9f 92       	push	r9
    489e:	af 92       	push	r10
    48a0:	bf 92       	push	r11
    48a2:	cf 92       	push	r12
    48a4:	df 92       	push	r13
    48a6:	ef 92       	push	r14
    48a8:	ff 92       	push	r15
    48aa:	0f 93       	push	r16
    48ac:	1f 93       	push	r17
    48ae:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    48b0:	c0 80       	ld	r12, Z
    48b2:	d1 80       	ldd	r13, Z+1	; 0x01
    48b4:	e2 80       	ldd	r14, Z+2	; 0x02
    48b6:	f3 80       	ldd	r15, Z+3	; 0x03
    48b8:	c1 14       	cp	r12, r1
    48ba:	d1 04       	cpc	r13, r1
    48bc:	e1 04       	cpc	r14, r1
    48be:	f1 04       	cpc	r15, r1
    48c0:	e1 f1       	breq	.+120    	; 0x493a <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    48c2:	84 81       	ldd	r24, Z+4	; 0x04
    48c4:	95 81       	ldd	r25, Z+5	; 0x05
    48c6:	a6 81       	ldd	r26, Z+6	; 0x06
    48c8:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    48ca:	22 e4       	ldi	r18, 0x42	; 66
    48cc:	c2 16       	cp	r12, r18
    48ce:	d1 04       	cpc	r13, r1
    48d0:	e1 04       	cpc	r14, r1
    48d2:	f1 04       	cpc	r15, r1
    48d4:	f0 f5       	brcc	.+124    	; 0x4952 <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    48d6:	1c 01       	movw	r2, r24
    48d8:	2d 01       	movw	r4, r26
    48da:	61 2c       	mov	r6, r1
    48dc:	71 2c       	mov	r7, r1
    48de:	43 01       	movw	r8, r6
    48e0:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    48e2:	8e 2f       	mov	r24, r30
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	a0 e0       	ldi	r26, 0x00	; 0
    48e8:	b0 e0       	ldi	r27, 0x00	; 0
    48ea:	8c 15       	cp	r24, r12
    48ec:	9d 05       	cpc	r25, r13
    48ee:	ae 05       	cpc	r26, r14
    48f0:	bf 05       	cpc	r27, r15
    48f2:	88 f4       	brcc	.+34     	; 0x4916 <_nrk_time_to_ticks+0x88>
    48f4:	91 01       	movw	r18, r2
    48f6:	a2 01       	movw	r20, r4
    48f8:	b3 01       	movw	r22, r6
    48fa:	c4 01       	movw	r24, r8
    48fc:	36 53       	subi	r19, 0x36	; 54
    48fe:	45 46       	sbci	r20, 0x65	; 101
    4900:	54 4c       	sbci	r21, 0xC4	; 196
    4902:	6f 4f       	sbci	r22, 0xFF	; 255
    4904:	7f 4f       	sbci	r23, 0xFF	; 255
    4906:	8f 4f       	sbci	r24, 0xFF	; 255
    4908:	9f 4f       	sbci	r25, 0xFF	; 255
    490a:	19 01       	movw	r2, r18
    490c:	2a 01       	movw	r4, r20
    490e:	3b 01       	movw	r6, r22
    4910:	4c 01       	movw	r8, r24
    4912:	ef 5f       	subi	r30, 0xFF	; 255
    4914:	e6 cf       	rjmp	.-52     	; 0x48e2 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4916:	83 eb       	ldi	r24, 0xB3	; 179
    4918:	a8 2e       	mov	r10, r24
    491a:	96 ee       	ldi	r25, 0xE6	; 230
    491c:	b9 2e       	mov	r11, r25
    491e:	2e e0       	ldi	r18, 0x0E	; 14
    4920:	c2 2e       	mov	r12, r18
    4922:	d1 2c       	mov	r13, r1
    4924:	e1 2c       	mov	r14, r1
    4926:	f1 2c       	mov	r15, r1
    4928:	00 e0       	ldi	r16, 0x00	; 0
    492a:	10 e0       	ldi	r17, 0x00	; 0
    492c:	91 01       	movw	r18, r2
    492e:	a2 01       	movw	r20, r4
    4930:	b3 01       	movw	r22, r6
    4932:	c4 01       	movw	r24, r8
    4934:	0e 94 03 30 	call	0x6006	; 0x6006 <__udivdi3>
    4938:	0a c0       	rjmp	.+20     	; 0x494e <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    493a:	64 81       	ldd	r22, Z+4	; 0x04
    493c:	75 81       	ldd	r23, Z+5	; 0x05
    493e:	86 81       	ldd	r24, Z+6	; 0x06
    4940:	97 81       	ldd	r25, Z+7	; 0x07
    4942:	23 eb       	ldi	r18, 0xB3	; 179
    4944:	36 ee       	ldi	r19, 0xE6	; 230
    4946:	4e e0       	ldi	r20, 0x0E	; 14
    4948:	50 e0       	ldi	r21, 0x00	; 0
    494a:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    494e:	c9 01       	movw	r24, r18
    4950:	02 c0       	rjmp	.+4      	; 0x4956 <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4952:	80 e0       	ldi	r24, 0x00	; 0
    4954:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4956:	1f 91       	pop	r17
    4958:	0f 91       	pop	r16
    495a:	ff 90       	pop	r15
    495c:	ef 90       	pop	r14
    495e:	df 90       	pop	r13
    4960:	cf 90       	pop	r12
    4962:	bf 90       	pop	r11
    4964:	af 90       	pop	r10
    4966:	9f 90       	pop	r9
    4968:	8f 90       	pop	r8
    496a:	7f 90       	pop	r7
    496c:	6f 90       	pop	r6
    496e:	5f 90       	pop	r5
    4970:	4f 90       	pop	r4
    4972:	3f 90       	pop	r3
    4974:	2f 90       	pop	r2
    4976:	08 95       	ret

00004978 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4978:	cf 92       	push	r12
    497a:	df 92       	push	r13
    497c:	ef 92       	push	r14
    497e:	ff 92       	push	r15
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
    4984:	cd b7       	in	r28, 0x3d	; 61
    4986:	de b7       	in	r29, 0x3e	; 62
    4988:	28 97       	sbiw	r28, 0x08	; 8
    498a:	0f b6       	in	r0, 0x3f	; 63
    498c:	f8 94       	cli
    498e:	de bf       	out	0x3e, r29	; 62
    4990:	0f be       	out	0x3f, r0	; 63
    4992:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    4994:	6b 01       	movw	r12, r22
    4996:	7c 01       	movw	r14, r24
    4998:	2a e0       	ldi	r18, 0x0A	; 10
    499a:	f6 94       	lsr	r15
    499c:	e7 94       	ror	r14
    499e:	d7 94       	ror	r13
    49a0:	c7 94       	ror	r12
    49a2:	2a 95       	dec	r18
    49a4:	d1 f7       	brne	.-12     	; 0x499a <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    49a6:	c9 82       	std	Y+1, r12	; 0x01
    49a8:	da 82       	std	Y+2, r13	; 0x02
    49aa:	eb 82       	std	Y+3, r14	; 0x03
    49ac:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    49ae:	9b 01       	movw	r18, r22
    49b0:	ac 01       	movw	r20, r24
    49b2:	33 70       	andi	r19, 0x03	; 3
    49b4:	44 27       	eor	r20, r20
    49b6:	55 27       	eor	r21, r21
    49b8:	63 eb       	ldi	r22, 0xB3	; 179
    49ba:	76 ee       	ldi	r23, 0xE6	; 230
    49bc:	8e e0       	ldi	r24, 0x0E	; 14
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__mulsi3>

return t;
    49c4:	2c 2d       	mov	r18, r12
    49c6:	3a 81       	ldd	r19, Y+2	; 0x02
    49c8:	4b 81       	ldd	r20, Y+3	; 0x03
    49ca:	5c 81       	ldd	r21, Y+4	; 0x04
}
    49cc:	28 96       	adiw	r28, 0x08	; 8
    49ce:	0f b6       	in	r0, 0x3f	; 63
    49d0:	f8 94       	cli
    49d2:	de bf       	out	0x3e, r29	; 62
    49d4:	0f be       	out	0x3f, r0	; 63
    49d6:	cd bf       	out	0x3d, r28	; 61
    49d8:	df 91       	pop	r29
    49da:	cf 91       	pop	r28
    49dc:	ff 90       	pop	r15
    49de:	ef 90       	pop	r14
    49e0:	df 90       	pop	r13
    49e2:	cf 90       	pop	r12
    49e4:	08 95       	ret

000049e6 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    49e6:	2f 92       	push	r2
    49e8:	3f 92       	push	r3
    49ea:	4f 92       	push	r4
    49ec:	5f 92       	push	r5
    49ee:	6f 92       	push	r6
    49f0:	7f 92       	push	r7
    49f2:	8f 92       	push	r8
    49f4:	9f 92       	push	r9
    49f6:	af 92       	push	r10
    49f8:	bf 92       	push	r11
    49fa:	cf 92       	push	r12
    49fc:	df 92       	push	r13
    49fe:	ef 92       	push	r14
    4a00:	ff 92       	push	r15
    4a02:	0f 93       	push	r16
    4a04:	1f 93       	push	r17
    4a06:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4a08:	c0 80       	ld	r12, Z
    4a0a:	d1 80       	ldd	r13, Z+1	; 0x01
    4a0c:	e2 80       	ldd	r14, Z+2	; 0x02
    4a0e:	f3 80       	ldd	r15, Z+3	; 0x03
    4a10:	c1 14       	cp	r12, r1
    4a12:	d1 04       	cpc	r13, r1
    4a14:	e1 04       	cpc	r14, r1
    4a16:	f1 04       	cpc	r15, r1
    4a18:	b9 f1       	breq	.+110    	; 0x4a88 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    4a1a:	84 81       	ldd	r24, Z+4	; 0x04
    4a1c:	95 81       	ldd	r25, Z+5	; 0x05
    4a1e:	a6 81       	ldd	r26, Z+6	; 0x06
    4a20:	b7 81       	ldd	r27, Z+7	; 0x07
    4a22:	1c 01       	movw	r2, r24
    4a24:	2d 01       	movw	r4, r26
    4a26:	61 2c       	mov	r6, r1
    4a28:	71 2c       	mov	r7, r1
    4a2a:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4a2c:	e0 e0       	ldi	r30, 0x00	; 0
    4a2e:	8e 2f       	mov	r24, r30
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	a0 e0       	ldi	r26, 0x00	; 0
    4a34:	b0 e0       	ldi	r27, 0x00	; 0
    4a36:	8c 15       	cp	r24, r12
    4a38:	9d 05       	cpc	r25, r13
    4a3a:	ae 05       	cpc	r26, r14
    4a3c:	bf 05       	cpc	r27, r15
    4a3e:	88 f4       	brcc	.+34     	; 0x4a62 <_nrk_time_to_ticks_long+0x7c>
    4a40:	91 01       	movw	r18, r2
    4a42:	a2 01       	movw	r20, r4
    4a44:	b3 01       	movw	r22, r6
    4a46:	c4 01       	movw	r24, r8
    4a48:	36 53       	subi	r19, 0x36	; 54
    4a4a:	45 46       	sbci	r20, 0x65	; 101
    4a4c:	54 4c       	sbci	r21, 0xC4	; 196
    4a4e:	6f 4f       	sbci	r22, 0xFF	; 255
    4a50:	7f 4f       	sbci	r23, 0xFF	; 255
    4a52:	8f 4f       	sbci	r24, 0xFF	; 255
    4a54:	9f 4f       	sbci	r25, 0xFF	; 255
    4a56:	19 01       	movw	r2, r18
    4a58:	2a 01       	movw	r4, r20
    4a5a:	3b 01       	movw	r6, r22
    4a5c:	4c 01       	movw	r8, r24
    4a5e:	ef 5f       	subi	r30, 0xFF	; 255
    4a60:	e6 cf       	rjmp	.-52     	; 0x4a2e <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4a62:	83 eb       	ldi	r24, 0xB3	; 179
    4a64:	a8 2e       	mov	r10, r24
    4a66:	96 ee       	ldi	r25, 0xE6	; 230
    4a68:	b9 2e       	mov	r11, r25
    4a6a:	2e e0       	ldi	r18, 0x0E	; 14
    4a6c:	c2 2e       	mov	r12, r18
    4a6e:	d1 2c       	mov	r13, r1
    4a70:	e1 2c       	mov	r14, r1
    4a72:	f1 2c       	mov	r15, r1
    4a74:	00 e0       	ldi	r16, 0x00	; 0
    4a76:	10 e0       	ldi	r17, 0x00	; 0
    4a78:	91 01       	movw	r18, r2
    4a7a:	a2 01       	movw	r20, r4
    4a7c:	b3 01       	movw	r22, r6
    4a7e:	c4 01       	movw	r24, r8
    4a80:	0e 94 03 30 	call	0x6006	; 0x6006 <__udivdi3>
    4a84:	ca 01       	movw	r24, r20
    4a86:	0b c0       	rjmp	.+22     	; 0x4a9e <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4a88:	64 81       	ldd	r22, Z+4	; 0x04
    4a8a:	75 81       	ldd	r23, Z+5	; 0x05
    4a8c:	86 81       	ldd	r24, Z+6	; 0x06
    4a8e:	97 81       	ldd	r25, Z+7	; 0x07
    4a90:	23 eb       	ldi	r18, 0xB3	; 179
    4a92:	36 ee       	ldi	r19, 0xE6	; 230
    4a94:	4e e0       	ldi	r20, 0x0E	; 14
    4a96:	50 e0       	ldi	r21, 0x00	; 0
    4a98:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    4a9c:	ca 01       	movw	r24, r20
}
return ticks;
}
    4a9e:	b9 01       	movw	r22, r18
    4aa0:	1f 91       	pop	r17
    4aa2:	0f 91       	pop	r16
    4aa4:	ff 90       	pop	r15
    4aa6:	ef 90       	pop	r14
    4aa8:	df 90       	pop	r13
    4aaa:	cf 90       	pop	r12
    4aac:	bf 90       	pop	r11
    4aae:	af 90       	pop	r10
    4ab0:	9f 90       	pop	r9
    4ab2:	8f 90       	pop	r8
    4ab4:	7f 90       	pop	r7
    4ab6:	6f 90       	pop	r6
    4ab8:	5f 90       	pop	r5
    4aba:	4f 90       	pop	r4
    4abc:	3f 90       	pop	r3
    4abe:	2f 90       	pop	r2
    4ac0:	08 95       	ret

00004ac2 <nrk_idle_task>:
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4ac2:	c1 e0       	ldi	r28, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    4ac4:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4ac8:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <_nrk_get_next_wakeup>
    4acc:	84 30       	cpi	r24, 0x04	; 4
    4ace:	10 f4       	brcc	.+4      	; 0x4ad4 <nrk_idle_task+0x12>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4ad0:	c0 93 ed 09 	sts	0x09ED, r28
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    4ad4:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4ad8:	80 91 4f 08 	lds	r24, 0x084F
    4adc:	85 35       	cpi	r24, 0x55	; 85
    4ade:	19 f0       	breq	.+6      	; 0x4ae6 <nrk_idle_task+0x24>
    4ae0:	88 e0       	ldi	r24, 0x08	; 8
    4ae2:	0e 94 cc 1a 	call	0x3598	; 0x3598 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4ae6:	80 91 7e 41 	lds	r24, 0x417E
    4aea:	85 35       	cpi	r24, 0x55	; 85
    4aec:	59 f3       	breq	.-42     	; 0x4ac4 <nrk_idle_task+0x2>
    4aee:	88 e0       	ldi	r24, 0x08	; 8
    4af0:	0e 94 cc 1a 	call	0x3598	; 0x3598 <nrk_error_add>
    4af4:	e7 cf       	rjmp	.-50     	; 0x4ac4 <nrk_idle_task+0x2>

00004af6 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4af6:	2f 92       	push	r2
    4af8:	3f 92       	push	r3
    4afa:	4f 92       	push	r4
    4afc:	5f 92       	push	r5
    4afe:	6f 92       	push	r6
    4b00:	7f 92       	push	r7
    4b02:	8f 92       	push	r8
    4b04:	9f 92       	push	r9
    4b06:	af 92       	push	r10
    4b08:	bf 92       	push	r11
    4b0a:	cf 92       	push	r12
    4b0c:	df 92       	push	r13
    4b0e:	ef 92       	push	r14
    4b10:	ff 92       	push	r15
    4b12:	0f 93       	push	r16
    4b14:	1f 93       	push	r17
    4b16:	cf 93       	push	r28
    4b18:	df 93       	push	r29
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    nrk_int_enable();   // this should be removed...  Not needed
    4b1a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <nrk_int_enable>
#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    _nrk_high_speed_timer_reset();
    start_time_stamp=_nrk_high_speed_timer_get();
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4b1e:	8a ef       	ldi	r24, 0xFA	; 250
    4b20:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_nrk_set_next_wakeup>
    next_wake=60000;
    // Safety zone starts here....


#ifdef NRK_WATCHDOG
    nrk_watchdog_reset();
    4b24:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <nrk_watchdog_reset>
#endif

#ifdef NRK_SW_WDT
    _nrk_sw_wdt_check();
    4b28:	0e 94 30 28 	call	0x5060	; 0x5060 <_nrk_sw_wdt_check>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4b2c:	c0 91 b6 07 	lds	r28, 0x07B6
    4b30:	ac 2f       	mov	r26, r28
    4b32:	b0 e0       	ldi	r27, 0x00	; 0
    4b34:	23 eb       	ldi	r18, 0xB3	; 179
    4b36:	36 ee       	ldi	r19, 0xE6	; 230
    4b38:	4e e0       	ldi	r20, 0x0E	; 14
    4b3a:	50 e0       	ldi	r21, 0x00	; 0
    4b3c:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <__muluhisi3>
    4b40:	00 91 f4 09 	lds	r16, 0x09F4
    4b44:	10 91 f5 09 	lds	r17, 0x09F5
    4b48:	20 91 f6 09 	lds	r18, 0x09F6
    4b4c:	30 91 f7 09 	lds	r19, 0x09F7
    4b50:	6b 01       	movw	r12, r22
    4b52:	7c 01       	movw	r14, r24
    4b54:	c0 0e       	add	r12, r16
    4b56:	d1 1e       	adc	r13, r17
    4b58:	e2 1e       	adc	r14, r18
    4b5a:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4b5c:	c7 01       	movw	r24, r14
    4b5e:	b6 01       	movw	r22, r12
    4b60:	23 eb       	ldi	r18, 0xB3	; 179
    4b62:	36 ee       	ldi	r19, 0xE6	; 230
    4b64:	4e e0       	ldi	r20, 0x0E	; 14
    4b66:	50 e0       	ldi	r21, 0x00	; 0
    4b68:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    4b6c:	c6 1a       	sub	r12, r22
    4b6e:	d7 0a       	sbc	r13, r23
    4b70:	e8 0a       	sbc	r14, r24
    4b72:	f9 0a       	sbc	r15, r25
    4b74:	c0 92 f4 09 	sts	0x09F4, r12
    4b78:	d0 92 f5 09 	sts	0x09F5, r13
    4b7c:	e0 92 f6 09 	sts	0x09F6, r14
    4b80:	f0 92 f7 09 	sts	0x09F7, r15

#ifdef NRK_STATS_TRACKER
    if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
    4b84:	e0 91 f9 09 	lds	r30, 0x09F9
    4b88:	f0 91 fa 09 	lds	r31, 0x09FA
    4b8c:	80 85       	ldd	r24, Z+8	; 0x08
    4b8e:	81 11       	cpse	r24, r1
    4b90:	30 c0       	rjmp	.+96     	; 0x4bf2 <_nrk_scheduler+0xfc>
    {
        if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
    4b92:	80 91 ed 09 	lds	r24, 0x09ED
    4b96:	82 30       	cpi	r24, 0x02	; 2
    4b98:	19 f4       	brne	.+6      	; 0x4ba0 <_nrk_scheduler+0xaa>
    4b9a:	8c 2f       	mov	r24, r28
    4b9c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <_nrk_stats_sleep>
        _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    4ba0:	e0 91 f9 09 	lds	r30, 0x09F9
    4ba4:	f0 91 fa 09 	lds	r31, 0x09FA
    4ba8:	60 91 b6 07 	lds	r22, 0x07B6
    4bac:	80 85       	ldd	r24, Z+8	; 0x08
    4bae:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_nrk_stats_task_preempted>
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    4bb2:	e0 91 f9 09 	lds	r30, 0x09F9
    4bb6:	f0 91 fa 09 	lds	r31, 0x09FA
    4bba:	60 e0       	ldi	r22, 0x00	; 0
    4bbc:	80 85       	ldd	r24, Z+8	; 0x08
    4bbe:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <_nrk_stats_task_suspend>
    4bc2:	80 91 f4 09 	lds	r24, 0x09F4
    4bc6:	90 91 f5 09 	lds	r25, 0x09F5
    4bca:	a0 91 f6 09 	lds	r26, 0x09F6
    4bce:	b0 91 f7 09 	lds	r27, 0x09F7
    4bd2:	00 91 f0 09 	lds	r16, 0x09F0
    4bd6:	10 91 f1 09 	lds	r17, 0x09F1
    4bda:	20 91 f2 09 	lds	r18, 0x09F2
    4bde:	30 91 f3 09 	lds	r19, 0x09F3

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4be2:	53 eb       	ldi	r21, 0xB3	; 179
    4be4:	45 2e       	mov	r4, r21
    4be6:	56 ee       	ldi	r21, 0xE6	; 230
    4be8:	55 2e       	mov	r5, r21
    4bea:	5e e0       	ldi	r21, 0x0E	; 14
    4bec:	65 2e       	mov	r6, r21
    4bee:	71 2c       	mov	r7, r1
    4bf0:	07 c0       	rjmp	.+14     	; 0x4c00 <_nrk_scheduler+0x10a>
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    }
    else
    {
        if(nrk_cur_task_TCB->suspend_flag==1)
    4bf2:	95 81       	ldd	r25, Z+5	; 0x05
            _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    4bf4:	6c 2f       	mov	r22, r28
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    }
    else
    {
        if(nrk_cur_task_TCB->suspend_flag==1)
    4bf6:	91 11       	cpse	r25, r1
    4bf8:	e2 cf       	rjmp	.-60     	; 0x4bbe <_nrk_scheduler+0xc8>
            _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    4bfa:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_nrk_stats_task_preempted>
    4bfe:	e1 cf       	rjmp	.-62     	; 0x4bc2 <_nrk_scheduler+0xcc>
    4c00:	48 01       	movw	r8, r16
    4c02:	59 01       	movw	r10, r18
    4c04:	4f ef       	ldi	r20, 0xFF	; 255
    4c06:	84 1a       	sub	r8, r20
    4c08:	94 0a       	sbc	r9, r20
    4c0a:	a4 0a       	sbc	r10, r20
    4c0c:	b4 0a       	sbc	r11, r20
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4c0e:	81 15       	cp	r24, r1
    4c10:	5a ec       	ldi	r21, 0xCA	; 202
    4c12:	95 07       	cpc	r25, r21
    4c14:	5a e9       	ldi	r21, 0x9A	; 154
    4c16:	a5 07       	cpc	r26, r21
    4c18:	5b e3       	ldi	r21, 0x3B	; 59
    4c1a:	b5 07       	cpc	r27, r21
    4c1c:	c8 f0       	brcs	.+50     	; 0x4c50 <_nrk_scheduler+0x15a>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4c1e:	6c 01       	movw	r12, r24
    4c20:	7d 01       	movw	r14, r26
    4c22:	2a ec       	ldi	r18, 0xCA	; 202
    4c24:	d2 1a       	sub	r13, r18
    4c26:	2a e9       	ldi	r18, 0x9A	; 154
    4c28:	e2 0a       	sbc	r14, r18
    4c2a:	2b e3       	ldi	r18, 0x3B	; 59
    4c2c:	f2 0a       	sbc	r15, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4c2e:	c7 01       	movw	r24, r14
    4c30:	b6 01       	movw	r22, r12
    4c32:	a3 01       	movw	r20, r6
    4c34:	92 01       	movw	r18, r4
    4c36:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    4c3a:	a7 01       	movw	r20, r14
    4c3c:	96 01       	movw	r18, r12
    4c3e:	26 1b       	sub	r18, r22
    4c40:	37 0b       	sbc	r19, r23
    4c42:	48 0b       	sbc	r20, r24
    4c44:	59 0b       	sbc	r21, r25
    4c46:	da 01       	movw	r26, r20
    4c48:	c9 01       	movw	r24, r18
    4c4a:	95 01       	movw	r18, r10
    4c4c:	84 01       	movw	r16, r8
    4c4e:	d8 cf       	rjmp	.-80     	; 0x4c00 <_nrk_scheduler+0x10a>
    4c50:	80 93 f4 09 	sts	0x09F4, r24
    4c54:	90 93 f5 09 	sts	0x09F5, r25
    4c58:	a0 93 f6 09 	sts	0x09F6, r26
    4c5c:	b0 93 f7 09 	sts	0x09F7, r27
    4c60:	00 93 f0 09 	sts	0x09F0, r16
    4c64:	10 93 f1 09 	sts	0x09F1, r17
    4c68:	20 93 f2 09 	sts	0x09F2, r18
    4c6c:	30 93 f3 09 	sts	0x09F3, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4c70:	e0 91 f9 09 	lds	r30, 0x09F9
    4c74:	f0 91 fa 09 	lds	r31, 0x09FA
    4c78:	85 81       	ldd	r24, Z+5	; 0x05
    4c7a:	88 23       	and	r24, r24
    4c7c:	39 f1       	breq	.+78     	; 0x4ccc <_nrk_scheduler+0x1d6>
    4c7e:	81 85       	ldd	r24, Z+9	; 0x09
    4c80:	84 30       	cpi	r24, 0x04	; 4
    4c82:	21 f1       	breq	.+72     	; 0x4ccc <_nrk_scheduler+0x1d6>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    4c84:	87 81       	ldd	r24, Z+7	; 0x07
    4c86:	82 30       	cpi	r24, 0x02	; 2
    4c88:	29 f0       	breq	.+10     	; 0x4c94 <_nrk_scheduler+0x19e>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4c8a:	88 23       	and	r24, r24
    4c8c:	41 f0       	breq	.+16     	; 0x4c9e <_nrk_scheduler+0x1a8>
    4c8e:	86 81       	ldd	r24, Z+6	; 0x06
    4c90:	81 11       	cpse	r24, r1
    4c92:	02 c0       	rjmp	.+4      	; 0x4c98 <_nrk_scheduler+0x1a2>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4c94:	85 e0       	ldi	r24, 0x05	; 5
    4c96:	01 c0       	rjmp	.+2      	; 0x4c9a <_nrk_scheduler+0x1a4>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4c98:	83 e0       	ldi	r24, 0x03	; 3
    4c9a:	81 87       	std	Z+9, r24	; 0x09
    4c9c:	14 c0       	rjmp	.+40     	; 0x4cc6 <_nrk_scheduler+0x1d0>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4c9e:	83 e0       	ldi	r24, 0x03	; 3
    4ca0:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    4ca2:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    4ca4:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    4ca6:	85 89       	ldd	r24, Z+21	; 0x15
    4ca8:	96 89       	ldd	r25, Z+22	; 0x16
    4caa:	a7 89       	ldd	r26, Z+23	; 0x17
    4cac:	b0 8d       	ldd	r27, Z+24	; 0x18
    4cae:	89 2b       	or	r24, r25
    4cb0:	8a 2b       	or	r24, r26
    4cb2:	8b 2b       	or	r24, r27
    4cb4:	41 f4       	brne	.+16     	; 0x4cc6 <_nrk_scheduler+0x1d0>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    4cb6:	81 8d       	ldd	r24, Z+25	; 0x19
    4cb8:	92 8d       	ldd	r25, Z+26	; 0x1a
    4cba:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4cbc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4cbe:	85 8b       	std	Z+21, r24	; 0x15
    4cc0:	96 8b       	std	Z+22, r25	; 0x16
    4cc2:	a7 8b       	std	Z+23, r26	; 0x17
    4cc4:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    4cc6:	80 85       	ldd	r24, Z+8	; 0x08
    4cc8:	0e 94 46 20 	call	0x408c	; 0x408c <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    4ccc:	e0 91 f9 09 	lds	r30, 0x09F9
    4cd0:	f0 91 fa 09 	lds	r31, 0x09FA
    4cd4:	85 a1       	ldd	r24, Z+37	; 0x25
    4cd6:	96 a1       	ldd	r25, Z+38	; 0x26
    4cd8:	a7 a1       	ldd	r26, Z+39	; 0x27
    4cda:	b0 a5       	ldd	r27, Z+40	; 0x28
    4cdc:	89 2b       	or	r24, r25
    4cde:	8a 2b       	or	r24, r26
    4ce0:	8b 2b       	or	r24, r27
    4ce2:	09 f4       	brne	.+2      	; 0x4ce6 <_nrk_scheduler+0x1f0>
    4ce4:	4e c0       	rjmp	.+156    	; 0x4d82 <_nrk_scheduler+0x28c>
    4ce6:	80 85       	ldd	r24, Z+8	; 0x08
    4ce8:	88 23       	and	r24, r24
    4cea:	09 f4       	brne	.+2      	; 0x4cee <_nrk_scheduler+0x1f8>
    4cec:	4a c0       	rjmp	.+148    	; 0x4d82 <_nrk_scheduler+0x28c>
    4cee:	91 85       	ldd	r25, Z+9	; 0x09
    4cf0:	94 30       	cpi	r25, 0x04	; 4
    4cf2:	09 f4       	brne	.+2      	; 0x4cf6 <_nrk_scheduler+0x200>
    4cf4:	46 c0       	rjmp	.+140    	; 0x4d82 <_nrk_scheduler+0x28c>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    4cf6:	45 8d       	ldd	r20, Z+29	; 0x1d
    4cf8:	56 8d       	ldd	r21, Z+30	; 0x1e
    4cfa:	67 8d       	ldd	r22, Z+31	; 0x1f
    4cfc:	70 a1       	ldd	r23, Z+32	; 0x20
    4cfe:	00 91 b6 07 	lds	r16, 0x07B6
    4d02:	10 e0       	ldi	r17, 0x00	; 0
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	40 17       	cp	r20, r16
    4d0a:	51 07       	cpc	r21, r17
    4d0c:	62 07       	cpc	r22, r18
    4d0e:	73 07       	cpc	r23, r19
    4d10:	98 f4       	brcc	.+38     	; 0x4d38 <_nrk_scheduler+0x242>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
    4d12:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_nrk_stats_add_violation>
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    4d16:	e0 91 f9 09 	lds	r30, 0x09F9
    4d1a:	f0 91 fa 09 	lds	r31, 0x09FA
    4d1e:	60 85       	ldd	r22, Z+8	; 0x08
    4d20:	82 e0       	ldi	r24, 0x02	; 2
    4d22:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    4d26:	e0 91 f9 09 	lds	r30, 0x09F9
    4d2a:	f0 91 fa 09 	lds	r31, 0x09FA
    4d2e:	15 8e       	std	Z+29, r1	; 0x1d
    4d30:	16 8e       	std	Z+30, r1	; 0x1e
    4d32:	17 8e       	std	Z+31, r1	; 0x1f
    4d34:	10 a2       	std	Z+32, r1	; 0x20
    4d36:	08 c0       	rjmp	.+16     	; 0x4d48 <_nrk_scheduler+0x252>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4d38:	40 1b       	sub	r20, r16
    4d3a:	51 0b       	sbc	r21, r17
    4d3c:	62 0b       	sbc	r22, r18
    4d3e:	73 0b       	sbc	r23, r19
    4d40:	45 8f       	std	Z+29, r20	; 0x1d
    4d42:	56 8f       	std	Z+30, r21	; 0x1e
    4d44:	67 8f       	std	Z+31, r22	; 0x1f
    4d46:	70 a3       	std	Z+32, r23	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    4d48:	e0 91 f9 09 	lds	r30, 0x09F9
    4d4c:	f0 91 fa 09 	lds	r31, 0x09FA
    4d50:	c0 85       	ldd	r28, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    4d52:	85 8d       	ldd	r24, Z+29	; 0x1d
    4d54:	96 8d       	ldd	r25, Z+30	; 0x1e
    4d56:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4d58:	b0 a1       	ldd	r27, Z+32	; 0x20
    4d5a:	89 2b       	or	r24, r25
    4d5c:	8a 2b       	or	r24, r26
    4d5e:	8b 2b       	or	r24, r27
    4d60:	81 f4       	brne	.+32     	; 0x4d82 <_nrk_scheduler+0x28c>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
    4d62:	8c 2f       	mov	r24, r28
    4d64:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_nrk_stats_add_violation>
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    4d68:	6c 2f       	mov	r22, r28
    4d6a:	83 e0       	ldi	r24, 0x03	; 3
    4d6c:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4d70:	e0 91 f9 09 	lds	r30, 0x09F9
    4d74:	f0 91 fa 09 	lds	r31, 0x09FA
    4d78:	83 e0       	ldi	r24, 0x03	; 3
    4d7a:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    4d7c:	8c 2f       	mov	r24, r28
    4d7e:	0e 94 46 20 	call	0x408c	; 0x408c <nrk_rem_from_readyQ>
    4d82:	c5 e1       	ldi	r28, 0x15	; 21
    4d84:	d9 e0       	ldi	r29, 0x09	; 9

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4d86:	00 e6       	ldi	r16, 0x60	; 96
    4d88:	1a ee       	ldi	r17, 0xEA	; 234
    4d8a:	31 2c       	mov	r3, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4d8c:	2a ef       	ldi	r18, 0xFA	; 250
    4d8e:	c2 2e       	mov	r12, r18
    4d90:	d1 2c       	mov	r13, r1
    4d92:	e1 2c       	mov	r14, r1
    4d94:	f1 2c       	mov	r15, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    4d96:	32 e0       	ldi	r19, 0x02	; 2
    4d98:	23 2e       	mov	r2, r19
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4d9a:	81 2c       	mov	r8, r1
    4d9c:	91 2c       	mov	r9, r1
    4d9e:	54 01       	movw	r10, r8
    4da0:	83 94       	inc	r8
    4da2:	fe 01       	movw	r30, r28
    4da4:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    4da6:	80 81       	ld	r24, Z
    4da8:	8f 3f       	cpi	r24, 0xFF	; 255
    4daa:	09 f4       	brne	.+2      	; 0x4dae <_nrk_scheduler+0x2b8>
    4dac:	e5 c0       	rjmp	.+458    	; 0x4f78 <_nrk_scheduler+0x482>
    4dae:	33 97       	sbiw	r30, 0x03	; 3
        nrk_task_TCB[task_ID].suspend_flag=0;
    4db0:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    4db2:	88 23       	and	r24, r24
    4db4:	09 f4       	brne	.+2      	; 0x4db8 <_nrk_scheduler+0x2c2>
    4db6:	5b c0       	rjmp	.+182    	; 0x4e6e <_nrk_scheduler+0x378>
    4db8:	88 81       	ld	r24, Y
    4dba:	84 30       	cpi	r24, 0x04	; 4
    4dbc:	09 f4       	brne	.+2      	; 0x4dc0 <_nrk_scheduler+0x2ca>
    4dbe:	57 c0       	rjmp	.+174    	; 0x4e6e <_nrk_scheduler+0x378>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    4dc0:	4c 84       	ldd	r4, Y+12	; 0x0c
    4dc2:	5d 84       	ldd	r5, Y+13	; 0x0d
    4dc4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4dc6:	7f 84       	ldd	r7, Y+15	; 0x0f
    4dc8:	60 91 b6 07 	lds	r22, 0x07B6
    4dcc:	70 e0       	ldi	r23, 0x00	; 0
    4dce:	80 e0       	ldi	r24, 0x00	; 0
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	46 16       	cp	r4, r22
    4dd4:	57 06       	cpc	r5, r23
    4dd6:	68 06       	cpc	r6, r24
    4dd8:	79 06       	cpc	r7, r25
    4dda:	48 f0       	brcs	.+18     	; 0x4dee <_nrk_scheduler+0x2f8>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    4ddc:	46 1a       	sub	r4, r22
    4dde:	57 0a       	sbc	r5, r23
    4de0:	68 0a       	sbc	r6, r24
    4de2:	79 0a       	sbc	r7, r25
    4de4:	4c 86       	std	Y+12, r4	; 0x0c
    4de6:	5d 86       	std	Y+13, r5	; 0x0d
    4de8:	6e 86       	std	Y+14, r6	; 0x0e
    4dea:	7f 86       	std	Y+15, r7	; 0x0f
    4dec:	04 c0       	rjmp	.+8      	; 0x4df6 <_nrk_scheduler+0x300>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    4dee:	1c 86       	std	Y+12, r1	; 0x0c
    4df0:	1d 86       	std	Y+13, r1	; 0x0d
    4df2:	1e 86       	std	Y+14, r1	; 0x0e
    4df4:	1f 86       	std	Y+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4df6:	48 88       	ldd	r4, Y+16	; 0x10
    4df8:	59 88       	ldd	r5, Y+17	; 0x11
    4dfa:	6a 88       	ldd	r6, Y+18	; 0x12
    4dfc:	7b 88       	ldd	r7, Y+19	; 0x13
    4dfe:	46 16       	cp	r4, r22
    4e00:	57 06       	cpc	r5, r23
    4e02:	68 06       	cpc	r6, r24
    4e04:	79 06       	cpc	r7, r25
    4e06:	48 f0       	brcs	.+18     	; 0x4e1a <_nrk_scheduler+0x324>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    4e08:	46 1a       	sub	r4, r22
    4e0a:	57 0a       	sbc	r5, r23
    4e0c:	68 0a       	sbc	r6, r24
    4e0e:	79 0a       	sbc	r7, r25
    4e10:	48 8a       	std	Y+16, r4	; 0x10
    4e12:	59 8a       	std	Y+17, r5	; 0x11
    4e14:	6a 8a       	std	Y+18, r6	; 0x12
    4e16:	7b 8a       	std	Y+19, r7	; 0x13
    4e18:	1a c0       	rjmp	.+52     	; 0x4e4e <_nrk_scheduler+0x358>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    4e1a:	28 8d       	ldd	r18, Y+24	; 0x18
    4e1c:	39 8d       	ldd	r19, Y+25	; 0x19
    4e1e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4e20:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4e22:	62 17       	cp	r22, r18
    4e24:	73 07       	cpc	r23, r19
    4e26:	84 07       	cpc	r24, r20
    4e28:	95 07       	cpc	r25, r21
    4e2a:	58 f4       	brcc	.+22     	; 0x4e42 <_nrk_scheduler+0x34c>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4e2c:	29 01       	movw	r4, r18
    4e2e:	3a 01       	movw	r6, r20
    4e30:	46 1a       	sub	r4, r22
    4e32:	57 0a       	sbc	r5, r23
    4e34:	68 0a       	sbc	r6, r24
    4e36:	79 0a       	sbc	r7, r25
    4e38:	48 8a       	std	Y+16, r4	; 0x10
    4e3a:	59 8a       	std	Y+17, r5	; 0x11
    4e3c:	6a 8a       	std	Y+18, r6	; 0x12
    4e3e:	7b 8a       	std	Y+19, r7	; 0x13
    4e40:	06 c0       	rjmp	.+12     	; 0x4e4e <_nrk_scheduler+0x358>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4e42:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__udivmodsi4>
    4e46:	68 8b       	std	Y+16, r22	; 0x10
    4e48:	79 8b       	std	Y+17, r23	; 0x11
    4e4a:	8a 8b       	std	Y+18, r24	; 0x12
    4e4c:	9b 8b       	std	Y+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4e4e:	88 89       	ldd	r24, Y+16	; 0x10
    4e50:	99 89       	ldd	r25, Y+17	; 0x11
    4e52:	aa 89       	ldd	r26, Y+18	; 0x12
    4e54:	bb 89       	ldd	r27, Y+19	; 0x13
    4e56:	89 2b       	or	r24, r25
    4e58:	8a 2b       	or	r24, r26
    4e5a:	8b 2b       	or	r24, r27
    4e5c:	41 f4       	brne	.+16     	; 0x4e6e <_nrk_scheduler+0x378>
    4e5e:	88 8d       	ldd	r24, Y+24	; 0x18
    4e60:	99 8d       	ldd	r25, Y+25	; 0x19
    4e62:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4e64:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4e66:	88 8b       	std	Y+16, r24	; 0x10
    4e68:	99 8b       	std	Y+17, r25	; 0x11
    4e6a:	aa 8b       	std	Y+18, r26	; 0x12
    4e6c:	bb 8b       	std	Y+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    4e6e:	88 81       	ld	r24, Y
    4e70:	83 30       	cpi	r24, 0x03	; 3
    4e72:	09 f0       	breq	.+2      	; 0x4e76 <_nrk_scheduler+0x380>
    4e74:	81 c0       	rjmp	.+258    	; 0x4f78 <_nrk_scheduler+0x482>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    4e76:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e78:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e7a:	ae 85       	ldd	r26, Y+14	; 0x0e
    4e7c:	bf 85       	ldd	r27, Y+15	; 0x0f
    4e7e:	89 2b       	or	r24, r25
    4e80:	8a 2b       	or	r24, r26
    4e82:	8b 2b       	or	r24, r27
    4e84:	09 f0       	breq	.+2      	; 0x4e88 <_nrk_scheduler+0x392>
    4e86:	67 c0       	rjmp	.+206    	; 0x4f56 <_nrk_scheduler+0x460>
    4e88:	de 01       	movw	r26, r28
    4e8a:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4e8c:	8c 91       	ld	r24, X
    4e8e:	fe 01       	movw	r30, r28
    4e90:	33 97       	sbiw	r30, 0x03	; 3
    4e92:	88 23       	and	r24, r24
    4e94:	91 f0       	breq	.+36     	; 0x4eba <_nrk_scheduler+0x3c4>
    4e96:	80 81       	ld	r24, Z
    4e98:	88 23       	and	r24, r24
    4e9a:	79 f0       	breq	.+30     	; 0x4eba <_nrk_scheduler+0x3c4>
    4e9c:	b5 01       	movw	r22, r10
    4e9e:	a4 01       	movw	r20, r8
    4ea0:	00 90 e9 09 	lds	r0, 0x09E9
    4ea4:	04 c0       	rjmp	.+8      	; 0x4eae <_nrk_scheduler+0x3b8>
    4ea6:	44 0f       	add	r20, r20
    4ea8:	55 1f       	adc	r21, r21
    4eaa:	66 1f       	adc	r22, r22
    4eac:	77 1f       	adc	r23, r23
    4eae:	0a 94       	dec	r0
    4eb0:	d2 f7       	brpl	.-12     	; 0x4ea6 <_nrk_scheduler+0x3b0>
    4eb2:	48 87       	std	Y+8, r20	; 0x08
    4eb4:	59 87       	std	Y+9, r21	; 0x09
    4eb6:	6a 87       	std	Y+10, r22	; 0x0a
    4eb8:	7b 87       	std	Y+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    4eba:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    4ebc:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    4ebe:	a8 a1       	ldd	r26, Y+32	; 0x20
    4ec0:	b9 a1       	ldd	r27, Y+33	; 0x21
    4ec2:	a1 30       	cpi	r26, 0x01	; 1
    4ec4:	b1 05       	cpc	r27, r1
    4ec6:	09 f5       	brne	.+66     	; 0x4f0a <_nrk_scheduler+0x414>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4ec8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4eca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4ecc:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4ece:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4ed0:	8c 8b       	std	Y+20, r24	; 0x14
    4ed2:	9d 8b       	std	Y+21, r25	; 0x15
    4ed4:	ae 8b       	std	Y+22, r26	; 0x16
    4ed6:	bf 8b       	std	Y+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    4ed8:	28 82       	st	Y, r2
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    4eda:	88 89       	ldd	r24, Y+16	; 0x10
    4edc:	99 89       	ldd	r25, Y+17	; 0x11
    4ede:	aa 89       	ldd	r26, Y+18	; 0x12
    4ee0:	bb 89       	ldd	r27, Y+19	; 0x13
    4ee2:	8c 87       	std	Y+12, r24	; 0x0c
    4ee4:	9d 87       	std	Y+13, r25	; 0x0d
    4ee6:	ae 87       	std	Y+14, r26	; 0x0e
    4ee8:	bf 87       	std	Y+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4eea:	88 8d       	ldd	r24, Y+24	; 0x18
    4eec:	99 8d       	ldd	r25, Y+25	; 0x19
    4eee:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4ef0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4ef2:	89 2b       	or	r24, r25
    4ef4:	8a 2b       	or	r24, r26
    4ef6:	8b 2b       	or	r24, r27
    4ef8:	21 f4       	brne	.+8      	; 0x4f02 <_nrk_scheduler+0x40c>
    4efa:	cc 86       	std	Y+12, r12	; 0x0c
    4efc:	dd 86       	std	Y+13, r13	; 0x0d
    4efe:	ee 86       	std	Y+14, r14	; 0x0e
    4f00:	ff 86       	std	Y+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    4f02:	83 2d       	mov	r24, r3
    4f04:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <nrk_add_to_readyQ>
    4f08:	26 c0       	rjmp	.+76     	; 0x4f56 <_nrk_scheduler+0x460>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4f0a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4f0c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4f0e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4f10:	7f 8d       	ldd	r23, Y+31	; 0x1f
    4f12:	4c 8b       	std	Y+20, r20	; 0x14
    4f14:	5d 8b       	std	Y+21, r21	; 0x15
    4f16:	6e 8b       	std	Y+22, r22	; 0x16
    4f18:	7f 8b       	std	Y+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4f1a:	48 8c       	ldd	r4, Y+24	; 0x18
    4f1c:	59 8c       	ldd	r5, Y+25	; 0x19
    4f1e:	6a 8c       	ldd	r6, Y+26	; 0x1a
    4f20:	7b 8c       	ldd	r7, Y+27	; 0x1b
    4f22:	11 97       	sbiw	r26, 0x01	; 1
    4f24:	a3 01       	movw	r20, r6
    4f26:	92 01       	movw	r18, r4
    4f28:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <__muluhisi3>
    4f2c:	6c 87       	std	Y+12, r22	; 0x0c
    4f2e:	7d 87       	std	Y+13, r23	; 0x0d
    4f30:	8e 87       	std	Y+14, r24	; 0x0e
    4f32:	9f 87       	std	Y+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4f34:	68 8b       	std	Y+16, r22	; 0x10
    4f36:	79 8b       	std	Y+17, r23	; 0x11
    4f38:	8a 8b       	std	Y+18, r24	; 0x12
    4f3a:	9b 8b       	std	Y+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4f3c:	45 28       	or	r4, r5
    4f3e:	46 28       	or	r4, r6
    4f40:	47 28       	or	r4, r7
    4f42:	21 f4       	brne	.+8      	; 0x4f4c <_nrk_scheduler+0x456>
    4f44:	cc 86       	std	Y+12, r12	; 0x0c
    4f46:	dd 86       	std	Y+13, r13	; 0x0d
    4f48:	ee 86       	std	Y+14, r14	; 0x0e
    4f4a:	ff 86       	std	Y+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    4f4c:	66 24       	eor	r6, r6
    4f4e:	63 94       	inc	r6
    4f50:	71 2c       	mov	r7, r1
    4f52:	79 a2       	std	Y+33, r7	; 0x21
    4f54:	68 a2       	std	Y+32, r6	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4f56:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f58:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f5a:	ae 85       	ldd	r26, Y+14	; 0x0e
    4f5c:	bf 85       	ldd	r27, Y+15	; 0x0f
    4f5e:	00 97       	sbiw	r24, 0x00	; 0
    4f60:	a1 05       	cpc	r26, r1
    4f62:	b1 05       	cpc	r27, r1
    4f64:	49 f0       	breq	.+18     	; 0x4f78 <_nrk_scheduler+0x482>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    4f66:	a8 01       	movw	r20, r16
    4f68:	60 e0       	ldi	r22, 0x00	; 0
    4f6a:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4f6c:	84 17       	cp	r24, r20
    4f6e:	95 07       	cpc	r25, r21
    4f70:	a6 07       	cpc	r26, r22
    4f72:	b7 07       	cpc	r27, r23
    4f74:	08 f4       	brcc	.+2      	; 0x4f78 <_nrk_scheduler+0x482>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4f76:	8c 01       	movw	r16, r24
    4f78:	33 94       	inc	r3
    4f7a:	ab 96       	adiw	r28, 0x2b	; 43

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    4f7c:	85 e0       	ldi	r24, 0x05	; 5
    4f7e:	78 2e       	mov	r7, r24
    4f80:	37 10       	cpse	r3, r7
    4f82:	0f cf       	rjmp	.-482    	; 0x4da2 <_nrk_scheduler+0x2ac>
        }
    }


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
    4f84:	e0 91 f9 09 	lds	r30, 0x09F9
    4f88:	f0 91 fa 09 	lds	r31, 0x09FA
    4f8c:	80 85       	ldd	r24, Z+8	; 0x08
    4f8e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_nrk_stats_task_start>
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4f92:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <nrk_get_high_ready_task_ID>
    4f96:	c8 2f       	mov	r28, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4f98:	2b e2       	ldi	r18, 0x2B	; 43
    4f9a:	82 02       	muls	r24, r18
    4f9c:	f0 01       	movw	r30, r0
    4f9e:	11 24       	eor	r1, r1
    4fa0:	e4 5f       	subi	r30, 0xF4	; 244
    4fa2:	f6 4f       	sbci	r31, 0xF6	; 246
    4fa4:	22 85       	ldd	r18, Z+10	; 0x0a
    4fa6:	20 93 fb 09 	sts	0x09FB, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    4faa:	f0 93 eb 09 	sts	0x09EB, r31
    4fae:	e0 93 ea 09 	sts	0x09EA, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    4fb2:	88 23       	and	r24, r24
    4fb4:	d9 f0       	breq	.+54     	; 0x4fec <_nrk_scheduler+0x4f6>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    4fb6:	85 a1       	ldd	r24, Z+37	; 0x25
    4fb8:	96 a1       	ldd	r25, Z+38	; 0x26
    4fba:	a7 a1       	ldd	r26, Z+39	; 0x27
    4fbc:	b0 a5       	ldd	r27, Z+40	; 0x28
    4fbe:	89 2b       	or	r24, r25
    4fc0:	8a 2b       	or	r24, r26
    4fc2:	8b 2b       	or	r24, r27
    4fc4:	99 f0       	breq	.+38     	; 0x4fec <_nrk_scheduler+0x4f6>
    4fc6:	85 8d       	ldd	r24, Z+29	; 0x1d
    4fc8:	96 8d       	ldd	r25, Z+30	; 0x1e
    4fca:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4fcc:	b0 a1       	ldd	r27, Z+32	; 0x20
    4fce:	8a 3f       	cpi	r24, 0xFA	; 250
    4fd0:	91 05       	cpc	r25, r1
    4fd2:	a1 05       	cpc	r26, r1
    4fd4:	b1 05       	cpc	r27, r1
    4fd6:	50 f4       	brcc	.+20     	; 0x4fec <_nrk_scheduler+0x4f6>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4fd8:	a8 01       	movw	r20, r16
    4fda:	60 e0       	ldi	r22, 0x00	; 0
    4fdc:	70 e0       	ldi	r23, 0x00	; 0
    4fde:	84 17       	cp	r24, r20
    4fe0:	95 07       	cpc	r25, r21
    4fe2:	a6 07       	cpc	r26, r22
    4fe4:	b7 07       	cpc	r27, r23
    4fe6:	10 f4       	brcc	.+4      	; 0x4fec <_nrk_scheduler+0x4f6>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    4fe8:	8c 01       	movw	r16, r24
    4fea:	05 c0       	rjmp	.+10     	; 0x4ff6 <_nrk_scheduler+0x500>
    }*/


//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    4fec:	0b 3f       	cpi	r16, 0xFB	; 251
    4fee:	11 05       	cpc	r17, r1
    4ff0:	10 f0       	brcs	.+4      	; 0x4ff6 <_nrk_scheduler+0x500>
    4ff2:	0a ef       	ldi	r16, 0xFA	; 250
    4ff4:	10 e0       	ldi	r17, 0x00	; 0
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    4ff6:	20 93 ec 09 	sts	0x09EC, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    4ffa:	f0 93 fa 09 	sts	0x09FA, r31
    4ffe:	e0 93 f9 09 	sts	0x09F9, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    5002:	00 93 b6 07 	sts	0x07B6, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    5006:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_os_timer_get>
    500a:	28 2f       	mov	r18, r24
    500c:	30 e0       	ldi	r19, 0x00	; 0
    500e:	2f 5f       	subi	r18, 0xFF	; 255
    5010:	3f 4f       	sbci	r19, 0xFF	; 255
    5012:	20 17       	cp	r18, r16
    5014:	31 07       	cpc	r19, r17
    5016:	40 f0       	brcs	.+16     	; 0x5028 <_nrk_scheduler+0x532>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    5018:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_os_timer_get>
    501c:	08 2f       	mov	r16, r24
    501e:	10 e0       	ldi	r17, 0x00	; 0
    5020:	0e 5f       	subi	r16, 0xFE	; 254
    5022:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    5024:	00 93 b6 07 	sts	0x07B6, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    5028:	c1 11       	cpse	r28, r1
    502a:	10 92 ed 09 	sts	0x09ED, r1

    _nrk_set_next_wakeup(next_wake);
    502e:	80 2f       	mov	r24, r16
    5030:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    5034:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    5038:	df 91       	pop	r29
    503a:	cf 91       	pop	r28
    503c:	1f 91       	pop	r17
    503e:	0f 91       	pop	r16
    5040:	ff 90       	pop	r15
    5042:	ef 90       	pop	r14
    5044:	df 90       	pop	r13
    5046:	cf 90       	pop	r12
    5048:	bf 90       	pop	r11
    504a:	af 90       	pop	r10
    504c:	9f 90       	pop	r9
    504e:	8f 90       	pop	r8
    5050:	7f 90       	pop	r7
    5052:	6f 90       	pop	r6
    5054:	5f 90       	pop	r5
    5056:	4f 90       	pop	r4
    5058:	3f 90       	pop	r3
    505a:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    505c:	0c 94 f6 2d 	jmp	0x5bec	; 0x5bec <nrk_start_high_ready_task>

00005060 <_nrk_sw_wdt_check>:
    5060:	3f 92       	push	r3
    5062:	4f 92       	push	r4
    5064:	5f 92       	push	r5
    5066:	6f 92       	push	r6
    5068:	7f 92       	push	r7
    506a:	8f 92       	push	r8
    506c:	9f 92       	push	r9
    506e:	af 92       	push	r10
    5070:	bf 92       	push	r11
    5072:	cf 92       	push	r12
    5074:	df 92       	push	r13
    5076:	ef 92       	push	r14
    5078:	ff 92       	push	r15
    507a:	0f 93       	push	r16
    507c:	1f 93       	push	r17
    507e:	cf 93       	push	r28
    5080:	df 93       	push	r29
    5082:	cd b7       	in	r28, 0x3d	; 61
    5084:	de b7       	in	r29, 0x3e	; 62
    5086:	60 97       	sbiw	r28, 0x10	; 16
    5088:	0f b6       	in	r0, 0x3f	; 63
    508a:	f8 94       	cli
    508c:	de bf       	out	0x3e, r29	; 62
    508e:	0f be       	out	0x3f, r0	; 63
    5090:	cd bf       	out	0x3d, r28	; 61
    5092:	ce 01       	movw	r24, r28
    5094:	09 96       	adiw	r24, 0x09	; 9
    5096:	0e 94 d7 22 	call	0x45ae	; 0x45ae <nrk_time_get>
    509a:	8c ef       	ldi	r24, 0xFC	; 252
    509c:	48 2e       	mov	r4, r24
    509e:	89 e0       	ldi	r24, 0x09	; 9
    50a0:	58 2e       	mov	r5, r24
    50a2:	61 2c       	mov	r6, r1
    50a4:	71 2c       	mov	r7, r1
    50a6:	93 e1       	ldi	r25, 0x13	; 19
    50a8:	39 2e       	mov	r3, r25
    50aa:	d2 01       	movw	r26, r4
    50ac:	12 96       	adiw	r26, 0x02	; 2
    50ae:	8c 91       	ld	r24, X
    50b0:	81 30       	cpi	r24, 0x01	; 1
    50b2:	51 f5       	brne	.+84     	; 0x5108 <_nrk_sw_wdt_check+0xa8>
    50b4:	36 9c       	mul	r3, r6
    50b6:	f0 01       	movw	r30, r0
    50b8:	37 9c       	mul	r3, r7
    50ba:	f0 0d       	add	r31, r0
    50bc:	11 24       	eor	r1, r1
    50be:	e9 5f       	subi	r30, 0xF9	; 249
    50c0:	f5 4f       	sbci	r31, 0xF5	; 245
    50c2:	89 84       	ldd	r8, Y+9	; 0x09
    50c4:	9a 84       	ldd	r9, Y+10	; 0x0a
    50c6:	ab 84       	ldd	r10, Y+11	; 0x0b
    50c8:	bc 84       	ldd	r11, Y+12	; 0x0c
    50ca:	cd 84       	ldd	r12, Y+13	; 0x0d
    50cc:	de 84       	ldd	r13, Y+14	; 0x0e
    50ce:	ef 84       	ldd	r14, Y+15	; 0x0f
    50d0:	f8 88       	ldd	r15, Y+16	; 0x10
    50d2:	00 81       	ld	r16, Z
    50d4:	11 81       	ldd	r17, Z+1	; 0x01
    50d6:	22 81       	ldd	r18, Z+2	; 0x02
    50d8:	33 81       	ldd	r19, Z+3	; 0x03
    50da:	44 81       	ldd	r20, Z+4	; 0x04
    50dc:	55 81       	ldd	r21, Z+5	; 0x05
    50de:	66 81       	ldd	r22, Z+6	; 0x06
    50e0:	77 81       	ldd	r23, Z+7	; 0x07
    50e2:	ce 01       	movw	r24, r28
    50e4:	01 96       	adiw	r24, 0x01	; 1
    50e6:	0e 94 34 23 	call	0x4668	; 0x4668 <nrk_time_sub>
    50ea:	8f 3f       	cpi	r24, 0xFF	; 255
    50ec:	69 f4       	brne	.+26     	; 0x5108 <_nrk_sw_wdt_check+0xa8>
    50ee:	66 2d       	mov	r22, r6
    50f0:	85 e1       	ldi	r24, 0x15	; 21
    50f2:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
    50f6:	d2 01       	movw	r26, r4
    50f8:	ed 91       	ld	r30, X+
    50fa:	fc 91       	ld	r31, X
    50fc:	30 97       	sbiw	r30, 0x00	; 0
    50fe:	19 f4       	brne	.+6      	; 0x5106 <_nrk_sw_wdt_check+0xa6>
    5100:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <nrk_halt>
    5104:	01 c0       	rjmp	.+2      	; 0x5108 <_nrk_sw_wdt_check+0xa8>
    5106:	09 95       	icall
    5108:	bf ef       	ldi	r27, 0xFF	; 255
    510a:	6b 1a       	sub	r6, r27
    510c:	7b 0a       	sbc	r7, r27
    510e:	e3 e1       	ldi	r30, 0x13	; 19
    5110:	4e 0e       	add	r4, r30
    5112:	51 1c       	adc	r5, r1
    5114:	f3 e0       	ldi	r31, 0x03	; 3
    5116:	6f 16       	cp	r6, r31
    5118:	71 04       	cpc	r7, r1
    511a:	39 f6       	brne	.-114    	; 0x50aa <_nrk_sw_wdt_check+0x4a>
    511c:	60 96       	adiw	r28, 0x10	; 16
    511e:	0f b6       	in	r0, 0x3f	; 63
    5120:	f8 94       	cli
    5122:	de bf       	out	0x3e, r29	; 62
    5124:	0f be       	out	0x3f, r0	; 63
    5126:	cd bf       	out	0x3d, r28	; 61
    5128:	df 91       	pop	r29
    512a:	cf 91       	pop	r28
    512c:	1f 91       	pop	r17
    512e:	0f 91       	pop	r16
    5130:	ff 90       	pop	r15
    5132:	ef 90       	pop	r14
    5134:	df 90       	pop	r13
    5136:	cf 90       	pop	r12
    5138:	bf 90       	pop	r11
    513a:	af 90       	pop	r10
    513c:	9f 90       	pop	r9
    513e:	8f 90       	pop	r8
    5140:	7f 90       	pop	r7
    5142:	6f 90       	pop	r6
    5144:	5f 90       	pop	r5
    5146:	4f 90       	pop	r4
    5148:	3f 90       	pop	r3
    514a:	08 95       	ret

0000514c <_nrk_sw_wdt_init>:

void _nrk_sw_wdt_init()
{
    uint8_t i;
    for(i=0; i<NRK_MAX_SW_WDT; i++ )
        sw_wdts[i].active=0;
    514c:	ec ef       	ldi	r30, 0xFC	; 252
    514e:	f9 e0       	ldi	r31, 0x09	; 9
    5150:	12 82       	std	Z+2, r1	; 0x02
    5152:	15 8a       	std	Z+21, r1	; 0x15
    5154:	10 a6       	std	Z+40, r1	; 0x28
    5156:	08 95       	ret

00005158 <nrk_sw_wdt_init>:
}

int8_t nrk_sw_wdt_init(uint8_t id, nrk_time_t *period, void *func)
{
    5158:	cf 93       	push	r28
    515a:	df 93       	push	r29
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    515c:	83 30       	cpi	r24, 0x03	; 3
    515e:	e0 f4       	brcc	.+56     	; 0x5198 <nrk_sw_wdt_init+0x40>
    sw_wdts[id].error_func=func;
    5160:	93 e1       	ldi	r25, 0x13	; 19
    5162:	89 9f       	mul	r24, r25
    5164:	f0 01       	movw	r30, r0
    5166:	11 24       	eor	r1, r1
    5168:	e4 50       	subi	r30, 0x04	; 4
    516a:	f6 4f       	sbci	r31, 0xF6	; 246
    516c:	51 83       	std	Z+1, r21	; 0x01
    516e:	40 83       	st	Z, r20
    sw_wdts[id].period.secs=period->secs;
    5170:	eb 01       	movw	r28, r22
    5172:	88 81       	ld	r24, Y
    5174:	99 81       	ldd	r25, Y+1	; 0x01
    5176:	aa 81       	ldd	r26, Y+2	; 0x02
    5178:	bb 81       	ldd	r27, Y+3	; 0x03
    517a:	83 83       	std	Z+3, r24	; 0x03
    517c:	94 83       	std	Z+4, r25	; 0x04
    517e:	a5 83       	std	Z+5, r26	; 0x05
    5180:	b6 83       	std	Z+6, r27	; 0x06
    sw_wdts[id].period.nano_secs=period->nano_secs;
    5182:	8c 81       	ldd	r24, Y+4	; 0x04
    5184:	9d 81       	ldd	r25, Y+5	; 0x05
    5186:	ae 81       	ldd	r26, Y+6	; 0x06
    5188:	bf 81       	ldd	r27, Y+7	; 0x07
    518a:	87 83       	std	Z+7, r24	; 0x07
    518c:	90 87       	std	Z+8, r25	; 0x08
    518e:	a1 87       	std	Z+9, r26	; 0x09
    5190:	b2 87       	std	Z+10, r27	; 0x0a
    sw_wdts[id].active=0;
    5192:	12 82       	std	Z+2, r1	; 0x02
    return NRK_OK;
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	01 c0       	rjmp	.+2      	; 0x519a <nrk_sw_wdt_init+0x42>
        sw_wdts[i].active=0;
}

int8_t nrk_sw_wdt_init(uint8_t id, nrk_time_t *period, void *func)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    5198:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].error_func=func;
    sw_wdts[id].period.secs=period->secs;
    sw_wdts[id].period.nano_secs=period->nano_secs;
    sw_wdts[id].active=0;
    return NRK_OK;
}
    519a:	df 91       	pop	r29
    519c:	cf 91       	pop	r28
    519e:	08 95       	ret

000051a0 <nrk_sw_wdt_update>:

int8_t nrk_sw_wdt_update(uint8_t id)
{
    51a0:	cf 92       	push	r12
    51a2:	df 92       	push	r13
    51a4:	ef 92       	push	r14
    51a6:	ff 92       	push	r15
    51a8:	0f 93       	push	r16
    51aa:	1f 93       	push	r17
    51ac:	cf 93       	push	r28
    51ae:	df 93       	push	r29
    51b0:	cd b7       	in	r28, 0x3d	; 61
    51b2:	de b7       	in	r29, 0x3e	; 62
    51b4:	28 97       	sbiw	r28, 0x08	; 8
    51b6:	0f b6       	in	r0, 0x3f	; 63
    51b8:	f8 94       	cli
    51ba:	de bf       	out	0x3e, r29	; 62
    51bc:	0f be       	out	0x3f, r0	; 63
    51be:	cd bf       	out	0x3d, r28	; 61
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    51c0:	83 30       	cpi	r24, 0x03	; 3
    51c2:	a8 f5       	brcc	.+106    	; 0x522e <nrk_sw_wdt_update+0x8e>
    51c4:	18 2f       	mov	r17, r24
    nrk_time_get(&now);
    51c6:	ce 01       	movw	r24, r28
    51c8:	01 96       	adiw	r24, 0x01	; 1
    51ca:	0e 94 d7 22 	call	0x45ae	; 0x45ae <nrk_time_get>
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    51ce:	23 e1       	ldi	r18, 0x13	; 19
    51d0:	12 9f       	mul	r17, r18
    51d2:	c0 01       	movw	r24, r0
    51d4:	11 24       	eor	r1, r1
    51d6:	8c 01       	movw	r16, r24
    51d8:	04 50       	subi	r16, 0x04	; 4
    51da:	16 4f       	sbci	r17, 0xF6	; 246
    51dc:	f8 01       	movw	r30, r16
    51de:	c3 80       	ldd	r12, Z+3	; 0x03
    51e0:	d4 80       	ldd	r13, Z+4	; 0x04
    51e2:	e5 80       	ldd	r14, Z+5	; 0x05
    51e4:	f6 80       	ldd	r15, Z+6	; 0x06
    51e6:	49 81       	ldd	r20, Y+1	; 0x01
    51e8:	5a 81       	ldd	r21, Y+2	; 0x02
    51ea:	6b 81       	ldd	r22, Y+3	; 0x03
    51ec:	7c 81       	ldd	r23, Y+4	; 0x04
    51ee:	4c 0d       	add	r20, r12
    51f0:	5d 1d       	adc	r21, r13
    51f2:	6e 1d       	adc	r22, r14
    51f4:	7f 1d       	adc	r23, r15
    51f6:	43 87       	std	Z+11, r20	; 0x0b
    51f8:	54 87       	std	Z+12, r21	; 0x0c
    51fa:	65 87       	std	Z+13, r22	; 0x0d
    51fc:	76 87       	std	Z+14, r23	; 0x0e
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    51fe:	c7 80       	ldd	r12, Z+7	; 0x07
    5200:	d0 84       	ldd	r13, Z+8	; 0x08
    5202:	e1 84       	ldd	r14, Z+9	; 0x09
    5204:	f2 84       	ldd	r15, Z+10	; 0x0a
    5206:	4d 81       	ldd	r20, Y+5	; 0x05
    5208:	5e 81       	ldd	r21, Y+6	; 0x06
    520a:	6f 81       	ldd	r22, Y+7	; 0x07
    520c:	78 85       	ldd	r23, Y+8	; 0x08
    520e:	4c 0d       	add	r20, r12
    5210:	5d 1d       	adc	r21, r13
    5212:	6e 1d       	adc	r22, r14
    5214:	7f 1d       	adc	r23, r15
    5216:	47 87       	std	Z+15, r20	; 0x0f
    5218:	50 8b       	std	Z+16, r21	; 0x10
    521a:	61 8b       	std	Z+17, r22	; 0x11
    521c:	72 8b       	std	Z+18, r23	; 0x12
    nrk_time_compact_nanos(&(sw_wdts[id].next_period));
    521e:	89 5f       	subi	r24, 0xF9	; 249
    5220:	95 4f       	sbci	r25, 0xF5	; 245
    5222:	0e 94 c0 23 	call	0x4780	; 0x4780 <nrk_time_compact_nanos>
    sw_wdts[id].active=1;
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	f8 01       	movw	r30, r16
    522a:	82 83       	std	Z+2, r24	; 0x02
    return NRK_OK;
    522c:	01 c0       	rjmp	.+2      	; 0x5230 <nrk_sw_wdt_update+0x90>
}

int8_t nrk_sw_wdt_update(uint8_t id)
{
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    522e:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    nrk_time_compact_nanos(&(sw_wdts[id].next_period));
    sw_wdts[id].active=1;
    return NRK_OK;
}
    5230:	28 96       	adiw	r28, 0x08	; 8
    5232:	0f b6       	in	r0, 0x3f	; 63
    5234:	f8 94       	cli
    5236:	de bf       	out	0x3e, r29	; 62
    5238:	0f be       	out	0x3f, r0	; 63
    523a:	cd bf       	out	0x3d, r28	; 61
    523c:	df 91       	pop	r29
    523e:	cf 91       	pop	r28
    5240:	1f 91       	pop	r17
    5242:	0f 91       	pop	r16
    5244:	ff 90       	pop	r15
    5246:	ef 90       	pop	r14
    5248:	df 90       	pop	r13
    524a:	cf 90       	pop	r12
    524c:	08 95       	ret

0000524e <nrk_sw_wdt_start>:

int8_t nrk_sw_wdt_start(uint8_t id)
{
    524e:	1f 93       	push	r17
    5250:	cf 93       	push	r28
    5252:	df 93       	push	r29
    5254:	cd b7       	in	r28, 0x3d	; 61
    5256:	de b7       	in	r29, 0x3e	; 62
    5258:	28 97       	sbiw	r28, 0x08	; 8
    525a:	0f b6       	in	r0, 0x3f	; 63
    525c:	f8 94       	cli
    525e:	de bf       	out	0x3e, r29	; 62
    5260:	0f be       	out	0x3f, r0	; 63
    5262:	cd bf       	out	0x3d, r28	; 61
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    5264:	83 30       	cpi	r24, 0x03	; 3
    5266:	70 f5       	brcc	.+92     	; 0x52c4 <nrk_sw_wdt_start+0x76>
    5268:	18 2f       	mov	r17, r24
    nrk_time_get(&now);
    526a:	ce 01       	movw	r24, r28
    526c:	01 96       	adiw	r24, 0x01	; 1
    526e:	0e 94 d7 22 	call	0x45ae	; 0x45ae <nrk_time_get>
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    5272:	83 e1       	ldi	r24, 0x13	; 19
    5274:	18 9f       	mul	r17, r24
    5276:	f0 01       	movw	r30, r0
    5278:	11 24       	eor	r1, r1
    527a:	e4 50       	subi	r30, 0x04	; 4
    527c:	f6 4f       	sbci	r31, 0xF6	; 246
    527e:	43 81       	ldd	r20, Z+3	; 0x03
    5280:	54 81       	ldd	r21, Z+4	; 0x04
    5282:	65 81       	ldd	r22, Z+5	; 0x05
    5284:	76 81       	ldd	r23, Z+6	; 0x06
    5286:	89 81       	ldd	r24, Y+1	; 0x01
    5288:	9a 81       	ldd	r25, Y+2	; 0x02
    528a:	ab 81       	ldd	r26, Y+3	; 0x03
    528c:	bc 81       	ldd	r27, Y+4	; 0x04
    528e:	84 0f       	add	r24, r20
    5290:	95 1f       	adc	r25, r21
    5292:	a6 1f       	adc	r26, r22
    5294:	b7 1f       	adc	r27, r23
    5296:	83 87       	std	Z+11, r24	; 0x0b
    5298:	94 87       	std	Z+12, r25	; 0x0c
    529a:	a5 87       	std	Z+13, r26	; 0x0d
    529c:	b6 87       	std	Z+14, r27	; 0x0e
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    529e:	47 81       	ldd	r20, Z+7	; 0x07
    52a0:	50 85       	ldd	r21, Z+8	; 0x08
    52a2:	61 85       	ldd	r22, Z+9	; 0x09
    52a4:	72 85       	ldd	r23, Z+10	; 0x0a
    52a6:	8d 81       	ldd	r24, Y+5	; 0x05
    52a8:	9e 81       	ldd	r25, Y+6	; 0x06
    52aa:	af 81       	ldd	r26, Y+7	; 0x07
    52ac:	b8 85       	ldd	r27, Y+8	; 0x08
    52ae:	84 0f       	add	r24, r20
    52b0:	95 1f       	adc	r25, r21
    52b2:	a6 1f       	adc	r26, r22
    52b4:	b7 1f       	adc	r27, r23
    52b6:	87 87       	std	Z+15, r24	; 0x0f
    52b8:	90 8b       	std	Z+16, r25	; 0x10
    52ba:	a1 8b       	std	Z+17, r26	; 0x11
    52bc:	b2 8b       	std	Z+18, r27	; 0x12
    sw_wdts[id].active=1;
    52be:	81 e0       	ldi	r24, 0x01	; 1
    52c0:	82 83       	std	Z+2, r24	; 0x02

    return NRK_OK;
    52c2:	01 c0       	rjmp	.+2      	; 0x52c6 <nrk_sw_wdt_start+0x78>
}

int8_t nrk_sw_wdt_start(uint8_t id)
{
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    52c4:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    sw_wdts[id].active=1;

    return NRK_OK;
}
    52c6:	28 96       	adiw	r28, 0x08	; 8
    52c8:	0f b6       	in	r0, 0x3f	; 63
    52ca:	f8 94       	cli
    52cc:	de bf       	out	0x3e, r29	; 62
    52ce:	0f be       	out	0x3f, r0	; 63
    52d0:	cd bf       	out	0x3d, r28	; 61
    52d2:	df 91       	pop	r29
    52d4:	cf 91       	pop	r28
    52d6:	1f 91       	pop	r17
    52d8:	08 95       	ret

000052da <nrk_sw_wdt_stop>:

int8_t nrk_sw_wdt_stop(uint8_t id)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    52da:	83 30       	cpi	r24, 0x03	; 3
    52dc:	48 f4       	brcc	.+18     	; 0x52f0 <nrk_sw_wdt_stop+0x16>
    sw_wdts[id].active=0;
    52de:	93 e1       	ldi	r25, 0x13	; 19
    52e0:	89 9f       	mul	r24, r25
    52e2:	f0 01       	movw	r30, r0
    52e4:	11 24       	eor	r1, r1
    52e6:	e4 50       	subi	r30, 0x04	; 4
    52e8:	f6 4f       	sbci	r31, 0xF6	; 246
    52ea:	12 82       	std	Z+2, r1	; 0x02
    return NRK_OK;
    52ec:	81 e0       	ldi	r24, 0x01	; 1
    52ee:	08 95       	ret
    return NRK_OK;
}

int8_t nrk_sw_wdt_stop(uint8_t id)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    52f0:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].active=0;
    return NRK_OK;
}
    52f2:	08 95       	ret

000052f4 <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    530c:	01 97       	sbiw	r24, 0x01	; 1
    530e:	91 f7       	brne	.-28     	; 0x52f4 <nrk_spin_wait_us>

}
    5310:	08 95       	ret

00005312 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    5312:	10 92 21 01 	sts	0x0121, r1
    5316:	08 95       	ret

00005318 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    5318:	89 e0       	ldi	r24, 0x09	; 9
    531a:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    531e:	8d e8       	ldi	r24, 0x8D	; 141
    5320:	9c e3       	ldi	r25, 0x3C	; 60
    5322:	90 93 29 01 	sts	0x0129, r25
    5326:	80 93 28 01 	sts	0x0128, r24
    532a:	08 95       	ret

0000532c <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    532c:	10 92 25 01 	sts	0x0125, r1
    5330:	10 92 24 01 	sts	0x0124, r1
    5334:	08 95       	ret

00005336 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    5336:	cf 93       	push	r28
    5338:	df 93       	push	r29
    533a:	00 d0       	rcall	.+0      	; 0x533c <_nrk_precision_os_timer_get+0x6>
    533c:	cd b7       	in	r28, 0x3d	; 61
    533e:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    5340:	80 91 24 01 	lds	r24, 0x0124
    5344:	90 91 25 01 	lds	r25, 0x0125
    5348:	9a 83       	std	Y+2, r25	; 0x02
    534a:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    534c:	89 81       	ldd	r24, Y+1	; 0x01
    534e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5350:	0f 90       	pop	r0
    5352:	0f 90       	pop	r0
    5354:	df 91       	pop	r29
    5356:	cf 91       	pop	r28
    5358:	08 95       	ret

0000535a <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    535a:	10 92 81 00 	sts	0x0081, r1
    535e:	08 95       	ret

00005360 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    5360:	81 e0       	ldi	r24, 0x01	; 1
    5362:	80 93 81 00 	sts	0x0081, r24
    5366:	08 95       	ret

00005368 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5368:	83 b5       	in	r24, 0x23	; 35
    536a:	81 60       	ori	r24, 0x01	; 1
    536c:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    536e:	10 92 85 00 	sts	0x0085, r1
    5372:	10 92 84 00 	sts	0x0084, r1
    5376:	08 95       	ret

00005378 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    5378:	cf 93       	push	r28
    537a:	df 93       	push	r29
    537c:	00 d0       	rcall	.+0      	; 0x537e <_nrk_high_speed_timer_get+0x6>
    537e:	cd b7       	in	r28, 0x3d	; 61
    5380:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    5382:	80 91 84 00 	lds	r24, 0x0084
    5386:	90 91 85 00 	lds	r25, 0x0085
    538a:	9a 83       	std	Y+2, r25	; 0x02
    538c:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    538e:	89 81       	ldd	r24, Y+1	; 0x01
    5390:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5392:	0f 90       	pop	r0
    5394:	0f 90       	pop	r0
    5396:	df 91       	pop	r29
    5398:	cf 91       	pop	r28
    539a:	08 95       	ret

0000539c <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    539c:	cf 92       	push	r12
    539e:	df 92       	push	r13
    53a0:	ef 92       	push	r14
    53a2:	ff 92       	push	r15
    53a4:	cf 93       	push	r28
    53a6:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    53a8:	ec 01       	movw	r28, r24
    53aa:	cc 0f       	add	r28, r28
    53ac:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    53ae:	c9 37       	cpi	r28, 0x79	; 121
    53b0:	8f ef       	ldi	r24, 0xFF	; 255
    53b2:	d8 07       	cpc	r29, r24
    53b4:	10 f0       	brcs	.+4      	; 0x53ba <nrk_high_speed_timer_wait+0x1e>
    53b6:	c0 e0       	ldi	r28, 0x00	; 0
    53b8:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    53ba:	6b 01       	movw	r12, r22
    53bc:	e1 2c       	mov	r14, r1
    53be:	f1 2c       	mov	r15, r1
    53c0:	cc 0e       	add	r12, r28
    53c2:	dd 1e       	adc	r13, r29
    53c4:	e1 1c       	adc	r14, r1
    53c6:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    53c8:	81 e0       	ldi	r24, 0x01	; 1
    53ca:	c8 16       	cp	r12, r24
    53cc:	d1 04       	cpc	r13, r1
    53ce:	e8 06       	cpc	r14, r24
    53d0:	f1 04       	cpc	r15, r1
    53d2:	40 f0       	brcs	.+16     	; 0x53e4 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    53d4:	81 e0       	ldi	r24, 0x01	; 1
    53d6:	e8 1a       	sub	r14, r24
    53d8:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    53da:	0e 94 bc 29 	call	0x5378	; 0x5378 <_nrk_high_speed_timer_get>
    53de:	c8 17       	cp	r28, r24
    53e0:	d9 07       	cpc	r29, r25
    53e2:	d8 f3       	brcs	.-10     	; 0x53da <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    53e4:	0e 94 bc 29 	call	0x5378	; 0x5378 <_nrk_high_speed_timer_get>
    53e8:	8c 15       	cp	r24, r12
    53ea:	9d 05       	cpc	r25, r13
    53ec:	d8 f3       	brcs	.-10     	; 0x53e4 <nrk_high_speed_timer_wait+0x48>
}
    53ee:	df 91       	pop	r29
    53f0:	cf 91       	pop	r28
    53f2:	ff 90       	pop	r15
    53f4:	ef 90       	pop	r14
    53f6:	df 90       	pop	r13
    53f8:	cf 90       	pop	r12
    53fa:	08 95       	ret

000053fc <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    53fc:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    5400:	e0 e7       	ldi	r30, 0x70	; 112
    5402:	f0 e0       	ldi	r31, 0x00	; 0
    5404:	80 81       	ld	r24, Z
    5406:	8d 7f       	andi	r24, 0xFD	; 253
    5408:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    540a:	80 81       	ld	r24, Z
    540c:	8e 7f       	andi	r24, 0xFE	; 254
    540e:	80 83       	st	Z, r24
    5410:	08 95       	ret

00005412 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    5412:	80 93 b2 00 	sts	0x00B2, r24
    5416:	08 95       	ret

00005418 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    5418:	e0 e7       	ldi	r30, 0x70	; 112
    541a:	f0 e0       	ldi	r31, 0x00	; 0
    541c:	80 81       	ld	r24, Z
    541e:	83 60       	ori	r24, 0x03	; 3
    5420:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    5422:	83 e0       	ldi	r24, 0x03	; 3
    5424:	80 93 b1 00 	sts	0x00B1, r24
    5428:	08 95       	ret

0000542a <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    542a:	83 b5       	in	r24, 0x23	; 35
    542c:	82 60       	ori	r24, 0x02	; 2
    542e:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    5430:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    5434:	10 92 55 06 	sts	0x0655, r1
    _nrk_prev_timer_val=0;
    5438:	10 92 b6 07 	sts	0x07B6, r1
    543c:	08 95       	ret

0000543e <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    543e:	cf 93       	push	r28
    5440:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    5442:	8e ef       	ldi	r24, 0xFE	; 254
    5444:	80 93 b6 07 	sts	0x07B6, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    5448:	80 e2       	ldi	r24, 0x20	; 32
    544a:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    544e:	80 91 b6 07 	lds	r24, 0x07B6
    5452:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    5456:	83 e0       	ldi	r24, 0x03	; 3
    5458:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    545a:	92 e0       	ldi	r25, 0x02	; 2
    545c:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    5460:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    5464:	93 b5       	in	r25, 0x23	; 35
    5466:	92 60       	ori	r25, 0x02	; 2
    5468:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    546a:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    546c:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    546e:	83 b5       	in	r24, 0x23	; 35
    5470:	82 60       	ori	r24, 0x02	; 2
    5472:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    5474:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    5478:	81 e0       	ldi	r24, 0x01	; 1
    547a:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    547e:	10 92 85 00 	sts	0x0085, r1
    5482:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5486:	83 b5       	in	r24, 0x23	; 35
    5488:	82 60       	ori	r24, 0x02	; 2
    548a:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    548c:	83 b5       	in	r24, 0x23	; 35
    548e:	81 60       	ori	r24, 0x01	; 1
    5490:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    5492:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    5496:	c4 e2       	ldi	r28, 0x24	; 36
    5498:	d1 e0       	ldi	r29, 0x01	; 1
    549a:	19 82       	std	Y+1, r1	; 0x01
    549c:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    549e:	83 b5       	in	r24, 0x23	; 35
    54a0:	82 60       	ori	r24, 0x02	; 2
    54a2:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    54a4:	83 b5       	in	r24, 0x23	; 35
    54a6:	81 60       	ori	r24, 0x01	; 1
    54a8:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    54aa:	0e 94 15 2a 	call	0x542a	; 0x542a <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    54ae:	19 82       	std	Y+1, r1	; 0x01
    54b0:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    54b2:	0e 94 0c 2a 	call	0x5418	; 0x5418 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    54b6:	0e 94 8c 29 	call	0x5318	; 0x5318 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    54ba:	10 92 55 06 	sts	0x0655, r1
}
    54be:	df 91       	pop	r29
    54c0:	cf 91       	pop	r28
    54c2:	08 95       	ret

000054c4 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    54c4:	80 91 b3 00 	lds	r24, 0x00B3
}
    54c8:	8f 5f       	subi	r24, 0xFF	; 255
    54ca:	08 95       	ret

000054cc <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    54cc:	81 50       	subi	r24, 0x01	; 1
    54ce:	80 93 b3 00 	sts	0x00B3, r24
    54d2:	08 95       	ret

000054d4 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    54d4:	81 11       	cpse	r24, r1
    54d6:	02 c0       	rjmp	.+4      	; 0x54dc <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    54d8:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    54dc:	8f ef       	ldi	r24, 0xFF	; 255
    54de:	08 95       	ret

000054e0 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    54e0:	81 11       	cpse	r24, r1
    54e2:	06 c0       	rjmp	.+12     	; 0x54f0 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    54e4:	10 92 95 00 	sts	0x0095, r1
    54e8:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    54ec:	81 e0       	ldi	r24, 0x01	; 1
    54ee:	08 95       	ret
	}
return NRK_ERROR;
    54f0:	8f ef       	ldi	r24, 0xFF	; 255
}
    54f2:	08 95       	ret

000054f4 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    54f4:	81 11       	cpse	r24, r1
    54f6:	05 c0       	rjmp	.+10     	; 0x5502 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    54f8:	80 91 94 00 	lds	r24, 0x0094
    54fc:	90 91 95 00 	lds	r25, 0x0095
    5500:	08 95       	ret
	}
return 0;
    5502:	80 e0       	ldi	r24, 0x00	; 0
    5504:	90 e0       	ldi	r25, 0x00	; 0

}
    5506:	08 95       	ret

00005508 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    5508:	81 11       	cpse	r24, r1
    550a:	05 c0       	rjmp	.+10     	; 0x5516 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    550c:	82 e0       	ldi	r24, 0x02	; 2
    550e:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	08 95       	ret
	}
return NRK_ERROR;
    5516:	8f ef       	ldi	r24, 0xFF	; 255
}
    5518:	08 95       	ret

0000551a <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    551a:	81 11       	cpse	r24, r1
    551c:	35 c0       	rjmp	.+106    	; 0x5588 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    551e:	cb 01       	movw	r24, r22
    5520:	01 97       	sbiw	r24, 0x01	; 1
    5522:	05 97       	sbiw	r24, 0x05	; 5
    5524:	10 f4       	brcc	.+4      	; 0x552a <nrk_timer_int_configure+0x10>
    5526:	60 93 b3 07 	sts	0x07B3, r22
	TCCR3A = 0;  
    552a:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    552e:	88 e0       	ldi	r24, 0x08	; 8
    5530:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    5534:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    5538:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    553c:	30 93 c5 05 	sts	0x05C5, r19
    5540:	20 93 c4 05 	sts	0x05C4, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    5544:	80 91 b3 07 	lds	r24, 0x07B3
    5548:	81 30       	cpi	r24, 0x01	; 1
    554a:	21 f4       	brne	.+8      	; 0x5554 <nrk_timer_int_configure+0x3a>
    554c:	80 91 91 00 	lds	r24, 0x0091
    5550:	81 60       	ori	r24, 0x01	; 1
    5552:	11 c0       	rjmp	.+34     	; 0x5576 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    5554:	82 30       	cpi	r24, 0x02	; 2
    5556:	21 f4       	brne	.+8      	; 0x5560 <nrk_timer_int_configure+0x46>
    5558:	80 91 91 00 	lds	r24, 0x0091
    555c:	82 60       	ori	r24, 0x02	; 2
    555e:	0b c0       	rjmp	.+22     	; 0x5576 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    5560:	83 30       	cpi	r24, 0x03	; 3
    5562:	21 f4       	brne	.+8      	; 0x556c <nrk_timer_int_configure+0x52>
    5564:	80 91 91 00 	lds	r24, 0x0091
    5568:	83 60       	ori	r24, 0x03	; 3
    556a:	05 c0       	rjmp	.+10     	; 0x5576 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    556c:	84 30       	cpi	r24, 0x04	; 4
    556e:	31 f4       	brne	.+12     	; 0x557c <nrk_timer_int_configure+0x62>
    5570:	80 91 91 00 	lds	r24, 0x0091
    5574:	84 60       	ori	r24, 0x04	; 4
    5576:	80 93 91 00 	sts	0x0091, r24
    557a:	08 c0       	rjmp	.+16     	; 0x558c <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    557c:	85 30       	cpi	r24, 0x05	; 5
    557e:	31 f4       	brne	.+12     	; 0x558c <nrk_timer_int_configure+0x72>
    5580:	80 91 91 00 	lds	r24, 0x0091
    5584:	85 60       	ori	r24, 0x05	; 5
    5586:	f7 cf       	rjmp	.-18     	; 0x5576 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    5588:	8f ef       	ldi	r24, 0xFF	; 255
    558a:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    558c:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    558e:	08 95       	ret

00005590 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    5590:	80 91 b2 00 	lds	r24, 0x00B2
}
    5594:	08 95       	ret

00005596 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    5596:	1f 92       	push	r1
    5598:	0f 92       	push	r0
    559a:	0f b6       	in	r0, 0x3f	; 63
    559c:	0f 92       	push	r0
    559e:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    55a0:	60 e0       	ldi	r22, 0x00	; 0
    55a2:	8a e0       	ldi	r24, 0x0A	; 10
    55a4:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
	while(1);
    55a8:	ff cf       	rjmp	.-2      	; 0x55a8 <__vector_default+0x12>

000055aa <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    55aa:	0f 92       	push	r0
    55ac:	0f b6       	in	r0, 0x3f	; 63
    55ae:	0f 92       	push	r0
    55b0:	1f 92       	push	r1
    55b2:	2f 92       	push	r2
    55b4:	3f 92       	push	r3
    55b6:	4f 92       	push	r4
    55b8:	5f 92       	push	r5
    55ba:	6f 92       	push	r6
    55bc:	7f 92       	push	r7
    55be:	8f 92       	push	r8
    55c0:	9f 92       	push	r9
    55c2:	af 92       	push	r10
    55c4:	bf 92       	push	r11
    55c6:	cf 92       	push	r12
    55c8:	df 92       	push	r13
    55ca:	ef 92       	push	r14
    55cc:	ff 92       	push	r15
    55ce:	0f 93       	push	r16
    55d0:	1f 93       	push	r17
    55d2:	2f 93       	push	r18
    55d4:	3f 93       	push	r19
    55d6:	4f 93       	push	r20
    55d8:	5f 93       	push	r21
    55da:	6f 93       	push	r22
    55dc:	7f 93       	push	r23
    55de:	8f 93       	push	r24
    55e0:	9f 93       	push	r25
    55e2:	af 93       	push	r26
    55e4:	bf 93       	push	r27
    55e6:	cf 93       	push	r28
    55e8:	df 93       	push	r29
    55ea:	ef 93       	push	r30
    55ec:	ff 93       	push	r31
    55ee:	a0 91 f9 09 	lds	r26, 0x09F9
    55f2:	b0 91 fa 09 	lds	r27, 0x09FA
    55f6:	0d b6       	in	r0, 0x3d	; 61
    55f8:	0d 92       	st	X+, r0
    55fa:	0e b6       	in	r0, 0x3e	; 62
    55fc:	0d 92       	st	X+, r0
    55fe:	1f 92       	push	r1
    5600:	a0 91 1e 07 	lds	r26, 0x071E
    5604:	b0 91 1f 07 	lds	r27, 0x071F
    5608:	1e 90       	ld	r1, -X
    560a:	be bf       	out	0x3e, r27	; 62
    560c:	ad bf       	out	0x3d, r26	; 61
    560e:	08 95       	ret

00005610 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    5610:	1f 92       	push	r1
    5612:	0f 92       	push	r0
    5614:	0f b6       	in	r0, 0x3f	; 63
    5616:	0f 92       	push	r0
    5618:	11 24       	eor	r1, r1
    561a:	0b b6       	in	r0, 0x3b	; 59
    561c:	0f 92       	push	r0
    561e:	2f 93       	push	r18
    5620:	3f 93       	push	r19
    5622:	4f 93       	push	r20
    5624:	5f 93       	push	r21
    5626:	6f 93       	push	r22
    5628:	7f 93       	push	r23
    562a:	8f 93       	push	r24
    562c:	9f 93       	push	r25
    562e:	af 93       	push	r26
    5630:	bf 93       	push	r27
    5632:	ef 93       	push	r30
    5634:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    5636:	e0 91 c4 05 	lds	r30, 0x05C4
    563a:	f0 91 c5 05 	lds	r31, 0x05C5
    563e:	30 97       	sbiw	r30, 0x00	; 0
    5640:	11 f0       	breq	.+4      	; 0x5646 <__vector_32+0x36>
    5642:	09 95       	icall
    5644:	04 c0       	rjmp	.+8      	; 0x564e <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5646:	60 e0       	ldi	r22, 0x00	; 0
    5648:	8a e0       	ldi	r24, 0x0A	; 10
    564a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
	return;  	
}
    564e:	ff 91       	pop	r31
    5650:	ef 91       	pop	r30
    5652:	bf 91       	pop	r27
    5654:	af 91       	pop	r26
    5656:	9f 91       	pop	r25
    5658:	8f 91       	pop	r24
    565a:	7f 91       	pop	r23
    565c:	6f 91       	pop	r22
    565e:	5f 91       	pop	r21
    5660:	4f 91       	pop	r20
    5662:	3f 91       	pop	r19
    5664:	2f 91       	pop	r18
    5666:	0f 90       	pop	r0
    5668:	0b be       	out	0x3b, r0	; 59
    566a:	0f 90       	pop	r0
    566c:	0f be       	out	0x3f, r0	; 63
    566e:	0f 90       	pop	r0
    5670:	1f 90       	pop	r1
    5672:	18 95       	reti

00005674 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    5674:	1f 92       	push	r1
    5676:	0f 92       	push	r0
    5678:	0f b6       	in	r0, 0x3f	; 63
    567a:	0f 92       	push	r0
    567c:	11 24       	eor	r1, r1

	return;  	
} 
    567e:	0f 90       	pop	r0
    5680:	0f be       	out	0x3f, r0	; 63
    5682:	0f 90       	pop	r0
    5684:	1f 90       	pop	r1
    5686:	18 95       	reti

00005688 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    5688:	04 b6       	in	r0, 0x34	; 52
    568a:	03 fe       	sbrs	r0, 3
    568c:	02 c0       	rjmp	.+4      	; 0x5692 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    568e:	80 e1       	ldi	r24, 0x10	; 16
    5690:	01 c0       	rjmp	.+2      	; 0x5694 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    5692:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    5694:	04 b6       	in	r0, 0x34	; 52
    5696:	02 fe       	sbrs	r0, 2
    5698:	06 c0       	rjmp	.+12     	; 0x56a6 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    569a:	94 b7       	in	r25, 0x34	; 52
    569c:	9b 7f       	andi	r25, 0xFB	; 251
    569e:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    56a0:	04 b6       	in	r0, 0x34	; 52
    56a2:	00 fe       	sbrs	r0, 0
		error|=0x04;
    56a4:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    56a6:	04 b6       	in	r0, 0x34	; 52
    56a8:	01 fe       	sbrs	r0, 1
    56aa:	05 c0       	rjmp	.+10     	; 0x56b6 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    56ac:	94 b7       	in	r25, 0x34	; 52
    56ae:	9d 7f       	andi	r25, 0xFD	; 253
    56b0:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    56b2:	82 60       	ori	r24, 0x02	; 2
    56b4:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    56b6:	81 11       	cpse	r24, r1
    56b8:	0c c0       	rjmp	.+24     	; 0x56d2 <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    56ba:	04 b6       	in	r0, 0x34	; 52
    56bc:	00 fe       	sbrs	r0, 0
    56be:	04 c0       	rjmp	.+8      	; 0x56c8 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    56c0:	94 b7       	in	r25, 0x34	; 52
    56c2:	9e 7f       	andi	r25, 0xFE	; 254
    56c4:	94 bf       	out	0x34, r25	; 52
    56c6:	01 c0       	rjmp	.+2      	; 0x56ca <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    56c8:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    56ca:	90 91 b0 00 	lds	r25, 0x00B0
    56ce:	91 11       	cpse	r25, r1
    56d0:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    56d2:	08 95       	ret

000056d4 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    56d4:	81 11       	cpse	r24, r1
    56d6:	02 c0       	rjmp	.+4      	; 0x56dc <nrk_ext_int_enable+0x8>
    56d8:	e8 9a       	sbi	0x1d, 0	; 29
    56da:	39 c0       	rjmp	.+114    	; 0x574e <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    56dc:	81 30       	cpi	r24, 0x01	; 1
    56de:	11 f4       	brne	.+4      	; 0x56e4 <nrk_ext_int_enable+0x10>
    56e0:	e9 9a       	sbi	0x1d, 1	; 29
    56e2:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    56e4:	82 30       	cpi	r24, 0x02	; 2
    56e6:	11 f4       	brne	.+4      	; 0x56ec <nrk_ext_int_enable+0x18>
    56e8:	ea 9a       	sbi	0x1d, 2	; 29
    56ea:	31 c0       	rjmp	.+98     	; 0x574e <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    56ec:	83 30       	cpi	r24, 0x03	; 3
    56ee:	21 f4       	brne	.+8      	; 0x56f8 <nrk_ext_int_enable+0x24>
    56f0:	80 91 6b 00 	lds	r24, 0x006B
    56f4:	81 60       	ori	r24, 0x01	; 1
    56f6:	29 c0       	rjmp	.+82     	; 0x574a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    56f8:	84 30       	cpi	r24, 0x04	; 4
    56fa:	21 f4       	brne	.+8      	; 0x5704 <nrk_ext_int_enable+0x30>
    56fc:	80 91 6b 00 	lds	r24, 0x006B
    5700:	82 60       	ori	r24, 0x02	; 2
    5702:	23 c0       	rjmp	.+70     	; 0x574a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    5704:	85 30       	cpi	r24, 0x05	; 5
    5706:	21 f4       	brne	.+8      	; 0x5710 <nrk_ext_int_enable+0x3c>
    5708:	80 91 6b 00 	lds	r24, 0x006B
    570c:	84 60       	ori	r24, 0x04	; 4
    570e:	1d c0       	rjmp	.+58     	; 0x574a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    5710:	86 30       	cpi	r24, 0x06	; 6
    5712:	21 f4       	brne	.+8      	; 0x571c <nrk_ext_int_enable+0x48>
    5714:	80 91 6b 00 	lds	r24, 0x006B
    5718:	88 60       	ori	r24, 0x08	; 8
    571a:	17 c0       	rjmp	.+46     	; 0x574a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    571c:	87 30       	cpi	r24, 0x07	; 7
    571e:	21 f4       	brne	.+8      	; 0x5728 <nrk_ext_int_enable+0x54>
    5720:	80 91 6b 00 	lds	r24, 0x006B
    5724:	80 61       	ori	r24, 0x10	; 16
    5726:	11 c0       	rjmp	.+34     	; 0x574a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    5728:	88 30       	cpi	r24, 0x08	; 8
    572a:	21 f4       	brne	.+8      	; 0x5734 <nrk_ext_int_enable+0x60>
    572c:	80 91 6b 00 	lds	r24, 0x006B
    5730:	80 62       	ori	r24, 0x20	; 32
    5732:	0b c0       	rjmp	.+22     	; 0x574a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    5734:	89 30       	cpi	r24, 0x09	; 9
    5736:	21 f4       	brne	.+8      	; 0x5740 <nrk_ext_int_enable+0x6c>
    5738:	80 91 6b 00 	lds	r24, 0x006B
    573c:	80 64       	ori	r24, 0x40	; 64
    573e:	05 c0       	rjmp	.+10     	; 0x574a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    5740:	8a 30       	cpi	r24, 0x0A	; 10
    5742:	39 f4       	brne	.+14     	; 0x5752 <nrk_ext_int_enable+0x7e>
    5744:	80 91 6b 00 	lds	r24, 0x006B
    5748:	80 68       	ori	r24, 0x80	; 128
    574a:	80 93 6b 00 	sts	0x006B, r24
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	08 95       	ret
return NRK_ERROR;
    5752:	8f ef       	ldi	r24, 0xFF	; 255
}
    5754:	08 95       	ret

00005756 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    5756:	81 11       	cpse	r24, r1
    5758:	02 c0       	rjmp	.+4      	; 0x575e <nrk_ext_int_disable+0x8>
    575a:	e8 98       	cbi	0x1d, 0	; 29
    575c:	39 c0       	rjmp	.+114    	; 0x57d0 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    575e:	81 30       	cpi	r24, 0x01	; 1
    5760:	11 f4       	brne	.+4      	; 0x5766 <nrk_ext_int_disable+0x10>
    5762:	e9 98       	cbi	0x1d, 1	; 29
    5764:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    5766:	82 30       	cpi	r24, 0x02	; 2
    5768:	11 f4       	brne	.+4      	; 0x576e <nrk_ext_int_disable+0x18>
    576a:	e9 98       	cbi	0x1d, 1	; 29
    576c:	31 c0       	rjmp	.+98     	; 0x57d0 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    576e:	83 30       	cpi	r24, 0x03	; 3
    5770:	21 f4       	brne	.+8      	; 0x577a <nrk_ext_int_disable+0x24>
    5772:	80 91 6b 00 	lds	r24, 0x006B
    5776:	8e 7f       	andi	r24, 0xFE	; 254
    5778:	29 c0       	rjmp	.+82     	; 0x57cc <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    577a:	84 30       	cpi	r24, 0x04	; 4
    577c:	21 f4       	brne	.+8      	; 0x5786 <nrk_ext_int_disable+0x30>
    577e:	80 91 6b 00 	lds	r24, 0x006B
    5782:	8d 7f       	andi	r24, 0xFD	; 253
    5784:	23 c0       	rjmp	.+70     	; 0x57cc <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    5786:	85 30       	cpi	r24, 0x05	; 5
    5788:	21 f4       	brne	.+8      	; 0x5792 <nrk_ext_int_disable+0x3c>
    578a:	80 91 6b 00 	lds	r24, 0x006B
    578e:	8b 7f       	andi	r24, 0xFB	; 251
    5790:	1d c0       	rjmp	.+58     	; 0x57cc <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    5792:	86 30       	cpi	r24, 0x06	; 6
    5794:	21 f4       	brne	.+8      	; 0x579e <nrk_ext_int_disable+0x48>
    5796:	80 91 6b 00 	lds	r24, 0x006B
    579a:	87 7f       	andi	r24, 0xF7	; 247
    579c:	17 c0       	rjmp	.+46     	; 0x57cc <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    579e:	87 30       	cpi	r24, 0x07	; 7
    57a0:	21 f4       	brne	.+8      	; 0x57aa <nrk_ext_int_disable+0x54>
    57a2:	80 91 6b 00 	lds	r24, 0x006B
    57a6:	8f 7e       	andi	r24, 0xEF	; 239
    57a8:	11 c0       	rjmp	.+34     	; 0x57cc <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    57aa:	88 30       	cpi	r24, 0x08	; 8
    57ac:	21 f4       	brne	.+8      	; 0x57b6 <nrk_ext_int_disable+0x60>
    57ae:	80 91 6b 00 	lds	r24, 0x006B
    57b2:	8f 7d       	andi	r24, 0xDF	; 223
    57b4:	0b c0       	rjmp	.+22     	; 0x57cc <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    57b6:	89 30       	cpi	r24, 0x09	; 9
    57b8:	21 f4       	brne	.+8      	; 0x57c2 <nrk_ext_int_disable+0x6c>
    57ba:	80 91 6b 00 	lds	r24, 0x006B
    57be:	8f 7b       	andi	r24, 0xBF	; 191
    57c0:	05 c0       	rjmp	.+10     	; 0x57cc <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    57c2:	8a 30       	cpi	r24, 0x0A	; 10
    57c4:	39 f4       	brne	.+14     	; 0x57d4 <nrk_ext_int_disable+0x7e>
    57c6:	80 91 6b 00 	lds	r24, 0x006B
    57ca:	8f 77       	andi	r24, 0x7F	; 127
    57cc:	80 93 6b 00 	sts	0x006B, r24
    57d0:	81 e0       	ldi	r24, 0x01	; 1
    57d2:	08 95       	ret
return NRK_ERROR;
    57d4:	8f ef       	ldi	r24, 0xFF	; 255
}
    57d6:	08 95       	ret

000057d8 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    57d8:	81 11       	cpse	r24, r1
    57da:	26 c0       	rjmp	.+76     	; 0x5828 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    57dc:	50 93 57 0a 	sts	0x0A57, r21
    57e0:	40 93 56 0a 	sts	0x0A56, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    57e4:	61 11       	cpse	r22, r1
    57e6:	04 c0       	rjmp	.+8      	; 0x57f0 <nrk_ext_int_configure+0x18>
    57e8:	80 91 69 00 	lds	r24, 0x0069
    57ec:	8c 7f       	andi	r24, 0xFC	; 252
    57ee:	3d c0       	rjmp	.+122    	; 0x586a <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    57f0:	61 30       	cpi	r22, 0x01	; 1
    57f2:	49 f4       	brne	.+18     	; 0x5806 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    57f4:	80 91 69 00 	lds	r24, 0x0069
    57f8:	8d 7f       	andi	r24, 0xFD	; 253
    57fa:	80 93 69 00 	sts	0x0069, r24
    57fe:	80 91 69 00 	lds	r24, 0x0069
    5802:	81 60       	ori	r24, 0x01	; 1
    5804:	32 c0       	rjmp	.+100    	; 0x586a <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5806:	62 30       	cpi	r22, 0x02	; 2
    5808:	49 f4       	brne	.+18     	; 0x581c <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    580a:	80 91 69 00 	lds	r24, 0x0069
    580e:	82 60       	ori	r24, 0x02	; 2
    5810:	80 93 69 00 	sts	0x0069, r24
    5814:	80 91 69 00 	lds	r24, 0x0069
    5818:	8e 7f       	andi	r24, 0xFE	; 254
    581a:	27 c0       	rjmp	.+78     	; 0x586a <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    581c:	63 30       	cpi	r22, 0x03	; 3
    581e:	39 f5       	brne	.+78     	; 0x586e <nrk_ext_int_configure+0x96>
    5820:	80 91 69 00 	lds	r24, 0x0069
    5824:	83 60       	ori	r24, 0x03	; 3
    5826:	21 c0       	rjmp	.+66     	; 0x586a <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    5828:	81 30       	cpi	r24, 0x01	; 1
    582a:	49 f5       	brne	.+82     	; 0x587e <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    582c:	50 93 55 0a 	sts	0x0A55, r21
    5830:	40 93 54 0a 	sts	0x0A54, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    5834:	61 11       	cpse	r22, r1
    5836:	04 c0       	rjmp	.+8      	; 0x5840 <nrk_ext_int_configure+0x68>
    5838:	80 91 69 00 	lds	r24, 0x0069
    583c:	83 7f       	andi	r24, 0xF3	; 243
    583e:	15 c0       	rjmp	.+42     	; 0x586a <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5840:	61 30       	cpi	r22, 0x01	; 1
    5842:	49 f4       	brne	.+18     	; 0x5856 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    5844:	80 91 69 00 	lds	r24, 0x0069
    5848:	87 7f       	andi	r24, 0xF7	; 247
    584a:	80 93 69 00 	sts	0x0069, r24
    584e:	80 91 69 00 	lds	r24, 0x0069
    5852:	84 60       	ori	r24, 0x04	; 4
    5854:	0a c0       	rjmp	.+20     	; 0x586a <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5856:	62 30       	cpi	r22, 0x02	; 2
    5858:	61 f4       	brne	.+24     	; 0x5872 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    585a:	80 91 69 00 	lds	r24, 0x0069
    585e:	88 60       	ori	r24, 0x08	; 8
    5860:	80 93 69 00 	sts	0x0069, r24
    5864:	80 91 69 00 	lds	r24, 0x0069
    5868:	8b 7f       	andi	r24, 0xFB	; 251
    586a:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    586e:	81 e0       	ldi	r24, 0x01	; 1
    5870:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    5872:	63 30       	cpi	r22, 0x03	; 3
    5874:	e1 f7       	brne	.-8      	; 0x586e <nrk_ext_int_configure+0x96>
    5876:	80 91 69 00 	lds	r24, 0x0069
    587a:	8c 60       	ori	r24, 0x0C	; 12
    587c:	f6 cf       	rjmp	.-20     	; 0x586a <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    587e:	82 30       	cpi	r24, 0x02	; 2
    5880:	31 f5       	brne	.+76     	; 0x58ce <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    5882:	50 93 59 0a 	sts	0x0A59, r21
    5886:	40 93 58 0a 	sts	0x0A58, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    588a:	61 11       	cpse	r22, r1
    588c:	04 c0       	rjmp	.+8      	; 0x5896 <nrk_ext_int_configure+0xbe>
    588e:	80 91 69 00 	lds	r24, 0x0069
    5892:	8f 7c       	andi	r24, 0xCF	; 207
    5894:	ea cf       	rjmp	.-44     	; 0x586a <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5896:	61 30       	cpi	r22, 0x01	; 1
    5898:	49 f4       	brne	.+18     	; 0x58ac <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    589a:	80 91 69 00 	lds	r24, 0x0069
    589e:	8f 7d       	andi	r24, 0xDF	; 223
    58a0:	80 93 69 00 	sts	0x0069, r24
    58a4:	80 91 69 00 	lds	r24, 0x0069
    58a8:	80 61       	ori	r24, 0x10	; 16
    58aa:	df cf       	rjmp	.-66     	; 0x586a <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    58ac:	62 30       	cpi	r22, 0x02	; 2
    58ae:	49 f4       	brne	.+18     	; 0x58c2 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    58b0:	80 91 69 00 	lds	r24, 0x0069
    58b4:	80 62       	ori	r24, 0x20	; 32
    58b6:	80 93 69 00 	sts	0x0069, r24
    58ba:	80 91 69 00 	lds	r24, 0x0069
    58be:	8f 7e       	andi	r24, 0xEF	; 239
    58c0:	d4 cf       	rjmp	.-88     	; 0x586a <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    58c2:	63 30       	cpi	r22, 0x03	; 3
    58c4:	a1 f6       	brne	.-88     	; 0x586e <nrk_ext_int_configure+0x96>
    58c6:	80 91 69 00 	lds	r24, 0x0069
    58ca:	80 63       	ori	r24, 0x30	; 48
    58cc:	ce cf       	rjmp	.-100    	; 0x586a <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    58ce:	83 50       	subi	r24, 0x03	; 3
    58d0:	88 30       	cpi	r24, 0x08	; 8
    58d2:	50 f4       	brcc	.+20     	; 0x58e8 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    58d4:	80 91 68 00 	lds	r24, 0x0068
    58d8:	81 60       	ori	r24, 0x01	; 1
    58da:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    58de:	50 93 5b 0a 	sts	0x0A5B, r21
    58e2:	40 93 5a 0a 	sts	0x0A5A, r20
    58e6:	c3 cf       	rjmp	.-122    	; 0x586e <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    58e8:	8f ef       	ldi	r24, 0xFF	; 255
}
    58ea:	08 95       	ret

000058ec <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    58ec:	1f 92       	push	r1
    58ee:	0f 92       	push	r0
    58f0:	0f b6       	in	r0, 0x3f	; 63
    58f2:	0f 92       	push	r0
    58f4:	11 24       	eor	r1, r1
    58f6:	0b b6       	in	r0, 0x3b	; 59
    58f8:	0f 92       	push	r0
    58fa:	2f 93       	push	r18
    58fc:	3f 93       	push	r19
    58fe:	4f 93       	push	r20
    5900:	5f 93       	push	r21
    5902:	6f 93       	push	r22
    5904:	7f 93       	push	r23
    5906:	8f 93       	push	r24
    5908:	9f 93       	push	r25
    590a:	af 93       	push	r26
    590c:	bf 93       	push	r27
    590e:	ef 93       	push	r30
    5910:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    5912:	e0 91 5a 0a 	lds	r30, 0x0A5A
    5916:	f0 91 5b 0a 	lds	r31, 0x0A5B
    591a:	30 97       	sbiw	r30, 0x00	; 0
    591c:	11 f0       	breq	.+4      	; 0x5922 <__vector_9+0x36>
    591e:	09 95       	icall
    5920:	04 c0       	rjmp	.+8      	; 0x592a <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5922:	60 e0       	ldi	r22, 0x00	; 0
    5924:	8a e0       	ldi	r24, 0x0A	; 10
    5926:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
	return;  	
}
    592a:	ff 91       	pop	r31
    592c:	ef 91       	pop	r30
    592e:	bf 91       	pop	r27
    5930:	af 91       	pop	r26
    5932:	9f 91       	pop	r25
    5934:	8f 91       	pop	r24
    5936:	7f 91       	pop	r23
    5938:	6f 91       	pop	r22
    593a:	5f 91       	pop	r21
    593c:	4f 91       	pop	r20
    593e:	3f 91       	pop	r19
    5940:	2f 91       	pop	r18
    5942:	0f 90       	pop	r0
    5944:	0b be       	out	0x3b, r0	; 59
    5946:	0f 90       	pop	r0
    5948:	0f be       	out	0x3f, r0	; 63
    594a:	0f 90       	pop	r0
    594c:	1f 90       	pop	r1
    594e:	18 95       	reti

00005950 <__vector_1>:


SIGNAL(INT0_vect) {
    5950:	1f 92       	push	r1
    5952:	0f 92       	push	r0
    5954:	0f b6       	in	r0, 0x3f	; 63
    5956:	0f 92       	push	r0
    5958:	11 24       	eor	r1, r1
    595a:	0b b6       	in	r0, 0x3b	; 59
    595c:	0f 92       	push	r0
    595e:	2f 93       	push	r18
    5960:	3f 93       	push	r19
    5962:	4f 93       	push	r20
    5964:	5f 93       	push	r21
    5966:	6f 93       	push	r22
    5968:	7f 93       	push	r23
    596a:	8f 93       	push	r24
    596c:	9f 93       	push	r25
    596e:	af 93       	push	r26
    5970:	bf 93       	push	r27
    5972:	ef 93       	push	r30
    5974:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    5976:	e0 91 56 0a 	lds	r30, 0x0A56
    597a:	f0 91 57 0a 	lds	r31, 0x0A57
    597e:	30 97       	sbiw	r30, 0x00	; 0
    5980:	11 f0       	breq	.+4      	; 0x5986 <__vector_1+0x36>
    5982:	09 95       	icall
    5984:	04 c0       	rjmp	.+8      	; 0x598e <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5986:	60 e0       	ldi	r22, 0x00	; 0
    5988:	8a e0       	ldi	r24, 0x0A	; 10
    598a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
	return;  	
}
    598e:	ff 91       	pop	r31
    5990:	ef 91       	pop	r30
    5992:	bf 91       	pop	r27
    5994:	af 91       	pop	r26
    5996:	9f 91       	pop	r25
    5998:	8f 91       	pop	r24
    599a:	7f 91       	pop	r23
    599c:	6f 91       	pop	r22
    599e:	5f 91       	pop	r21
    59a0:	4f 91       	pop	r20
    59a2:	3f 91       	pop	r19
    59a4:	2f 91       	pop	r18
    59a6:	0f 90       	pop	r0
    59a8:	0b be       	out	0x3b, r0	; 59
    59aa:	0f 90       	pop	r0
    59ac:	0f be       	out	0x3f, r0	; 63
    59ae:	0f 90       	pop	r0
    59b0:	1f 90       	pop	r1
    59b2:	18 95       	reti

000059b4 <__vector_2>:

SIGNAL(INT1_vect) {
    59b4:	1f 92       	push	r1
    59b6:	0f 92       	push	r0
    59b8:	0f b6       	in	r0, 0x3f	; 63
    59ba:	0f 92       	push	r0
    59bc:	11 24       	eor	r1, r1
    59be:	0b b6       	in	r0, 0x3b	; 59
    59c0:	0f 92       	push	r0
    59c2:	2f 93       	push	r18
    59c4:	3f 93       	push	r19
    59c6:	4f 93       	push	r20
    59c8:	5f 93       	push	r21
    59ca:	6f 93       	push	r22
    59cc:	7f 93       	push	r23
    59ce:	8f 93       	push	r24
    59d0:	9f 93       	push	r25
    59d2:	af 93       	push	r26
    59d4:	bf 93       	push	r27
    59d6:	ef 93       	push	r30
    59d8:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    59da:	e0 91 54 0a 	lds	r30, 0x0A54
    59de:	f0 91 55 0a 	lds	r31, 0x0A55
    59e2:	30 97       	sbiw	r30, 0x00	; 0
    59e4:	11 f0       	breq	.+4      	; 0x59ea <__vector_2+0x36>
    59e6:	09 95       	icall
    59e8:	04 c0       	rjmp	.+8      	; 0x59f2 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    59ea:	60 e0       	ldi	r22, 0x00	; 0
    59ec:	8a e0       	ldi	r24, 0x0A	; 10
    59ee:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
	return;  	
}
    59f2:	ff 91       	pop	r31
    59f4:	ef 91       	pop	r30
    59f6:	bf 91       	pop	r27
    59f8:	af 91       	pop	r26
    59fa:	9f 91       	pop	r25
    59fc:	8f 91       	pop	r24
    59fe:	7f 91       	pop	r23
    5a00:	6f 91       	pop	r22
    5a02:	5f 91       	pop	r21
    5a04:	4f 91       	pop	r20
    5a06:	3f 91       	pop	r19
    5a08:	2f 91       	pop	r18
    5a0a:	0f 90       	pop	r0
    5a0c:	0b be       	out	0x3b, r0	; 59
    5a0e:	0f 90       	pop	r0
    5a10:	0f be       	out	0x3f, r0	; 63
    5a12:	0f 90       	pop	r0
    5a14:	1f 90       	pop	r1
    5a16:	18 95       	reti

00005a18 <__vector_3>:

SIGNAL(INT2_vect) {
    5a18:	1f 92       	push	r1
    5a1a:	0f 92       	push	r0
    5a1c:	0f b6       	in	r0, 0x3f	; 63
    5a1e:	0f 92       	push	r0
    5a20:	11 24       	eor	r1, r1
    5a22:	0b b6       	in	r0, 0x3b	; 59
    5a24:	0f 92       	push	r0
    5a26:	2f 93       	push	r18
    5a28:	3f 93       	push	r19
    5a2a:	4f 93       	push	r20
    5a2c:	5f 93       	push	r21
    5a2e:	6f 93       	push	r22
    5a30:	7f 93       	push	r23
    5a32:	8f 93       	push	r24
    5a34:	9f 93       	push	r25
    5a36:	af 93       	push	r26
    5a38:	bf 93       	push	r27
    5a3a:	ef 93       	push	r30
    5a3c:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    5a3e:	e0 91 58 0a 	lds	r30, 0x0A58
    5a42:	f0 91 59 0a 	lds	r31, 0x0A59
    5a46:	30 97       	sbiw	r30, 0x00	; 0
    5a48:	11 f0       	breq	.+4      	; 0x5a4e <__vector_3+0x36>
    5a4a:	09 95       	icall
    5a4c:	04 c0       	rjmp	.+8      	; 0x5a56 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5a4e:	60 e0       	ldi	r22, 0x00	; 0
    5a50:	8a e0       	ldi	r24, 0x0A	; 10
    5a52:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <nrk_kernel_error_add>
	return;  	
}
    5a56:	ff 91       	pop	r31
    5a58:	ef 91       	pop	r30
    5a5a:	bf 91       	pop	r27
    5a5c:	af 91       	pop	r26
    5a5e:	9f 91       	pop	r25
    5a60:	8f 91       	pop	r24
    5a62:	7f 91       	pop	r23
    5a64:	6f 91       	pop	r22
    5a66:	5f 91       	pop	r21
    5a68:	4f 91       	pop	r20
    5a6a:	3f 91       	pop	r19
    5a6c:	2f 91       	pop	r18
    5a6e:	0f 90       	pop	r0
    5a70:	0b be       	out	0x3b, r0	; 59
    5a72:	0f 90       	pop	r0
    5a74:	0f be       	out	0x3f, r0	; 63
    5a76:	0f 90       	pop	r0
    5a78:	1f 90       	pop	r1
    5a7a:	18 95       	reti

00005a7c <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5a7c:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    5a7e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5a80:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    5a82:	84 b7       	in	r24, 0x34	; 52
    5a84:	87 7f       	andi	r24, 0xF7	; 247
    5a86:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    5a88:	e0 e6       	ldi	r30, 0x60	; 96
    5a8a:	f0 e0       	ldi	r31, 0x00	; 0
    5a8c:	80 81       	ld	r24, Z
    5a8e:	88 61       	ori	r24, 0x18	; 24
    5a90:	80 83       	st	Z, r24
	WDTCSR = 0;
    5a92:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5a94:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    5a96:	08 95       	ret

00005a98 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    5a98:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5a9a:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5a9c:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5a9e:	84 b7       	in	r24, 0x34	; 52
    5aa0:	87 7f       	andi	r24, 0xF7	; 247
    5aa2:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5aa4:	e0 e6       	ldi	r30, 0x60	; 96
    5aa6:	f0 e0       	ldi	r31, 0x00	; 0
    5aa8:	80 81       	ld	r24, Z
    5aaa:	88 61       	ori	r24, 0x18	; 24
    5aac:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    5aae:	8d e0       	ldi	r24, 0x0D	; 13
    5ab0:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5ab2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    5ab4:	08 95       	ret

00005ab6 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5ab6:	04 b6       	in	r0, 0x34	; 52
    5ab8:	03 fe       	sbrs	r0, 3
    5aba:	02 c0       	rjmp	.+4      	; 0x5ac0 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    5abc:	8f ef       	ldi	r24, 0xFF	; 255
    5abe:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5ac0:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    5ac2:	08 95       	ret

00005ac4 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5ac4:	a8 95       	wdr
    5ac6:	08 95       	ret

00005ac8 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    5ac8:	08 95       	ret

00005aca <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    5aca:	83 b7       	in	r24, 0x33	; 51
    5acc:	81 7f       	andi	r24, 0xF1	; 241
    5ace:	86 60       	ori	r24, 0x06	; 6
    5ad0:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5ad2:	83 b7       	in	r24, 0x33	; 51
    5ad4:	81 60       	ori	r24, 0x01	; 1
    5ad6:	83 bf       	out	0x33, r24	; 51
    5ad8:	88 95       	sleep
    5ada:	83 b7       	in	r24, 0x33	; 51
    5adc:	8e 7f       	andi	r24, 0xFE	; 254
    5ade:	83 bf       	out	0x33, r24	; 51
    5ae0:	08 95       	ret

00005ae2 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    5ae2:	83 b7       	in	r24, 0x33	; 51
    5ae4:	81 7f       	andi	r24, 0xF1	; 241
    5ae6:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5ae8:	83 b7       	in	r24, 0x33	; 51
    5aea:	81 60       	ori	r24, 0x01	; 1
    5aec:	83 bf       	out	0x33, r24	; 51
    5aee:	88 95       	sleep
    5af0:	83 b7       	in	r24, 0x33	; 51
    5af2:	8e 7f       	andi	r24, 0xFE	; 254
    5af4:	83 bf       	out	0x33, r24	; 51
    5af6:	08 95       	ret

00005af8 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    5af8:	fc 01       	movw	r30, r24
    5afa:	76 83       	std	Z+6, r23	; 0x06
    5afc:	65 83       	std	Z+5, r22	; 0x05
    5afe:	08 95       	ret

00005b00 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    5b00:	ef 92       	push	r14
    5b02:	ff 92       	push	r15
    5b04:	0f 93       	push	r16
    5b06:	1f 93       	push	r17
    5b08:	cf 93       	push	r28
    5b0a:	df 93       	push	r29
    5b0c:	8c 01       	movw	r16, r24
    5b0e:	7b 01       	movw	r14, r22
    5b10:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    5b12:	40 32       	cpi	r20, 0x20	; 32
    5b14:	51 05       	cpc	r21, r1
    5b16:	18 f4       	brcc	.+6      	; 0x5b1e <nrk_task_set_stk+0x1e>
    5b18:	81 e1       	ldi	r24, 0x11	; 17
    5b1a:	0e 94 cc 1a 	call	0x3598	; 0x3598 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    5b1e:	21 97       	sbiw	r28, 0x01	; 1
    5b20:	ce 0d       	add	r28, r14
    5b22:	df 1d       	adc	r29, r15
    5b24:	f8 01       	movw	r30, r16
    5b26:	d2 83       	std	Z+2, r29	; 0x02
    5b28:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    5b2a:	f4 82       	std	Z+4, r15	; 0x04
    5b2c:	e3 82       	std	Z+3, r14	; 0x03

}
    5b2e:	df 91       	pop	r29
    5b30:	cf 91       	pop	r28
    5b32:	1f 91       	pop	r17
    5b34:	0f 91       	pop	r16
    5b36:	ff 90       	pop	r15
    5b38:	ef 90       	pop	r14
    5b3a:	08 95       	ret

00005b3c <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    5b3c:	25 e5       	ldi	r18, 0x55	; 85
    5b3e:	fa 01       	movw	r30, r20
    5b40:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    5b42:	fb 01       	movw	r30, r22
    5b44:	32 97       	sbiw	r30, 0x02	; 2
    5b46:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    5b48:	31 96       	adiw	r30, 0x01	; 1
    5b4a:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    5b4c:	33 97       	sbiw	r30, 0x03	; 3
    5b4e:	11 82       	std	Z+1, r1	; 0x01
    5b50:	10 82       	st	Z, r1
    *(--stk) = 0;       
    5b52:	32 97       	sbiw	r30, 0x02	; 2
    5b54:	11 82       	std	Z+1, r1	; 0x01
    5b56:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5b58:	32 97       	sbiw	r30, 0x02	; 2
    5b5a:	11 82       	std	Z+1, r1	; 0x01
    5b5c:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5b5e:	32 97       	sbiw	r30, 0x02	; 2
    5b60:	11 82       	std	Z+1, r1	; 0x01
    5b62:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5b64:	32 97       	sbiw	r30, 0x02	; 2
    5b66:	11 82       	std	Z+1, r1	; 0x01
    5b68:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5b6a:	32 97       	sbiw	r30, 0x02	; 2
    5b6c:	11 82       	std	Z+1, r1	; 0x01
    5b6e:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5b70:	32 97       	sbiw	r30, 0x02	; 2
    5b72:	11 82       	std	Z+1, r1	; 0x01
    5b74:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5b76:	32 97       	sbiw	r30, 0x02	; 2
    5b78:	11 82       	std	Z+1, r1	; 0x01
    5b7a:	10 82       	st	Z, r1

    *(--stk) = 0; 
    5b7c:	32 97       	sbiw	r30, 0x02	; 2
    5b7e:	11 82       	std	Z+1, r1	; 0x01
    5b80:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5b82:	32 97       	sbiw	r30, 0x02	; 2
    5b84:	11 82       	std	Z+1, r1	; 0x01
    5b86:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5b88:	32 97       	sbiw	r30, 0x02	; 2
    5b8a:	11 82       	std	Z+1, r1	; 0x01
    5b8c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5b8e:	32 97       	sbiw	r30, 0x02	; 2
    5b90:	11 82       	std	Z+1, r1	; 0x01
    5b92:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5b94:	32 97       	sbiw	r30, 0x02	; 2
    5b96:	11 82       	std	Z+1, r1	; 0x01
    5b98:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5b9a:	32 97       	sbiw	r30, 0x02	; 2
    5b9c:	11 82       	std	Z+1, r1	; 0x01
    5b9e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5ba0:	32 97       	sbiw	r30, 0x02	; 2
    5ba2:	11 82       	std	Z+1, r1	; 0x01
    5ba4:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5ba6:	32 97       	sbiw	r30, 0x02	; 2
    5ba8:	11 82       	std	Z+1, r1	; 0x01
    5baa:	10 82       	st	Z, r1
    *(--stk) = 0;
    5bac:	cb 01       	movw	r24, r22
    5bae:	84 97       	sbiw	r24, 0x24	; 36
    5bb0:	fc 01       	movw	r30, r24
    5bb2:	11 82       	std	Z+1, r1	; 0x01
    5bb4:	10 82       	st	Z, r1


    return ((void *)stk);
}
    5bb6:	08 95       	ret

00005bb8 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    5bb8:	85 e5       	ldi	r24, 0x55	; 85
    5bba:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    5bbe:	ee ef       	ldi	r30, 0xFE	; 254
    5bc0:	f1 e4       	ldi	r31, 0x41	; 65
    5bc2:	f0 93 1f 07 	sts	0x071F, r31
    5bc6:	e0 93 1e 07 	sts	0x071E, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5bca:	8b e1       	ldi	r24, 0x1B	; 27
    5bcc:	96 e1       	ldi	r25, 0x16	; 22
    5bce:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5bd0:	80 93 ff 41 	sts	0x41FF, r24
    5bd4:	08 95       	ret

00005bd6 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5bd6:	8b e1       	ldi	r24, 0x1B	; 27
    5bd8:	96 e1       	ldi	r25, 0x16	; 22
    5bda:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5bde:	80 93 ff 41 	sts	0x41FF, r24
    5be2:	08 95       	ret

00005be4 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    5be4:	0e 94 1f 2a 	call	0x543e	; 0x543e <_nrk_setup_timer>
  nrk_int_enable();  
    5be8:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <nrk_int_enable>

00005bec <nrk_start_high_ready_task>:
    5bec:	a0 91 ea 09 	lds	r26, 0x09EA
    5bf0:	b0 91 eb 09 	lds	r27, 0x09EB
    5bf4:	cd 91       	ld	r28, X+
    5bf6:	cd bf       	out	0x3d, r28	; 61
    5bf8:	dd 91       	ld	r29, X+
    5bfa:	de bf       	out	0x3e, r29	; 62
    5bfc:	ff 91       	pop	r31
    5bfe:	ef 91       	pop	r30
    5c00:	df 91       	pop	r29
    5c02:	cf 91       	pop	r28
    5c04:	bf 91       	pop	r27
    5c06:	af 91       	pop	r26
    5c08:	9f 91       	pop	r25
    5c0a:	8f 91       	pop	r24
    5c0c:	7f 91       	pop	r23
    5c0e:	6f 91       	pop	r22
    5c10:	5f 91       	pop	r21
    5c12:	4f 91       	pop	r20
    5c14:	3f 91       	pop	r19
    5c16:	2f 91       	pop	r18
    5c18:	1f 91       	pop	r17
    5c1a:	0f 91       	pop	r16
    5c1c:	ff 90       	pop	r15
    5c1e:	ef 90       	pop	r14
    5c20:	df 90       	pop	r13
    5c22:	cf 90       	pop	r12
    5c24:	bf 90       	pop	r11
    5c26:	af 90       	pop	r10
    5c28:	9f 90       	pop	r9
    5c2a:	8f 90       	pop	r8
    5c2c:	7f 90       	pop	r7
    5c2e:	6f 90       	pop	r6
    5c30:	5f 90       	pop	r5
    5c32:	4f 90       	pop	r4
    5c34:	3f 90       	pop	r3
    5c36:	2f 90       	pop	r2
    5c38:	1f 90       	pop	r1
    5c3a:	0f 90       	pop	r0
    5c3c:	0f be       	out	0x3f, r0	; 63
    5c3e:	0f 90       	pop	r0
    5c40:	18 95       	reti

00005c42 <main>:
void nrk_create_taskset();

int
main ()
{
  nrk_setup_ports();
    5c42:	0e 94 27 10 	call	0x204e	; 0x204e <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
    5c46:	80 e1       	ldi	r24, 0x10	; 16
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	0e 94 ab 13 	call	0x2756	; 0x2756 <nrk_setup_uart>

  tdma_init (TDMA_CLIENT, DEFAULT_CHANNEL, mac_address);
    5c4e:	40 91 53 06 	lds	r20, 0x0653
    5c52:	50 91 54 06 	lds	r21, 0x0654
    5c56:	6d e0       	ldi	r22, 0x0D	; 13
    5c58:	82 e0       	ldi	r24, 0x02	; 2
    5c5a:	0e 94 a0 05 	call	0xb40	; 0xb40 <tdma_init>

  tdma_aes_setkey(aes_key);
    5c5e:	80 e0       	ldi	r24, 0x00	; 0
    5c60:	92 e0       	ldi	r25, 0x02	; 2
    5c62:	0e 94 cf 03 	call	0x79e	; 0x79e <tdma_aes_setkey>
  tdma_aes_enable();
    5c66:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <tdma_aes_enable>

  tdma_tx_slot_add (mac_address&0xFFFF);
    5c6a:	80 91 53 06 	lds	r24, 0x0653
    5c6e:	90 91 54 06 	lds	r25, 0x0654
    5c72:	0e 94 e6 03 	call	0x7cc	; 0x7cc <tdma_tx_slot_add>
  
  nrk_init();
    5c76:	0e 94 7d 14 	call	0x28fa	; 0x28fa <nrk_init>

  mac_address = CLIENT_MAC;
    5c7a:	81 e0       	ldi	r24, 0x01	; 1
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	90 93 54 06 	sts	0x0654, r25
    5c82:	80 93 53 06 	sts	0x0653, r24

  nrk_led_clr(ORANGE_LED);
    5c86:	82 e0       	ldi	r24, 0x02	; 2
    5c88:	90 e0       	ldi	r25, 0x00	; 0
    5c8a:	0e 94 42 13 	call	0x2684	; 0x2684 <nrk_led_clr>
  nrk_led_clr(BLUE_LED);
    5c8e:	83 e0       	ldi	r24, 0x03	; 3
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	0e 94 42 13 	call	0x2684	; 0x2684 <nrk_led_clr>
  nrk_led_clr(GREEN_LED);
    5c96:	81 e0       	ldi	r24, 0x01	; 1
    5c98:	90 e0       	ldi	r25, 0x00	; 0
    5c9a:	0e 94 42 13 	call	0x2684	; 0x2684 <nrk_led_clr>
  nrk_led_clr(RED_LED);
    5c9e:	80 e0       	ldi	r24, 0x00	; 0
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	0e 94 42 13 	call	0x2684	; 0x2684 <nrk_led_clr>
 
  nrk_time_set(0,0);
    5ca6:	20 e0       	ldi	r18, 0x00	; 0
    5ca8:	30 e0       	ldi	r19, 0x00	; 0
    5caa:	a9 01       	movw	r20, r18
    5cac:	60 e0       	ldi	r22, 0x00	; 0
    5cae:	70 e0       	ldi	r23, 0x00	; 0
    5cb0:	cb 01       	movw	r24, r22
    5cb2:	0e 94 3c 24 	call	0x4878	; 0x4878 <nrk_time_set>
  nrk_create_taskset();
    5cb6:	0e 94 93 03 	call	0x726	; 0x726 <nrk_create_taskset>
  nrk_start();
    5cba:	0e 94 24 15 	call	0x2a48	; 0x2a48 <nrk_start>
  
  return 0;
}
    5cbe:	80 e0       	ldi	r24, 0x00	; 0
    5cc0:	90 e0       	ldi	r25, 0x00	; 0
    5cc2:	08 95       	ret

00005cc4 <vfprintf>:
    5cc4:	6f 92       	push	r6
    5cc6:	7f 92       	push	r7
    5cc8:	8f 92       	push	r8
    5cca:	9f 92       	push	r9
    5ccc:	af 92       	push	r10
    5cce:	bf 92       	push	r11
    5cd0:	cf 92       	push	r12
    5cd2:	df 92       	push	r13
    5cd4:	ef 92       	push	r14
    5cd6:	ff 92       	push	r15
    5cd8:	0f 93       	push	r16
    5cda:	1f 93       	push	r17
    5cdc:	cf 93       	push	r28
    5cde:	df 93       	push	r29
    5ce0:	cd b7       	in	r28, 0x3d	; 61
    5ce2:	de b7       	in	r29, 0x3e	; 62
    5ce4:	2c 97       	sbiw	r28, 0x0c	; 12
    5ce6:	0f b6       	in	r0, 0x3f	; 63
    5ce8:	f8 94       	cli
    5cea:	de bf       	out	0x3e, r29	; 62
    5cec:	0f be       	out	0x3f, r0	; 63
    5cee:	cd bf       	out	0x3d, r28	; 61
    5cf0:	6c 01       	movw	r12, r24
    5cf2:	5b 01       	movw	r10, r22
    5cf4:	7a 01       	movw	r14, r20
    5cf6:	fc 01       	movw	r30, r24
    5cf8:	17 82       	std	Z+7, r1	; 0x07
    5cfa:	16 82       	std	Z+6, r1	; 0x06
    5cfc:	83 81       	ldd	r24, Z+3	; 0x03
    5cfe:	81 ff       	sbrs	r24, 1
    5d00:	0e c1       	rjmp	.+540    	; 0x5f1e <vfprintf+0x25a>
    5d02:	ce 01       	movw	r24, r28
    5d04:	01 96       	adiw	r24, 0x01	; 1
    5d06:	4c 01       	movw	r8, r24
    5d08:	f6 01       	movw	r30, r12
    5d0a:	03 81       	ldd	r16, Z+3	; 0x03
    5d0c:	f5 01       	movw	r30, r10
    5d0e:	03 fd       	sbrc	r16, 3
    5d10:	15 91       	lpm	r17, Z+
    5d12:	03 ff       	sbrs	r16, 3
    5d14:	11 91       	ld	r17, Z+
    5d16:	5f 01       	movw	r10, r30
    5d18:	11 23       	and	r17, r17
    5d1a:	09 f4       	brne	.+2      	; 0x5d1e <vfprintf+0x5a>
    5d1c:	fc c0       	rjmp	.+504    	; 0x5f16 <vfprintf+0x252>
    5d1e:	15 32       	cpi	r17, 0x25	; 37
    5d20:	49 f4       	brne	.+18     	; 0x5d34 <vfprintf+0x70>
    5d22:	03 fd       	sbrc	r16, 3
    5d24:	15 91       	lpm	r17, Z+
    5d26:	03 ff       	sbrs	r16, 3
    5d28:	11 91       	ld	r17, Z+
    5d2a:	5f 01       	movw	r10, r30
    5d2c:	15 32       	cpi	r17, 0x25	; 37
    5d2e:	11 f0       	breq	.+4      	; 0x5d34 <vfprintf+0x70>
    5d30:	20 e0       	ldi	r18, 0x00	; 0
    5d32:	1b c0       	rjmp	.+54     	; 0x5d6a <vfprintf+0xa6>
    5d34:	b6 01       	movw	r22, r12
    5d36:	81 2f       	mov	r24, r17
    5d38:	90 e0       	ldi	r25, 0x00	; 0
    5d3a:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    5d3e:	37 01       	movw	r6, r14
    5d40:	73 01       	movw	r14, r6
    5d42:	e2 cf       	rjmp	.-60     	; 0x5d08 <vfprintf+0x44>
    5d44:	11 23       	and	r17, r17
    5d46:	09 f4       	brne	.+2      	; 0x5d4a <vfprintf+0x86>
    5d48:	e6 c0       	rjmp	.+460    	; 0x5f16 <vfprintf+0x252>
    5d4a:	61 2f       	mov	r22, r17
    5d4c:	70 e0       	ldi	r23, 0x00	; 0
    5d4e:	81 e0       	ldi	r24, 0x01	; 1
    5d50:	96 e0       	ldi	r25, 0x06	; 6
    5d52:	2c 87       	std	Y+12, r18	; 0x0c
    5d54:	0e 94 75 30 	call	0x60ea	; 0x60ea <strchr_P>
    5d58:	2c 85       	ldd	r18, Y+12	; 0x0c
    5d5a:	89 2b       	or	r24, r25
    5d5c:	49 f0       	breq	.+18     	; 0x5d70 <vfprintf+0xac>
    5d5e:	f5 01       	movw	r30, r10
    5d60:	03 fd       	sbrc	r16, 3
    5d62:	15 91       	lpm	r17, Z+
    5d64:	03 ff       	sbrs	r16, 3
    5d66:	11 91       	ld	r17, Z+
    5d68:	5f 01       	movw	r10, r30
    5d6a:	27 ff       	sbrs	r18, 7
    5d6c:	eb cf       	rjmp	.-42     	; 0x5d44 <vfprintf+0x80>
    5d6e:	09 c0       	rjmp	.+18     	; 0x5d82 <vfprintf+0xbe>
    5d70:	13 32       	cpi	r17, 0x23	; 35
    5d72:	29 f0       	breq	.+10     	; 0x5d7e <vfprintf+0xba>
    5d74:	1c 36       	cpi	r17, 0x6C	; 108
    5d76:	09 f0       	breq	.+2      	; 0x5d7a <vfprintf+0xb6>
    5d78:	d5 c0       	rjmp	.+426    	; 0x5f24 <vfprintf+0x260>
    5d7a:	20 68       	ori	r18, 0x80	; 128
    5d7c:	f0 cf       	rjmp	.-32     	; 0x5d5e <vfprintf+0x9a>
    5d7e:	20 e1       	ldi	r18, 0x10	; 16
    5d80:	ee cf       	rjmp	.-36     	; 0x5d5e <vfprintf+0x9a>
    5d82:	02 2f       	mov	r16, r18
    5d84:	11 23       	and	r17, r17
    5d86:	09 f4       	brne	.+2      	; 0x5d8a <vfprintf+0xc6>
    5d88:	c6 c0       	rjmp	.+396    	; 0x5f16 <vfprintf+0x252>
    5d8a:	61 2f       	mov	r22, r17
    5d8c:	70 e0       	ldi	r23, 0x00	; 0
    5d8e:	8a ef       	ldi	r24, 0xFA	; 250
    5d90:	95 e0       	ldi	r25, 0x05	; 5
    5d92:	2c 87       	std	Y+12, r18	; 0x0c
    5d94:	0e 94 75 30 	call	0x60ea	; 0x60ea <strchr_P>
    5d98:	2c 85       	ldd	r18, Y+12	; 0x0c
    5d9a:	89 2b       	or	r24, r25
    5d9c:	41 f0       	breq	.+16     	; 0x5dae <vfprintf+0xea>
    5d9e:	37 01       	movw	r6, r14
    5da0:	f4 e0       	ldi	r31, 0x04	; 4
    5da2:	6f 0e       	add	r6, r31
    5da4:	71 1c       	adc	r7, r1
    5da6:	b6 01       	movw	r22, r12
    5da8:	8f e3       	ldi	r24, 0x3F	; 63
    5daa:	90 e0       	ldi	r25, 0x00	; 0
    5dac:	11 c0       	rjmp	.+34     	; 0x5dd0 <vfprintf+0x10c>
    5dae:	13 36       	cpi	r17, 0x63	; 99
    5db0:	39 f0       	breq	.+14     	; 0x5dc0 <vfprintf+0xfc>
    5db2:	13 37       	cpi	r17, 0x73	; 115
    5db4:	81 f0       	breq	.+32     	; 0x5dd6 <vfprintf+0x112>
    5db6:	13 35       	cpi	r17, 0x53	; 83
    5db8:	19 f5       	brne	.+70     	; 0x5e00 <vfprintf+0x13c>
    5dba:	02 2f       	mov	r16, r18
    5dbc:	01 60       	ori	r16, 0x01	; 1
    5dbe:	0b c0       	rjmp	.+22     	; 0x5dd6 <vfprintf+0x112>
    5dc0:	37 01       	movw	r6, r14
    5dc2:	82 e0       	ldi	r24, 0x02	; 2
    5dc4:	68 0e       	add	r6, r24
    5dc6:	71 1c       	adc	r7, r1
    5dc8:	b6 01       	movw	r22, r12
    5dca:	f7 01       	movw	r30, r14
    5dcc:	80 81       	ld	r24, Z
    5dce:	91 81       	ldd	r25, Z+1	; 0x01
    5dd0:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    5dd4:	b5 cf       	rjmp	.-150    	; 0x5d40 <vfprintf+0x7c>
    5dd6:	37 01       	movw	r6, r14
    5dd8:	f2 e0       	ldi	r31, 0x02	; 2
    5dda:	6f 0e       	add	r6, r31
    5ddc:	71 1c       	adc	r7, r1
    5dde:	f7 01       	movw	r30, r14
    5de0:	e0 80       	ld	r14, Z
    5de2:	f1 80       	ldd	r15, Z+1	; 0x01
    5de4:	f7 01       	movw	r30, r14
    5de6:	00 fd       	sbrc	r16, 0
    5de8:	85 91       	lpm	r24, Z+
    5dea:	00 ff       	sbrs	r16, 0
    5dec:	81 91       	ld	r24, Z+
    5dee:	7f 01       	movw	r14, r30
    5df0:	88 23       	and	r24, r24
    5df2:	09 f4       	brne	.+2      	; 0x5df6 <vfprintf+0x132>
    5df4:	a5 cf       	rjmp	.-182    	; 0x5d40 <vfprintf+0x7c>
    5df6:	b6 01       	movw	r22, r12
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    5dfe:	f2 cf       	rjmp	.-28     	; 0x5de4 <vfprintf+0x120>
    5e00:	14 36       	cpi	r17, 0x64	; 100
    5e02:	11 f0       	breq	.+4      	; 0x5e08 <vfprintf+0x144>
    5e04:	19 36       	cpi	r17, 0x69	; 105
    5e06:	29 f5       	brne	.+74     	; 0x5e52 <vfprintf+0x18e>
    5e08:	37 01       	movw	r6, r14
    5e0a:	27 ff       	sbrs	r18, 7
    5e0c:	09 c0       	rjmp	.+18     	; 0x5e20 <vfprintf+0x15c>
    5e0e:	f4 e0       	ldi	r31, 0x04	; 4
    5e10:	6f 0e       	add	r6, r31
    5e12:	71 1c       	adc	r7, r1
    5e14:	f7 01       	movw	r30, r14
    5e16:	60 81       	ld	r22, Z
    5e18:	71 81       	ldd	r23, Z+1	; 0x01
    5e1a:	82 81       	ldd	r24, Z+2	; 0x02
    5e1c:	93 81       	ldd	r25, Z+3	; 0x03
    5e1e:	0a c0       	rjmp	.+20     	; 0x5e34 <vfprintf+0x170>
    5e20:	f2 e0       	ldi	r31, 0x02	; 2
    5e22:	6f 0e       	add	r6, r31
    5e24:	71 1c       	adc	r7, r1
    5e26:	f7 01       	movw	r30, r14
    5e28:	60 81       	ld	r22, Z
    5e2a:	71 81       	ldd	r23, Z+1	; 0x01
    5e2c:	88 27       	eor	r24, r24
    5e2e:	77 fd       	sbrc	r23, 7
    5e30:	80 95       	com	r24
    5e32:	98 2f       	mov	r25, r24
    5e34:	02 2f       	mov	r16, r18
    5e36:	0f 7e       	andi	r16, 0xEF	; 239
    5e38:	97 ff       	sbrs	r25, 7
    5e3a:	08 c0       	rjmp	.+16     	; 0x5e4c <vfprintf+0x188>
    5e3c:	90 95       	com	r25
    5e3e:	80 95       	com	r24
    5e40:	70 95       	com	r23
    5e42:	61 95       	neg	r22
    5e44:	7f 4f       	sbci	r23, 0xFF	; 255
    5e46:	8f 4f       	sbci	r24, 0xFF	; 255
    5e48:	9f 4f       	sbci	r25, 0xFF	; 255
    5e4a:	00 64       	ori	r16, 0x40	; 64
    5e4c:	2a e0       	ldi	r18, 0x0A	; 10
    5e4e:	30 e0       	ldi	r19, 0x00	; 0
    5e50:	33 c0       	rjmp	.+102    	; 0x5eb8 <vfprintf+0x1f4>
    5e52:	10 37       	cpi	r17, 0x70	; 112
    5e54:	99 f0       	breq	.+38     	; 0x5e7c <vfprintf+0x1b8>
    5e56:	40 f4       	brcc	.+16     	; 0x5e68 <vfprintf+0x1a4>
    5e58:	18 35       	cpi	r17, 0x58	; 88
    5e5a:	b1 f0       	breq	.+44     	; 0x5e88 <vfprintf+0x1c4>
    5e5c:	1f 36       	cpi	r17, 0x6F	; 111
    5e5e:	09 f0       	breq	.+2      	; 0x5e62 <vfprintf+0x19e>
    5e60:	5a c0       	rjmp	.+180    	; 0x5f16 <vfprintf+0x252>
    5e62:	28 e0       	ldi	r18, 0x08	; 8
    5e64:	30 e0       	ldi	r19, 0x00	; 0
    5e66:	14 c0       	rjmp	.+40     	; 0x5e90 <vfprintf+0x1cc>
    5e68:	15 37       	cpi	r17, 0x75	; 117
    5e6a:	19 f0       	breq	.+6      	; 0x5e72 <vfprintf+0x1ae>
    5e6c:	18 37       	cpi	r17, 0x78	; 120
    5e6e:	41 f0       	breq	.+16     	; 0x5e80 <vfprintf+0x1bc>
    5e70:	52 c0       	rjmp	.+164    	; 0x5f16 <vfprintf+0x252>
    5e72:	02 2f       	mov	r16, r18
    5e74:	0f 7e       	andi	r16, 0xEF	; 239
    5e76:	2a e0       	ldi	r18, 0x0A	; 10
    5e78:	30 e0       	ldi	r19, 0x00	; 0
    5e7a:	0a c0       	rjmp	.+20     	; 0x5e90 <vfprintf+0x1cc>
    5e7c:	02 2f       	mov	r16, r18
    5e7e:	00 61       	ori	r16, 0x10	; 16
    5e80:	04 62       	ori	r16, 0x24	; 36
    5e82:	20 e1       	ldi	r18, 0x10	; 16
    5e84:	30 e0       	ldi	r19, 0x00	; 0
    5e86:	04 c0       	rjmp	.+8      	; 0x5e90 <vfprintf+0x1cc>
    5e88:	02 2f       	mov	r16, r18
    5e8a:	04 60       	ori	r16, 0x04	; 4
    5e8c:	20 e1       	ldi	r18, 0x10	; 16
    5e8e:	32 e0       	ldi	r19, 0x02	; 2
    5e90:	37 01       	movw	r6, r14
    5e92:	07 ff       	sbrs	r16, 7
    5e94:	09 c0       	rjmp	.+18     	; 0x5ea8 <vfprintf+0x1e4>
    5e96:	f4 e0       	ldi	r31, 0x04	; 4
    5e98:	6f 0e       	add	r6, r31
    5e9a:	71 1c       	adc	r7, r1
    5e9c:	f7 01       	movw	r30, r14
    5e9e:	60 81       	ld	r22, Z
    5ea0:	71 81       	ldd	r23, Z+1	; 0x01
    5ea2:	82 81       	ldd	r24, Z+2	; 0x02
    5ea4:	93 81       	ldd	r25, Z+3	; 0x03
    5ea6:	08 c0       	rjmp	.+16     	; 0x5eb8 <vfprintf+0x1f4>
    5ea8:	f2 e0       	ldi	r31, 0x02	; 2
    5eaa:	6f 0e       	add	r6, r31
    5eac:	71 1c       	adc	r7, r1
    5eae:	f7 01       	movw	r30, r14
    5eb0:	60 81       	ld	r22, Z
    5eb2:	71 81       	ldd	r23, Z+1	; 0x01
    5eb4:	80 e0       	ldi	r24, 0x00	; 0
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	a4 01       	movw	r20, r8
    5eba:	0e 94 94 31 	call	0x6328	; 0x6328 <__ultoa_invert>
    5ebe:	18 2f       	mov	r17, r24
    5ec0:	18 19       	sub	r17, r8
    5ec2:	06 ff       	sbrs	r16, 6
    5ec4:	05 c0       	rjmp	.+10     	; 0x5ed0 <vfprintf+0x20c>
    5ec6:	b6 01       	movw	r22, r12
    5ec8:	8d e2       	ldi	r24, 0x2D	; 45
    5eca:	90 e0       	ldi	r25, 0x00	; 0
    5ecc:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    5ed0:	04 ff       	sbrs	r16, 4
    5ed2:	15 c0       	rjmp	.+42     	; 0x5efe <vfprintf+0x23a>
    5ed4:	fe 01       	movw	r30, r28
    5ed6:	e1 0f       	add	r30, r17
    5ed8:	f1 1d       	adc	r31, r1
    5eda:	80 81       	ld	r24, Z
    5edc:	80 33       	cpi	r24, 0x30	; 48
    5ede:	79 f0       	breq	.+30     	; 0x5efe <vfprintf+0x23a>
    5ee0:	b6 01       	movw	r22, r12
    5ee2:	80 e3       	ldi	r24, 0x30	; 48
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    5eea:	02 ff       	sbrs	r16, 2
    5eec:	08 c0       	rjmp	.+16     	; 0x5efe <vfprintf+0x23a>
    5eee:	00 72       	andi	r16, 0x20	; 32
    5ef0:	80 2f       	mov	r24, r16
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	b6 01       	movw	r22, r12
    5ef6:	88 5a       	subi	r24, 0xA8	; 168
    5ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    5efa:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    5efe:	11 50       	subi	r17, 0x01	; 1
    5f00:	f4 01       	movw	r30, r8
    5f02:	e1 0f       	add	r30, r17
    5f04:	f1 1d       	adc	r31, r1
    5f06:	80 81       	ld	r24, Z
    5f08:	b6 01       	movw	r22, r12
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    5f10:	11 11       	cpse	r17, r1
    5f12:	f5 cf       	rjmp	.-22     	; 0x5efe <vfprintf+0x23a>
    5f14:	15 cf       	rjmp	.-470    	; 0x5d40 <vfprintf+0x7c>
    5f16:	f6 01       	movw	r30, r12
    5f18:	86 81       	ldd	r24, Z+6	; 0x06
    5f1a:	97 81       	ldd	r25, Z+7	; 0x07
    5f1c:	05 c0       	rjmp	.+10     	; 0x5f28 <vfprintf+0x264>
    5f1e:	8f ef       	ldi	r24, 0xFF	; 255
    5f20:	9f ef       	ldi	r25, 0xFF	; 255
    5f22:	02 c0       	rjmp	.+4      	; 0x5f28 <vfprintf+0x264>
    5f24:	02 2f       	mov	r16, r18
    5f26:	31 cf       	rjmp	.-414    	; 0x5d8a <vfprintf+0xc6>
    5f28:	2c 96       	adiw	r28, 0x0c	; 12
    5f2a:	0f b6       	in	r0, 0x3f	; 63
    5f2c:	f8 94       	cli
    5f2e:	de bf       	out	0x3e, r29	; 62
    5f30:	0f be       	out	0x3f, r0	; 63
    5f32:	cd bf       	out	0x3d, r28	; 61
    5f34:	df 91       	pop	r29
    5f36:	cf 91       	pop	r28
    5f38:	1f 91       	pop	r17
    5f3a:	0f 91       	pop	r16
    5f3c:	ff 90       	pop	r15
    5f3e:	ef 90       	pop	r14
    5f40:	df 90       	pop	r13
    5f42:	cf 90       	pop	r12
    5f44:	bf 90       	pop	r11
    5f46:	af 90       	pop	r10
    5f48:	9f 90       	pop	r9
    5f4a:	8f 90       	pop	r8
    5f4c:	7f 90       	pop	r7
    5f4e:	6f 90       	pop	r6
    5f50:	08 95       	ret

00005f52 <__usmulhisi3>:
    5f52:	0e 94 66 30 	call	0x60cc	; 0x60cc <__umulhisi3>

00005f56 <__usmulhisi3_tail>:
    5f56:	b7 ff       	sbrs	r27, 7
    5f58:	08 95       	ret
    5f5a:	82 1b       	sub	r24, r18
    5f5c:	93 0b       	sbc	r25, r19
    5f5e:	08 95       	ret

00005f60 <__muluhisi3>:
    5f60:	0e 94 66 30 	call	0x60cc	; 0x60cc <__umulhisi3>
    5f64:	a5 9f       	mul	r26, r21
    5f66:	90 0d       	add	r25, r0
    5f68:	b4 9f       	mul	r27, r20
    5f6a:	90 0d       	add	r25, r0
    5f6c:	a4 9f       	mul	r26, r20
    5f6e:	80 0d       	add	r24, r0
    5f70:	91 1d       	adc	r25, r1
    5f72:	11 24       	eor	r1, r1
    5f74:	08 95       	ret

00005f76 <__mulsi3>:
    5f76:	db 01       	movw	r26, r22
    5f78:	8f 93       	push	r24
    5f7a:	9f 93       	push	r25
    5f7c:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <__muluhisi3>
    5f80:	bf 91       	pop	r27
    5f82:	af 91       	pop	r26
    5f84:	a2 9f       	mul	r26, r18
    5f86:	80 0d       	add	r24, r0
    5f88:	91 1d       	adc	r25, r1
    5f8a:	a3 9f       	mul	r26, r19
    5f8c:	90 0d       	add	r25, r0
    5f8e:	b2 9f       	mul	r27, r18
    5f90:	90 0d       	add	r25, r0
    5f92:	11 24       	eor	r1, r1
    5f94:	08 95       	ret

00005f96 <__udivmodhi4>:
    5f96:	aa 1b       	sub	r26, r26
    5f98:	bb 1b       	sub	r27, r27
    5f9a:	51 e1       	ldi	r21, 0x11	; 17
    5f9c:	07 c0       	rjmp	.+14     	; 0x5fac <__udivmodhi4_ep>

00005f9e <__udivmodhi4_loop>:
    5f9e:	aa 1f       	adc	r26, r26
    5fa0:	bb 1f       	adc	r27, r27
    5fa2:	a6 17       	cp	r26, r22
    5fa4:	b7 07       	cpc	r27, r23
    5fa6:	10 f0       	brcs	.+4      	; 0x5fac <__udivmodhi4_ep>
    5fa8:	a6 1b       	sub	r26, r22
    5faa:	b7 0b       	sbc	r27, r23

00005fac <__udivmodhi4_ep>:
    5fac:	88 1f       	adc	r24, r24
    5fae:	99 1f       	adc	r25, r25
    5fb0:	5a 95       	dec	r21
    5fb2:	a9 f7       	brne	.-22     	; 0x5f9e <__udivmodhi4_loop>
    5fb4:	80 95       	com	r24
    5fb6:	90 95       	com	r25
    5fb8:	bc 01       	movw	r22, r24
    5fba:	cd 01       	movw	r24, r26
    5fbc:	08 95       	ret

00005fbe <__udivmodsi4>:
    5fbe:	a1 e2       	ldi	r26, 0x21	; 33
    5fc0:	1a 2e       	mov	r1, r26
    5fc2:	aa 1b       	sub	r26, r26
    5fc4:	bb 1b       	sub	r27, r27
    5fc6:	fd 01       	movw	r30, r26
    5fc8:	0d c0       	rjmp	.+26     	; 0x5fe4 <__udivmodsi4_ep>

00005fca <__udivmodsi4_loop>:
    5fca:	aa 1f       	adc	r26, r26
    5fcc:	bb 1f       	adc	r27, r27
    5fce:	ee 1f       	adc	r30, r30
    5fd0:	ff 1f       	adc	r31, r31
    5fd2:	a2 17       	cp	r26, r18
    5fd4:	b3 07       	cpc	r27, r19
    5fd6:	e4 07       	cpc	r30, r20
    5fd8:	f5 07       	cpc	r31, r21
    5fda:	20 f0       	brcs	.+8      	; 0x5fe4 <__udivmodsi4_ep>
    5fdc:	a2 1b       	sub	r26, r18
    5fde:	b3 0b       	sbc	r27, r19
    5fe0:	e4 0b       	sbc	r30, r20
    5fe2:	f5 0b       	sbc	r31, r21

00005fe4 <__udivmodsi4_ep>:
    5fe4:	66 1f       	adc	r22, r22
    5fe6:	77 1f       	adc	r23, r23
    5fe8:	88 1f       	adc	r24, r24
    5fea:	99 1f       	adc	r25, r25
    5fec:	1a 94       	dec	r1
    5fee:	69 f7       	brne	.-38     	; 0x5fca <__udivmodsi4_loop>
    5ff0:	60 95       	com	r22
    5ff2:	70 95       	com	r23
    5ff4:	80 95       	com	r24
    5ff6:	90 95       	com	r25
    5ff8:	9b 01       	movw	r18, r22
    5ffa:	ac 01       	movw	r20, r24
    5ffc:	bd 01       	movw	r22, r26
    5ffe:	cf 01       	movw	r24, r30
    6000:	08 95       	ret

00006002 <__umoddi3>:
    6002:	68 94       	set
    6004:	01 c0       	rjmp	.+2      	; 0x6008 <__udivdi3_umoddi3>

00006006 <__udivdi3>:
    6006:	e8 94       	clt

00006008 <__udivdi3_umoddi3>:
    6008:	8f 92       	push	r8
    600a:	9f 92       	push	r9
    600c:	cf 93       	push	r28
    600e:	df 93       	push	r29
    6010:	0e 94 0f 30 	call	0x601e	; 0x601e <__udivmod64>
    6014:	df 91       	pop	r29
    6016:	cf 91       	pop	r28
    6018:	9f 90       	pop	r9
    601a:	8f 90       	pop	r8
    601c:	08 95       	ret

0000601e <__udivmod64>:
    601e:	88 24       	eor	r8, r8
    6020:	99 24       	eor	r9, r9
    6022:	f4 01       	movw	r30, r8
    6024:	e4 01       	movw	r28, r8
    6026:	b0 e4       	ldi	r27, 0x40	; 64
    6028:	9f 93       	push	r25
    602a:	aa 27       	eor	r26, r26
    602c:	9a 15       	cp	r25, r10
    602e:	8b 04       	cpc	r8, r11
    6030:	9c 04       	cpc	r9, r12
    6032:	ed 05       	cpc	r30, r13
    6034:	fe 05       	cpc	r31, r14
    6036:	cf 05       	cpc	r28, r15
    6038:	d0 07       	cpc	r29, r16
    603a:	a1 07       	cpc	r26, r17
    603c:	98 f4       	brcc	.+38     	; 0x6064 <__udivmod64+0x46>
    603e:	ad 2f       	mov	r26, r29
    6040:	dc 2f       	mov	r29, r28
    6042:	cf 2f       	mov	r28, r31
    6044:	fe 2f       	mov	r31, r30
    6046:	e9 2d       	mov	r30, r9
    6048:	98 2c       	mov	r9, r8
    604a:	89 2e       	mov	r8, r25
    604c:	98 2f       	mov	r25, r24
    604e:	87 2f       	mov	r24, r23
    6050:	76 2f       	mov	r23, r22
    6052:	65 2f       	mov	r22, r21
    6054:	54 2f       	mov	r21, r20
    6056:	43 2f       	mov	r20, r19
    6058:	32 2f       	mov	r19, r18
    605a:	22 27       	eor	r18, r18
    605c:	b8 50       	subi	r27, 0x08	; 8
    605e:	31 f7       	brne	.-52     	; 0x602c <__udivmod64+0xe>
    6060:	bf 91       	pop	r27
    6062:	27 c0       	rjmp	.+78     	; 0x60b2 <__udivmod64+0x94>
    6064:	1b 2e       	mov	r1, r27
    6066:	bf 91       	pop	r27
    6068:	bb 27       	eor	r27, r27
    606a:	22 0f       	add	r18, r18
    606c:	33 1f       	adc	r19, r19
    606e:	44 1f       	adc	r20, r20
    6070:	55 1f       	adc	r21, r21
    6072:	66 1f       	adc	r22, r22
    6074:	77 1f       	adc	r23, r23
    6076:	88 1f       	adc	r24, r24
    6078:	99 1f       	adc	r25, r25
    607a:	88 1c       	adc	r8, r8
    607c:	99 1c       	adc	r9, r9
    607e:	ee 1f       	adc	r30, r30
    6080:	ff 1f       	adc	r31, r31
    6082:	cc 1f       	adc	r28, r28
    6084:	dd 1f       	adc	r29, r29
    6086:	aa 1f       	adc	r26, r26
    6088:	bb 1f       	adc	r27, r27
    608a:	8a 14       	cp	r8, r10
    608c:	9b 04       	cpc	r9, r11
    608e:	ec 05       	cpc	r30, r12
    6090:	fd 05       	cpc	r31, r13
    6092:	ce 05       	cpc	r28, r14
    6094:	df 05       	cpc	r29, r15
    6096:	a0 07       	cpc	r26, r16
    6098:	b1 07       	cpc	r27, r17
    609a:	48 f0       	brcs	.+18     	; 0x60ae <__udivmod64+0x90>
    609c:	8a 18       	sub	r8, r10
    609e:	9b 08       	sbc	r9, r11
    60a0:	ec 09       	sbc	r30, r12
    60a2:	fd 09       	sbc	r31, r13
    60a4:	ce 09       	sbc	r28, r14
    60a6:	df 09       	sbc	r29, r15
    60a8:	a0 0b       	sbc	r26, r16
    60aa:	b1 0b       	sbc	r27, r17
    60ac:	21 60       	ori	r18, 0x01	; 1
    60ae:	1a 94       	dec	r1
    60b0:	e1 f6       	brne	.-72     	; 0x606a <__udivmod64+0x4c>
    60b2:	2e f4       	brtc	.+10     	; 0x60be <__udivmod64+0xa0>
    60b4:	94 01       	movw	r18, r8
    60b6:	af 01       	movw	r20, r30
    60b8:	be 01       	movw	r22, r28
    60ba:	cd 01       	movw	r24, r26
    60bc:	00 0c       	add	r0, r0
    60be:	08 95       	ret

000060c0 <__tablejump2__>:
    60c0:	ee 0f       	add	r30, r30
    60c2:	ff 1f       	adc	r31, r31

000060c4 <__tablejump__>:
    60c4:	05 90       	lpm	r0, Z+
    60c6:	f4 91       	lpm	r31, Z
    60c8:	e0 2d       	mov	r30, r0
    60ca:	09 94       	ijmp

000060cc <__umulhisi3>:
    60cc:	a2 9f       	mul	r26, r18
    60ce:	b0 01       	movw	r22, r0
    60d0:	b3 9f       	mul	r27, r19
    60d2:	c0 01       	movw	r24, r0
    60d4:	a3 9f       	mul	r26, r19
    60d6:	70 0d       	add	r23, r0
    60d8:	81 1d       	adc	r24, r1
    60da:	11 24       	eor	r1, r1
    60dc:	91 1d       	adc	r25, r1
    60de:	b2 9f       	mul	r27, r18
    60e0:	70 0d       	add	r23, r0
    60e2:	81 1d       	adc	r24, r1
    60e4:	11 24       	eor	r1, r1
    60e6:	91 1d       	adc	r25, r1
    60e8:	08 95       	ret

000060ea <strchr_P>:
    60ea:	fc 01       	movw	r30, r24
    60ec:	05 90       	lpm	r0, Z+
    60ee:	06 16       	cp	r0, r22
    60f0:	21 f0       	breq	.+8      	; 0x60fa <strchr_P+0x10>
    60f2:	00 20       	and	r0, r0
    60f4:	d9 f7       	brne	.-10     	; 0x60ec <strchr_P+0x2>
    60f6:	c0 01       	movw	r24, r0
    60f8:	08 95       	ret
    60fa:	31 97       	sbiw	r30, 0x01	; 1
    60fc:	cf 01       	movw	r24, r30
    60fe:	08 95       	ret

00006100 <memcpy>:
    6100:	fb 01       	movw	r30, r22
    6102:	dc 01       	movw	r26, r24
    6104:	02 c0       	rjmp	.+4      	; 0x610a <memcpy+0xa>
    6106:	01 90       	ld	r0, Z+
    6108:	0d 92       	st	X+, r0
    610a:	41 50       	subi	r20, 0x01	; 1
    610c:	50 40       	sbci	r21, 0x00	; 0
    610e:	d8 f7       	brcc	.-10     	; 0x6106 <memcpy+0x6>
    6110:	08 95       	ret

00006112 <strncmp>:
    6112:	fb 01       	movw	r30, r22
    6114:	dc 01       	movw	r26, r24
    6116:	41 50       	subi	r20, 0x01	; 1
    6118:	50 40       	sbci	r21, 0x00	; 0
    611a:	30 f0       	brcs	.+12     	; 0x6128 <strncmp+0x16>
    611c:	8d 91       	ld	r24, X+
    611e:	01 90       	ld	r0, Z+
    6120:	80 19       	sub	r24, r0
    6122:	19 f4       	brne	.+6      	; 0x612a <strncmp+0x18>
    6124:	00 20       	and	r0, r0
    6126:	b9 f7       	brne	.-18     	; 0x6116 <strncmp+0x4>
    6128:	88 1b       	sub	r24, r24
    612a:	99 0b       	sbc	r25, r25
    612c:	08 95       	ret

0000612e <fdevopen>:
    612e:	0f 93       	push	r16
    6130:	1f 93       	push	r17
    6132:	cf 93       	push	r28
    6134:	df 93       	push	r29
    6136:	00 97       	sbiw	r24, 0x00	; 0
    6138:	31 f4       	brne	.+12     	; 0x6146 <fdevopen+0x18>
    613a:	61 15       	cp	r22, r1
    613c:	71 05       	cpc	r23, r1
    613e:	19 f4       	brne	.+6      	; 0x6146 <fdevopen+0x18>
    6140:	80 e0       	ldi	r24, 0x00	; 0
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	3a c0       	rjmp	.+116    	; 0x61ba <fdevopen+0x8c>
    6146:	8b 01       	movw	r16, r22
    6148:	ec 01       	movw	r28, r24
    614a:	6e e0       	ldi	r22, 0x0E	; 14
    614c:	70 e0       	ldi	r23, 0x00	; 0
    614e:	81 e0       	ldi	r24, 0x01	; 1
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	0e 94 08 32 	call	0x6410	; 0x6410 <calloc>
    6156:	fc 01       	movw	r30, r24
    6158:	00 97       	sbiw	r24, 0x00	; 0
    615a:	91 f3       	breq	.-28     	; 0x6140 <fdevopen+0x12>
    615c:	80 e8       	ldi	r24, 0x80	; 128
    615e:	83 83       	std	Z+3, r24	; 0x03
    6160:	01 15       	cp	r16, r1
    6162:	11 05       	cpc	r17, r1
    6164:	71 f0       	breq	.+28     	; 0x6182 <fdevopen+0x54>
    6166:	13 87       	std	Z+11, r17	; 0x0b
    6168:	02 87       	std	Z+10, r16	; 0x0a
    616a:	81 e8       	ldi	r24, 0x81	; 129
    616c:	83 83       	std	Z+3, r24	; 0x03
    616e:	80 91 5c 0a 	lds	r24, 0x0A5C
    6172:	90 91 5d 0a 	lds	r25, 0x0A5D
    6176:	89 2b       	or	r24, r25
    6178:	21 f4       	brne	.+8      	; 0x6182 <fdevopen+0x54>
    617a:	f0 93 5d 0a 	sts	0x0A5D, r31
    617e:	e0 93 5c 0a 	sts	0x0A5C, r30
    6182:	20 97       	sbiw	r28, 0x00	; 0
    6184:	c9 f0       	breq	.+50     	; 0x61b8 <fdevopen+0x8a>
    6186:	d1 87       	std	Z+9, r29	; 0x09
    6188:	c0 87       	std	Z+8, r28	; 0x08
    618a:	83 81       	ldd	r24, Z+3	; 0x03
    618c:	82 60       	ori	r24, 0x02	; 2
    618e:	83 83       	std	Z+3, r24	; 0x03
    6190:	80 91 5e 0a 	lds	r24, 0x0A5E
    6194:	90 91 5f 0a 	lds	r25, 0x0A5F
    6198:	89 2b       	or	r24, r25
    619a:	71 f4       	brne	.+28     	; 0x61b8 <fdevopen+0x8a>
    619c:	f0 93 5f 0a 	sts	0x0A5F, r31
    61a0:	e0 93 5e 0a 	sts	0x0A5E, r30
    61a4:	80 91 60 0a 	lds	r24, 0x0A60
    61a8:	90 91 61 0a 	lds	r25, 0x0A61
    61ac:	89 2b       	or	r24, r25
    61ae:	21 f4       	brne	.+8      	; 0x61b8 <fdevopen+0x8a>
    61b0:	f0 93 61 0a 	sts	0x0A61, r31
    61b4:	e0 93 60 0a 	sts	0x0A60, r30
    61b8:	cf 01       	movw	r24, r30
    61ba:	df 91       	pop	r29
    61bc:	cf 91       	pop	r28
    61be:	1f 91       	pop	r17
    61c0:	0f 91       	pop	r16
    61c2:	08 95       	ret

000061c4 <fputc>:
    61c4:	0f 93       	push	r16
    61c6:	1f 93       	push	r17
    61c8:	cf 93       	push	r28
    61ca:	df 93       	push	r29
    61cc:	fb 01       	movw	r30, r22
    61ce:	23 81       	ldd	r18, Z+3	; 0x03
    61d0:	21 fd       	sbrc	r18, 1
    61d2:	03 c0       	rjmp	.+6      	; 0x61da <fputc+0x16>
    61d4:	8f ef       	ldi	r24, 0xFF	; 255
    61d6:	9f ef       	ldi	r25, 0xFF	; 255
    61d8:	28 c0       	rjmp	.+80     	; 0x622a <fputc+0x66>
    61da:	22 ff       	sbrs	r18, 2
    61dc:	16 c0       	rjmp	.+44     	; 0x620a <fputc+0x46>
    61de:	46 81       	ldd	r20, Z+6	; 0x06
    61e0:	57 81       	ldd	r21, Z+7	; 0x07
    61e2:	24 81       	ldd	r18, Z+4	; 0x04
    61e4:	35 81       	ldd	r19, Z+5	; 0x05
    61e6:	42 17       	cp	r20, r18
    61e8:	53 07       	cpc	r21, r19
    61ea:	44 f4       	brge	.+16     	; 0x61fc <fputc+0x38>
    61ec:	a0 81       	ld	r26, Z
    61ee:	b1 81       	ldd	r27, Z+1	; 0x01
    61f0:	9d 01       	movw	r18, r26
    61f2:	2f 5f       	subi	r18, 0xFF	; 255
    61f4:	3f 4f       	sbci	r19, 0xFF	; 255
    61f6:	31 83       	std	Z+1, r19	; 0x01
    61f8:	20 83       	st	Z, r18
    61fa:	8c 93       	st	X, r24
    61fc:	26 81       	ldd	r18, Z+6	; 0x06
    61fe:	37 81       	ldd	r19, Z+7	; 0x07
    6200:	2f 5f       	subi	r18, 0xFF	; 255
    6202:	3f 4f       	sbci	r19, 0xFF	; 255
    6204:	37 83       	std	Z+7, r19	; 0x07
    6206:	26 83       	std	Z+6, r18	; 0x06
    6208:	10 c0       	rjmp	.+32     	; 0x622a <fputc+0x66>
    620a:	eb 01       	movw	r28, r22
    620c:	09 2f       	mov	r16, r25
    620e:	18 2f       	mov	r17, r24
    6210:	00 84       	ldd	r0, Z+8	; 0x08
    6212:	f1 85       	ldd	r31, Z+9	; 0x09
    6214:	e0 2d       	mov	r30, r0
    6216:	09 95       	icall
    6218:	89 2b       	or	r24, r25
    621a:	e1 f6       	brne	.-72     	; 0x61d4 <fputc+0x10>
    621c:	8e 81       	ldd	r24, Y+6	; 0x06
    621e:	9f 81       	ldd	r25, Y+7	; 0x07
    6220:	01 96       	adiw	r24, 0x01	; 1
    6222:	9f 83       	std	Y+7, r25	; 0x07
    6224:	8e 83       	std	Y+6, r24	; 0x06
    6226:	81 2f       	mov	r24, r17
    6228:	90 2f       	mov	r25, r16
    622a:	df 91       	pop	r29
    622c:	cf 91       	pop	r28
    622e:	1f 91       	pop	r17
    6230:	0f 91       	pop	r16
    6232:	08 95       	ret

00006234 <printf>:
    6234:	cf 93       	push	r28
    6236:	df 93       	push	r29
    6238:	cd b7       	in	r28, 0x3d	; 61
    623a:	de b7       	in	r29, 0x3e	; 62
    623c:	ae 01       	movw	r20, r28
    623e:	4b 5f       	subi	r20, 0xFB	; 251
    6240:	5f 4f       	sbci	r21, 0xFF	; 255
    6242:	fa 01       	movw	r30, r20
    6244:	61 91       	ld	r22, Z+
    6246:	71 91       	ld	r23, Z+
    6248:	af 01       	movw	r20, r30
    624a:	80 91 5e 0a 	lds	r24, 0x0A5E
    624e:	90 91 5f 0a 	lds	r25, 0x0A5F
    6252:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <vfprintf>
    6256:	df 91       	pop	r29
    6258:	cf 91       	pop	r28
    625a:	08 95       	ret

0000625c <putchar>:
    625c:	60 91 5e 0a 	lds	r22, 0x0A5E
    6260:	70 91 5f 0a 	lds	r23, 0x0A5F
    6264:	0c 94 e2 30 	jmp	0x61c4	; 0x61c4 <fputc>

00006268 <puts>:
    6268:	0f 93       	push	r16
    626a:	1f 93       	push	r17
    626c:	cf 93       	push	r28
    626e:	df 93       	push	r29
    6270:	e0 91 5e 0a 	lds	r30, 0x0A5E
    6274:	f0 91 5f 0a 	lds	r31, 0x0A5F
    6278:	23 81       	ldd	r18, Z+3	; 0x03
    627a:	21 ff       	sbrs	r18, 1
    627c:	1b c0       	rjmp	.+54     	; 0x62b4 <puts+0x4c>
    627e:	8c 01       	movw	r16, r24
    6280:	d0 e0       	ldi	r29, 0x00	; 0
    6282:	c0 e0       	ldi	r28, 0x00	; 0
    6284:	f8 01       	movw	r30, r16
    6286:	81 91       	ld	r24, Z+
    6288:	8f 01       	movw	r16, r30
    628a:	60 91 5e 0a 	lds	r22, 0x0A5E
    628e:	70 91 5f 0a 	lds	r23, 0x0A5F
    6292:	db 01       	movw	r26, r22
    6294:	18 96       	adiw	r26, 0x08	; 8
    6296:	ed 91       	ld	r30, X+
    6298:	fc 91       	ld	r31, X
    629a:	19 97       	sbiw	r26, 0x09	; 9
    629c:	88 23       	and	r24, r24
    629e:	31 f0       	breq	.+12     	; 0x62ac <puts+0x44>
    62a0:	09 95       	icall
    62a2:	89 2b       	or	r24, r25
    62a4:	79 f3       	breq	.-34     	; 0x6284 <puts+0x1c>
    62a6:	df ef       	ldi	r29, 0xFF	; 255
    62a8:	cf ef       	ldi	r28, 0xFF	; 255
    62aa:	ec cf       	rjmp	.-40     	; 0x6284 <puts+0x1c>
    62ac:	8a e0       	ldi	r24, 0x0A	; 10
    62ae:	09 95       	icall
    62b0:	89 2b       	or	r24, r25
    62b2:	19 f0       	breq	.+6      	; 0x62ba <puts+0x52>
    62b4:	8f ef       	ldi	r24, 0xFF	; 255
    62b6:	9f ef       	ldi	r25, 0xFF	; 255
    62b8:	02 c0       	rjmp	.+4      	; 0x62be <puts+0x56>
    62ba:	8d 2f       	mov	r24, r29
    62bc:	9c 2f       	mov	r25, r28
    62be:	df 91       	pop	r29
    62c0:	cf 91       	pop	r28
    62c2:	1f 91       	pop	r17
    62c4:	0f 91       	pop	r16
    62c6:	08 95       	ret

000062c8 <sprintf>:
    62c8:	0f 93       	push	r16
    62ca:	1f 93       	push	r17
    62cc:	cf 93       	push	r28
    62ce:	df 93       	push	r29
    62d0:	cd b7       	in	r28, 0x3d	; 61
    62d2:	de b7       	in	r29, 0x3e	; 62
    62d4:	2e 97       	sbiw	r28, 0x0e	; 14
    62d6:	0f b6       	in	r0, 0x3f	; 63
    62d8:	f8 94       	cli
    62da:	de bf       	out	0x3e, r29	; 62
    62dc:	0f be       	out	0x3f, r0	; 63
    62de:	cd bf       	out	0x3d, r28	; 61
    62e0:	0d 89       	ldd	r16, Y+21	; 0x15
    62e2:	1e 89       	ldd	r17, Y+22	; 0x16
    62e4:	86 e0       	ldi	r24, 0x06	; 6
    62e6:	8c 83       	std	Y+4, r24	; 0x04
    62e8:	1a 83       	std	Y+2, r17	; 0x02
    62ea:	09 83       	std	Y+1, r16	; 0x01
    62ec:	8f ef       	ldi	r24, 0xFF	; 255
    62ee:	9f e7       	ldi	r25, 0x7F	; 127
    62f0:	9e 83       	std	Y+6, r25	; 0x06
    62f2:	8d 83       	std	Y+5, r24	; 0x05
    62f4:	ae 01       	movw	r20, r28
    62f6:	47 5e       	subi	r20, 0xE7	; 231
    62f8:	5f 4f       	sbci	r21, 0xFF	; 255
    62fa:	6f 89       	ldd	r22, Y+23	; 0x17
    62fc:	78 8d       	ldd	r23, Y+24	; 0x18
    62fe:	ce 01       	movw	r24, r28
    6300:	01 96       	adiw	r24, 0x01	; 1
    6302:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <vfprintf>
    6306:	2f 81       	ldd	r18, Y+7	; 0x07
    6308:	38 85       	ldd	r19, Y+8	; 0x08
    630a:	f8 01       	movw	r30, r16
    630c:	e2 0f       	add	r30, r18
    630e:	f3 1f       	adc	r31, r19
    6310:	10 82       	st	Z, r1
    6312:	2e 96       	adiw	r28, 0x0e	; 14
    6314:	0f b6       	in	r0, 0x3f	; 63
    6316:	f8 94       	cli
    6318:	de bf       	out	0x3e, r29	; 62
    631a:	0f be       	out	0x3f, r0	; 63
    631c:	cd bf       	out	0x3d, r28	; 61
    631e:	df 91       	pop	r29
    6320:	cf 91       	pop	r28
    6322:	1f 91       	pop	r17
    6324:	0f 91       	pop	r16
    6326:	08 95       	ret

00006328 <__ultoa_invert>:
    6328:	fa 01       	movw	r30, r20
    632a:	aa 27       	eor	r26, r26
    632c:	28 30       	cpi	r18, 0x08	; 8
    632e:	51 f1       	breq	.+84     	; 0x6384 <__ultoa_invert+0x5c>
    6330:	20 31       	cpi	r18, 0x10	; 16
    6332:	81 f1       	breq	.+96     	; 0x6394 <__ultoa_invert+0x6c>
    6334:	e8 94       	clt
    6336:	6f 93       	push	r22
    6338:	6e 7f       	andi	r22, 0xFE	; 254
    633a:	6e 5f       	subi	r22, 0xFE	; 254
    633c:	7f 4f       	sbci	r23, 0xFF	; 255
    633e:	8f 4f       	sbci	r24, 0xFF	; 255
    6340:	9f 4f       	sbci	r25, 0xFF	; 255
    6342:	af 4f       	sbci	r26, 0xFF	; 255
    6344:	b1 e0       	ldi	r27, 0x01	; 1
    6346:	3e d0       	rcall	.+124    	; 0x63c4 <__ultoa_invert+0x9c>
    6348:	b4 e0       	ldi	r27, 0x04	; 4
    634a:	3c d0       	rcall	.+120    	; 0x63c4 <__ultoa_invert+0x9c>
    634c:	67 0f       	add	r22, r23
    634e:	78 1f       	adc	r23, r24
    6350:	89 1f       	adc	r24, r25
    6352:	9a 1f       	adc	r25, r26
    6354:	a1 1d       	adc	r26, r1
    6356:	68 0f       	add	r22, r24
    6358:	79 1f       	adc	r23, r25
    635a:	8a 1f       	adc	r24, r26
    635c:	91 1d       	adc	r25, r1
    635e:	a1 1d       	adc	r26, r1
    6360:	6a 0f       	add	r22, r26
    6362:	71 1d       	adc	r23, r1
    6364:	81 1d       	adc	r24, r1
    6366:	91 1d       	adc	r25, r1
    6368:	a1 1d       	adc	r26, r1
    636a:	20 d0       	rcall	.+64     	; 0x63ac <__ultoa_invert+0x84>
    636c:	09 f4       	brne	.+2      	; 0x6370 <__ultoa_invert+0x48>
    636e:	68 94       	set
    6370:	3f 91       	pop	r19
    6372:	2a e0       	ldi	r18, 0x0A	; 10
    6374:	26 9f       	mul	r18, r22
    6376:	11 24       	eor	r1, r1
    6378:	30 19       	sub	r19, r0
    637a:	30 5d       	subi	r19, 0xD0	; 208
    637c:	31 93       	st	Z+, r19
    637e:	de f6       	brtc	.-74     	; 0x6336 <__ultoa_invert+0xe>
    6380:	cf 01       	movw	r24, r30
    6382:	08 95       	ret
    6384:	46 2f       	mov	r20, r22
    6386:	47 70       	andi	r20, 0x07	; 7
    6388:	40 5d       	subi	r20, 0xD0	; 208
    638a:	41 93       	st	Z+, r20
    638c:	b3 e0       	ldi	r27, 0x03	; 3
    638e:	0f d0       	rcall	.+30     	; 0x63ae <__ultoa_invert+0x86>
    6390:	c9 f7       	brne	.-14     	; 0x6384 <__ultoa_invert+0x5c>
    6392:	f6 cf       	rjmp	.-20     	; 0x6380 <__ultoa_invert+0x58>
    6394:	46 2f       	mov	r20, r22
    6396:	4f 70       	andi	r20, 0x0F	; 15
    6398:	40 5d       	subi	r20, 0xD0	; 208
    639a:	4a 33       	cpi	r20, 0x3A	; 58
    639c:	18 f0       	brcs	.+6      	; 0x63a4 <__ultoa_invert+0x7c>
    639e:	49 5d       	subi	r20, 0xD9	; 217
    63a0:	31 fd       	sbrc	r19, 1
    63a2:	40 52       	subi	r20, 0x20	; 32
    63a4:	41 93       	st	Z+, r20
    63a6:	02 d0       	rcall	.+4      	; 0x63ac <__ultoa_invert+0x84>
    63a8:	a9 f7       	brne	.-22     	; 0x6394 <__ultoa_invert+0x6c>
    63aa:	ea cf       	rjmp	.-44     	; 0x6380 <__ultoa_invert+0x58>
    63ac:	b4 e0       	ldi	r27, 0x04	; 4
    63ae:	a6 95       	lsr	r26
    63b0:	97 95       	ror	r25
    63b2:	87 95       	ror	r24
    63b4:	77 95       	ror	r23
    63b6:	67 95       	ror	r22
    63b8:	ba 95       	dec	r27
    63ba:	c9 f7       	brne	.-14     	; 0x63ae <__ultoa_invert+0x86>
    63bc:	00 97       	sbiw	r24, 0x00	; 0
    63be:	61 05       	cpc	r22, r1
    63c0:	71 05       	cpc	r23, r1
    63c2:	08 95       	ret
    63c4:	9b 01       	movw	r18, r22
    63c6:	ac 01       	movw	r20, r24
    63c8:	0a 2e       	mov	r0, r26
    63ca:	06 94       	lsr	r0
    63cc:	57 95       	ror	r21
    63ce:	47 95       	ror	r20
    63d0:	37 95       	ror	r19
    63d2:	27 95       	ror	r18
    63d4:	ba 95       	dec	r27
    63d6:	c9 f7       	brne	.-14     	; 0x63ca <__ultoa_invert+0xa2>
    63d8:	62 0f       	add	r22, r18
    63da:	73 1f       	adc	r23, r19
    63dc:	84 1f       	adc	r24, r20
    63de:	95 1f       	adc	r25, r21
    63e0:	a0 1d       	adc	r26, r0
    63e2:	08 95       	ret

000063e4 <__eerd_byte_m128rfa1>:
    63e4:	f9 99       	sbic	0x1f, 1	; 31
    63e6:	fe cf       	rjmp	.-4      	; 0x63e4 <__eerd_byte_m128rfa1>
    63e8:	92 bd       	out	0x22, r25	; 34
    63ea:	81 bd       	out	0x21, r24	; 33
    63ec:	f8 9a       	sbi	0x1f, 0	; 31
    63ee:	99 27       	eor	r25, r25
    63f0:	80 b5       	in	r24, 0x20	; 32
    63f2:	08 95       	ret

000063f4 <__eewr_byte_m128rfa1>:
    63f4:	26 2f       	mov	r18, r22

000063f6 <__eewr_r18_m128rfa1>:
    63f6:	f9 99       	sbic	0x1f, 1	; 31
    63f8:	fe cf       	rjmp	.-4      	; 0x63f6 <__eewr_r18_m128rfa1>
    63fa:	1f ba       	out	0x1f, r1	; 31
    63fc:	92 bd       	out	0x22, r25	; 34
    63fe:	81 bd       	out	0x21, r24	; 33
    6400:	20 bd       	out	0x20, r18	; 32
    6402:	0f b6       	in	r0, 0x3f	; 63
    6404:	f8 94       	cli
    6406:	fa 9a       	sbi	0x1f, 2	; 31
    6408:	f9 9a       	sbi	0x1f, 1	; 31
    640a:	0f be       	out	0x3f, r0	; 63
    640c:	01 96       	adiw	r24, 0x01	; 1
    640e:	08 95       	ret

00006410 <calloc>:
    6410:	0f 93       	push	r16
    6412:	1f 93       	push	r17
    6414:	cf 93       	push	r28
    6416:	df 93       	push	r29
    6418:	86 9f       	mul	r24, r22
    641a:	80 01       	movw	r16, r0
    641c:	87 9f       	mul	r24, r23
    641e:	10 0d       	add	r17, r0
    6420:	96 9f       	mul	r25, r22
    6422:	10 0d       	add	r17, r0
    6424:	11 24       	eor	r1, r1
    6426:	c8 01       	movw	r24, r16
    6428:	0e 94 24 32 	call	0x6448	; 0x6448 <malloc>
    642c:	ec 01       	movw	r28, r24
    642e:	00 97       	sbiw	r24, 0x00	; 0
    6430:	29 f0       	breq	.+10     	; 0x643c <calloc+0x2c>
    6432:	a8 01       	movw	r20, r16
    6434:	60 e0       	ldi	r22, 0x00	; 0
    6436:	70 e0       	ldi	r23, 0x00	; 0
    6438:	0e 94 51 33 	call	0x66a2	; 0x66a2 <memset>
    643c:	ce 01       	movw	r24, r28
    643e:	df 91       	pop	r29
    6440:	cf 91       	pop	r28
    6442:	1f 91       	pop	r17
    6444:	0f 91       	pop	r16
    6446:	08 95       	ret

00006448 <malloc>:
    6448:	cf 93       	push	r28
    644a:	df 93       	push	r29
    644c:	82 30       	cpi	r24, 0x02	; 2
    644e:	91 05       	cpc	r25, r1
    6450:	10 f4       	brcc	.+4      	; 0x6456 <malloc+0xe>
    6452:	82 e0       	ldi	r24, 0x02	; 2
    6454:	90 e0       	ldi	r25, 0x00	; 0
    6456:	e0 91 64 0a 	lds	r30, 0x0A64
    645a:	f0 91 65 0a 	lds	r31, 0x0A65
    645e:	20 e0       	ldi	r18, 0x00	; 0
    6460:	30 e0       	ldi	r19, 0x00	; 0
    6462:	c0 e0       	ldi	r28, 0x00	; 0
    6464:	d0 e0       	ldi	r29, 0x00	; 0
    6466:	30 97       	sbiw	r30, 0x00	; 0
    6468:	11 f1       	breq	.+68     	; 0x64ae <malloc+0x66>
    646a:	40 81       	ld	r20, Z
    646c:	51 81       	ldd	r21, Z+1	; 0x01
    646e:	48 17       	cp	r20, r24
    6470:	59 07       	cpc	r21, r25
    6472:	c0 f0       	brcs	.+48     	; 0x64a4 <malloc+0x5c>
    6474:	48 17       	cp	r20, r24
    6476:	59 07       	cpc	r21, r25
    6478:	61 f4       	brne	.+24     	; 0x6492 <malloc+0x4a>
    647a:	82 81       	ldd	r24, Z+2	; 0x02
    647c:	93 81       	ldd	r25, Z+3	; 0x03
    647e:	20 97       	sbiw	r28, 0x00	; 0
    6480:	19 f0       	breq	.+6      	; 0x6488 <malloc+0x40>
    6482:	9b 83       	std	Y+3, r25	; 0x03
    6484:	8a 83       	std	Y+2, r24	; 0x02
    6486:	2b c0       	rjmp	.+86     	; 0x64de <malloc+0x96>
    6488:	90 93 65 0a 	sts	0x0A65, r25
    648c:	80 93 64 0a 	sts	0x0A64, r24
    6490:	26 c0       	rjmp	.+76     	; 0x64de <malloc+0x96>
    6492:	21 15       	cp	r18, r1
    6494:	31 05       	cpc	r19, r1
    6496:	19 f0       	breq	.+6      	; 0x649e <malloc+0x56>
    6498:	42 17       	cp	r20, r18
    649a:	53 07       	cpc	r21, r19
    649c:	18 f4       	brcc	.+6      	; 0x64a4 <malloc+0x5c>
    649e:	9a 01       	movw	r18, r20
    64a0:	be 01       	movw	r22, r28
    64a2:	df 01       	movw	r26, r30
    64a4:	ef 01       	movw	r28, r30
    64a6:	02 80       	ldd	r0, Z+2	; 0x02
    64a8:	f3 81       	ldd	r31, Z+3	; 0x03
    64aa:	e0 2d       	mov	r30, r0
    64ac:	dc cf       	rjmp	.-72     	; 0x6466 <malloc+0x1e>
    64ae:	21 15       	cp	r18, r1
    64b0:	31 05       	cpc	r19, r1
    64b2:	09 f1       	breq	.+66     	; 0x64f6 <malloc+0xae>
    64b4:	28 1b       	sub	r18, r24
    64b6:	39 0b       	sbc	r19, r25
    64b8:	24 30       	cpi	r18, 0x04	; 4
    64ba:	31 05       	cpc	r19, r1
    64bc:	90 f4       	brcc	.+36     	; 0x64e2 <malloc+0x9a>
    64be:	12 96       	adiw	r26, 0x02	; 2
    64c0:	8d 91       	ld	r24, X+
    64c2:	9c 91       	ld	r25, X
    64c4:	13 97       	sbiw	r26, 0x03	; 3
    64c6:	61 15       	cp	r22, r1
    64c8:	71 05       	cpc	r23, r1
    64ca:	21 f0       	breq	.+8      	; 0x64d4 <malloc+0x8c>
    64cc:	fb 01       	movw	r30, r22
    64ce:	93 83       	std	Z+3, r25	; 0x03
    64d0:	82 83       	std	Z+2, r24	; 0x02
    64d2:	04 c0       	rjmp	.+8      	; 0x64dc <malloc+0x94>
    64d4:	90 93 65 0a 	sts	0x0A65, r25
    64d8:	80 93 64 0a 	sts	0x0A64, r24
    64dc:	fd 01       	movw	r30, r26
    64de:	32 96       	adiw	r30, 0x02	; 2
    64e0:	44 c0       	rjmp	.+136    	; 0x656a <malloc+0x122>
    64e2:	fd 01       	movw	r30, r26
    64e4:	e2 0f       	add	r30, r18
    64e6:	f3 1f       	adc	r31, r19
    64e8:	81 93       	st	Z+, r24
    64ea:	91 93       	st	Z+, r25
    64ec:	22 50       	subi	r18, 0x02	; 2
    64ee:	31 09       	sbc	r19, r1
    64f0:	2d 93       	st	X+, r18
    64f2:	3c 93       	st	X, r19
    64f4:	3a c0       	rjmp	.+116    	; 0x656a <malloc+0x122>
    64f6:	20 91 62 0a 	lds	r18, 0x0A62
    64fa:	30 91 63 0a 	lds	r19, 0x0A63
    64fe:	23 2b       	or	r18, r19
    6500:	41 f4       	brne	.+16     	; 0x6512 <malloc+0xca>
    6502:	20 91 22 02 	lds	r18, 0x0222
    6506:	30 91 23 02 	lds	r19, 0x0223
    650a:	30 93 63 0a 	sts	0x0A63, r19
    650e:	20 93 62 0a 	sts	0x0A62, r18
    6512:	20 91 20 02 	lds	r18, 0x0220
    6516:	30 91 21 02 	lds	r19, 0x0221
    651a:	21 15       	cp	r18, r1
    651c:	31 05       	cpc	r19, r1
    651e:	41 f4       	brne	.+16     	; 0x6530 <malloc+0xe8>
    6520:	2d b7       	in	r18, 0x3d	; 61
    6522:	3e b7       	in	r19, 0x3e	; 62
    6524:	40 91 24 02 	lds	r20, 0x0224
    6528:	50 91 25 02 	lds	r21, 0x0225
    652c:	24 1b       	sub	r18, r20
    652e:	35 0b       	sbc	r19, r21
    6530:	e0 91 62 0a 	lds	r30, 0x0A62
    6534:	f0 91 63 0a 	lds	r31, 0x0A63
    6538:	e2 17       	cp	r30, r18
    653a:	f3 07       	cpc	r31, r19
    653c:	a0 f4       	brcc	.+40     	; 0x6566 <malloc+0x11e>
    653e:	2e 1b       	sub	r18, r30
    6540:	3f 0b       	sbc	r19, r31
    6542:	28 17       	cp	r18, r24
    6544:	39 07       	cpc	r19, r25
    6546:	78 f0       	brcs	.+30     	; 0x6566 <malloc+0x11e>
    6548:	ac 01       	movw	r20, r24
    654a:	4e 5f       	subi	r20, 0xFE	; 254
    654c:	5f 4f       	sbci	r21, 0xFF	; 255
    654e:	24 17       	cp	r18, r20
    6550:	35 07       	cpc	r19, r21
    6552:	48 f0       	brcs	.+18     	; 0x6566 <malloc+0x11e>
    6554:	4e 0f       	add	r20, r30
    6556:	5f 1f       	adc	r21, r31
    6558:	50 93 63 0a 	sts	0x0A63, r21
    655c:	40 93 62 0a 	sts	0x0A62, r20
    6560:	81 93       	st	Z+, r24
    6562:	91 93       	st	Z+, r25
    6564:	02 c0       	rjmp	.+4      	; 0x656a <malloc+0x122>
    6566:	e0 e0       	ldi	r30, 0x00	; 0
    6568:	f0 e0       	ldi	r31, 0x00	; 0
    656a:	cf 01       	movw	r24, r30
    656c:	df 91       	pop	r29
    656e:	cf 91       	pop	r28
    6570:	08 95       	ret

00006572 <free>:
    6572:	0f 93       	push	r16
    6574:	1f 93       	push	r17
    6576:	cf 93       	push	r28
    6578:	df 93       	push	r29
    657a:	00 97       	sbiw	r24, 0x00	; 0
    657c:	09 f4       	brne	.+2      	; 0x6580 <free+0xe>
    657e:	8c c0       	rjmp	.+280    	; 0x6698 <free+0x126>
    6580:	fc 01       	movw	r30, r24
    6582:	32 97       	sbiw	r30, 0x02	; 2
    6584:	13 82       	std	Z+3, r1	; 0x03
    6586:	12 82       	std	Z+2, r1	; 0x02
    6588:	00 91 64 0a 	lds	r16, 0x0A64
    658c:	10 91 65 0a 	lds	r17, 0x0A65
    6590:	01 15       	cp	r16, r1
    6592:	11 05       	cpc	r17, r1
    6594:	81 f4       	brne	.+32     	; 0x65b6 <free+0x44>
    6596:	20 81       	ld	r18, Z
    6598:	31 81       	ldd	r19, Z+1	; 0x01
    659a:	82 0f       	add	r24, r18
    659c:	93 1f       	adc	r25, r19
    659e:	20 91 62 0a 	lds	r18, 0x0A62
    65a2:	30 91 63 0a 	lds	r19, 0x0A63
    65a6:	28 17       	cp	r18, r24
    65a8:	39 07       	cpc	r19, r25
    65aa:	79 f5       	brne	.+94     	; 0x660a <free+0x98>
    65ac:	f0 93 63 0a 	sts	0x0A63, r31
    65b0:	e0 93 62 0a 	sts	0x0A62, r30
    65b4:	71 c0       	rjmp	.+226    	; 0x6698 <free+0x126>
    65b6:	d8 01       	movw	r26, r16
    65b8:	40 e0       	ldi	r20, 0x00	; 0
    65ba:	50 e0       	ldi	r21, 0x00	; 0
    65bc:	ae 17       	cp	r26, r30
    65be:	bf 07       	cpc	r27, r31
    65c0:	50 f4       	brcc	.+20     	; 0x65d6 <free+0x64>
    65c2:	12 96       	adiw	r26, 0x02	; 2
    65c4:	2d 91       	ld	r18, X+
    65c6:	3c 91       	ld	r19, X
    65c8:	13 97       	sbiw	r26, 0x03	; 3
    65ca:	ad 01       	movw	r20, r26
    65cc:	21 15       	cp	r18, r1
    65ce:	31 05       	cpc	r19, r1
    65d0:	09 f1       	breq	.+66     	; 0x6614 <free+0xa2>
    65d2:	d9 01       	movw	r26, r18
    65d4:	f3 cf       	rjmp	.-26     	; 0x65bc <free+0x4a>
    65d6:	9d 01       	movw	r18, r26
    65d8:	da 01       	movw	r26, r20
    65da:	33 83       	std	Z+3, r19	; 0x03
    65dc:	22 83       	std	Z+2, r18	; 0x02
    65de:	60 81       	ld	r22, Z
    65e0:	71 81       	ldd	r23, Z+1	; 0x01
    65e2:	86 0f       	add	r24, r22
    65e4:	97 1f       	adc	r25, r23
    65e6:	82 17       	cp	r24, r18
    65e8:	93 07       	cpc	r25, r19
    65ea:	69 f4       	brne	.+26     	; 0x6606 <free+0x94>
    65ec:	ec 01       	movw	r28, r24
    65ee:	28 81       	ld	r18, Y
    65f0:	39 81       	ldd	r19, Y+1	; 0x01
    65f2:	26 0f       	add	r18, r22
    65f4:	37 1f       	adc	r19, r23
    65f6:	2e 5f       	subi	r18, 0xFE	; 254
    65f8:	3f 4f       	sbci	r19, 0xFF	; 255
    65fa:	31 83       	std	Z+1, r19	; 0x01
    65fc:	20 83       	st	Z, r18
    65fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6600:	9b 81       	ldd	r25, Y+3	; 0x03
    6602:	93 83       	std	Z+3, r25	; 0x03
    6604:	82 83       	std	Z+2, r24	; 0x02
    6606:	45 2b       	or	r20, r21
    6608:	29 f4       	brne	.+10     	; 0x6614 <free+0xa2>
    660a:	f0 93 65 0a 	sts	0x0A65, r31
    660e:	e0 93 64 0a 	sts	0x0A64, r30
    6612:	42 c0       	rjmp	.+132    	; 0x6698 <free+0x126>
    6614:	13 96       	adiw	r26, 0x03	; 3
    6616:	fc 93       	st	X, r31
    6618:	ee 93       	st	-X, r30
    661a:	12 97       	sbiw	r26, 0x02	; 2
    661c:	ed 01       	movw	r28, r26
    661e:	49 91       	ld	r20, Y+
    6620:	59 91       	ld	r21, Y+
    6622:	9e 01       	movw	r18, r28
    6624:	24 0f       	add	r18, r20
    6626:	35 1f       	adc	r19, r21
    6628:	e2 17       	cp	r30, r18
    662a:	f3 07       	cpc	r31, r19
    662c:	71 f4       	brne	.+28     	; 0x664a <free+0xd8>
    662e:	80 81       	ld	r24, Z
    6630:	91 81       	ldd	r25, Z+1	; 0x01
    6632:	84 0f       	add	r24, r20
    6634:	95 1f       	adc	r25, r21
    6636:	02 96       	adiw	r24, 0x02	; 2
    6638:	11 96       	adiw	r26, 0x01	; 1
    663a:	9c 93       	st	X, r25
    663c:	8e 93       	st	-X, r24
    663e:	82 81       	ldd	r24, Z+2	; 0x02
    6640:	93 81       	ldd	r25, Z+3	; 0x03
    6642:	13 96       	adiw	r26, 0x03	; 3
    6644:	9c 93       	st	X, r25
    6646:	8e 93       	st	-X, r24
    6648:	12 97       	sbiw	r26, 0x02	; 2
    664a:	e0 e0       	ldi	r30, 0x00	; 0
    664c:	f0 e0       	ldi	r31, 0x00	; 0
    664e:	d8 01       	movw	r26, r16
    6650:	12 96       	adiw	r26, 0x02	; 2
    6652:	8d 91       	ld	r24, X+
    6654:	9c 91       	ld	r25, X
    6656:	13 97       	sbiw	r26, 0x03	; 3
    6658:	00 97       	sbiw	r24, 0x00	; 0
    665a:	19 f0       	breq	.+6      	; 0x6662 <free+0xf0>
    665c:	f8 01       	movw	r30, r16
    665e:	8c 01       	movw	r16, r24
    6660:	f6 cf       	rjmp	.-20     	; 0x664e <free+0xdc>
    6662:	8d 91       	ld	r24, X+
    6664:	9c 91       	ld	r25, X
    6666:	98 01       	movw	r18, r16
    6668:	2e 5f       	subi	r18, 0xFE	; 254
    666a:	3f 4f       	sbci	r19, 0xFF	; 255
    666c:	82 0f       	add	r24, r18
    666e:	93 1f       	adc	r25, r19
    6670:	20 91 62 0a 	lds	r18, 0x0A62
    6674:	30 91 63 0a 	lds	r19, 0x0A63
    6678:	28 17       	cp	r18, r24
    667a:	39 07       	cpc	r19, r25
    667c:	69 f4       	brne	.+26     	; 0x6698 <free+0x126>
    667e:	30 97       	sbiw	r30, 0x00	; 0
    6680:	29 f4       	brne	.+10     	; 0x668c <free+0x11a>
    6682:	10 92 65 0a 	sts	0x0A65, r1
    6686:	10 92 64 0a 	sts	0x0A64, r1
    668a:	02 c0       	rjmp	.+4      	; 0x6690 <free+0x11e>
    668c:	13 82       	std	Z+3, r1	; 0x03
    668e:	12 82       	std	Z+2, r1	; 0x02
    6690:	10 93 63 0a 	sts	0x0A63, r17
    6694:	00 93 62 0a 	sts	0x0A62, r16
    6698:	df 91       	pop	r29
    669a:	cf 91       	pop	r28
    669c:	1f 91       	pop	r17
    669e:	0f 91       	pop	r16
    66a0:	08 95       	ret

000066a2 <memset>:
    66a2:	dc 01       	movw	r26, r24
    66a4:	01 c0       	rjmp	.+2      	; 0x66a8 <memset+0x6>
    66a6:	6d 93       	st	X+, r22
    66a8:	41 50       	subi	r20, 0x01	; 1
    66aa:	50 40       	sbci	r21, 0x00	; 0
    66ac:	e0 f7       	brcc	.-8      	; 0x66a6 <memset+0x4>
    66ae:	08 95       	ret

000066b0 <_exit>:
    66b0:	f8 94       	cli

000066b2 <__stop_program>:
    66b2:	ff cf       	rjmp	.-2      	; 0x66b2 <__stop_program>
