   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 334               	.global	rx_task
 336               	rx_task:
 337               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** #include <nrk.h>
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <hal.h>
  29:main.c        **** #include <nrk_error.h>
  30:main.c        **** #include <nrk_timer.h>
  31:main.c        **** #include <nrk_stack_check.h>
  32:main.c        **** #include <nrk_stats.h>
  33:main.c        **** #include <pcf_tdma.h>
  34:main.c        **** #include <slip.h>
  35:main.c        **** #include <tdma_cons.h>
  36:main.c        **** 
  37:main.c        **** 
  38:main.c        **** NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
  39:main.c        **** nrk_task_type rx_task_info;
  40:main.c        **** void rx_task (void);
  41:main.c        **** 
  42:main.c        **** NRK_STK tx_task_stack[NRK_APP_STACKSIZE];
  43:main.c        **** nrk_task_type tx_task_info;
  44:main.c        **** void tx_task (void);
  45:main.c        **** 
  46:main.c        **** void nrk_create_taskset ();
  47:main.c        **** 
  48:main.c        **** tdma_info tx_tdma_fd;
  49:main.c        **** tdma_info rx_tdma_fd;
  50:main.c        **** 
  51:main.c        **** uint8_t rx_buf[TDMA_MAX_PKT_SIZE];
  52:main.c        **** uint8_t tx_buf[TDMA_MAX_PKT_SIZE];
  53:main.c        **** 
  54:main.c        **** uint8_t aes_key[16] = {0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee, 
  55:main.c        **** 
  56:main.c        **** int main ()
  57:main.c        **** {
  58:main.c        ****   nrk_setup_ports ();
  59:main.c        ****   nrk_setup_uart (UART_BAUDRATE_115K2);
  60:main.c        **** 
  61:main.c        ****   nrk_init ();
  62:main.c        **** 
  63:main.c        ****   nrk_led_clr (ORANGE_LED);
  64:main.c        ****   nrk_led_clr (BLUE_LED);
  65:main.c        ****   nrk_led_clr (GREEN_LED);
  66:main.c        ****   nrk_led_clr (RED_LED);
  67:main.c        **** 
  68:main.c        ****   nrk_time_set (0, 0);
  69:main.c        ****   nrk_create_taskset ();
  70:main.c        ****   nrk_start ();
  71:main.c        **** 
  72:main.c        ****   return 0;
  73:main.c        **** }
  74:main.c        **** 
  75:main.c        **** void tx_task ()
  76:main.c        **** {
  77:main.c        ****   int8_t v;
  78:main.c        ****   uint8_t len, cnt;
  79:main.c        **** 
  80:main.c        **** 
  81:main.c        ****   printf ("Gateway Tx Task PID=%u\r\n", nrk_get_pid ());
  82:main.c        **** 
  83:main.c        **** 
  84:main.c        ****   while (!tdma_started ())
  85:main.c        ****     nrk_wait_until_next_period ();
  86:main.c        **** 
  87:main.c        ****   cnt = 0;
  88:main.c        **** 
  89:main.c        ****   while (1) {
  90:main.c        **** 
  91:main.c        ****     sprintf (tx_buf, "Host data counter %d\n", cnt);
  92:main.c        ****     cnt++;
  93:main.c        ****     len = strlen (tx_buf) + 1;
  94:main.c        **** 
  95:main.c        ****     // Only transmit data if you want to do so
  96:main.c        ****     // Messages from the host are always broadcasts
  97:main.c        ****     v = tdma_send (&tx_tdma_fd, &tx_buf, len, TDMA_BLOCKING);
  98:main.c        ****     if (v == NRK_OK) {
  99:main.c        ****       // printf ("Host Packet Sent\r\n");
 100:main.c        ****     }
 101:main.c        ****     nrk_wait_until_next_period();
 102:main.c        **** 
 103:main.c        ****   }
 104:main.c        **** }
 105:main.c        **** 
 106:main.c        **** void rx_task ()
 107:main.c        **** {
 339               	.LM0:
 340               	.LFBB1:
 341 0000 CF93      		push r28
 342 0002 DF93      		push r29
 343 0004 1F92      		push __zero_reg__
 344 0006 CDB7      		in r28,__SP_L__
 345 0008 DEB7      		in r29,__SP_H__
 346               	/* prologue: function */
 347               	/* frame size = 1 */
 348               	/* stack size = 3 */
 349               	.L__stack_usage = 3
 108:main.c        ****   nrk_time_t t;
 109:main.c        ****   uint16_t cnt;
 110:main.c        ****   int8_t v;
 111:main.c        ****   uint8_t len, i;
 112:main.c        **** 
 113:main.c        **** 
 114:main.c        ****   cnt = 0;
 115:main.c        **** 
 116:main.c        ****   // init tdma
 117:main.c        ****   tdma_init (TDMA_HOST, DEFAULT_CHANNEL, HOST_MAC);
 351               	.LM1:
 352 000a 40E0      		ldi r20,0
 353 000c 50E0      		ldi r21,0
 354 000e 6DE0      		ldi r22,lo8(13)
 355 0010 81E0      		ldi r24,lo8(1)
 356 0012 0E94 0000 		call tdma_init
 118:main.c        **** 
 119:main.c        ****   // init slipstream
 120:main.c        ****   slip_init (stdin, stdout, 0, 0);
 358               	.LM2:
 359 0016 6091 0000 		lds r22,__iob+2
 360 001a 7091 0000 		lds r23,__iob+2+1
 361 001e 20E0      		ldi r18,0
 362 0020 40E0      		ldi r20,0
 363 0022 8091 0000 		lds r24,__iob
 364 0026 9091 0000 		lds r25,__iob+1
 365 002a 0E94 0000 		call slip_init
 121:main.c        **** 
 122:main.c        ****   // Change these parameters at runtime...
 123:main.c        ****   tdma_set_slot_len_ms (5);
 367               	.LM3:
 368 002e 85E0      		ldi r24,lo8(5)
 369 0030 90E0      		ldi r25,0
 370 0032 0E94 0000 		call tdma_set_slot_len_ms
 124:main.c        ****   tdma_set_slots_per_cycle (2);
 372               	.LM4:
 373 0036 82E0      		ldi r24,lo8(2)
 374 0038 90E0      		ldi r25,0
 375 003a 0E94 0000 		call tdma_set_slots_per_cycle
 376               	.L2:
 125:main.c        **** 
 126:main.c        ****   //tdma_aes_setkey(aes_key);
 127:main.c        ****   //tdma_aes_enable();
 128:main.c        **** 
 129:main.c        **** 
 130:main.c        ****   while (!tdma_started () || !slip_started())
 378               	.LM5:
 379 003e 0E94 0000 		call tdma_started
 380 0042 8111      		cpse r24,__zero_reg__
 381 0044 00C0      		rjmp .L15
 382               	.L6:
 131:main.c        ****     nrk_wait_until_next_period ();
 384               	.LM6:
 385 0046 0E94 0000 		call nrk_wait_until_next_period
 386 004a 00C0      		rjmp .L2
 387               	.L15:
 130:main.c        ****     nrk_wait_until_next_period ();
 389               	.LM7:
 390 004c 0E94 0000 		call slip_started
 391 0050 8823      		tst r24
 392 0052 01F0      		breq .L6
 393               	.L4:
 132:main.c        **** 
 133:main.c        **** 
 134:main.c        ****   while (1) {
 135:main.c        ****     v = tdma_recv (&rx_tdma_fd, &rx_buf, &len, TDMA_BLOCKING);
 395               	.LM8:
 396 0054 20E0      		ldi r18,0
 397 0056 AE01      		movw r20,r28
 398 0058 4F5F      		subi r20,-1
 399 005a 5F4F      		sbci r21,-1
 400 005c 60E0      		ldi r22,lo8(rx_buf)
 401 005e 70E0      		ldi r23,hi8(rx_buf)
 402 0060 80E0      		ldi r24,lo8(rx_tdma_fd)
 403 0062 90E0      		ldi r25,hi8(rx_tdma_fd)
 404 0064 0E94 0000 		call tdma_recv
 136:main.c        ****     // printf("v = %d\r\n", v);
 137:main.c        ****     if (v == NRK_OK) {
 406               	.LM9:
 407 0068 8130      		cpi r24,lo8(1)
 408 006a 01F4      		brne .L4
 138:main.c        ****       nrk_led_set(RED_LED);
 410               	.LM10:
 411 006c 81E0      		ldi r24,lo8(1)
 412 006e 90E0      		ldi r25,0
 413 0070 0E94 0000 		call nrk_led_set
 139:main.c        ****       /* debugging */
 140:main.c        ****       //printf ("src: %u rssi: %d ", rx_tdma_fd.src, rx_tdma_fd.rssi);
 141:main.c        ****       //printf ("slot: %u ", rx_tdma_fd.slot);
 142:main.c        ****       //printf ("len: %u\r\npayload: ", len);
 143:main.c        ****       //for (i = 0; i < len; i++)
 144:main.c        ****         //printf ("%d", rx_buf[i]);
 145:main.c        ****       //printf ("\r\n");
 146:main.c        ****       
 147:main.c        ****       //send the packet to the SLIPstream client
 148:main.c        ****       slip_tx (rx_buf,len);
 415               	.LM11:
 416 0074 6981      		ldd r22,Y+1
 417 0076 80E0      		ldi r24,lo8(rx_buf)
 418 0078 90E0      		ldi r25,hi8(rx_buf)
 419 007a 0E94 0000 		call slip_tx
 149:main.c        ****       nrk_led_clr(RED_LED);
 421               	.LM12:
 422 007e 81E0      		ldi r24,lo8(1)
 423 0080 90E0      		ldi r25,0
 424 0082 0E94 0000 		call nrk_led_clr
 425 0086 00C0      		rjmp .L4
 430               	.Lscope1:
 432               		.stabd	78,0,0
 433               		.section	.rodata.str1.1,"aMS",@progbits,1
 434               	.LC0:
 435 0000 4761 7465 		.string	"Gateway Tx Task PID=%u\r\n"
 435      7761 7920 
 435      5478 2054 
 435      6173 6B20 
 435      5049 443D 
 436               	.LC1:
 437 0019 486F 7374 		.string	"Host data counter %d\n"
 437      2064 6174 
 437      6120 636F 
 437      756E 7465 
 437      7220 2564 
 438               		.text
 440               	.global	tx_task
 442               	tx_task:
 443               		.stabd	46,0,0
  76:main.c        ****   int8_t v;
 445               	.LM13:
 446               	.LFBB2:
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 0 */
 450               	.L__stack_usage = 0
  81:main.c        **** 
 452               	.LM14:
 453 0088 0E94 0000 		call nrk_get_pid
 454 008c 1F92      		push __zero_reg__
 455 008e 8F93      		push r24
 456 0090 80E0      		ldi r24,lo8(.LC0)
 457 0092 90E0      		ldi r25,hi8(.LC0)
 458 0094 9F93      		push r25
 459 0096 8F93      		push r24
 460 0098 0E94 0000 		call printf
  84:main.c        ****     nrk_wait_until_next_period ();
 462               	.LM15:
 463 009c 0F90      		pop __tmp_reg__
 464 009e 0F90      		pop __tmp_reg__
 465 00a0 0F90      		pop __tmp_reg__
 466 00a2 0F90      		pop __tmp_reg__
 467               	.L17:
 468 00a4 0E94 0000 		call tdma_started
 469 00a8 8111      		cpse r24,__zero_reg__
 470 00aa 00C0      		rjmp .L20
  85:main.c        **** 
 472               	.LM16:
 473 00ac 0E94 0000 		call nrk_wait_until_next_period
 474 00b0 00C0      		rjmp .L17
 475               	.L20:
 476 00b2 10E0      		ldi r17,0
  91:main.c        ****     cnt++;
 478               	.LM17:
 479 00b4 80E0      		ldi r24,lo8(.LC1)
 480 00b6 E82E      		mov r14,r24
 481 00b8 80E0      		ldi r24,hi8(.LC1)
 482 00ba F82E      		mov r15,r24
 483 00bc C0E0      		ldi r28,lo8(tx_buf)
 484 00be D0E0      		ldi r29,hi8(tx_buf)
 485               	.L19:
 486 00c0 1F92      		push __zero_reg__
 487 00c2 1F93      		push r17
 488 00c4 FF92      		push r15
 489 00c6 EF92      		push r14
 490 00c8 DF93      		push r29
 491 00ca CF93      		push r28
 492 00cc 0E94 0000 		call sprintf
  92:main.c        ****     len = strlen (tx_buf) + 1;
 494               	.LM18:
 495 00d0 1F5F      		subi r17,lo8(-(1))
  93:main.c        **** 
 497               	.LM19:
 498 00d2 FE01      		movw r30,r28
 499               		0:
 500 00d4 0190      		ld __tmp_reg__,Z+
 501 00d6 0020      		tst __tmp_reg__
 502 00d8 01F4      		brne 0b
 503 00da 3197      		sbiw r30,1
 504 00dc E050      		subi r30,lo8(tx_buf)
 505 00de F040      		sbci r31,hi8(tx_buf)
 506 00e0 41E0      		ldi r20,lo8(1)
 507 00e2 4E0F      		add r20,r30
  97:main.c        ****     if (v == NRK_OK) {
 509               	.LM20:
 510 00e4 20E0      		ldi r18,0
 511 00e6 60E0      		ldi r22,lo8(tx_buf)
 512 00e8 70E0      		ldi r23,hi8(tx_buf)
 513 00ea 80E0      		ldi r24,lo8(tx_tdma_fd)
 514 00ec 90E0      		ldi r25,hi8(tx_tdma_fd)
 515 00ee 0E94 0000 		call tdma_send
 101:main.c        **** 
 517               	.LM21:
 518 00f2 0E94 0000 		call nrk_wait_until_next_period
 103:main.c        **** }
 520               	.LM22:
 521 00f6 0F90      		pop __tmp_reg__
 522 00f8 0F90      		pop __tmp_reg__
 523 00fa 0F90      		pop __tmp_reg__
 524 00fc 0F90      		pop __tmp_reg__
 525 00fe 0F90      		pop __tmp_reg__
 526 0100 0F90      		pop __tmp_reg__
 527 0102 00C0      		rjmp .L19
 532               	.Lscope2:
 534               		.stabd	78,0,0
 536               	.global	nrk_create_taskset
 538               	nrk_create_taskset:
 539               		.stabd	46,0,0
 150:main.c        ****       // nrk_wait_until_next_period();
 151:main.c        ****     }
 152:main.c        ****      // nrk_wait_until_next_period();
 153:main.c        ****   }
 154:main.c        **** }
 155:main.c        **** 
 156:main.c        **** void nrk_create_taskset ()
 157:main.c        **** {
 541               	.LM23:
 542               	.LFBB3:
 543               	/* prologue: function */
 544               	/* frame size = 0 */
 545               	/* stack size = 0 */
 546               	.L__stack_usage = 0
 158:main.c        ****   nrk_task_set_entry_function (&rx_task_info, rx_task);
 548               	.LM24:
 549 0104 60E0      		ldi r22,lo8(gs(rx_task))
 550 0106 70E0      		ldi r23,hi8(gs(rx_task))
 551 0108 80E0      		ldi r24,lo8(rx_task_info)
 552 010a 90E0      		ldi r25,hi8(rx_task_info)
 553 010c 0E94 0000 		call nrk_task_set_entry_function
 159:main.c        ****   nrk_task_set_stk (&rx_task_info, rx_task_stack, NRK_APP_STACKSIZE);
 555               	.LM25:
 556 0110 40E0      		ldi r20,0
 557 0112 51E0      		ldi r21,lo8(1)
 558 0114 60E0      		ldi r22,lo8(rx_task_stack)
 559 0116 70E0      		ldi r23,hi8(rx_task_stack)
 560 0118 80E0      		ldi r24,lo8(rx_task_info)
 561 011a 90E0      		ldi r25,hi8(rx_task_info)
 562 011c 0E94 0000 		call nrk_task_set_stk
 160:main.c        ****   rx_task_info.prio = 1;
 564               	.LM26:
 565 0120 E0E0      		ldi r30,lo8(rx_task_info)
 566 0122 F0E0      		ldi r31,hi8(rx_task_info)
 567 0124 81E0      		ldi r24,lo8(1)
 568 0126 8087      		std Z+8,r24
 161:main.c        ****   rx_task_info.FirstActivation = TRUE;
 570               	.LM27:
 571 0128 8783      		std Z+7,r24
 162:main.c        ****   rx_task_info.Type = BASIC_TASK;
 573               	.LM28:
 574 012a 8187      		std Z+9,r24
 163:main.c        ****   rx_task_info.SchType = PREEMPTIVE;
 576               	.LM29:
 577 012c 8287      		std Z+10,r24
 164:main.c        ****   rx_task_info.period.secs = 0;
 579               	.LM30:
 580 012e 1386      		std Z+11,__zero_reg__
 581 0130 1486      		std Z+12,__zero_reg__
 582 0132 1586      		std Z+13,__zero_reg__
 583 0134 1686      		std Z+14,__zero_reg__
 165:main.c        ****   rx_task_info.period.nano_secs = 25 * NANOS_PER_MS;
 585               	.LM31:
 586 0136 80E4      		ldi r24,lo8(64)
 587 0138 98E7      		ldi r25,lo8(120)
 588 013a ADE7      		ldi r26,lo8(125)
 589 013c B1E0      		ldi r27,lo8(1)
 590 013e 8787      		std Z+15,r24
 591 0140 908B      		std Z+16,r25
 592 0142 A18B      		std Z+17,r26
 593 0144 B28B      		std Z+18,r27
 166:main.c        ****   rx_task_info.cpu_reserve.secs = 0;
 595               	.LM32:
 596 0146 138A      		std Z+19,__zero_reg__
 597 0148 148A      		std Z+20,__zero_reg__
 598 014a 158A      		std Z+21,__zero_reg__
 599 014c 168A      		std Z+22,__zero_reg__
 167:main.c        ****   rx_task_info.cpu_reserve.nano_secs = 0 * NANOS_PER_MS;
 601               	.LM33:
 602 014e 178A      		std Z+23,__zero_reg__
 603 0150 108E      		std Z+24,__zero_reg__
 604 0152 118E      		std Z+25,__zero_reg__
 605 0154 128E      		std Z+26,__zero_reg__
 168:main.c        ****   rx_task_info.offset.secs = 1;
 607               	.LM34:
 608 0156 81E0      		ldi r24,lo8(1)
 609 0158 90E0      		ldi r25,0
 610 015a A0E0      		ldi r26,0
 611 015c B0E0      		ldi r27,0
 612 015e 838F      		std Z+27,r24
 613 0160 948F      		std Z+28,r25
 614 0162 A58F      		std Z+29,r26
 615 0164 B68F      		std Z+30,r27
 169:main.c        ****   rx_task_info.offset.nano_secs = 0;
 617               	.LM35:
 618 0166 178E      		std Z+31,__zero_reg__
 619 0168 10A2      		std Z+32,__zero_reg__
 620 016a 11A2      		std Z+33,__zero_reg__
 621 016c 12A2      		std Z+34,__zero_reg__
 170:main.c        ****   nrk_activate_task (&rx_task_info);
 623               	.LM36:
 624 016e CF01      		movw r24,r30
 625 0170 0E94 0000 		call nrk_activate_task
 171:main.c        **** 
 172:main.c        ****   tdma_task_config ();
 627               	.LM37:
 628 0174 0C94 0000 		jmp tdma_task_config
 630               	.Lscope3:
 632               		.stabd	78,0,0
 633               		.section	.text.startup,"ax",@progbits
 635               	.global	main
 637               	main:
 638               		.stabd	46,0,0
  57:main.c        ****   nrk_setup_ports ();
 640               	.LM38:
 641               	.LFBB4:
 642               	/* prologue: function */
 643               	/* frame size = 0 */
 644               	/* stack size = 0 */
 645               	.L__stack_usage = 0
  58:main.c        ****   nrk_setup_uart (UART_BAUDRATE_115K2);
 647               	.LM39:
 648 0000 0E94 0000 		call nrk_setup_ports
  59:main.c        **** 
 650               	.LM40:
 651 0004 80E1      		ldi r24,lo8(16)
 652 0006 90E0      		ldi r25,0
 653 0008 0E94 0000 		call nrk_setup_uart
  61:main.c        **** 
 655               	.LM41:
 656 000c 0E94 0000 		call nrk_init
  63:main.c        ****   nrk_led_clr (BLUE_LED);
 658               	.LM42:
 659 0010 83E0      		ldi r24,lo8(3)
 660 0012 90E0      		ldi r25,0
 661 0014 0E94 0000 		call nrk_led_clr
  64:main.c        ****   nrk_led_clr (GREEN_LED);
 663               	.LM43:
 664 0018 82E0      		ldi r24,lo8(2)
 665 001a 90E0      		ldi r25,0
 666 001c 0E94 0000 		call nrk_led_clr
  65:main.c        ****   nrk_led_clr (RED_LED);
 668               	.LM44:
 669 0020 80E0      		ldi r24,0
 670 0022 90E0      		ldi r25,0
 671 0024 0E94 0000 		call nrk_led_clr
  66:main.c        **** 
 673               	.LM45:
 674 0028 81E0      		ldi r24,lo8(1)
 675 002a 90E0      		ldi r25,0
 676 002c 0E94 0000 		call nrk_led_clr
  68:main.c        ****   nrk_create_taskset ();
 678               	.LM46:
 679 0030 20E0      		ldi r18,0
 680 0032 30E0      		ldi r19,0
 681 0034 A901      		movw r20,r18
 682 0036 60E0      		ldi r22,0
 683 0038 70E0      		ldi r23,0
 684 003a CB01      		movw r24,r22
 685 003c 0E94 0000 		call nrk_time_set
  69:main.c        ****   nrk_start ();
 687               	.LM47:
 688 0040 0E94 0000 		call nrk_create_taskset
  70:main.c        **** 
 690               	.LM48:
 691 0044 0E94 0000 		call nrk_start
  73:main.c        **** 
 693               	.LM49:
 694 0048 80E0      		ldi r24,0
 695 004a 90E0      		ldi r25,0
 696 004c 0895      		ret
 698               	.Lscope4:
 700               		.stabd	78,0,0
 701               	.global	aes_key
 702               		.data
 705               	aes_key:
 706 0000 00        		.byte	0
 707 0001 11        		.byte	17
 708 0002 22        		.byte	34
 709 0003 33        		.byte	51
 710 0004 44        		.byte	68
 711 0005 55        		.byte	85
 712 0006 66        		.byte	102
 713 0007 77        		.byte	119
 714 0008 88        		.byte	-120
 715 0009 99        		.byte	-103
 716 000a AA        		.byte	-86
 717 000b BB        		.byte	-69
 718 000c CC        		.byte	-52
 719 000d DD        		.byte	-35
 720 000e EE        		.byte	-18
 721 000f FF        		.byte	-1
 722               		.comm	tx_buf,112,1
 723               		.comm	rx_buf,112,1
 724               		.comm	rx_tdma_fd,18,1
 725               		.comm	tx_tdma_fd,18,1
 726               		.comm	tx_task_info,35,1
 727               		.comm	tx_task_stack,256,1
 728               		.comm	rx_task_info,35,1
 729               		.comm	rx_task_stack,256,1
 730               		.comm	tdma_rfTxInfo,7,1
 731               		.comm	tdma_rfRxInfo,12,1
 732               		.comm	tdma_enable_signal,1,1
 733               		.comm	tdma_tx_pkt_done_signal,1,1
 734               		.comm	tdma_rx_pkt_signal,1,1
 735               		.comm	_nrk_stats_sleep_time,8,1
 736               		.comm	cur_task_stats,90,1
 737               		.comm	app_timer0_prescale,1,1
 738               		.comm	app_timer0_callback,2,1
 739               		.comm	_nrk_time_trigger,1,1
 740               		.comm	_nrk_prev_timer_val,1,1
 741               		.comm	error_num,1,1
 742               		.comm	error_task,1,1
 743               		.comm	nrk_kernel_stk_ptr,2,1
 744               		.comm	nrk_idle_task_stk,128,1
 745               		.comm	_nrk_signal_list,4,1
 771               		.text
 773               	.Letext0:
 774               		.ident	"GCC: (GNU) 4.9.1"
 775               	.global __do_copy_data
 776               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:336    .text:0000000000000000 rx_task
                            *COM*:0000000000000070 rx_buf
                            *COM*:0000000000000012 rx_tdma_fd
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:442    .text:0000000000000088 tx_task
                            *COM*:0000000000000070 tx_buf
                            *COM*:0000000000000012 tx_tdma_fd
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:538    .text:0000000000000104 nrk_create_taskset
                            *COM*:0000000000000023 rx_task_info
                            *COM*:0000000000000100 rx_task_stack
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:637    .text.startup:0000000000000000 main
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccAiJeeg.s:705    .data:0000000000000000 aes_key
                            *COM*:0000000000000023 tx_task_info
                            *COM*:0000000000000100 tx_task_stack
                            *COM*:0000000000000007 tdma_rfTxInfo
                            *COM*:000000000000000c tdma_rfRxInfo
                            *COM*:0000000000000001 tdma_enable_signal
                            *COM*:0000000000000001 tdma_tx_pkt_done_signal
                            *COM*:0000000000000001 tdma_rx_pkt_signal
                            *COM*:0000000000000008 _nrk_stats_sleep_time
                            *COM*:000000000000005a cur_task_stats
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
tdma_init
__iob
slip_init
tdma_set_slot_len_ms
tdma_set_slots_per_cycle
tdma_started
nrk_wait_until_next_period
slip_started
tdma_recv
nrk_led_set
slip_tx
nrk_led_clr
nrk_get_pid
printf
sprintf
tdma_send
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
tdma_task_config
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
