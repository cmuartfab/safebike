
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d2  00800200  00006cb6  00006d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000087c  008003d2  008003d2  00006f1c  2**0
                  ALLOC
  3 .stab         00013398  00000000  00000000  00006f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009aca  00000000  00000000  0001a2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00023d7e  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  00023d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  00024eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00025f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00025f7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__ctors_end>
       4:	0c 94 85 2f 	jmp	0x5f0a	; 0x5f0a <__vector_1>
       8:	0c 94 b7 2f 	jmp	0x5f6e	; 0x5f6e <__vector_2>
       c:	0c 94 e9 2f 	jmp	0x5fd2	; 0x5fd2 <__vector_3>
      10:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      14:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      18:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      1c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      20:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      24:	0c 94 53 2f 	jmp	0x5ea6	; 0x5ea6 <__vector_9>
      28:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      2c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      30:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      34:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__vector_13>
      38:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      3c:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__vector_13>
      40:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      44:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      48:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      4c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      50:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      54:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      58:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      5c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      60:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      64:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      68:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      6c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      70:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      74:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      78:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      7c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      80:	0c 94 e5 2d 	jmp	0x5bca	; 0x5bca <__vector_32>
      84:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      88:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      8c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      90:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      94:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      98:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      9c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      a0:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      a4:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      a8:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      ac:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      b0:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      b4:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      b8:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      bc:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      c0:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      c4:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      c8:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      cc:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      d0:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      d4:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      d8:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      dc:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      e0:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
      e4:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__vector_57>
      e8:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__vector_58>
      ec:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__vector_59>
      f0:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__vector_60>
      f4:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__vector_61>
      f8:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__vector_62>
      fc:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__vector_63>
     100:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__vector_64>
     104:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
     108:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
     10c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
     110:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
     114:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
     118:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
     11c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__bad_interrupt>
     120:	98 12       	cpse	r9, r24
     122:	a5 12       	cpse	r10, r21
     124:	b2 12       	cpse	r11, r18
     126:	bf 12       	cpse	r11, r31
     128:	cc 12       	cpse	r12, r28
     12a:	d9 12       	cpse	r13, r25
     12c:	e6 12       	cpse	r14, r22
     12e:	09 13       	cpse	r16, r25
     130:	17 13       	cpse	r17, r23
     132:	25 13       	cpse	r18, r21
     134:	33 13       	cpse	r19, r19
     136:	41 13       	cpse	r20, r17
     138:	4f 13       	cpse	r20, r31
     13a:	5d 13       	cpse	r21, r29
     13c:	80 13       	cpse	r24, r16
     13e:	82 13       	cpse	r24, r18
     140:	84 13       	cpse	r24, r20
     142:	86 13       	cpse	r24, r22
     144:	88 13       	cpse	r24, r24
     146:	8a 13       	cpse	r24, r26
     148:	8c 13       	cpse	r24, r28
     14a:	ab 13       	cpse	r26, r27
     14c:	ce 13       	cpse	r28, r30
     14e:	f2 13       	cpse	r31, r18
     150:	15 14       	cp	r1, r5
     152:	38 14       	cp	r3, r8
     154:	5b 14       	cp	r5, r11
     156:	7e 14       	cp	r7, r14
     158:	b8 14       	cp	r11, r8
     15a:	c5 14       	cp	r12, r5
     15c:	d2 14       	cp	r13, r2
     15e:	df 14       	cp	r13, r15
     160:	ec 14       	cp	r14, r12
     162:	f9 14       	cp	r15, r9
     164:	06 15       	cp	r16, r6
     166:	1f 15       	cp	r17, r15
     168:	2c 15       	cp	r18, r12
     16a:	39 15       	cp	r19, r9
     16c:	46 15       	cp	r20, r6
     16e:	53 15       	cp	r21, r3
     170:	60 15       	cp	r22, r0
     172:	6d 15       	cp	r22, r13
     174:	90 1c       	adc	r9, r0
     176:	96 1c       	adc	r9, r6
     178:	99 1c       	adc	r9, r9
     17a:	9c 1c       	adc	r9, r12
     17c:	9f 1c       	adc	r9, r15
     17e:	a2 1c       	adc	r10, r2
     180:	a8 1c       	adc	r10, r8
     182:	a5 1c       	adc	r10, r5
     184:	ab 1c       	adc	r10, r11
     186:	ae 1c       	adc	r10, r14
     188:	b1 1c       	adc	r11, r1
     18a:	ba 1c       	adc	r11, r10
     18c:	bd 1c       	adc	r11, r13
     18e:	c0 1c       	adc	r12, r0
     190:	c3 1c       	adc	r12, r3
     192:	b7 1c       	adc	r11, r7
     194:	8d 1c       	adc	r8, r13
     196:	93 1c       	adc	r9, r3
     198:	c6 1c       	adc	r12, r6
     19a:	c9 1c       	adc	r12, r9
     19c:	b4 1c       	adc	r11, r4
     19e:	8a 1c       	adc	r8, r10
     1a0:	b2 1d       	adc	r27, r2
     1a2:	b5 1d       	adc	r27, r5
     1a4:	c0 1d       	adc	r28, r0
     1a6:	c5 1d       	adc	r28, r5
     1a8:	cc 1d       	adc	r28, r12
     1aa:	d5 1d       	adc	r29, r5
     1ac:	d8 1d       	adc	r29, r8
     1ae:	dd 1d       	adc	r29, r13
     1b0:	e4 1d       	adc	r30, r4
     1b2:	ed 1d       	adc	r30, r13

000001b4 <__trampolines_end>:
     1b4:	46 61       	ori	r20, 0x16	; 22
     1b6:	69 6c       	ori	r22, 0xC9	; 201
     1b8:	65 64       	ori	r22, 0x45	; 69
     1ba:	20 74       	andi	r18, 0x40	; 64
     1bc:	6f 20       	and	r6, r15
     1be:	72 65       	ori	r23, 0x52	; 82
     1c0:	67 69       	ori	r22, 0x97	; 151
     1c2:	73 74       	andi	r23, 0x43	; 67
     1c4:	65 72       	andi	r22, 0x25	; 37
     1c6:	20 73       	andi	r18, 0x30	; 48
     1c8:	69 67       	ori	r22, 0x79	; 121
     1ca:	6e 61       	ori	r22, 0x1E	; 30
     1cc:	6c 0d       	add	r22, r12
     1ce:	0a 00       	.word	0x000a	; ????

000001d0 <__c.3746>:
     1d0:	54 44 4d 41 20 45 52 52 4f 52 3a 20 63 72 65 61     TDMA ERROR: crea
     1e0:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     1f0:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

000001fc <__c.3744>:
     1fc:	54 44 4d 41 20 45 52 52 4f 52 3a 20 63 72 65 61     TDMA ERROR: crea
     20c:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     21c:	61 69 6c 65 64 0d 0a 00                             ailed...

00000224 <__c.3742>:
     224:	54 44 4d 41 20 45 52 52 4f 52 3a 20 63 72 65 61     TDMA ERROR: crea
     234:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     244:	61 69 6c 65 64 0d 0a 00                             ailed...

0000024c <__c.3717>:
     24c:	54 44 4d 41 20 54 58 3a 20 57 6f 6b 65 20 75 70     TDMA TX: Woke up
     25c:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     26c:	0d 0a 00                                            ...

0000026f <__c.3715>:
     26f:	54 44 4d 41 20 54 58 3a 20 45 72 72 6f 72 20 63     TDMA TX: Error c
     27f:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     28f:	74 0d 0a 00                                         t...

00000293 <__c.3323>:
     293:	4d 61 6c 66 6f 72 6d 65 64 20 45 53 43 20 73 65     Malformed ESC se
     2a3:	71 75 65 6e 63 65 0d 0a 00                          quence...

000002ac <__c.3316>:
     2ac:	43 68 65 63 6b 73 75 6d 20 66 61 69 6c 65 64 3a     Checksum failed:
     2bc:	20 00                                                .

000002be <__c.3307>:
     2be:	53 4c 49 50 20 52 58 20 65 72 72 6f 72 3a 20 6e     SLIP RX error: n
     2ce:	72 6b 5f 73 69 67 6e 61 6c 5f 72 65 67 69 73 74     rk_signal_regist
     2de:	65 72 0d 0a 00                                      er...

000002e3 <__c.3305>:
     2e3:	53 4c 49 50 20 52 58 20 65 72 72 6f 72 3a 20 47     SLIP RX error: G
     2f3:	65 74 20 53 69 67 6e 61 6c 0d 0a 00                 et Signal...

000002ff <__c.3290>:
     2ff:	53 4c 49 50 20 54 58 20 45 52 52 4f 52 3a 20 20     SLIP TX ERROR:  
     30f:	52 65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70     Release of semap
     31f:	68 6f 72 65 20 66 61 69 6c 65 64 0d 0a 00           hore failed...

0000032d <__c.3285>:
     32d:	53 4c 49 50 20 54 58 20 45 52 52 4f 52 3a 20 20     SLIP TX ERROR:  
     33d:	41 63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68     Access to semaph
     34d:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

0000035a <__c.3341>:
     35a:	0d 0a 4e 61 6e 6f 2d 52 4b 20 54 61 73 6b 20 53     ..Nano-RK Task S
     36a:	74 61 74 69 73 74 69 63 73 3a 0d 0a 00              tatistics:...

00000377 <__c.3336>:
     377:	0d 0a 00                                            ...

0000037a <__c.3334>:
     37a:	0d 0a 20 20 20 4f 76 65 72 66 6c 6f 77 20 45 72     ..   Overflow Er
     38a:	72 6f 72 20 53 74 61 74 75 73 3a 20 00              ror Status: .

00000397 <__c.3332>:
     397:	0d 0a 20 20 20 4b 65 72 6e 65 6c 20 56 69 6f 6c     ..   Kernel Viol
     3a7:	61 74 69 6f 6e 73 3a 20 00                          ations: .

000003b0 <__c.3330>:
     3b0:	0d 0a 20 20 20 50 72 65 65 6d 70 74 69 6f 6e 73     ..   Preemptions
     3c0:	3a 20 00                                            : .

000003c3 <__c.3328>:
     3c3:	0d 0a 20 20 20 53 77 61 70 2d 69 6e 73 3a 20 00     ..   Swap-ins: .

000003d3 <__c.3326>:
     3d3:	0d 0a 20 20 20 54 69 6d 65 20 5b 4d 69 6e 2c 4c     ..   Time [Min,L
     3e3:	61 73 74 2c 4d 61 78 5d 3a 20 00                    ast,Max]: .

000003ee <__c.3324>:
     3ee:	0d 0a 20 20 20 54 6f 74 61 6c 20 43 50 55 3a 20     ..   Total CPU: 
	...

000003ff <__c.3322>:
     3ff:	0d 0a 20 20 20 49 64 6c 65 20 54 61 73 6b 20 44     ..   Idle Task D
     40f:	65 65 70 20 53 6c 65 65 70 20 54 69 6d 65 3a 20     eep Sleep Time: 
	...

00000420 <__c.3320>:
     420:	0d 0a 20 20 20 54 6f 74 61 6c 20 53 79 73 74 65     ..   Total Syste
     430:	6d 20 55 70 74 69 6d 65 3a 20 00                    m Uptime: .

0000043b <__c.3318>:
     43b:	20 54 61 73 6b 20 49 44 3a 20 00                     Task ID: .

00000446 <__c.3420>:
     446:	55 4e 4b 4f 57 4e 00                                UNKOWN.

0000044d <__c.3417>:
     44d:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

0000045c <__c.3414>:
     45c:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

0000046d <__c.3411>:
     46d:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     47d:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000488 <__c.3408>:
     488:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     498:	20 53 69 67 6e 61 6c 00                              Signal.

000004a0 <__c.3405>:
     4a0:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     4b0:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000004c0 <__c.3402>:
     4c0:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     4d0:	72 6f 72 00                                         ror.

000004d4 <__c.3399>:
     4d4:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000004e5 <__c.3396>:
     4e5:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     4f5:	61 72 74 00                                         art.

000004f9 <__c.3393>:
     4f9:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000508 <__c.3390>:
     508:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     518:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000523 <__c.3387>:
     523:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000052f <__c.3384>:
     52f:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     53f:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     54f:	20 6f 6b 3f 00                                       ok?.

00000554 <__c.3381>:
     554:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     564:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

00000572 <__c.3378>:
     572:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     582:	72 74 00                                            rt.

00000585 <__c.3375>:
     585:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     595:	49 44 00                                            ID.

00000598 <__c.3372>:
     598:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     5a8:	20 57 61 6b 65 75 70 00                              Wakeup.

000005b0 <__c.3369>:
     5b0:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     5c0:	6c 61 74 65 64 00                                   lated.

000005c6 <__c.3366>:
     5c6:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     5d6:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000005e1 <__c.3363>:
     5e1:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     5f1:	69 6e 74 65 72 00                                   inter.

000005f7 <__c.3360>:
     5f7:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     607:	6c 6f 77 00                                         low.

0000060b <__c.3357>:
     60b:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     61b:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     62b:	6e 6f 75 67 68 21 00                                nough!.

00000632 <__c.3353>:
     632:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     642:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     652:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     662:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

0000066e <__c.3350>:
     66e:	29 3a 20 00                                         ): .

00000672 <__c.3348>:
     672:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

0000067e <__c.3341>:
     67e:	4e 52 4b 20 52 65 62 6f 6f 74 2e 2e 2e 0d 0a 00     NRK Reboot......

0000068e <__c.3249>:
     68e:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

0000069d <__c.2228>:
     69d:	45 46 47 65 66 67 00                                EFGefg.

000006a4 <__c.2222>:
     6a4:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000006b4 <__ctors_end>:
     6b4:	11 24       	eor	r1, r1
     6b6:	1f be       	out	0x3f, r1	; 63
     6b8:	cf ef       	ldi	r28, 0xFF	; 255
     6ba:	d1 e4       	ldi	r29, 0x41	; 65
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	cd bf       	out	0x3d, r28	; 61

000006c0 <__do_copy_data>:
     6c0:	13 e0       	ldi	r17, 0x03	; 3
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b2 e0       	ldi	r27, 0x02	; 2
     6c6:	e6 eb       	ldi	r30, 0xB6	; 182
     6c8:	fc e6       	ldi	r31, 0x6C	; 108
     6ca:	00 e0       	ldi	r16, 0x00	; 0
     6cc:	0b bf       	out	0x3b, r16	; 59
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__do_copy_data+0x14>
     6d0:	07 90       	elpm	r0, Z+
     6d2:	0d 92       	st	X+, r0
     6d4:	a2 3d       	cpi	r26, 0xD2	; 210
     6d6:	b1 07       	cpc	r27, r17
     6d8:	d9 f7       	brne	.-10     	; 0x6d0 <__do_copy_data+0x10>

000006da <__do_clear_bss>:
     6da:	1c e0       	ldi	r17, 0x0C	; 12
     6dc:	a2 ed       	ldi	r26, 0xD2	; 210
     6de:	b3 e0       	ldi	r27, 0x03	; 3
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <.do_clear_bss_start>

000006e2 <.do_clear_bss_loop>:
     6e2:	1d 92       	st	X+, r1

000006e4 <.do_clear_bss_start>:
     6e4:	ae 34       	cpi	r26, 0x4E	; 78
     6e6:	b1 07       	cpc	r27, r17
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <.do_clear_bss_loop>
     6ea:	0e 94 fe 30 	call	0x61fc	; 0x61fc <main>
     6ee:	0c 94 59 36 	jmp	0x6cb2	; 0x6cb2 <_exit>

000006f2 <__bad_interrupt>:
     6f2:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__vector_default>

000006f6 <rx_task>:

  }
}

void rx_task ()
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62


  cnt = 0;

  // init tdma
  tdma_init (TDMA_HOST, DEFAULT_CHANNEL, HOST_MAC);
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	6d e0       	ldi	r22, 0x0D	; 13
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	0e 94 50 06 	call	0xca0	; 0xca0 <tdma_init>

  // init slipstream
  slip_init (stdin, stdout, 0, 0);
     70c:	60 91 46 0c 	lds	r22, 0x0C46
     710:	70 91 47 0c 	lds	r23, 0x0C47
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	80 91 44 0c 	lds	r24, 0x0C44
     71c:	90 91 45 0c 	lds	r25, 0x0C45
     720:	0e 94 46 0b 	call	0x168c	; 0x168c <slip_init>

  // Change these parameters at runtime...
  tdma_set_slot_len_ms (5);
     724:	85 e0       	ldi	r24, 0x05	; 5
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 bc 04 	call	0x978	; 0x978 <tdma_set_slot_len_ms>
  tdma_set_slots_per_cycle (2);
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <tdma_set_slots_per_cycle>

  // tdma_aes_setkey(aes_key);
  // tdma_aes_enable();


  while (!tdma_started ())
     734:	0e 94 0d 07 	call	0xe1a	; 0xe1a <tdma_started>
     738:	81 11       	cpse	r24, r1
     73a:	03 c0       	rjmp	.+6      	; 0x742 <rx_task+0x4c>
    nrk_wait_until_next_period ();
     73c:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_wait_until_next_period>
     740:	f9 cf       	rjmp	.-14     	; 0x734 <rx_task+0x3e>
    v = tdma_recv (&rx_tdma_fd, &rx_buf, &len, TDMA_BLOCKING);
    // printf("v = %d\r\n", v);
    if (v == NRK_OK) {
      nrk_led_set(RED_LED);
      /* debugging */
      printf ("src: %u rssi: %d ", rx_tdma_fd.src, rx_tdma_fd.rssi);
     742:	88 e7       	ldi	r24, 0x78	; 120
     744:	e8 2e       	mov	r14, r24
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	f8 2e       	mov	r15, r24
      printf ("slot: %u ", rx_tdma_fd.slot);
     74a:	9a e8       	ldi	r25, 0x8A	; 138
     74c:	c9 2e       	mov	r12, r25
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	d9 2e       	mov	r13, r25
      printf ("len: %u\r\npayload: ", len);
     752:	24 e9       	ldi	r18, 0x94	; 148
     754:	a2 2e       	mov	r10, r18
     756:	22 e0       	ldi	r18, 0x02	; 2
     758:	b2 2e       	mov	r11, r18
      for (i = 0; i < len; i++)
        printf ("%d", rx_buf[i]);
     75a:	37 ea       	ldi	r19, 0xA7	; 167
     75c:	83 2e       	mov	r8, r19
     75e:	32 e0       	ldi	r19, 0x02	; 2
     760:	93 2e       	mov	r9, r19
  while (!tdma_started ())
    nrk_wait_until_next_period ();


  while (1) {
    v = tdma_recv (&rx_tdma_fd, &rx_buf, &len, TDMA_BLOCKING);
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	ae 01       	movw	r20, r28
     766:	4f 5f       	subi	r20, 0xFF	; 255
     768:	5f 4f       	sbci	r21, 0xFF	; 255
     76a:	69 e7       	ldi	r22, 0x79	; 121
     76c:	78 e0       	ldi	r23, 0x08	; 8
     76e:	8a e1       	ldi	r24, 0x1A	; 26
     770:	9a e0       	ldi	r25, 0x0A	; 10
     772:	0e 94 7f 05 	call	0xafe	; 0xafe <tdma_recv>
    // printf("v = %d\r\n", v);
    if (v == NRK_OK) {
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	a1 f7       	brne	.-24     	; 0x762 <rx_task+0x6c>
      nrk_led_set(RED_LED);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <nrk_led_set>
      /* debugging */
      printf ("src: %u rssi: %d ", rx_tdma_fd.src, rx_tdma_fd.rssi);
     782:	80 91 28 0a 	lds	r24, 0x0A28
     786:	8f 93       	push	r24
     788:	80 91 27 0a 	lds	r24, 0x0A27
     78c:	8f 93       	push	r24
     78e:	80 91 22 0a 	lds	r24, 0x0A22
     792:	8f 93       	push	r24
     794:	80 91 21 0a 	lds	r24, 0x0A21
     798:	8f 93       	push	r24
     79a:	ff 92       	push	r15
     79c:	ef 92       	push	r14
     79e:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
      printf ("slot: %u ", rx_tdma_fd.slot);
     7a2:	80 91 1b 0a 	lds	r24, 0x0A1B
     7a6:	8f 93       	push	r24
     7a8:	80 91 1a 0a 	lds	r24, 0x0A1A
     7ac:	8f 93       	push	r24
     7ae:	df 92       	push	r13
     7b0:	cf 92       	push	r12
     7b2:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
      printf ("len: %u\r\npayload: ", len);
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	1f 92       	push	r1
     7ba:	8f 93       	push	r24
     7bc:	bf 92       	push	r11
     7be:	af 92       	push	r10
     7c0:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
      for (i = 0; i < len; i++)
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	10 e0       	ldi	r17, 0x00	; 0
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	18 17       	cp	r17, r24
     7d4:	88 f4       	brcc	.+34     	; 0x7f8 <rx_task+0x102>
        printf ("%d", rx_buf[i]);
     7d6:	e1 2f       	mov	r30, r17
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	e7 58       	subi	r30, 0x87	; 135
     7dc:	f7 4f       	sbci	r31, 0xF7	; 247
     7de:	80 81       	ld	r24, Z
     7e0:	1f 92       	push	r1
     7e2:	8f 93       	push	r24
     7e4:	9f 92       	push	r9
     7e6:	8f 92       	push	r8
     7e8:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
      nrk_led_set(RED_LED);
      /* debugging */
      printf ("src: %u rssi: %d ", rx_tdma_fd.src, rx_tdma_fd.rssi);
      printf ("slot: %u ", rx_tdma_fd.slot);
      printf ("len: %u\r\npayload: ", len);
      for (i = 0; i < len; i++)
     7ec:	1f 5f       	subi	r17, 0xFF	; 255
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	ec cf       	rjmp	.-40     	; 0x7d0 <rx_task+0xda>
        printf ("%d", rx_buf[i]);
      printf ("\r\n");
     7f8:	85 e6       	ldi	r24, 0x65	; 101
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	0e 94 35 34 	call	0x686a	; 0x686a <puts>
      
      //send the packet to the SLIPstream client
      slip_tx (rx_buf,len);
     800:	69 81       	ldd	r22, Y+1	; 0x01
     802:	89 e7       	ldi	r24, 0x79	; 121
     804:	98 e0       	ldi	r25, 0x08	; 8
     806:	0e 94 86 0b 	call	0x170c	; 0x170c <slip_tx>
      nrk_led_clr(RED_LED);
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_led_clr>
     812:	a7 cf       	rjmp	.-178    	; 0x762 <rx_task+0x6c>

00000814 <tx_task>:
{
  int8_t v;
  uint8_t len, cnt;


  printf ("Gateway Tx Task PID=%u\r\n", nrk_get_pid ());
     814:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <nrk_get_pid>
     818:	1f 92       	push	r1
     81a:	8f 93       	push	r24
     81c:	8a ea       	ldi	r24, 0xAA	; 170
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>


  while (!tdma_started ())
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0e 94 0d 07 	call	0xe1a	; 0xe1a <tdma_started>
     834:	81 11       	cpse	r24, r1
     836:	03 c0       	rjmp	.+6      	; 0x83e <tx_task+0x2a>
    nrk_wait_until_next_period ();
     838:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_wait_until_next_period>
     83c:	f9 cf       	rjmp	.-14     	; 0x830 <tx_task+0x1c>
     83e:	10 e0       	ldi	r17, 0x00	; 0

  cnt = 0;

  while (1) {

    sprintf (tx_buf, "Host data counter %d\n", cnt);
     840:	83 ec       	ldi	r24, 0xC3	; 195
     842:	e8 2e       	mov	r14, r24
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	f8 2e       	mov	r15, r24
     848:	ce e0       	ldi	r28, 0x0E	; 14
     84a:	d9 e0       	ldi	r29, 0x09	; 9
     84c:	1f 92       	push	r1
     84e:	1f 93       	push	r17
     850:	ff 92       	push	r15
     852:	ef 92       	push	r14
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	0e 94 65 34 	call	0x68ca	; 0x68ca <sprintf>
    cnt++;
     85c:	1f 5f       	subi	r17, 0xFF	; 255
    len = strlen (tx_buf) + 1;
     85e:	fe 01       	movw	r30, r28
     860:	01 90       	ld	r0, Z+
     862:	00 20       	and	r0, r0
     864:	e9 f7       	brne	.-6      	; 0x860 <tx_task+0x4c>
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	ee 50       	subi	r30, 0x0E	; 14
     86a:	f9 40       	sbci	r31, 0x09	; 9
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	4e 0f       	add	r20, r30

    // Only transmit data if you want to do so
    // Messages from the host are always broadcasts
    v = tdma_send (&tx_tdma_fd, &tx_buf, len, TDMA_BLOCKING);
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	6e e0       	ldi	r22, 0x0E	; 14
     874:	79 e0       	ldi	r23, 0x09	; 9
     876:	87 e6       	ldi	r24, 0x67	; 103
     878:	98 e0       	ldi	r25, 0x08	; 8
     87a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <tdma_send>
    if (v == NRK_OK) {
      // printf ("Host Packet Sent\r\n");
    }
    nrk_wait_until_next_period();
     87e:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_wait_until_next_period>

  }
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	de cf       	rjmp	.-68     	; 0x84c <tx_task+0x38>

00000890 <nrk_create_taskset>:
  }
}

void nrk_create_taskset ()
{
  nrk_task_set_entry_function (&rx_task_info, rx_task);
     890:	6b e7       	ldi	r22, 0x7B	; 123
     892:	73 e0       	ldi	r23, 0x03	; 3
     894:	84 e4       	ldi	r24, 0x44	; 68
     896:	98 e0       	ldi	r25, 0x08	; 8
     898:	0e 94 59 30 	call	0x60b2	; 0x60b2 <nrk_task_set_entry_function>
  nrk_task_set_stk (&rx_task_info, rx_task_stack, NRK_APP_STACKSIZE);
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	51 e0       	ldi	r21, 0x01	; 1
     8a0:	60 e4       	ldi	r22, 0x40	; 64
     8a2:	77 e0       	ldi	r23, 0x07	; 7
     8a4:	84 e4       	ldi	r24, 0x44	; 68
     8a6:	98 e0       	ldi	r25, 0x08	; 8
     8a8:	0e 94 5d 30 	call	0x60ba	; 0x60ba <nrk_task_set_stk>
  rx_task_info.prio = 1;
     8ac:	e4 e4       	ldi	r30, 0x44	; 68
     8ae:	f8 e0       	ldi	r31, 0x08	; 8
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	80 87       	std	Z+8, r24	; 0x08
  rx_task_info.FirstActivation = TRUE;
     8b4:	87 83       	std	Z+7, r24	; 0x07
  rx_task_info.Type = BASIC_TASK;
     8b6:	81 87       	std	Z+9, r24	; 0x09
  rx_task_info.SchType = PREEMPTIVE;
     8b8:	82 87       	std	Z+10, r24	; 0x0a
  rx_task_info.period.secs = 0;
     8ba:	13 86       	std	Z+11, r1	; 0x0b
     8bc:	14 86       	std	Z+12, r1	; 0x0c
     8be:	15 86       	std	Z+13, r1	; 0x0d
     8c0:	16 86       	std	Z+14, r1	; 0x0e
  rx_task_info.period.nano_secs = 25 * NANOS_PER_MS;
     8c2:	80 e4       	ldi	r24, 0x40	; 64
     8c4:	98 e7       	ldi	r25, 0x78	; 120
     8c6:	ad e7       	ldi	r26, 0x7D	; 125
     8c8:	b1 e0       	ldi	r27, 0x01	; 1
     8ca:	87 87       	std	Z+15, r24	; 0x0f
     8cc:	90 8b       	std	Z+16, r25	; 0x10
     8ce:	a1 8b       	std	Z+17, r26	; 0x11
     8d0:	b2 8b       	std	Z+18, r27	; 0x12
  rx_task_info.cpu_reserve.secs = 0;
     8d2:	13 8a       	std	Z+19, r1	; 0x13
     8d4:	14 8a       	std	Z+20, r1	; 0x14
     8d6:	15 8a       	std	Z+21, r1	; 0x15
     8d8:	16 8a       	std	Z+22, r1	; 0x16
  rx_task_info.cpu_reserve.nano_secs = 0 * NANOS_PER_MS;
     8da:	17 8a       	std	Z+23, r1	; 0x17
     8dc:	10 8e       	std	Z+24, r1	; 0x18
     8de:	11 8e       	std	Z+25, r1	; 0x19
     8e0:	12 8e       	std	Z+26, r1	; 0x1a
  rx_task_info.offset.secs = 0;
     8e2:	13 8e       	std	Z+27, r1	; 0x1b
     8e4:	14 8e       	std	Z+28, r1	; 0x1c
     8e6:	15 8e       	std	Z+29, r1	; 0x1d
     8e8:	16 8e       	std	Z+30, r1	; 0x1e
  rx_task_info.offset.nano_secs = 0;
     8ea:	17 8e       	std	Z+31, r1	; 0x1f
     8ec:	10 a2       	std	Z+32, r1	; 0x20
     8ee:	11 a2       	std	Z+33, r1	; 0x21
     8f0:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&rx_task_info);
     8f2:	cf 01       	movw	r24, r30
     8f4:	0e 94 1a 23 	call	0x4634	; 0x4634 <nrk_activate_task>
  //tx_task_info.cpu_reserve.nano_secs = 20 * NANOS_PER_MS;
  //tx_task_info.offset.secs = 0;
  //tx_task_info.offset.nano_secs = 0;
  //nrk_activate_task (&tx_task_info);

  tdma_task_config ();
     8f8:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <tdma_task_config>

000008fc <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     8fc:	08 95       	ret

000008fe <tdma_aes_setkey>:

void tdma_aes_setkey(uint8_t *key)
{
uint8_t i;
	aes_setkey(key);
     8fe:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <aes_setkey>

00000902 <tdma_aes_enable>:
}


void tdma_aes_enable()
{
  _tdma_aes_enabled=1;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	80 93 08 04 	sts	0x0408, r24
     908:	08 95       	ret

0000090a <tdma_aes_disable>:
}

void tdma_aes_disable()
{
  _tdma_aes_enabled=1;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 08 04 	sts	0x0408, r24
     910:	08 95       	ret

00000912 <tdma_sync_ok>:
}

uint8_t tdma_sync_ok()
{
return sync_status;
}
     912:	80 91 d5 03 	lds	r24, 0x03D5
     916:	08 95       	ret

00000918 <tdma_set_error_callback>:

int8_t tdma_set_error_callback(void (*fp)(void))
{
	if(fp==NULL ) return NRK_ERROR;
     918:	00 97       	sbiw	r24, 0x00	; 0
     91a:	31 f0       	breq	.+12     	; 0x928 <tdma_set_error_callback+0x10>
	tdma_error_callback=fp;
     91c:	90 93 d4 03 	sts	0x03D4, r25
     920:	80 93 d3 03 	sts	0x03D3, r24
return NRK_OK;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	08 95       	ret
return sync_status;
}

int8_t tdma_set_error_callback(void (*fp)(void))
{
	if(fp==NULL ) return NRK_ERROR;
     928:	8f ef       	ldi	r24, 0xFF	; 255
	tdma_error_callback=fp;
return NRK_OK;
}
     92a:	08 95       	ret

0000092c <tdma_tx_slot_add>:


int8_t tdma_tx_slot_add (uint16_t slot)
{
  tdma_tx_sched[0] = slot;
     92c:	90 93 0b 04 	sts	0x040B, r25
     930:	80 93 0a 04 	sts	0x040A, r24
  tdma_tx_slots = 1;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	80 93 09 04 	sts	0x0409, r24
  return NRK_OK;
}
     93a:	08 95       	ret

0000093c <tdma_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	08 95       	ret

00000940 <tdma_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	08 95       	ret

00000946 <tdma_set_rf_power>:

int8_t tdma_set_rf_power (uint8_t power)
{
  if (power > 31)
     946:	80 32       	cpi	r24, 0x20	; 32
     948:	20 f4       	brcc	.+8      	; 0x952 <tdma_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     94a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <rf_tx_power>
  return NRK_OK;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	08 95       	ret
}

int8_t tdma_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     952:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     954:	08 95       	ret

00000956 <tdma_set_channel>:

int8_t tdma_set_channel (uint8_t chan)
{
  if (chan > 26)
     956:	8b 31       	cpi	r24, 0x1B	; 27
     958:	68 f4       	brcc	.+26     	; 0x974 <tdma_set_channel+0x1e>
     95a:	68 2f       	mov	r22, r24
    return NRK_ERROR;
  tdma_chan = chan;
     95c:	80 93 fb 03 	sts	0x03FB, r24
//rf_init (&tdma_rfRxInfo, chan, 0xFFFF, 0x00000);
  rf_init (&tdma_rfRxInfo, chan, 0x2420, 0x1214);
     960:	24 e1       	ldi	r18, 0x14	; 20
     962:	32 e1       	ldi	r19, 0x12	; 18
     964:	40 e2       	ldi	r20, 0x20	; 32
     966:	54 e2       	ldi	r21, 0x24	; 36
     968:	83 e2       	ldi	r24, 0x23	; 35
     96a:	96 e0       	ldi	r25, 0x06	; 6
     96c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <rf_init>
  return NRK_OK;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	08 95       	ret
}

int8_t tdma_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     974:	8f ef       	ldi	r24, 0xFF	; 255
  tdma_chan = chan;
//rf_init (&tdma_rfRxInfo, chan, 0xFFFF, 0x00000);
  rf_init (&tdma_rfRxInfo, chan, 0x2420, 0x1214);
  return NRK_OK;
}
     976:	08 95       	ret

00000978 <tdma_set_slot_len_ms>:

int8_t tdma_set_slot_len_ms (uint16_t len)
{
  tdma_slot_len_ms = len;
     978:	90 93 03 04 	sts	0x0403, r25
     97c:	80 93 02 04 	sts	0x0402, r24
  _tdma_slot_time.nano_secs = len * NANOS_PER_MS;
     980:	e1 ee       	ldi	r30, 0xE1	; 225
     982:	f3 e0       	ldi	r31, 0x03	; 3
     984:	dc 01       	movw	r26, r24
     986:	20 e4       	ldi	r18, 0x40	; 64
     988:	32 e4       	ldi	r19, 0x42	; 66
     98a:	4f e0       	ldi	r20, 0x0F	; 15
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__muluhisi3>
     992:	64 83       	std	Z+4, r22	; 0x04
     994:	75 83       	std	Z+5, r23	; 0x05
     996:	86 83       	std	Z+6, r24	; 0x06
     998:	97 83       	std	Z+7, r25	; 0x07
  _tdma_slot_time.secs = 0;
     99a:	10 82       	st	Z, r1
     99c:	11 82       	std	Z+1, r1	; 0x01
     99e:	12 82       	std	Z+2, r1	; 0x02
     9a0:	13 82       	std	Z+3, r1	; 0x03
  return NRK_OK;
}
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	08 95       	ret

000009a6 <tdma_set_slots_per_cycle>:


int8_t tdma_set_slots_per_cycle (uint16_t slots_per_cycle)
{

  tdma_slots_per_cycle = slots_per_cycle;
     9a6:	90 93 01 04 	sts	0x0401, r25
     9aa:	80 93 00 04 	sts	0x0400, r24
}
     9ae:	08 95       	ret

000009b0 <tdma_send>:

int8_t tdma_send (tdma_info * fd, uint8_t * buf, uint8_t len, uint8_t flags)
{
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	00 d0       	rcall	.+0      	; 0x9be <tdma_send+0xe>
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	6c 01       	movw	r12, r24
     9c4:	7b 01       	movw	r14, r22
  uint32_t mask;
  uint8_t i;

  if (tx_data_ready == 1)
     9c6:	80 91 04 04 	lds	r24, 0x0404
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <tdma_send+0x20>
     9ce:	8d c0       	rjmp	.+282    	; 0xaea <tdma_send+0x13a>
    return NRK_ERROR;
  if (len == 0)
     9d0:	44 23       	and	r20, r20
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <tdma_send+0x26>
     9d4:	8a c0       	rjmp	.+276    	; 0xaea <tdma_send+0x13a>
    return NRK_ERROR;
  if (buf == NULL)
     9d6:	61 15       	cp	r22, r1
     9d8:	71 05       	cpc	r23, r1
     9da:	09 f4       	brne	.+2      	; 0x9de <tdma_send+0x2e>
     9dc:	86 c0       	rjmp	.+268    	; 0xaea <tdma_send+0x13a>
    return NRK_ERROR;
  if (fd == NULL)
     9de:	c1 14       	cp	r12, r1
     9e0:	d1 04       	cpc	r13, r1
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <tdma_send+0x36>
     9e4:	82 c0       	rjmp	.+260    	; 0xaea <tdma_send+0x13a>
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  if (flags == TDMA_BLOCKING)
     9e6:	21 11       	cpse	r18, r1
     9e8:	08 c0       	rjmp	.+16     	; 0x9fa <tdma_send+0x4a>
    nrk_signal_register (tdma_tx_pkt_done_signal);
     9ea:	80 91 80 09 	lds	r24, 0x0980
     9ee:	2a 83       	std	Y+2, r18	; 0x02
     9f0:	49 83       	std	Y+1, r20	; 0x01
     9f2:	0e 94 05 20 	call	0x400a	; 0x400a <nrk_signal_register>
     9f6:	49 81       	ldd	r20, Y+1	; 0x01
     9f8:	2a 81       	ldd	r18, Y+2	; 0x02

  tx_data_ready = 1;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 93 04 04 	sts	0x0404, r24

  tdma_rfTxInfo.pPayload = tdma_tx_buf;
     a00:	82 e8       	ldi	r24, 0x82	; 130
     a02:	94 e0       	ldi	r25, 0x04	; 4
     a04:	90 93 35 07 	sts	0x0735, r25
     a08:	80 93 34 07 	sts	0x0734, r24
// Setup the header data
  tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = (fd->slot >> 8) & 0xff;
     a0c:	f6 01       	movw	r30, r12
     a0e:	81 81       	ldd	r24, Z+1	; 0x01
     a10:	80 93 83 04 	sts	0x0483, r24
  tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = (fd->slot & 0xff);
     a14:	80 81       	ld	r24, Z
     a16:	80 93 82 04 	sts	0x0482, r24
  tdma_rfTxInfo.pPayload[TDMA_DST_HIGH] = (fd->dst >> 8) & 0xff;
     a1a:	85 81       	ldd	r24, Z+5	; 0x05
     a1c:	96 81       	ldd	r25, Z+6	; 0x06
     a1e:	90 93 85 04 	sts	0x0485, r25
  tdma_rfTxInfo.pPayload[TDMA_DST_LOW] = (fd->dst & 0xff);
     a22:	80 93 84 04 	sts	0x0484, r24
//  tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = (fd->src >> 8) & 0xff;
  tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = (tdma_my_mac & 0xff);
     a26:	80 91 07 04 	lds	r24, 0x0407
     a2a:	80 93 87 04 	sts	0x0487, r24
  tdma_rfTxInfo.pPayload[TDMA_SRC_LOW] = (tdma_my_mac >> 8) & 0xff;
     a2e:	10 92 86 04 	sts	0x0486, r1
  fd->seq_num++;
     a32:	81 85       	ldd	r24, Z+9	; 0x09
     a34:	92 85       	ldd	r25, Z+10	; 0x0a
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	92 87       	std	Z+10, r25	; 0x0a
     a3a:	81 87       	std	Z+9, r24	; 0x09
  tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_HIGH] = ((fd->seq_num>>8) & 0xff);
     a3c:	90 93 89 04 	sts	0x0489, r25
  tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_LOW] = (fd->seq_num & 0xff);
     a40:	80 93 88 04 	sts	0x0488, r24
  tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_HIGH] = (fd->cycle_size >> 8) & 0xff;
     a44:	83 81       	ldd	r24, Z+3	; 0x03
     a46:	80 93 8b 04 	sts	0x048B, r24
  tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_LOW] = (fd->cycle_size & 0xff);
     a4a:	82 81       	ldd	r24, Z+2	; 0x02
     a4c:	80 93 8a 04 	sts	0x048A, r24
  tdma_rfTxInfo.pPayload[TDMA_TTL] = tdma_ttl<<4 | tdma_ttl;
     a50:	30 91 05 04 	lds	r19, 0x0405
     a54:	f0 e1       	ldi	r31, 0x10	; 16
     a56:	3f 9f       	mul	r19, r31
     a58:	c0 01       	movw	r24, r0
     a5a:	11 24       	eor	r1, r1
     a5c:	83 2b       	or	r24, r19
     a5e:	80 93 8c 04 	sts	0x048C, r24
     a62:	5e 2d       	mov	r21, r14

// Copy the user payload to the back of the header
  for (i = 0; i < len; i++)
     a64:	f7 01       	movw	r30, r14
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	3e 2f       	mov	r19, r30
     a6c:	35 1b       	sub	r19, r21
     a6e:	34 17       	cp	r19, r20
     a70:	50 f4       	brcc	.+20     	; 0xa86 <tdma_send+0xd6>
    tdma_rfTxInfo.pPayload[i + TDMA_PCF_HEADER] = buf[i];
     a72:	31 91       	ld	r19, Z+
     a74:	a0 91 34 07 	lds	r26, 0x0734
     a78:	b0 91 35 07 	lds	r27, 0x0735
     a7c:	a8 0f       	add	r26, r24
     a7e:	b9 1f       	adc	r27, r25
     a80:	3c 93       	st	X, r19
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	f2 cf       	rjmp	.-28     	; 0xa6a <tdma_send+0xba>
// Set packet length with header
  tdma_rfTxInfo.length = len + TDMA_PCF_HEADER;
     a86:	44 5f       	subi	r20, 0xF4	; 244
     a88:	40 93 33 07 	sts	0x0733, r20
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif

  if (flags == TDMA_BLOCKING) {
     a8c:	21 11       	cpse	r18, r1
     a8e:	2b c0       	rjmp	.+86     	; 0xae6 <tdma_send+0x136>
    mask = nrk_event_wait (SIG (tdma_tx_pkt_done_signal));
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	bc 01       	movw	r22, r24
     a9a:	cd 01       	movw	r24, r26
     a9c:	00 90 80 09 	lds	r0, 0x0980
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <tdma_send+0xfa>
     aa2:	66 0f       	add	r22, r22
     aa4:	77 1f       	adc	r23, r23
     aa6:	88 1f       	adc	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <tdma_send+0xf2>
     aae:	0e 94 a8 20 	call	0x4150	; 0x4150 <nrk_event_wait>
     ab2:	6b 01       	movw	r12, r22
     ab4:	7c 01       	movw	r14, r24
    if (mask == 0)
     ab6:	61 15       	cp	r22, r1
     ab8:	71 05       	cpc	r23, r1
     aba:	81 05       	cpc	r24, r1
     abc:	91 05       	cpc	r25, r1
     abe:	21 f4       	brne	.+8      	; 0xac8 <tdma_send+0x118>
      nrk_kprintf (PSTR ("TDMA TX: Error calling event wait\r\n"));
     ac0:	8f e6       	ldi	r24, 0x6F	; 111
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    if ((mask & SIG (tdma_tx_pkt_done_signal)) == 0)
     ac8:	00 90 80 09 	lds	r0, 0x0980
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <tdma_send+0x126>
     ace:	f6 94       	lsr	r15
     ad0:	e7 94       	ror	r14
     ad2:	d7 94       	ror	r13
     ad4:	c7 94       	ror	r12
     ad6:	0a 94       	dec	r0
     ad8:	d2 f7       	brpl	.-12     	; 0xace <tdma_send+0x11e>
     ada:	c0 fc       	sbrc	r12, 0
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <tdma_send+0x136>
      nrk_kprintf (PSTR ("TDMA TX: Woke up on wrong signal\r\n"));
     ade:	8c e4       	ldi	r24, 0x4C	; 76
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    return NRK_OK;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <tdma_send+0x13c>
{
  uint32_t mask;
  uint8_t i;

  if (tx_data_ready == 1)
    return NRK_ERROR;
     aea:	8f ef       	ldi	r24, 0xFF	; 255
      nrk_kprintf (PSTR ("TDMA TX: Woke up on wrong signal\r\n"));
    return NRK_OK;
  }

  return NRK_OK;
}
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	cf 90       	pop	r12
     afc:	08 95       	ret

00000afe <tdma_recv>:

int8_t tdma_recv (tdma_info * fd, uint8_t * buf, uint8_t * len, uint8_t flags)
{
     afe:	8f 92       	push	r8
     b00:	9f 92       	push	r9
     b02:	af 92       	push	r10
     b04:	bf 92       	push	r11
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	1f 92       	push	r1
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	4c 01       	movw	r8, r24
     b1e:	8b 01       	movw	r16, r22
     b20:	5a 01       	movw	r10, r20
     b22:	80 91 fd 03 	lds	r24, 0x03FD
  nrk_sig_mask_t event;
  uint8_t i;
  if (flags == TDMA_BLOCKING) {
     b26:	21 11       	cpse	r18, r1
     b28:	1c c0       	rjmp	.+56     	; 0xb62 <tdma_recv+0x64>
    if (tdma_rx_buf_empty == 1) {
     b2a:	81 30       	cpi	r24, 0x01	; 1
     b2c:	f1 f4       	brne	.+60     	; 0xb6a <tdma_recv+0x6c>
      nrk_signal_register (tdma_rx_pkt_signal);
     b2e:	80 91 7f 09 	lds	r24, 0x097F
     b32:	29 83       	std	Y+1, r18	; 0x01
     b34:	0e 94 05 20 	call	0x400a	; 0x400a <nrk_signal_register>
      event = nrk_event_wait (SIG (tdma_rx_pkt_signal));
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	bc 01       	movw	r22, r24
     b42:	cd 01       	movw	r24, r26
     b44:	00 90 7f 09 	lds	r0, 0x097F
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <tdma_recv+0x54>
     b4a:	66 0f       	add	r22, r22
     b4c:	77 1f       	adc	r23, r23
     b4e:	88 1f       	adc	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	0a 94       	dec	r0
     b54:	d2 f7       	brpl	.-12     	; 0xb4a <tdma_recv+0x4c>
     b56:	0e 94 a8 20 	call	0x4150	; 0x4150 <nrk_event_wait>
     b5a:	6b 01       	movw	r12, r22
     b5c:	7c 01       	movw	r14, r24
     b5e:	29 81       	ldd	r18, Y+1	; 0x01
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <tdma_recv+0x6c>
    }
  }
  else if (tdma_rx_buf_empty == 1)
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	11 f4       	brne	.+4      	; 0xb6a <tdma_recv+0x6c>
    return NRK_ERROR;
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	7c c0       	rjmp	.+248    	; 0xc62 <tdma_recv+0x164>

  if (tdma_rfRxInfo.length < TDMA_PCF_HEADER)
     b6a:	80 91 26 06 	lds	r24, 0x0626
     b6e:	8c 30       	cpi	r24, 0x0C	; 12
     b70:	d4 f3       	brlt	.-12     	; 0xb66 <tdma_recv+0x68>
    return NRK_ERROR;
  // Set the length
  *len = (uint8_t) (tdma_rfRxInfo.length - TDMA_PCF_HEADER);
     b72:	8c 50       	subi	r24, 0x0C	; 12
     b74:	d5 01       	movw	r26, r10
     b76:	8c 93       	st	X, r24
  // Copy the payload data
  for (i = 0; i < *len; i++)
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	f5 01       	movw	r30, r10
     b7c:	90 81       	ld	r25, Z
     b7e:	89 17       	cp	r24, r25
     b80:	78 f4       	brcc	.+30     	; 0xba0 <tdma_recv+0xa2>
    buf[i] = tdma_rfRxInfo.pPayload[i + TDMA_PCF_HEADER];
     b82:	48 2f       	mov	r20, r24
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	e0 91 28 06 	lds	r30, 0x0628
     b8a:	f0 91 29 06 	lds	r31, 0x0629
     b8e:	e4 0f       	add	r30, r20
     b90:	f5 1f       	adc	r31, r21
     b92:	94 85       	ldd	r25, Z+12	; 0x0c
     b94:	f8 01       	movw	r30, r16
     b96:	e4 0f       	add	r30, r20
     b98:	f5 1f       	adc	r31, r21
     b9a:	90 83       	st	Z, r25
  if (tdma_rfRxInfo.length < TDMA_PCF_HEADER)
    return NRK_ERROR;
  // Set the length
  *len = (uint8_t) (tdma_rfRxInfo.length - TDMA_PCF_HEADER);
  // Copy the payload data
  for (i = 0; i < *len; i++)
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	ed cf       	rjmp	.-38     	; 0xb7a <tdma_recv+0x7c>
    buf[i] = tdma_rfRxInfo.pPayload[i + TDMA_PCF_HEADER];

  // Fill the information struct
  fd->rssi = tdma_rfRxInfo.rssi;
     ba0:	80 91 2b 06 	lds	r24, 0x062B
     ba4:	99 27       	eor	r25, r25
     ba6:	87 fd       	sbrc	r24, 7
     ba8:	90 95       	com	r25
     baa:	d4 01       	movw	r26, r8
     bac:	1e 96       	adiw	r26, 0x0e	; 14
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	1d 97       	sbiw	r26, 0x0d	; 13
  fd->actualRssi = tdma_rfRxInfo.actualRssi;
     bb4:	80 91 2c 06 	lds	r24, 0x062C
     bb8:	1f 96       	adiw	r26, 0x0f	; 15
     bba:	8c 93       	st	X, r24
     bbc:	1f 97       	sbiw	r26, 0x0f	; 15
  fd->energyDetectionLevel = tdma_rfRxInfo.energyDetectionLevel;
     bbe:	80 91 2d 06 	lds	r24, 0x062D
     bc2:	50 96       	adiw	r26, 0x10	; 16
     bc4:	8c 93       	st	X, r24
     bc6:	50 97       	sbiw	r26, 0x10	; 16
  fd->linkQualityIndication = tdma_rfRxInfo.linkQualityIndication;
     bc8:	80 91 2e 06 	lds	r24, 0x062E
     bcc:	51 96       	adiw	r26, 0x11	; 17
     bce:	8c 93       	st	X, r24
     bd0:	51 97       	sbiw	r26, 0x11	; 17
  fd->src =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
     bd2:	e0 91 28 06 	lds	r30, 0x0628
     bd6:	f0 91 29 06 	lds	r31, 0x0629
     bda:	85 81       	ldd	r24, Z+5	; 0x05
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	98 2f       	mov	r25, r24
     be0:	88 27       	eor	r24, r24
     be2:	34 81       	ldd	r19, Z+4	; 0x04
     be4:	83 2b       	or	r24, r19
  // Fill the information struct
  fd->rssi = tdma_rfRxInfo.rssi;
  fd->actualRssi = tdma_rfRxInfo.actualRssi;
  fd->energyDetectionLevel = tdma_rfRxInfo.energyDetectionLevel;
  fd->linkQualityIndication = tdma_rfRxInfo.linkQualityIndication;
  fd->src =
     be6:	18 96       	adiw	r26, 0x08	; 8
     be8:	9c 93       	st	X, r25
     bea:	8e 93       	st	-X, r24
     bec:	17 97       	sbiw	r26, 0x07	; 7
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SRC_LOW];
  fd->dst =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
     bee:	83 81       	ldd	r24, Z+3	; 0x03
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	98 2f       	mov	r25, r24
     bf4:	88 27       	eor	r24, r24
     bf6:	32 81       	ldd	r19, Z+2	; 0x02
     bf8:	83 2b       	or	r24, r19
  fd->energyDetectionLevel = tdma_rfRxInfo.energyDetectionLevel;
  fd->linkQualityIndication = tdma_rfRxInfo.linkQualityIndication;
  fd->src =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SRC_LOW];
  fd->dst =
     bfa:	16 96       	adiw	r26, 0x06	; 6
     bfc:	9c 93       	st	X, r25
     bfe:	8e 93       	st	-X, r24
     c00:	15 97       	sbiw	r26, 0x05	; 5
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_DST_LOW];
  fd->slot =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
     c02:	81 81       	ldd	r24, Z+1	; 0x01
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	98 2f       	mov	r25, r24
     c08:	88 27       	eor	r24, r24
     c0a:	30 81       	ld	r19, Z
     c0c:	83 2b       	or	r24, r19
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SRC_LOW];
  fd->dst =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_DST_LOW];
  fd->slot =
     c0e:	11 96       	adiw	r26, 0x01	; 1
     c10:	9c 93       	st	X, r25
     c12:	8e 93       	st	-X, r24
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SLOT_LOW];
  fd->seq_num =
    ((uint16_t) tdma_rfRxInfo.
     c14:	87 81       	ldd	r24, Z+7	; 0x07
     c16:	90 e0       	ldi	r25, 0x00	; 0
     pPayload[TDMA_SEQ_NUM_HIGH] << 8) | tdma_rfRxInfo.
     c18:	98 2f       	mov	r25, r24
     c1a:	88 27       	eor	r24, r24
     c1c:	36 81       	ldd	r19, Z+6	; 0x06
     c1e:	83 2b       	or	r24, r19
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_DST_LOW];
  fd->slot =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SLOT_LOW];
  fd->seq_num =
     c20:	1a 96       	adiw	r26, 0x0a	; 10
     c22:	9c 93       	st	X, r25
     c24:	8e 93       	st	-X, r24
     c26:	19 97       	sbiw	r26, 0x09	; 9
    ((uint16_t) tdma_rfRxInfo.
     pPayload[TDMA_SEQ_NUM_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SEQ_NUM_LOW];
  fd->cycle_size =
    ((uint16_t) tdma_rfRxInfo.
     c28:	81 85       	ldd	r24, Z+9	; 0x09
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
     c2c:	98 2f       	mov	r25, r24
     c2e:	88 27       	eor	r24, r24
     c30:	30 85       	ldd	r19, Z+8	; 0x08
     c32:	83 2b       	or	r24, r19
    pPayload[TDMA_SLOT_LOW];
  fd->seq_num =
    ((uint16_t) tdma_rfRxInfo.
     pPayload[TDMA_SEQ_NUM_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SEQ_NUM_LOW];
  fd->cycle_size =
     c34:	13 96       	adiw	r26, 0x03	; 3
     c36:	9c 93       	st	X, r25
     c38:	8e 93       	st	-X, r24
     c3a:	12 97       	sbiw	r26, 0x02	; 2
    ((uint16_t) tdma_rfRxInfo.
     pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_CYCLE_SIZE_LOW];

  fd->ttl= (uint8_t) tdma_rfRxInfo.pPayload[TDMA_TTL]; 
     c3c:	82 85       	ldd	r24, Z+10	; 0x0a
     c3e:	1c 96       	adiw	r26, 0x0c	; 12
     c40:	8c 93       	st	X, r24


  // Check if it was a time out instead of packet RX signal
  if (flags == TDMA_BLOCKING)
     c42:	21 11       	cpse	r18, r1
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <tdma_recv+0x15e>
    if ((event & SIG (tdma_rx_pkt_signal)) == 0)
     c46:	00 90 7f 09 	lds	r0, 0x097F
     c4a:	04 c0       	rjmp	.+8      	; 0xc54 <tdma_recv+0x156>
     c4c:	f6 94       	lsr	r15
     c4e:	e7 94       	ror	r14
     c50:	d7 94       	ror	r13
     c52:	c7 94       	ror	r12
     c54:	0a 94       	dec	r0
     c56:	d2 f7       	brpl	.-12     	; 0xc4c <tdma_recv+0x14e>
     c58:	c0 fe       	sbrs	r12, 0
     c5a:	85 cf       	rjmp	.-246    	; 0xb66 <tdma_recv+0x68>
      return NRK_ERROR;

  // Set the buffer as empty
  tdma_rx_buf_empty = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 fd 03 	sts	0x03FD, r24
  return NRK_OK;

}
     c62:	0f 90       	pop	r0
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	bf 90       	pop	r11
     c76:	af 90       	pop	r10
     c78:	9f 90       	pop	r9
     c7a:	8f 90       	pop	r8
     c7c:	08 95       	ret

00000c7e <tdma_rx_pkt_set_buffer>:


int8_t tdma_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	51 f0       	breq	.+20     	; 0xc96 <tdma_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  tdma_rfRxInfo.pPayload = buf;
     c82:	90 93 29 06 	sts	0x0629, r25
     c86:	80 93 28 06 	sts	0x0628, r24
  tdma_rfRxInfo.max_length = size;
     c8a:	60 93 27 06 	sts	0x0627, r22
  tdma_rx_buf_empty = 1;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 fd 03 	sts	0x03FD, r24
  return NRK_OK;
     c94:	08 95       	ret


int8_t tdma_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     c96:	8f ef       	ldi	r24, 0xFF	; 255
  tdma_rfRxInfo.pPayload = buf;
  tdma_rfRxInfo.max_length = size;
  tdma_rx_buf_empty = 1;
  return NRK_OK;
}
     c98:	08 95       	ret

00000c9a <tdma_ttl_set>:

void tdma_ttl_set(uint8_t ttl)
{
tdma_ttl=ttl;
     c9a:	80 93 05 04 	sts	0x0405, r24
     c9e:	08 95       	ret

00000ca0 <tdma_init>:
}

int8_t tdma_init (uint8_t mode, uint8_t chan, uint16_t my_mac)
{
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	16 2f       	mov	r17, r22
     caa:	d4 2f       	mov	r29, r20
     cac:	05 2f       	mov	r16, r21
  tx_reserve = -1;
     cae:	9f ef       	ldi	r25, 0xFF	; 255
     cb0:	90 93 d8 03 	sts	0x03D8, r25
  tdma_rx_failure_cnt = 0;
     cb4:	10 92 d7 03 	sts	0x03D7, r1
     cb8:	10 92 d6 03 	sts	0x03D6, r1
  tdma_mode = mode;
     cbc:	80 93 06 04 	sts	0x0406, r24
  tdma_tx_slots = 0;
     cc0:	10 92 09 04 	sts	0x0409, r1
  tdma_ttl=TDMA_DEFAULT_TTL;
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	80 93 05 04 	sts	0x0405, r24
  sync_status=0;
     cca:	10 92 d5 03 	sts	0x03D5, r1
    nrk_gpio_direction(NRK_MOSI,NRK_PIN_OUTPUT);
    nrk_gpio_direction(NRK_MISO,NRK_PIN_OUTPUT);
  #endif


  tdma_slots_per_cycle = TDMA_DEFAULT_SLOTS_PER_CYCLE;
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	94 e0       	ldi	r25, 0x04	; 4
     cd2:	90 93 01 04 	sts	0x0401, r25
     cd6:	80 93 00 04 	sts	0x0400, r24

  _tdma_slot_time.nano_secs = TDMA_DEFAULT_SLOT_MS * NANOS_PER_MS;
     cda:	80 e8       	ldi	r24, 0x80	; 128
     cdc:	96 e9       	ldi	r25, 0x96	; 150
     cde:	a8 e9       	ldi	r26, 0x98	; 152
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	80 93 e5 03 	sts	0x03E5, r24
     ce6:	90 93 e6 03 	sts	0x03E6, r25
     cea:	a0 93 e7 03 	sts	0x03E7, r26
     cee:	b0 93 e8 03 	sts	0x03E8, r27
  _tdma_slot_time.secs = 0;
     cf2:	10 92 e1 03 	sts	0x03E1, r1
     cf6:	10 92 e2 03 	sts	0x03E2, r1
     cfa:	10 92 e3 03 	sts	0x03E3, r1
     cfe:	10 92 e4 03 	sts	0x03E4, r1

  tdma_rx_pkt_signal = nrk_signal_create ();
     d02:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <nrk_signal_create>
     d06:	c8 2f       	mov	r28, r24
     d08:	80 93 7f 09 	sts	0x097F, r24
  if (tdma_rx_pkt_signal == NRK_ERROR) {
     d0c:	8f 3f       	cpi	r24, 0xFF	; 255
     d0e:	19 f4       	brne	.+6      	; 0xd16 <tdma_init+0x76>
    nrk_kprintf (PSTR ("TDMA ERROR: creating rx signal failed\r\n"));
     d10:	84 e2       	ldi	r24, 0x24	; 36
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	09 c0       	rjmp	.+18     	; 0xd28 <tdma_init+0x88>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  tdma_tx_pkt_done_signal = nrk_signal_create ();
     d16:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <nrk_signal_create>
     d1a:	c8 2f       	mov	r28, r24
     d1c:	80 93 80 09 	sts	0x0980, r24
  if (tdma_tx_pkt_done_signal == NRK_ERROR) {
     d20:	8f 3f       	cpi	r24, 0xFF	; 255
     d22:	69 f4       	brne	.+26     	; 0xd3e <tdma_init+0x9e>
    nrk_kprintf (PSTR ("TDMA ERROR: creating tx signal failed\r\n"));
     d24:	8c ef       	ldi	r24, 0xFC	; 252
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     d2c:	e0 91 e1 0b 	lds	r30, 0x0BE1
     d30:	f0 91 e2 0b 	lds	r31, 0x0BE2
     d34:	60 85       	ldd	r22, Z+8	; 0x08
     d36:	8e e0       	ldi	r24, 0x0E	; 14
     d38:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
    return NRK_ERROR;
     d3c:	2d c0       	rjmp	.+90     	; 0xd98 <tdma_init+0xf8>
  }
  tdma_enable_signal = nrk_signal_create ();
     d3e:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <nrk_signal_create>
     d42:	c8 2f       	mov	r28, r24
     d44:	80 93 19 0a 	sts	0x0A19, r24
  if (tdma_enable_signal == NRK_ERROR) {
     d48:	8f 3f       	cpi	r24, 0xFF	; 255
     d4a:	19 f4       	brne	.+6      	; 0xd52 <tdma_init+0xb2>
    nrk_kprintf (PSTR ("TDMA ERROR: creating enable signal failed\r\n"));
     d4c:	80 ed       	ldi	r24, 0xD0	; 208
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	eb cf       	rjmp	.-42     	; 0xd28 <tdma_init+0x88>

int8_t tdma_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
  tdma_rfRxInfo.pPayload = buf;
     d52:	82 e1       	ldi	r24, 0x12	; 18
     d54:	94 e0       	ldi	r25, 0x04	; 4
     d56:	90 93 29 06 	sts	0x0629, r25
     d5a:	80 93 28 06 	sts	0x0628, r24
  tdma_rfRxInfo.max_length = size;
     d5e:	80 e7       	ldi	r24, 0x70	; 112
     d60:	80 93 27 06 	sts	0x0627, r24
  }


  // Set the one main rx buffer
  tdma_rx_pkt_set_buffer (tdma_rx_buf, TDMA_MAX_PKT_SIZE);
  tdma_rx_buf_empty = 1;
     d64:	c1 e0       	ldi	r28, 0x01	; 1
     d66:	c0 93 fd 03 	sts	0x03FD, r28
  tx_data_ready = 0;
     d6a:	10 92 04 04 	sts	0x0404, r1


  // Setup the radio 
  rf_init (&tdma_rfRxInfo, chan, 0xffff, my_mac);
     d6e:	2d 2f       	mov	r18, r29
     d70:	30 2f       	mov	r19, r16
     d72:	4f ef       	ldi	r20, 0xFF	; 255
     d74:	5f ef       	ldi	r21, 0xFF	; 255
     d76:	61 2f       	mov	r22, r17
     d78:	83 e2       	ldi	r24, 0x23	; 35
     d7a:	96 e0       	ldi	r25, 0x06	; 6
     d7c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <rf_init>
  tdma_chan = chan;
     d80:	10 93 fb 03 	sts	0x03FB, r17
  tdma_my_mac = my_mac;
     d84:	d0 93 07 04 	sts	0x0407, r29

  //FASTSPI_SETREG (CC2420_RSSI, 0xE580); // CCA THR=-25
  //FASTSPI_SETREG (CC2420_TXCTRL, 0x80FF);       // TX TURNAROUND = 128 us
  //FASTSPI_SETREG (CC2420_RXCTRL1, 0x0A56);
  // default cca thresh of -45
  rf_set_cca_thresh (-45);
     d88:	83 ed       	ldi	r24, 0xD3	; 211
     d8a:	9f ef       	ldi	r25, 0xFF	; 255
     d8c:	0e 94 76 10 	call	0x20ec	; 0x20ec <rf_set_cca_thresh>

  asm volatile ("":::"memory");
  tdma_running = 1;
     d90:	c0 93 fc 03 	sts	0x03FC, r28
  tdma_is_enabled = 1;
     d94:	c0 93 fa 03 	sts	0x03FA, r28
  return NRK_OK;
}
     d98:	8c 2f       	mov	r24, r28
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <tdma_get_rx_pkt_signal>:


nrk_sig_t tdma_get_rx_pkt_signal ()
{
  nrk_signal_register (tdma_rx_pkt_signal);
     da4:	80 91 7f 09 	lds	r24, 0x097F
     da8:	0e 94 05 20 	call	0x400a	; 0x400a <nrk_signal_register>
  return (tdma_rx_pkt_signal);
}
     dac:	80 91 7f 09 	lds	r24, 0x097F
     db0:	08 95       	ret

00000db2 <tdma_get_tx_done_signal>:

nrk_sig_t tdma_get_tx_done_signal ()
{
  nrk_signal_register (tdma_tx_pkt_done_signal);
     db2:	80 91 80 09 	lds	r24, 0x0980
     db6:	0e 94 05 20 	call	0x400a	; 0x400a <nrk_signal_register>
  return (tdma_tx_pkt_done_signal);
}
     dba:	80 91 80 09 	lds	r24, 0x0980
     dbe:	08 95       	ret

00000dc0 <tdma_rx_pkt_get>:


uint8_t *tdma_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (tdma_rx_buf_empty == 1) {
     dc0:	20 91 fd 03 	lds	r18, 0x03FD
     dc4:	21 30       	cpi	r18, 0x01	; 1
     dc6:	39 f4       	brne	.+14     	; 0xdd6 <tdma_rx_pkt_get+0x16>
    *len = 0;
     dc8:	fc 01       	movw	r30, r24
     dca:	10 82       	st	Z, r1
    *rssi = 0;
     dcc:	fb 01       	movw	r30, r22
     dce:	10 82       	st	Z, r1
    return NULL;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	08 95       	ret
  }
  *len = tdma_rfRxInfo.length;
     dd6:	20 91 26 06 	lds	r18, 0x0626
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
  *rssi = tdma_rfRxInfo.rssi;
     dde:	80 91 2b 06 	lds	r24, 0x062B
     de2:	fb 01       	movw	r30, r22
     de4:	80 83       	st	Z, r24
  return tdma_rfRxInfo.pPayload;
     de6:	80 91 28 06 	lds	r24, 0x0628
     dea:	90 91 29 06 	lds	r25, 0x0629
}
     dee:	08 95       	ret

00000df0 <tdma_rx_pkt_release>:


int8_t tdma_rx_pkt_release(void)
{
    tdma_rx_buf_empty=1;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	80 93 fd 03 	sts	0x03FD, r24
return NRK_OK;
}
     df6:	08 95       	ret

00000df8 <tdma_disable>:


void tdma_disable ()
{
  tdma_is_enabled = 0;
     df8:	10 92 fa 03 	sts	0x03FA, r1
  rf_power_down ();
     dfc:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <rf_power_down>

00000e00 <tdma_enable>:
}

void tdma_enable ()
{
  tdma_is_enabled = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 fa 03 	sts	0x03FA, r24
  rf_power_up ();
     e06:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <rf_power_up>
  nrk_event_signal (tdma_enable_signal);
     e0a:	80 91 19 0a 	lds	r24, 0x0A19
     e0e:	0c 94 37 20 	jmp	0x406e	; 0x406e <nrk_event_signal>

00000e12 <tdma_wakeup>:

}

void tdma_wakeup()
{
tdma_wakeup_flag=1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	80 93 15 06 	sts	0x0615, r24
     e18:	08 95       	ret

00000e1a <tdma_started>:

}

int8_t tdma_started ()
{
  return tdma_running;
     e1a:	80 91 fc 03 	lds	r24, 0x03FC
}
     e1e:	08 95       	ret

00000e20 <_tdma_rx_master>:
{
  int8_t v, i;
  static uint8_t cnt=0;
  v = 0;
  
  if (tdma_rx_buf_empty != 1) {
     e20:	80 91 fd 03 	lds	r24, 0x03FD
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	99 f0       	breq	.+38     	; 0xe4e <_tdma_rx_master+0x2e>
    rf_rx_off();
     e28:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <rf_rx_off>
    rf_rx_on();
     e2c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <rf_rx_on>
    cnt++;
     e30:	80 91 d2 03 	lds	r24, 0x03D2
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	80 93 d2 03 	sts	0x03D2, r24
    // catch annoying race condition, FIXME: why does this really happen?
    if(cnt>2){ tdma_rx_buf_empty=0;
     e3a:	83 30       	cpi	r24, 0x03	; 3
     e3c:	30 f0       	brcs	.+12     	; 0xe4a <_tdma_rx_master+0x2a>
     e3e:	10 92 fd 03 	sts	0x03FD, r1
          nrk_event_signal (tdma_rx_pkt_signal);
     e42:	80 91 7f 09 	lds	r24, 0x097F
     e46:	0e 94 37 20 	call	0x406e	; 0x406e <nrk_event_signal>
	}
    return NRK_ERROR;
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	08 95       	ret
    }
cnt=0;
     e4e:	10 92 d2 03 	sts	0x03D2, r1
  #ifdef GPIO_DEBUG
    nrk_gpio_set(NRK_MISO);
  #endif
//  if (rf_rx_check_fifop () == 1) {
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
     e52:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <rf_rx_packet_nonblock>
      if (v == 1) {
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	91 f5       	brne	.+100    	; 0xebe <_tdma_rx_master+0x9e>
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
     e5a:	60 91 26 06 	lds	r22, 0x0626
     e5e:	6d 30       	cpi	r22, 0x0D	; 13
     e60:	6c f1       	brlt	.+90     	; 0xebc <_tdma_rx_master+0x9c>
	if(_tdma_aes_enabled)
     e62:	80 91 08 04 	lds	r24, 0x0408
     e66:	81 11       	cpse	r24, r1
     e68:	07 c0       	rjmp	.+14     	; 0xe78 <_tdma_rx_master+0x58>
   		 	nrk_gpio_clr(NRK_MISO);
  		#endif
			return NRK_ERROR; 
		}
	 }
	  tdma_rx_buf_empty = 0;
     e6a:	10 92 fd 03 	sts	0x03FD, r1
          nrk_event_signal (tdma_rx_pkt_signal);
     e6e:	80 91 7f 09 	lds	r24, 0x097F
     e72:	0e 94 37 20 	call	0x406e	; 0x406e <nrk_event_signal>
     e76:	22 c0       	rjmp	.+68     	; 0xebc <_tdma_rx_master+0x9c>
      if (v == 1) {
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
     e78:	80 91 28 06 	lds	r24, 0x0628
     e7c:	90 91 29 06 	lds	r25, 0x0629
     e80:	0e 94 d5 11 	call	0x23aa	; 0x23aa <aes_decrypt>
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     e84:	80 91 28 06 	lds	r24, 0x0628
     e88:	90 91 29 06 	lds	r25, 0x0629
     e8c:	20 91 26 06 	lds	r18, 0x0626
     e90:	82 0f       	add	r24, r18
     e92:	91 1d       	adc	r25, r1
     e94:	27 fd       	sbrc	r18, 7
     e96:	9a 95       	dec	r25
     e98:	fc 01       	movw	r30, r24
     e9a:	31 97       	sbiw	r30, 0x01	; 1
     e9c:	20 81       	ld	r18, Z
     e9e:	2a 3c       	cpi	r18, 0xCA	; 202
     ea0:	a1 f6       	brne	.-88     	; 0xe4a <_tdma_rx_master+0x2a>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     ea2:	31 97       	sbiw	r30, 0x01	; 1
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     ea4:	20 81       	ld	r18, Z
     ea6:	2e 3f       	cpi	r18, 0xFE	; 254
     ea8:	81 f6       	brne	.-96     	; 0xe4a <_tdma_rx_master+0x2a>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     eaa:	31 97       	sbiw	r30, 0x01	; 1
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     eac:	20 81       	ld	r18, Z
     eae:	2e 3b       	cpi	r18, 0xBE	; 190
     eb0:	61 f6       	brne	.-104    	; 0xe4a <_tdma_rx_master+0x2a>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-4]!= 0xEF ) 
     eb2:	31 97       	sbiw	r30, 0x01	; 1
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 3e       	cpi	r24, 0xEF	; 239
     eb8:	c1 f2       	breq	.-80     	; 0xe6a <_tdma_rx_master+0x4a>
     eba:	c7 cf       	rjmp	.-114    	; 0xe4a <_tdma_rx_master+0x2a>
//  if (rf_rx_check_fifop () == 1) {
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
      if (v == 1) {
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
     ebc:	81 e0       	ldi	r24, 0x01	; 1
  #ifdef GPIO_DEBUG
    nrk_gpio_clr(NRK_MISO);
  #endif

  return v;
}
     ebe:	08 95       	ret

00000ec0 <_tdma_rx>:


int8_t _tdma_rx ()
{
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
  int8_t v, i;
  v = 0;

  if (tdma_rx_buf_empty != 1)
     ec4:	80 91 fd 03 	lds	r24, 0x03FD
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	11 f0       	breq	.+4      	; 0xed0 <_tdma_rx+0x10>
    return NRK_ERROR;
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	40 c0       	rjmp	.+128    	; 0xf50 <_tdma_rx+0x90>
     ed0:	d4 e6       	ldi	r29, 0x64	; 100
    nrk_gpio_set(NRK_MISO);
  #endif
//  if (rf_rx_check_fifop () == 1) {
    for (i = 0; i < 100; i++) {
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
     ed2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <rf_rx_packet_nonblock>
     ed6:	c8 2f       	mov	r28, r24
      if (v == 1) {
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	89 f5       	brne	.+98     	; 0xf3e <_tdma_rx+0x7e>
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
     edc:	60 91 26 06 	lds	r22, 0x0626
     ee0:	6d 30       	cpi	r22, 0x0D	; 13
     ee2:	ac f1       	brlt	.+106    	; 0xf4e <_tdma_rx+0x8e>
	if(_tdma_aes_enabled)
     ee4:	80 91 08 04 	lds	r24, 0x0408
     ee8:	81 11       	cpse	r24, r1
     eea:	07 c0       	rjmp	.+14     	; 0xefa <_tdma_rx+0x3a>
    nrk_gpio_clr(NRK_MISO);
  #endif
			return NRK_ERROR; 
			}
	 }
	  tdma_rx_buf_empty = 0;
     eec:	10 92 fd 03 	sts	0x03FD, r1
          nrk_event_signal (tdma_rx_pkt_signal);
     ef0:	80 91 7f 09 	lds	r24, 0x097F
     ef4:	0e 94 37 20 	call	0x406e	; 0x406e <nrk_event_signal>
     ef8:	2a c0       	rjmp	.+84     	; 0xf4e <_tdma_rx+0x8e>
      if (v == 1) {
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
     efa:	80 91 28 06 	lds	r24, 0x0628
     efe:	90 91 29 06 	lds	r25, 0x0629
     f02:	0e 94 d5 11 	call	0x23aa	; 0x23aa <aes_decrypt>
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     f06:	80 91 28 06 	lds	r24, 0x0628
     f0a:	90 91 29 06 	lds	r25, 0x0629
     f0e:	20 91 26 06 	lds	r18, 0x0626
     f12:	82 0f       	add	r24, r18
     f14:	91 1d       	adc	r25, r1
     f16:	27 fd       	sbrc	r18, 7
     f18:	9a 95       	dec	r25
     f1a:	fc 01       	movw	r30, r24
     f1c:	31 97       	sbiw	r30, 0x01	; 1
     f1e:	20 81       	ld	r18, Z
     f20:	2a 3c       	cpi	r18, 0xCA	; 202
     f22:	a1 f6       	brne	.-88     	; 0xecc <_tdma_rx+0xc>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     f24:	31 97       	sbiw	r30, 0x01	; 1
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     f26:	20 81       	ld	r18, Z
     f28:	2e 3f       	cpi	r18, 0xFE	; 254
     f2a:	81 f6       	brne	.-96     	; 0xecc <_tdma_rx+0xc>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     f2c:	31 97       	sbiw	r30, 0x01	; 1
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     f2e:	20 81       	ld	r18, Z
     f30:	2e 3b       	cpi	r18, 0xBE	; 190
     f32:	61 f6       	brne	.-104    	; 0xecc <_tdma_rx+0xc>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-4]!= 0xEF ) {
     f34:	31 97       	sbiw	r30, 0x01	; 1
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     f36:	80 81       	ld	r24, Z
     f38:	8f 3e       	cpi	r24, 0xEF	; 239
     f3a:	c1 f2       	breq	.-80     	; 0xeec <_tdma_rx+0x2c>
     f3c:	c7 cf       	rjmp	.-114    	; 0xecc <_tdma_rx+0xc>
	  tdma_rx_buf_empty = 0;
          nrk_event_signal (tdma_rx_pkt_signal);
        }
        break;
      }
      nrk_spin_wait_us (100);
     f3e:	84 e6       	ldi	r24, 0x64	; 100
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 57 2c 	call	0x58ae	; 0x58ae <nrk_spin_wait_us>
     f46:	d1 50       	subi	r29, 0x01	; 1

  #ifdef GPIO_DEBUG
    nrk_gpio_set(NRK_MISO);
  #endif
//  if (rf_rx_check_fifop () == 1) {
    for (i = 0; i < 100; i++) {
     f48:	21 f6       	brne	.-120    	; 0xed2 <_tdma_rx+0x12>
     f4a:	8c 2f       	mov	r24, r28
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <_tdma_rx+0x90>
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
     f4e:	81 e0       	ldi	r24, 0x01	; 1

  #ifdef GPIO_DEBUG
    nrk_gpio_clr(NRK_MISO);
  #endif
  return v;
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <_tdma_tx>:


int8_t _tdma_tx ()
{
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
  int8_t v;
  uint8_t checksum, i;
  uint8_t *data_start, *frame_start = &TRXFBST;
 

if(_tdma_aes_enabled)
     f5c:	90 91 08 04 	lds	r25, 0x0408
     f60:	99 23       	and	r25, r25
     f62:	09 f4       	brne	.+2      	; 0xf66 <_tdma_tx+0x10>
     f64:	43 c0       	rjmp	.+134    	; 0xfec <_tdma_tx+0x96>
{
   // Add 0xCAFEBEEF as a magic number for AES MAC
   tdma_rfTxInfo.length=tdma_rfTxInfo.length+4;
     f66:	20 91 33 07 	lds	r18, 0x0733
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	82 0f       	add	r24, r18

   // Make packet a multiple of 16
   if((tdma_rfTxInfo.length%16)!=0) tdma_rfTxInfo.length=((tdma_rfTxInfo.length/16)+1)*16;
     f6e:	38 2f       	mov	r19, r24
     f70:	3f 70       	andi	r19, 0x0F	; 15
     f72:	31 f0       	breq	.+12     	; 0xf80 <_tdma_tx+0x2a>
     f74:	87 ff       	sbrs	r24, 7
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <_tdma_tx+0x26>
     f78:	83 e1       	ldi	r24, 0x13	; 19
     f7a:	82 0f       	add	r24, r18
     f7c:	80 7f       	andi	r24, 0xF0	; 240
     f7e:	80 5f       	subi	r24, 0xF0	; 240
     f80:	80 93 33 07 	sts	0x0733, r24
   
//   printf( "l2: %d\r\n",tdma_rfTxInfo.length );
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-1]=0xCA;
     f84:	80 91 33 07 	lds	r24, 0x0733
     f88:	e0 91 34 07 	lds	r30, 0x0734
     f8c:	f0 91 35 07 	lds	r31, 0x0735
     f90:	e8 0f       	add	r30, r24
     f92:	f1 1d       	adc	r31, r1
     f94:	87 fd       	sbrc	r24, 7
     f96:	fa 95       	dec	r31
     f98:	31 97       	sbiw	r30, 0x01	; 1
     f9a:	8a ec       	ldi	r24, 0xCA	; 202
     f9c:	80 83       	st	Z, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-2]=0xFE;
     f9e:	80 91 33 07 	lds	r24, 0x0733
     fa2:	e0 91 34 07 	lds	r30, 0x0734
     fa6:	f0 91 35 07 	lds	r31, 0x0735
     faa:	e8 0f       	add	r30, r24
     fac:	f1 1d       	adc	r31, r1
     fae:	87 fd       	sbrc	r24, 7
     fb0:	fa 95       	dec	r31
     fb2:	32 97       	sbiw	r30, 0x02	; 2
     fb4:	8e ef       	ldi	r24, 0xFE	; 254
     fb6:	80 83       	st	Z, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-3]=0xBE;
     fb8:	80 91 33 07 	lds	r24, 0x0733
     fbc:	e0 91 34 07 	lds	r30, 0x0734
     fc0:	f0 91 35 07 	lds	r31, 0x0735
     fc4:	e8 0f       	add	r30, r24
     fc6:	f1 1d       	adc	r31, r1
     fc8:	87 fd       	sbrc	r24, 7
     fca:	fa 95       	dec	r31
     fcc:	33 97       	sbiw	r30, 0x03	; 3
     fce:	8e eb       	ldi	r24, 0xBE	; 190
     fd0:	80 83       	st	Z, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-4]=0xEF;
     fd2:	80 91 33 07 	lds	r24, 0x0733
     fd6:	e0 91 34 07 	lds	r30, 0x0734
     fda:	f0 91 35 07 	lds	r31, 0x0735
     fde:	e8 0f       	add	r30, r24
     fe0:	f1 1d       	adc	r31, r1
     fe2:	87 fd       	sbrc	r24, 7
     fe4:	fa 95       	dec	r31
     fe6:	34 97       	sbiw	r30, 0x04	; 4
     fe8:	8f ee       	ldi	r24, 0xEF	; 239
     fea:	80 83       	st	Z, r24
}
  checksum=0;
  for(i=0; i<tdma_rfTxInfo.length; i++ )
     fec:	60 91 33 07 	lds	r22, 0x0733
     ff0:	06 2f       	mov	r16, r22
     ff2:	11 27       	eor	r17, r17
     ff4:	07 fd       	sbrc	r16, 7
     ff6:	10 95       	com	r17
	checksum+=tdma_rfTxInfo.pPayload[i];
     ff8:	e0 91 34 07 	lds	r30, 0x0734
     ffc:	f0 91 35 07 	lds	r31, 0x0735
    1000:	c0 e0       	ldi	r28, 0x00	; 0
    1002:	40 e0       	ldi	r20, 0x00	; 0
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-2]=0xFE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-3]=0xBE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-4]=0xEF;
}
  checksum=0;
  for(i=0; i<tdma_rfTxInfo.length; i++ )
    1004:	24 2f       	mov	r18, r20
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	20 17       	cp	r18, r16
    100a:	31 07       	cpc	r19, r17
    100c:	3c f4       	brge	.+14     	; 0x101c <_tdma_tx+0xc6>
	checksum+=tdma_rfTxInfo.pPayload[i];
    100e:	2e 0f       	add	r18, r30
    1010:	3f 1f       	adc	r19, r31
    1012:	d9 01       	movw	r26, r18
    1014:	8c 91       	ld	r24, X
    1016:	c8 0f       	add	r28, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-2]=0xFE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-3]=0xBE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-4]=0xEF;
}
  checksum=0;
  for(i=0; i<tdma_rfTxInfo.length; i++ )
    1018:	4f 5f       	subi	r20, 0xFF	; 255
    101a:	f4 cf       	rjmp	.-24     	; 0x1004 <_tdma_tx+0xae>
	checksum+=tdma_rfTxInfo.pPayload[i];

if(_tdma_aes_enabled)   aes_encrypt(tdma_rfTxInfo.pPayload, tdma_rfTxInfo.length );
    101c:	99 23       	and	r25, r25
    101e:	19 f0       	breq	.+6      	; 0x1026 <_tdma_tx+0xd0>
    1020:	cf 01       	movw	r24, r30
    1022:	0e 94 86 11 	call	0x230c	; 0x230c <aes_encrypt>
  

  data_start = frame_start + 9 + 1 + tdma_rfTxInfo.length;
    1026:	e0 91 33 07 	lds	r30, 0x0733
    102a:	ff 27       	eor	r31, r31
    102c:	e7 fd       	sbrc	r30, 7
    102e:	f0 95       	com	r31
  memcpy(data_start, &checksum, sizeof(uint8_t));
    1030:	e6 57       	subi	r30, 0x76	; 118
    1032:	fe 4f       	sbci	r31, 0xFE	; 254
    1034:	c0 83       	st	Z, r28
    nrk_gpio_set(NRK_MOSI);
  #endif

for(i=0; i<TX_PKT_RETRY; i++ )
{
  v = rf_tx_packet (&tdma_rfTxInfo);
    1036:	81 e3       	ldi	r24, 0x31	; 49
    1038:	97 e0       	ldi	r25, 0x07	; 7
    103a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <rf_tx_packet>
  // Too delay or not?
}

  tx_data_ready = 0;
    103e:	10 92 04 04 	sts	0x0404, r1
  nrk_event_signal (tdma_tx_pkt_done_signal);
    1042:	80 91 80 09 	lds	r24, 0x0980
    1046:	0e 94 37 20 	call	0x406e	; 0x406e <nrk_event_signal>
  #ifdef GPIO_DEBUG
    nrk_gpio_clr(NRK_MOSI);
  #endif
  return NRK_OK;
}
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

00001054 <tdma_nw_task>:
  nrk_event_signal (tdma_enable_signal);
}


void tdma_nw_task ()
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	00 d0       	rcall	.+0      	; 0x105a <tdma_nw_task+0x6>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
  int8_t v, i;
  uint16_t slot, tmp,tmp2,sync;
  nrk_sig_mask_t event;

  do {
    nrk_wait_until_next_period ();
    105e:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_wait_until_next_period>

}

int8_t tdma_started ()
{
  return tdma_running;
    1062:	80 91 fc 03 	lds	r24, 0x03FC
  uint16_t slot, tmp,tmp2,sync;
  nrk_sig_mask_t event;

  do {
    nrk_wait_until_next_period ();
  } while (!tdma_started ());
    1066:	88 23       	and	r24, r24
    1068:	d1 f3       	breq	.-12     	; 0x105e <tdma_nw_task+0xa>

//register the signal after bmac_init has been called
  v = nrk_signal_register (tdma_enable_signal);
    106a:	80 91 19 0a 	lds	r24, 0x0A19
    106e:	0e 94 05 20 	call	0x400a	; 0x400a <nrk_signal_register>
    1072:	8a 83       	std	Y+2, r24	; 0x02
  if (v == NRK_ERROR)
    1074:	8f 3f       	cpi	r24, 0xFF	; 255
    1076:	21 f4       	brne	.+8      	; 0x1080 <tdma_nw_task+0x2c>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    1078:	84 eb       	ldi	r24, 0xB4	; 180
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
      slot++;
	// For the last slot, we wakeup a bit late to make sure all other nodes have woken up in time to
	// receive the beacon message.  
      if (slot > tdma_slots_per_cycle ){
        nrk_wait_until_ticks(TDMA_WAKEUP_GAURD_TIME_MS);
	slot = 0;
    1080:	61 2c       	mov	r6, r1
    1082:	71 2c       	mov	r7, r1

      // Transmit on slot
      if (tx_data_ready == 1) {
        tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = slot & 0xff;    // slot
        tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = slot >> 8;
        tdma_rfTxInfo.destAddr = 0xffff;
    1084:	22 24       	eor	r2, r2
    1086:	2a 94       	dec	r2
    1088:	32 2c       	mov	r3, r2
//rf_set_rx (&tdma_rfRxInfo, tdma_chan);



  while (1) {
    if (tdma_mode == TDMA_HOST) {
    108a:	80 91 06 04 	lds	r24, 0x0406
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	09 f0       	breq	.+2      	; 0x1094 <tdma_nw_task+0x40>
    1092:	e1 c0       	rjmp	.+450    	; 0x1256 <tdma_nw_task+0x202>
	    sync_status=1; // HOST is always synced
    1094:	80 93 d5 03 	sts	0x03D5, r24
      // This is the downstream transmit slot
      if (slot == 0) {
    1098:	61 14       	cp	r6, r1
    109a:	71 04       	cpc	r7, r1
    109c:	09 f0       	breq	.+2      	; 0x10a0 <tdma_nw_task+0x4c>
    109e:	88 c0       	rjmp	.+272    	; 0x11b0 <tdma_nw_task+0x15c>

        //  for(i=0; i<100; i++ ) tdma_rfTxInfo.pPayload[i] = 0;  
        //rf_rx_off();
        // If there is no pending packet, lets make an empty one
        if (tx_data_ready == 0) {
    10a0:	80 91 04 04 	lds	r24, 0x0404
    10a4:	81 11       	cpse	r24, r1
    10a6:	16 c0       	rjmp	.+44     	; 0x10d4 <tdma_nw_task+0x80>
          tdma_rfTxInfo.pPayload = tdma_tx_buf;
    10a8:	22 e8       	ldi	r18, 0x82	; 130
    10aa:	34 e0       	ldi	r19, 0x04	; 4
    10ac:	30 93 35 07 	sts	0x0735, r19
    10b0:	20 93 34 07 	sts	0x0734, r18
          // Setup the header data
          tdma_rfTxInfo.pPayload[TDMA_DST_LOW] = 0xff;  // dst
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	30 93 84 04 	sts	0x0484, r19
          tdma_rfTxInfo.pPayload[TDMA_DST_HIGH] = 0xff;
    10ba:	30 93 85 04 	sts	0x0485, r19
          tdma_rfTxInfo.pPayload[TDMA_SRC_LOW] = 0x00;  // src
    10be:	10 92 86 04 	sts	0x0486, r1
          tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = 0x00;
    10c2:	10 92 87 04 	sts	0x0487, r1
          tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_LOW] = 0x00;      // seq num
    10c6:	10 92 88 04 	sts	0x0488, r1
          tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_HIGH] = 0x00;
    10ca:	10 92 89 04 	sts	0x0489, r1
          tdma_rfTxInfo.length = TDMA_PCF_HEADER;
    10ce:	8c e0       	ldi	r24, 0x0C	; 12
    10d0:	80 93 33 07 	sts	0x0733, r24
        }
        tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_LOW] = tdma_slots_per_cycle & 0xff;      // cycle size 
    10d4:	e0 91 34 07 	lds	r30, 0x0734
    10d8:	f0 91 35 07 	lds	r31, 0x0735
    10dc:	90 91 00 04 	lds	r25, 0x0400
    10e0:	80 91 01 04 	lds	r24, 0x0401
    10e4:	90 87       	std	Z+8, r25	; 0x08
        tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_HIGH] =
    10e6:	81 87       	std	Z+9, r24	; 0x09
          tdma_slots_per_cycle >> 8;
        tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = 0;      // slot
    10e8:	10 82       	st	Z, r1
        tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = 0;
    10ea:	e0 91 34 07 	lds	r30, 0x0734
    10ee:	f0 91 35 07 	lds	r31, 0x0735
    10f2:	11 82       	std	Z+1, r1	; 0x01
        tdma_rfTxInfo.pPayload[TDMA_TTL] = tdma_ttl<<4 | (tdma_ttl);
    10f4:	e0 91 34 07 	lds	r30, 0x0734
    10f8:	f0 91 35 07 	lds	r31, 0x0735
    10fc:	20 91 05 04 	lds	r18, 0x0405
    1100:	30 e1       	ldi	r19, 0x10	; 16
    1102:	23 9f       	mul	r18, r19
    1104:	c0 01       	movw	r24, r0
    1106:	11 24       	eor	r1, r1
    1108:	82 2b       	or	r24, r18
    110a:	82 87       	std	Z+10, r24	; 0x0a
        tdma_rfTxInfo.pPayload[TDMA_SLOT_SIZE] = tdma_slot_len_ms;
    110c:	80 91 02 04 	lds	r24, 0x0402
    1110:	83 87       	std	Z+11, r24	; 0x0b
        nrk_time_get (&_tdma_next_wakeup);
    1112:	89 ed       	ldi	r24, 0xD9	; 217
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <nrk_time_get>
        tdma_rfTxInfo.destAddr = 0xffff;
    111a:	30 92 32 07 	sts	0x0732, r3
    111e:	20 92 31 07 	sts	0x0731, r2
        tdma_rfTxInfo.ackRequest = 0;
    1122:	10 92 37 07 	sts	0x0737, r1
        tdma_rfTxInfo.cca = 0;
    1126:	10 92 36 07 	sts	0x0736, r1
        _tdma_tx ();
    112a:	0e 94 ab 07 	call	0xf56	; 0xf56 <_tdma_tx>
        rf_rx_on ();
    112e:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <rf_rx_on>
	if(tdma_wakeup_flag==1)
    1132:	80 91 15 06 	lds	r24, 0x0615
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	09 f0       	breq	.+2      	; 0x113c <tdma_nw_task+0xe8>
    113a:	43 c0       	rjmp	.+134    	; 0x11c2 <tdma_nw_task+0x16e>
    113c:	41 2c       	mov	r4, r1
    113e:	51 2c       	mov	r5, r1
		{
		for(slot=0; slot<1000; slot++ )
			{
				if((slot%5)==0)nrk_led_toggle(BLUE_LED);
    1140:	c2 01       	movw	r24, r4
    1142:	65 e0       	ldi	r22, 0x05	; 5
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	0e 94 8e 32 	call	0x651c	; 0x651c <__udivmodhi4>
    114a:	89 2b       	or	r24, r25
    114c:	21 f4       	brne	.+8      	; 0x1156 <tdma_nw_task+0x102>
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <nrk_led_toggle>
        			tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = 0xff;      // slot
    1156:	e0 91 34 07 	lds	r30, 0x0734
    115a:	f0 91 35 07 	lds	r31, 0x0735
    115e:	8f ef       	ldi	r24, 0xFF	; 255
    1160:	80 83       	st	Z, r24
        			tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = 0xff;
    1162:	e0 91 34 07 	lds	r30, 0x0734
    1166:	f0 91 35 07 	lds	r31, 0x0735
    116a:	81 83       	std	Z+1, r24	; 0x01
          			tdma_rfTxInfo.pPayload[TDMA_SRC_LOW] = 0x0;  // src
    116c:	e0 91 34 07 	lds	r30, 0x0734
    1170:	f0 91 35 07 	lds	r31, 0x0735
    1174:	14 82       	std	Z+4, r1	; 0x04
          			tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = 0x0;
    1176:	e0 91 34 07 	lds	r30, 0x0734
    117a:	f0 91 35 07 	lds	r31, 0x0735
    117e:	15 82       	std	Z+5, r1	; 0x05
          			tdma_rfTxInfo.length = TDMA_PCF_HEADER;
    1180:	9c e0       	ldi	r25, 0x0C	; 12
    1182:	90 93 33 07 	sts	0x0733, r25
        			_tdma_tx ();
    1186:	0e 94 ab 07 	call	0xf56	; 0xf56 <_tdma_tx>
        			//rf_rx_on ();
				nrk_wait_until_ticks(10);
    118a:	8a e0       	ldi	r24, 0x0A	; 10
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 53 24 	call	0x48a6	; 0x48a6 <nrk_wait_until_ticks>
        tdma_rfTxInfo.cca = 0;
        _tdma_tx ();
        rf_rx_on ();
	if(tdma_wakeup_flag==1)
		{
		for(slot=0; slot<1000; slot++ )
    1192:	ef ef       	ldi	r30, 0xFF	; 255
    1194:	4e 1a       	sub	r4, r30
    1196:	5e 0a       	sbc	r5, r30
    1198:	f8 ee       	ldi	r31, 0xE8	; 232
    119a:	4f 16       	cp	r4, r31
    119c:	f3 e0       	ldi	r31, 0x03	; 3
    119e:	5f 06       	cpc	r5, r31
    11a0:	79 f6       	brne	.-98     	; 0x1140 <tdma_nw_task+0xec>
          			tdma_rfTxInfo.length = TDMA_PCF_HEADER;
        			_tdma_tx ();
        			//rf_rx_on ();
				nrk_wait_until_ticks(10);
			}
		nrk_led_clr(BLUE_LED);
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_led_clr>
		slot=0;
		tdma_wakeup_flag=0;
    11aa:	10 92 15 06 	sts	0x0615, r1
    11ae:	09 c0       	rjmp	.+18     	; 0x11c2 <tdma_nw_task+0x16e>
        // Upstream data slot
        // This configures the packet receive interrupt to call the _tdma_rx_master function
        // The _tdma_rx_master function triggers a signal to the tdma_rx function.
        // rf_rx_on();
	// rx_end_callback(&_tdma_rx_master);
        _tdma_rx_master();
    11b0:	0e 94 10 07 	call	0xe20	; 0xe20 <_tdma_rx_master>
        if (v == 1)
    11b4:	2a 81       	ldd	r18, Y+2	; 0x02
    11b6:	21 30       	cpi	r18, 0x01	; 1
    11b8:	21 f4       	brne	.+8      	; 0x11c2 <tdma_nw_task+0x16e>
          tdma_last_tx_slot = slot;
    11ba:	70 92 ff 03 	sts	0x03FF, r7
    11be:	60 92 fe 03 	sts	0x03FE, r6
      }
      slot++;
    11c2:	3f ef       	ldi	r19, 0xFF	; 255
    11c4:	63 1a       	sub	r6, r19
    11c6:	73 0a       	sbc	r7, r19
	// For the last slot, we wakeup a bit late to make sure all other nodes have woken up in time to
	// receive the beacon message.  
      if (slot > tdma_slots_per_cycle ){
    11c8:	80 91 00 04 	lds	r24, 0x0400
    11cc:	90 91 01 04 	lds	r25, 0x0401
    11d0:	86 15       	cp	r24, r6
    11d2:	97 05       	cpc	r25, r7
    11d4:	28 f4       	brcc	.+10     	; 0x11e0 <tdma_nw_task+0x18c>
        nrk_wait_until_ticks(TDMA_WAKEUP_GAURD_TIME_MS);
    11d6:	8a e0       	ldi	r24, 0x0A	; 10
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 53 24 	call	0x48a6	; 0x48a6 <nrk_wait_until_ticks>
    11de:	ec c1       	rjmp	.+984    	; 0x15b8 <tdma_nw_task+0x564>
	slot = 0;
	}
      else {
      nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
    11e0:	80 90 e1 03 	lds	r8, 0x03E1
    11e4:	90 90 e2 03 	lds	r9, 0x03E2
    11e8:	a0 90 e3 03 	lds	r10, 0x03E3
    11ec:	b0 90 e4 03 	lds	r11, 0x03E4
    11f0:	c0 90 e5 03 	lds	r12, 0x03E5
    11f4:	d0 90 e6 03 	lds	r13, 0x03E6
    11f8:	e0 90 e7 03 	lds	r14, 0x03E7
    11fc:	f0 90 e8 03 	lds	r15, 0x03E8
    1200:	00 91 d9 03 	lds	r16, 0x03D9
    1204:	10 91 da 03 	lds	r17, 0x03DA
    1208:	20 91 db 03 	lds	r18, 0x03DB
    120c:	30 91 dc 03 	lds	r19, 0x03DC
    1210:	40 91 dd 03 	lds	r20, 0x03DD
    1214:	50 91 de 03 	lds	r21, 0x03DE
    1218:	60 91 df 03 	lds	r22, 0x03DF
    121c:	70 91 e0 03 	lds	r23, 0x03E0
    1220:	89 ed       	ldi	r24, 0xD9	; 217
    1222:	93 e0       	ldi	r25, 0x03	; 3
    1224:	0e 94 65 26 	call	0x4cca	; 0x4cca <nrk_time_add>
      nrk_time_compact_nanos (&_tdma_next_wakeup);
    1228:	89 ed       	ldi	r24, 0xD9	; 217
    122a:	93 e0       	ldi	r25, 0x03	; 3
    122c:	0e 94 44 26 	call	0x4c88	; 0x4c88 <nrk_time_compact_nanos>
      nrk_wait_until (_tdma_next_wakeup);
    1230:	20 91 d9 03 	lds	r18, 0x03D9
    1234:	30 91 da 03 	lds	r19, 0x03DA
    1238:	40 91 db 03 	lds	r20, 0x03DB
    123c:	50 91 dc 03 	lds	r21, 0x03DC
    1240:	60 91 dd 03 	lds	r22, 0x03DD
    1244:	70 91 de 03 	lds	r23, 0x03DE
    1248:	80 91 df 03 	lds	r24, 0x03DF
    124c:	90 91 e0 03 	lds	r25, 0x03E0
    1250:	0e 94 ff 24 	call	0x49fe	; 0x49fe <nrk_wait_until>
    1254:	1a cf       	rjmp	.-460    	; 0x108a <tdma_nw_task+0x36>
	
      }
    }
    // TDMA slave node
    else {
      if (slot == 0) {
    1256:	67 28       	or	r6, r7
    1258:	09 f0       	breq	.+2      	; 0x125c <tdma_nw_task+0x208>
    125a:	57 c0       	rjmp	.+174    	; 0x130a <tdma_nw_task+0x2b6>

	//rf_rx_off ();
	//rf_power_down();
	      	
	sync=0;
	rf_power_up();
    125c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <rf_power_up>
	rf_rx_on ();
    1260:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <rf_rx_on>
      if (slot == 0) {

	//rf_rx_off ();
	//rf_power_down();
	      	
	sync=0;
    1264:	61 2c       	mov	r6, r1
    1266:	71 2c       	mov	r7, r1
	rf_power_up();
	rf_rx_on ();
        do {
          v = _tdma_rx ();
    1268:	0e 94 60 07 	call	0xec0	; 0xec0 <_tdma_rx>
    126c:	8a 83       	std	Y+2, r24	; 0x02
          nrk_time_get (&_tdma_next_wakeup);
    126e:	89 ed       	ldi	r24, 0xD9	; 217
    1270:	93 e0       	ldi	r25, 0x03	; 3
    1272:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <nrk_time_get>
          if (v == NRK_OK) {
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	09 f5       	brne	.+66     	; 0x12be <tdma_nw_task+0x26a>

	    // See if its part of a wakeup packet stream
            tmp =
              (tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    127c:	e0 91 28 06 	lds	r30, 0x0628
    1280:	f0 91 29 06 	lds	r31, 0x0629
              pPayload[TDMA_SRC_LOW];
	    // Check if its slot 0 packet
            tmp2 =
              (tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
    1284:	81 81       	ldd	r24, Z+1	; 0x01
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	98 2f       	mov	r25, r24
    128a:	88 27       	eor	r24, r24
    128c:	20 81       	ld	r18, Z
    128e:	82 2b       	or	r24, r18
          nrk_time_get (&_tdma_next_wakeup);
          if (v == NRK_OK) {

	    // See if its part of a wakeup packet stream
            tmp =
              (tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    1290:	25 81       	ldd	r18, Z+5	; 0x05
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	32 2f       	mov	r19, r18
    1296:	22 27       	eor	r18, r18
    1298:	44 81       	ldd	r20, Z+4	; 0x04
    129a:	24 2b       	or	r18, r20
	    // Check if its slot 0 packet
            tmp2 =
              (tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
              pPayload[TDMA_SLOT_LOW];

	    if(tmp==0x0 && tmp2==0xffff) sync=0;
    129c:	23 2b       	or	r18, r19
    129e:	21 f4       	brne	.+8      	; 0x12a8 <tdma_nw_task+0x254>
    12a0:	8f 3f       	cpi	r24, 0xFF	; 255
    12a2:	2f ef       	ldi	r18, 0xFF	; 255
    12a4:	92 07       	cpc	r25, r18
    12a6:	21 f0       	breq	.+8      	; 0x12b0 <tdma_nw_task+0x25c>

            if (tmp2 != 0) {
    12a8:	89 2b       	or	r24, r25
    12aa:	09 f4       	brne	.+2      	; 0x12ae <tdma_nw_task+0x25a>
    12ac:	88 c1       	rjmp	.+784    	; 0x15be <tdma_nw_task+0x56a>
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <tdma_nw_task+0x260>
	    // Check if its slot 0 packet
            tmp2 =
              (tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
              pPayload[TDMA_SLOT_LOW];

	    if(tmp==0x0 && tmp2==0xffff) sync=0;
    12b0:	61 2c       	mov	r6, r1
    12b2:	71 2c       	mov	r7, r1

            if (tmp2 != 0) {
              v = NRK_ERROR;
          	tdma_rx_buf_empty = 1;
    12b4:	31 e0       	ldi	r19, 0x01	; 1
    12b6:	30 93 fd 03 	sts	0x03FD, r19
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	8a 83       	std	Y+2, r24	; 0x02
            _tdma_slot_time.nano_secs = tdma_slot_len_ms * NANOS_PER_MS;
            _tdma_slot_time.secs = 0;
	    }
          }
	  // Make this time based so that it doesn't get shorter with non sync packets
	  if(sync>=100) { 
    12be:	94 e6       	ldi	r25, 0x64	; 100
    12c0:	69 16       	cp	r6, r25
    12c2:	71 04       	cpc	r7, r1
    12c4:	c0 f0       	brcs	.+48     	; 0x12f6 <tdma_nw_task+0x2a2>
		  		sync_status=0; /*nrk_led_set(RED_LED);*/ 
    12c6:	10 92 d5 03 	sts	0x03D5, r1
				//sync=30000; 
				if(tdma_error_callback!=NULL ) i=tdma_error_callback(sync-100);
    12ca:	e0 91 d3 03 	lds	r30, 0x03D3
    12ce:	f0 91 d4 03 	lds	r31, 0x03D4
    12d2:	30 97       	sbiw	r30, 0x00	; 0
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <tdma_nw_task+0x28c>
    12d6:	c3 01       	movw	r24, r6
    12d8:	84 56       	subi	r24, 0x64	; 100
    12da:	91 09       	sbc	r25, r1
    12dc:	09 95       	icall
    12de:	89 83       	std	Y+1, r24	; 0x01
		if(i==NRK_OK) { tdma_rx_buf_empty=1; /*nrk_kprintf( PSTR("sync=0\r\n"));*/ sync=0; }
    12e0:	e9 81       	ldd	r30, Y+1	; 0x01
    12e2:	e1 30       	cpi	r30, 0x01	; 1
    12e4:	19 f4       	brne	.+6      	; 0x12ec <tdma_nw_task+0x298>
    12e6:	61 2c       	mov	r6, r1
    12e8:	71 2c       	mov	r7, r1
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <tdma_nw_task+0x2a2>
	  } 
	  if(sync<30000 ) sync++;
    12ec:	f0 e3       	ldi	r31, 0x30	; 48
    12ee:	6f 16       	cp	r6, r31
    12f0:	f5 e7       	ldi	r31, 0x75	; 117
    12f2:	7f 06       	cpc	r7, r31
    12f4:	18 f4       	brcc	.+6      	; 0x12fc <tdma_nw_task+0x2a8>
    12f6:	2f ef       	ldi	r18, 0xFF	; 255
    12f8:	62 1a       	sub	r6, r18
    12fa:	72 0a       	sbc	r7, r18
}


int8_t tdma_rx_pkt_release(void)
{
    tdma_rx_buf_empty=1;
    12fc:	31 e0       	ldi	r19, 0x01	; 1
    12fe:	30 93 fd 03 	sts	0x03FD, r19
				if(tdma_error_callback!=NULL ) i=tdma_error_callback(sync-100);
		if(i==NRK_OK) { tdma_rx_buf_empty=1; /*nrk_kprintf( PSTR("sync=0\r\n"));*/ sync=0; }
	  } 
	  if(sync<30000 ) sync++;
	tdma_rx_pkt_release();
        } while (v != NRK_OK);
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	09 f0       	breq	.+2      	; 0x130a <tdma_nw_task+0x2b6>
    1308:	af cf       	rjmp	.-162    	; 0x1268 <tdma_nw_task+0x214>
      //if(sync==30000)  sync_status=1; /*nrk_led_clr(RED_LED);*/ 
      }

      // Compute TTL offset
      ttl_delay=(tdma_rfRxInfo.pPayload[TDMA_TTL]>>4)-(tdma_rfRxInfo.pPayload[TDMA_TTL]&0xf);
    130a:	e0 91 28 06 	lds	r30, 0x0628
    130e:	f0 91 29 06 	lds	r31, 0x0629
    1312:	92 85       	ldd	r25, Z+10	; 0x0a
    1314:	89 2f       	mov	r24, r25
    1316:	82 95       	swap	r24
    1318:	8f 70       	andi	r24, 0x0F	; 15
    131a:	9f 70       	andi	r25, 0x0F	; 15
    131c:	89 1b       	sub	r24, r25
      if(ttl_delay>16) ttl_delay=0;
    131e:	81 31       	cpi	r24, 0x11	; 17
    1320:	18 f4       	brcc	.+6      	; 0x1328 <tdma_nw_task+0x2d4>
        } while (v != NRK_OK);
      //if(sync==30000)  sync_status=1; /*nrk_led_clr(RED_LED);*/ 
      }

      // Compute TTL offset
      ttl_delay=(tdma_rfRxInfo.pPayload[TDMA_TTL]>>4)-(tdma_rfRxInfo.pPayload[TDMA_TTL]&0xf);
    1322:	80 93 f9 03 	sts	0x03F9, r24
    1326:	02 c0       	rjmp	.+4      	; 0x132c <tdma_nw_task+0x2d8>
      if(ttl_delay>16) ttl_delay=0;
    1328:	10 92 f9 03 	sts	0x03F9, r1
      _ttl_delay_total.secs=0;
    132c:	10 92 f1 03 	sts	0x03F1, r1
    1330:	10 92 f2 03 	sts	0x03F2, r1
    1334:	10 92 f3 03 	sts	0x03F3, r1
    1338:	10 92 f4 03 	sts	0x03F4, r1
      _ttl_delay_total.nano_secs=0;
    133c:	10 92 f5 03 	sts	0x03F5, r1
    1340:	10 92 f6 03 	sts	0x03F6, r1
    1344:	10 92 f7 03 	sts	0x03F7, r1
    1348:	10 92 f8 03 	sts	0x03F8, r1
      _ttl_delay_per_tx.secs=0;
    134c:	10 92 e9 03 	sts	0x03E9, r1
    1350:	10 92 ea 03 	sts	0x03EA, r1
    1354:	10 92 eb 03 	sts	0x03EB, r1
    1358:	10 92 ec 03 	sts	0x03EC, r1
      _ttl_delay_per_tx.nano_secs=0;

      _ttl_delay_per_tx.secs=0;
      _ttl_delay_per_tx.nano_secs=((uint32_t)tdma_rfRxInfo.length+(uint32_t)17)*32000;   // (payload_bytes + header) * 32 us
    135c:	a0 91 26 06 	lds	r26, 0x0626
    1360:	bb 27       	eor	r27, r27
    1362:	a7 fd       	sbrc	r26, 7
    1364:	b0 95       	com	r27
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	3d e7       	ldi	r19, 0x7D	; 125
    136a:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <__usmulhisi3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	93 5b       	subi	r25, 0xB3	; 179
    1374:	a7 4f       	sbci	r26, 0xF7	; 247
    1376:	bf 4f       	sbci	r27, 0xFF	; 255
    1378:	80 93 ed 03 	sts	0x03ED, r24
    137c:	90 93 ee 03 	sts	0x03EE, r25
    1380:	a0 93 ef 03 	sts	0x03EF, r26
    1384:	b0 93 f0 03 	sts	0x03F0, r27

      for (tmp = 0; tmp < ttl_delay; tmp++)
    1388:	61 2c       	mov	r6, r1
    138a:	71 2c       	mov	r7, r1
    138c:	80 91 f9 03 	lds	r24, 0x03F9
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	68 16       	cp	r6, r24
    1394:	79 06       	cpc	r7, r25
    1396:	40 f5       	brcc	.+80     	; 0x13e8 <tdma_nw_task+0x394>
        nrk_time_add (&_ttl_delay_total, _ttl_delay_total, _ttl_delay_per_tx);
    1398:	80 90 e9 03 	lds	r8, 0x03E9
    139c:	90 90 ea 03 	lds	r9, 0x03EA
    13a0:	a0 90 eb 03 	lds	r10, 0x03EB
    13a4:	b0 90 ec 03 	lds	r11, 0x03EC
    13a8:	c0 90 ed 03 	lds	r12, 0x03ED
    13ac:	d0 90 ee 03 	lds	r13, 0x03EE
    13b0:	e0 90 ef 03 	lds	r14, 0x03EF
    13b4:	f0 90 f0 03 	lds	r15, 0x03F0
    13b8:	00 91 f1 03 	lds	r16, 0x03F1
    13bc:	10 91 f2 03 	lds	r17, 0x03F2
    13c0:	20 91 f3 03 	lds	r18, 0x03F3
    13c4:	30 91 f4 03 	lds	r19, 0x03F4
    13c8:	40 91 f5 03 	lds	r20, 0x03F5
    13cc:	50 91 f6 03 	lds	r21, 0x03F6
    13d0:	60 91 f7 03 	lds	r22, 0x03F7
    13d4:	70 91 f8 03 	lds	r23, 0x03F8
    13d8:	81 ef       	ldi	r24, 0xF1	; 241
    13da:	93 e0       	ldi	r25, 0x03	; 3
    13dc:	0e 94 65 26 	call	0x4cca	; 0x4cca <nrk_time_add>
      _ttl_delay_per_tx.nano_secs=0;

      _ttl_delay_per_tx.secs=0;
      _ttl_delay_per_tx.nano_secs=((uint32_t)tdma_rfRxInfo.length+(uint32_t)17)*32000;   // (payload_bytes + header) * 32 us

      for (tmp = 0; tmp < ttl_delay; tmp++)
    13e0:	9f ef       	ldi	r25, 0xFF	; 255
    13e2:	69 1a       	sub	r6, r25
    13e4:	79 0a       	sbc	r7, r25
    13e6:	d2 cf       	rjmp	.-92     	; 0x138c <tdma_nw_task+0x338>
        nrk_time_add (&_ttl_delay_total, _ttl_delay_total, _ttl_delay_per_tx);


      sync_status=1;
    13e8:	e1 e0       	ldi	r30, 0x01	; 1
    13ea:	e0 93 d5 03 	sts	0x03D5, r30
	rf_rx_off ();
    13ee:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <rf_rx_off>
	rf_power_down();
    13f2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <rf_power_down>

      // Find next slot
      slot = tdma_tx_sched[0];
    13f6:	80 91 0a 04 	lds	r24, 0x040A
    13fa:	90 91 0b 04 	lds	r25, 0x040B
      if (slot > tdma_slots_per_cycle)
    13fe:	60 90 00 04 	lds	r6, 0x0400
    1402:	70 90 01 04 	lds	r7, 0x0401
    1406:	86 15       	cp	r24, r6
    1408:	97 05       	cpc	r25, r7
    140a:	08 f4       	brcc	.+2      	; 0x140e <tdma_nw_task+0x3ba>
    140c:	3c 01       	movw	r6, r24
        slot = tdma_slots_per_cycle;
 //         nrk_time_get (&tmp_time);
//      printf( "tt=%lu %lu\r\n",tmp_time.secs,tmp_time.nano_secs/NANOS_PER_MS);
//      printf( "nw=%lu %lu\r\n",_tdma_next_wakeup.secs,_tdma_next_wakeup.nano_secs/NANOS_PER_MS);
      for (tmp = 0; tmp < slot; tmp++)
    140e:	41 2c       	mov	r4, r1
    1410:	51 2c       	mov	r5, r1
    1412:	46 14       	cp	r4, r6
    1414:	57 04       	cpc	r5, r7
    1416:	41 f1       	breq	.+80     	; 0x1468 <tdma_nw_task+0x414>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
    1418:	80 90 e1 03 	lds	r8, 0x03E1
    141c:	90 90 e2 03 	lds	r9, 0x03E2
    1420:	a0 90 e3 03 	lds	r10, 0x03E3
    1424:	b0 90 e4 03 	lds	r11, 0x03E4
    1428:	c0 90 e5 03 	lds	r12, 0x03E5
    142c:	d0 90 e6 03 	lds	r13, 0x03E6
    1430:	e0 90 e7 03 	lds	r14, 0x03E7
    1434:	f0 90 e8 03 	lds	r15, 0x03E8
    1438:	00 91 d9 03 	lds	r16, 0x03D9
    143c:	10 91 da 03 	lds	r17, 0x03DA
    1440:	20 91 db 03 	lds	r18, 0x03DB
    1444:	30 91 dc 03 	lds	r19, 0x03DC
    1448:	40 91 dd 03 	lds	r20, 0x03DD
    144c:	50 91 de 03 	lds	r21, 0x03DE
    1450:	60 91 df 03 	lds	r22, 0x03DF
    1454:	70 91 e0 03 	lds	r23, 0x03E0
    1458:	89 ed       	ldi	r24, 0xD9	; 217
    145a:	93 e0       	ldi	r25, 0x03	; 3
    145c:	0e 94 65 26 	call	0x4cca	; 0x4cca <nrk_time_add>
      if (slot > tdma_slots_per_cycle)
        slot = tdma_slots_per_cycle;
 //         nrk_time_get (&tmp_time);
//      printf( "tt=%lu %lu\r\n",tmp_time.secs,tmp_time.nano_secs/NANOS_PER_MS);
//      printf( "nw=%lu %lu\r\n",_tdma_next_wakeup.secs,_tdma_next_wakeup.nano_secs/NANOS_PER_MS);
      for (tmp = 0; tmp < slot; tmp++)
    1460:	ff ef       	ldi	r31, 0xFF	; 255
    1462:	4f 1a       	sub	r4, r31
    1464:	5f 0a       	sbc	r5, r31
    1466:	d5 cf       	rjmp	.-86     	; 0x1412 <tdma_nw_task+0x3be>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
      // Subtract TTL delay time
      nrk_time_sub(&_tdma_next_wakeup, _tdma_next_wakeup, _ttl_delay_total);
    1468:	80 90 f1 03 	lds	r8, 0x03F1
    146c:	90 90 f2 03 	lds	r9, 0x03F2
    1470:	a0 90 f3 03 	lds	r10, 0x03F3
    1474:	b0 90 f4 03 	lds	r11, 0x03F4
    1478:	c0 90 f5 03 	lds	r12, 0x03F5
    147c:	d0 90 f6 03 	lds	r13, 0x03F6
    1480:	e0 90 f7 03 	lds	r14, 0x03F7
    1484:	f0 90 f8 03 	lds	r15, 0x03F8
    1488:	00 91 d9 03 	lds	r16, 0x03D9
    148c:	10 91 da 03 	lds	r17, 0x03DA
    1490:	20 91 db 03 	lds	r18, 0x03DB
    1494:	30 91 dc 03 	lds	r19, 0x03DC
    1498:	40 91 dd 03 	lds	r20, 0x03DD
    149c:	50 91 de 03 	lds	r21, 0x03DE
    14a0:	60 91 df 03 	lds	r22, 0x03DF
    14a4:	70 91 e0 03 	lds	r23, 0x03E0
    14a8:	89 ed       	ldi	r24, 0xD9	; 217
    14aa:	93 e0       	ldi	r25, 0x03	; 3
    14ac:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <nrk_time_sub>

      nrk_time_compact_nanos (&_tdma_next_wakeup);
    14b0:	89 ed       	ldi	r24, 0xD9	; 217
    14b2:	93 e0       	ldi	r25, 0x03	; 3
    14b4:	0e 94 44 26 	call	0x4c88	; 0x4c88 <nrk_time_compact_nanos>

  //    printf( "nw2=%lu %lu\r\n",_tdma_next_wakeup.secs,_tdma_next_wakeup.nano_secs/NANOS_PER_MS);
      nrk_wait_until (_tdma_next_wakeup);
    14b8:	20 91 d9 03 	lds	r18, 0x03D9
    14bc:	30 91 da 03 	lds	r19, 0x03DA
    14c0:	40 91 db 03 	lds	r20, 0x03DB
    14c4:	50 91 dc 03 	lds	r21, 0x03DC
    14c8:	60 91 dd 03 	lds	r22, 0x03DD
    14cc:	70 91 de 03 	lds	r23, 0x03DE
    14d0:	80 91 df 03 	lds	r24, 0x03DF
    14d4:	90 91 e0 03 	lds	r25, 0x03E0
    14d8:	0e 94 ff 24 	call	0x49fe	; 0x49fe <nrk_wait_until>

      // Transmit on slot
      if (tx_data_ready == 1) {
    14dc:	80 91 04 04 	lds	r24, 0x0404
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	b1 f4       	brne	.+44     	; 0x1510 <tdma_nw_task+0x4bc>
        tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = slot & 0xff;    // slot
    14e4:	e0 91 34 07 	lds	r30, 0x0734
    14e8:	f0 91 35 07 	lds	r31, 0x0735
    14ec:	60 82       	st	Z, r6
        tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = slot >> 8;
    14ee:	e0 91 34 07 	lds	r30, 0x0734
    14f2:	f0 91 35 07 	lds	r31, 0x0735
    14f6:	71 82       	std	Z+1, r7	; 0x01
        tdma_rfTxInfo.destAddr = 0xffff;
    14f8:	30 92 32 07 	sts	0x0732, r3
    14fc:	20 92 31 07 	sts	0x0731, r2
        tdma_rfTxInfo.ackRequest = 0;
    1500:	10 92 37 07 	sts	0x0737, r1
        tdma_rfTxInfo.cca = 0;
    1504:	10 92 36 07 	sts	0x0736, r1
	rf_power_up();
    1508:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <rf_power_up>
        _tdma_tx ();
    150c:	0e 94 ab 07 	call	0xf56	; 0xf56 <_tdma_tx>
      }

      // Sleep until end of cycle 
	rf_rx_off ();
    1510:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <rf_rx_off>
	rf_power_down();
    1514:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <rf_power_down>
      for (tmp = 0; tmp < ((uint16_t)tdma_slots_per_cycle - (uint16_t)slot); tmp++)
    1518:	41 2c       	mov	r4, r1
    151a:	51 2c       	mov	r5, r1
    151c:	80 91 00 04 	lds	r24, 0x0400
    1520:	90 91 01 04 	lds	r25, 0x0401
    1524:	86 19       	sub	r24, r6
    1526:	97 09       	sbc	r25, r7
    1528:	48 16       	cp	r4, r24
    152a:	59 06       	cpc	r5, r25
    152c:	40 f5       	brcc	.+80     	; 0x157e <tdma_nw_task+0x52a>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
    152e:	80 90 e1 03 	lds	r8, 0x03E1
    1532:	90 90 e2 03 	lds	r9, 0x03E2
    1536:	a0 90 e3 03 	lds	r10, 0x03E3
    153a:	b0 90 e4 03 	lds	r11, 0x03E4
    153e:	c0 90 e5 03 	lds	r12, 0x03E5
    1542:	d0 90 e6 03 	lds	r13, 0x03E6
    1546:	e0 90 e7 03 	lds	r14, 0x03E7
    154a:	f0 90 e8 03 	lds	r15, 0x03E8
    154e:	00 91 d9 03 	lds	r16, 0x03D9
    1552:	10 91 da 03 	lds	r17, 0x03DA
    1556:	20 91 db 03 	lds	r18, 0x03DB
    155a:	30 91 dc 03 	lds	r19, 0x03DC
    155e:	40 91 dd 03 	lds	r20, 0x03DD
    1562:	50 91 de 03 	lds	r21, 0x03DE
    1566:	60 91 df 03 	lds	r22, 0x03DF
    156a:	70 91 e0 03 	lds	r23, 0x03E0
    156e:	89 ed       	ldi	r24, 0xD9	; 217
    1570:	93 e0       	ldi	r25, 0x03	; 3
    1572:	0e 94 65 26 	call	0x4cca	; 0x4cca <nrk_time_add>
      }

      // Sleep until end of cycle 
	rf_rx_off ();
	rf_power_down();
      for (tmp = 0; tmp < ((uint16_t)tdma_slots_per_cycle - (uint16_t)slot); tmp++)
    1576:	2f ef       	ldi	r18, 0xFF	; 255
    1578:	42 1a       	sub	r4, r18
    157a:	52 0a       	sbc	r5, r18
    157c:	cf cf       	rjmp	.-98     	; 0x151c <tdma_nw_task+0x4c8>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
      nrk_time_compact_nanos (&_tdma_next_wakeup);
    157e:	89 ed       	ldi	r24, 0xD9	; 217
    1580:	93 e0       	ldi	r25, 0x03	; 3
    1582:	0e 94 44 26 	call	0x4c88	; 0x4c88 <nrk_time_compact_nanos>
      nrk_wait_until (_tdma_next_wakeup);
    1586:	20 91 d9 03 	lds	r18, 0x03D9
    158a:	30 91 da 03 	lds	r19, 0x03DA
    158e:	40 91 db 03 	lds	r20, 0x03DB
    1592:	50 91 dc 03 	lds	r21, 0x03DC
    1596:	60 91 dd 03 	lds	r22, 0x03DD
    159a:	70 91 de 03 	lds	r23, 0x03DE
    159e:	80 91 df 03 	lds	r24, 0x03DF
    15a2:	90 91 e0 03 	lds	r25, 0x03E0
    15a6:	0e 94 ff 24 	call	0x49fe	; 0x49fe <nrk_wait_until>
      slot = 0;
      while(!tdma_is_enabled) nrk_wait_until_next_period();
    15aa:	80 91 fa 03 	lds	r24, 0x03FA
    15ae:	81 11       	cpse	r24, r1
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <tdma_nw_task+0x564>
    15b2:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_wait_until_next_period>
    15b6:	f9 cf       	rjmp	.-14     	; 0x15aa <tdma_nw_task+0x556>
		
      slot=0;
    15b8:	61 2c       	mov	r6, r1
    15ba:	71 2c       	mov	r7, r1
    15bc:	66 cd       	rjmp	.-1332   	; 0x108a <tdma_nw_task+0x36>
	      	//rf_rx_on();
	    }
	    if(v!=NRK_ERROR)
	    {
	    // set TTL to TTL_MAX from gateway
	    tdma_ttl = tdma_rfRxInfo.pPayload[TDMA_TTL]>>4;
    15be:	82 85       	ldd	r24, Z+10	; 0x0a
    15c0:	82 95       	swap	r24
    15c2:	8f 70       	andi	r24, 0x0F	; 15
    15c4:	80 93 05 04 	sts	0x0405, r24
            tdma_slots_per_cycle =
              (tdma_rfRxInfo.
               pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
    15c8:	81 85       	ldd	r24, Z+9	; 0x09
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	98 2f       	mov	r25, r24
    15ce:	88 27       	eor	r24, r24
    15d0:	20 85       	ldd	r18, Z+8	; 0x08
    15d2:	82 2b       	or	r24, r18
	    }
	    if(v!=NRK_ERROR)
	    {
	    // set TTL to TTL_MAX from gateway
	    tdma_ttl = tdma_rfRxInfo.pPayload[TDMA_TTL]>>4;
            tdma_slots_per_cycle =
    15d4:	90 93 01 04 	sts	0x0401, r25
    15d8:	80 93 00 04 	sts	0x0400, r24
              (tdma_rfRxInfo.
               pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
              pPayload[TDMA_CYCLE_SIZE_LOW];
            tdma_slot_len_ms = tdma_rfRxInfo.pPayload[TDMA_SLOT_SIZE];
    15dc:	a3 85       	ldd	r26, Z+11	; 0x0b
    15de:	8a 2f       	mov	r24, r26
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	90 93 03 04 	sts	0x0403, r25
    15e6:	80 93 02 04 	sts	0x0402, r24
            _tdma_slot_time.nano_secs = tdma_slot_len_ms * NANOS_PER_MS;
    15ea:	dc 01       	movw	r26, r24
    15ec:	20 e4       	ldi	r18, 0x40	; 64
    15ee:	32 e4       	ldi	r19, 0x42	; 66
    15f0:	4f e0       	ldi	r20, 0x0F	; 15
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__muluhisi3>
    15f8:	60 93 e5 03 	sts	0x03E5, r22
    15fc:	70 93 e6 03 	sts	0x03E6, r23
    1600:	80 93 e7 03 	sts	0x03E7, r24
    1604:	90 93 e8 03 	sts	0x03E8, r25
            _tdma_slot_time.secs = 0;
    1608:	10 92 e1 03 	sts	0x03E1, r1
    160c:	10 92 e2 03 	sts	0x03E2, r1
    1610:	10 92 e3 03 	sts	0x03E3, r1
    1614:	10 92 e4 03 	sts	0x03E4, r1
    1618:	52 ce       	rjmp	.-860    	; 0x12be <tdma_nw_task+0x26a>

0000161a <tdma_task_config>:
}


void tdma_task_config ()
{
  nrk_task_set_entry_function (&tdma_task, tdma_nw_task);
    161a:	6a e2       	ldi	r22, 0x2A	; 42
    161c:	78 e0       	ldi	r23, 0x08	; 8
    161e:	82 ef       	ldi	r24, 0xF2	; 242
    1620:	95 e0       	ldi	r25, 0x05	; 5
    1622:	0e 94 59 30 	call	0x60b2	; 0x60b2 <nrk_task_set_entry_function>
  nrk_task_set_stk (&tdma_task, tdma_task_stack, TDMA_STACKSIZE);
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	51 e0       	ldi	r21, 0x01	; 1
    162a:	62 ef       	ldi	r22, 0xF2	; 242
    162c:	74 e0       	ldi	r23, 0x04	; 4
    162e:	82 ef       	ldi	r24, 0xF2	; 242
    1630:	95 e0       	ldi	r25, 0x05	; 5
    1632:	0e 94 5d 30 	call	0x60ba	; 0x60ba <nrk_task_set_stk>
  tdma_task.prio = TDMA_TASK_PRIORITY;
    1636:	e2 ef       	ldi	r30, 0xF2	; 242
    1638:	f5 e0       	ldi	r31, 0x05	; 5
    163a:	84 e1       	ldi	r24, 0x14	; 20
    163c:	80 87       	std	Z+8, r24	; 0x08
  tdma_task.FirstActivation = TRUE;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	87 83       	std	Z+7, r24	; 0x07
  tdma_task.Type = BASIC_TASK;
    1642:	81 87       	std	Z+9, r24	; 0x09
  tdma_task.SchType = PREEMPTIVE;
    1644:	82 87       	std	Z+10, r24	; 0x0a
  tdma_task.period.secs = 1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a0 e0       	ldi	r26, 0x00	; 0
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	83 87       	std	Z+11, r24	; 0x0b
    1650:	94 87       	std	Z+12, r25	; 0x0c
    1652:	a5 87       	std	Z+13, r26	; 0x0d
    1654:	b6 87       	std	Z+14, r27	; 0x0e
  tdma_task.period.nano_secs = 0; // 20 * NANOS_PER_MS;
    1656:	17 86       	std	Z+15, r1	; 0x0f
    1658:	10 8a       	std	Z+16, r1	; 0x10
    165a:	11 8a       	std	Z+17, r1	; 0x11
    165c:	12 8a       	std	Z+18, r1	; 0x12
  tdma_task.cpu_reserve.secs = PCF_TDMA_TIMEOUT;       // bmac reserve , 0 to disable
    165e:	87 e0       	ldi	r24, 0x07	; 7
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a0 e0       	ldi	r26, 0x00	; 0
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	83 8b       	std	Z+19, r24	; 0x13
    1668:	94 8b       	std	Z+20, r25	; 0x14
    166a:	a5 8b       	std	Z+21, r26	; 0x15
    166c:	b6 8b       	std	Z+22, r27	; 0x16
  tdma_task.cpu_reserve.nano_secs = 0;
    166e:	17 8a       	std	Z+23, r1	; 0x17
    1670:	10 8e       	std	Z+24, r1	; 0x18
    1672:	11 8e       	std	Z+25, r1	; 0x19
    1674:	12 8e       	std	Z+26, r1	; 0x1a
  tdma_task.offset.secs = 0;
    1676:	13 8e       	std	Z+27, r1	; 0x1b
    1678:	14 8e       	std	Z+28, r1	; 0x1c
    167a:	15 8e       	std	Z+29, r1	; 0x1d
    167c:	16 8e       	std	Z+30, r1	; 0x1e
  tdma_task.offset.nano_secs = 0;
    167e:	17 8e       	std	Z+31, r1	; 0x1f
    1680:	10 a2       	std	Z+32, r1	; 0x20
    1682:	11 a2       	std	Z+33, r1	; 0x21
    1684:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&tdma_task);
    1686:	cf 01       	movw	r24, r30
    1688:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <nrk_activate_task>

0000168c <slip_init>:
static  nrk_sig_mask_t sm;

int8_t slip_init (FILE * device_in, FILE * device_out, bool echo,
                  uint8_t delay)
{
  g_dv_in = device_in;
    168c:	90 93 b3 0a 	sts	0x0AB3, r25
    1690:	80 93 b2 0a 	sts	0x0AB2, r24
  g_dv_out = device_out;
    1694:	70 93 ae 0a 	sts	0x0AAE, r23
    1698:	60 93 ad 0a 	sts	0x0AAD, r22
  g_echo = echo;
    169c:	40 93 b1 0a 	sts	0x0AB1, r20
  g_delay = delay;
    16a0:	20 93 ac 0a 	sts	0x0AAC, r18


#ifndef UART_PCP_CEILING
#define UART_PCP_CEILING       255
#endif
  slip_tx_sem = nrk_sem_create (1, UART_PCP_CEILING);
    16a4:	6f ef       	ldi	r22, 0xFF	; 255
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <nrk_sem_create>
    16ac:	90 93 b0 0a 	sts	0x0AB0, r25
    16b0:	80 93 af 0a 	sts	0x0AAF, r24
  if (slip_tx_sem == NRK_ERROR)
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	31 f4       	brne	.+12     	; 0x16c4 <slip_init+0x38>
    nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    16b8:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <nrk_get_pid>
    16bc:	68 2f       	mov	r22, r24
    16be:	8f e0       	ldi	r24, 0x0F	; 15
    16c0:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>

  _slip_started = NRK_OK;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	80 93 10 02 	sts	0x0210, r24
  return NRK_OK;
}
    16ca:	08 95       	ret

000016cc <put_byte>:

void put_byte (uint8_t c)
{
    16cc:	cf 93       	push	r28
    16ce:	c8 2f       	mov	r28, r24
  if (g_delay > 0)
    16d0:	80 91 ac 0a 	lds	r24, 0x0AAC
    16d4:	88 23       	and	r24, r24
    16d6:	51 f0       	breq	.+20     	; 0x16ec <put_byte+0x20>
    nrk_spin_wait_us (g_delay * 1000);
    16d8:	28 ee       	ldi	r18, 0xE8	; 232
    16da:	33 e0       	ldi	r19, 0x03	; 3
    16dc:	48 2f       	mov	r20, r24
    16de:	42 9f       	mul	r20, r18
    16e0:	c0 01       	movw	r24, r0
    16e2:	43 9f       	mul	r20, r19
    16e4:	90 0d       	add	r25, r0
    16e6:	11 24       	eor	r1, r1
    16e8:	0e 94 57 2c 	call	0x58ae	; 0x58ae <nrk_spin_wait_us>
  fputc (c, g_dv_out);
    16ec:	60 91 ad 0a 	lds	r22, 0x0AAD
    16f0:	70 91 ae 0a 	lds	r23, 0x0AAE
    16f4:	8c 2f       	mov	r24, r28
    16f6:	90 e0       	ldi	r25, 0x00	; 0
  if (g_echo) {
    // Not IMPLEMENTED
  }
}
    16f8:	cf 91       	pop	r28

void put_byte (uint8_t c)
{
  if (g_delay > 0)
    nrk_spin_wait_us (g_delay * 1000);
  fputc (c, g_dv_out);
    16fa:	0c 94 e3 33 	jmp	0x67c6	; 0x67c6 <fputc>

000016fe <get_byte>:
}

uint8_t get_byte (void)
{
//  return getchar ();
  return fgetc (g_dv_in);
    16fe:	80 91 b2 0a 	lds	r24, 0x0AB2
    1702:	90 91 b3 0a 	lds	r25, 0x0AB3
    1706:	0e 94 a5 33 	call	0x674a	; 0x674a <fgetc>
}
    170a:	08 95       	ret

0000170c <slip_tx>:

int8_t slip_tx (uint8_t * buf, uint8_t size)
{
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	c8 2f       	mov	r28, r24
    171a:	e9 2e       	mov	r14, r25
    171c:	d6 2f       	mov	r29, r22
  int8_t v;
  uint8_t checksum;

// Make sure size is less than 128 so it doesn't act as a control
// message
  if (size > 128) {
    171e:	61 38       	cpi	r22, 0x81	; 129
    1720:	10 f0       	brcs	.+4      	; 0x1726 <slip_tx+0x1a>
    _nrk_errno_set (3);
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	50 c0       	rjmp	.+160    	; 0x17c6 <slip_tx+0xba>
    return NRK_ERROR;
  }

  v = nrk_sem_pend (slip_tx_sem);
    1726:	80 91 af 0a 	lds	r24, 0x0AAF
    172a:	90 91 b0 0a 	lds	r25, 0x0AB0
    172e:	0e 94 2c 21 	call	0x4258	; 0x4258 <nrk_sem_pend>
  if (v == NRK_ERROR) {
    1732:	8f 3f       	cpi	r24, 0xFF	; 255
    1734:	31 f4       	brne	.+12     	; 0x1742 <slip_tx+0x36>
    nrk_kprintf (PSTR ("SLIP TX ERROR:  Access to semaphore failed\r\n"));
    1736:	8d e2       	ldi	r24, 0x2D	; 45
    1738:	93 e0       	ldi	r25, 0x03	; 3
    173a:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    _nrk_errno_set (1);
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	42 c0       	rjmp	.+132    	; 0x17c6 <slip_tx+0xba>
    return NRK_ERROR;
  }

// Send end to flush any accumulated data
  put_byte (END);
    1742:	80 ec       	ldi	r24, 0xC0	; 192
    1744:	0e 94 66 0b 	call	0x16cc	; 0x16cc <put_byte>
// Send the start byte
  put_byte (START);
    1748:	81 ec       	ldi	r24, 0xC1	; 193
    174a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <put_byte>
  put_byte (size);
    174e:	8d 2f       	mov	r24, r29
    1750:	0e 94 66 0b 	call	0x16cc	; 0x16cc <put_byte>
    1754:	fc 2e       	mov	r15, r28

  checksum = 0;

// Send payload and stuff bytes as needed
  for (i = 0; i < size; i++) {
    1756:	0c 2f       	mov	r16, r28
    1758:	1e 2d       	mov	r17, r14
  put_byte (END);
// Send the start byte
  put_byte (START);
  put_byte (size);

  checksum = 0;
    175a:	c0 e0       	ldi	r28, 0x00	; 0
    175c:	80 2f       	mov	r24, r16
    175e:	8f 19       	sub	r24, r15

// Send payload and stuff bytes as needed
  for (i = 0; i < size; i++) {
    1760:	8d 17       	cp	r24, r29
    1762:	e8 f4       	brcc	.+58     	; 0x179e <slip_tx+0x92>
    if (buf[i] == END )
    1764:	f8 01       	movw	r30, r16
    1766:	80 81       	ld	r24, Z
    1768:	80 3c       	cpi	r24, 0xC0	; 192
    176a:	41 f4       	brne	.+16     	; 0x177c <slip_tx+0x70>
	{
	// don't checksum values that do not appear in final buffer
      	put_byte (ESC);
    176c:	8b ed       	ldi	r24, 0xDB	; 219
    176e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <put_byte>
      	put_byte (ESC_END);
    1772:	8c ed       	ldi	r24, 0xDC	; 220
    1774:	0e 94 66 0b 	call	0x16cc	; 0x16cc <put_byte>
    	checksum += END;
    1778:	c0 54       	subi	r28, 0x40	; 64
    177a:	0e c0       	rjmp	.+28     	; 0x1798 <slip_tx+0x8c>
	}
    else if (buf[i] == ESC )
    177c:	8b 3d       	cpi	r24, 0xDB	; 219
    177e:	39 f4       	brne	.+14     	; 0x178e <slip_tx+0x82>
	{
	// don't checksum values that do not appear in final buffer
      	put_byte (ESC);
    1780:	0e 94 66 0b 	call	0x16cc	; 0x16cc <put_byte>
      	put_byte (ESC_ESC);
    1784:	8d ed       	ldi	r24, 0xDD	; 221
    1786:	0e 94 66 0b 	call	0x16cc	; 0x16cc <put_byte>
    	checksum += ESC;
    178a:	c5 52       	subi	r28, 0x25	; 37
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <slip_tx+0x8c>
	}
    else 
	{
	put_byte (buf[i]);
    178e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <put_byte>
    	checksum += buf[i];
    1792:	f8 01       	movw	r30, r16
    1794:	80 81       	ld	r24, Z
    1796:	c8 0f       	add	r28, r24
    1798:	0f 5f       	subi	r16, 0xFF	; 255
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	df cf       	rjmp	.-66     	; 0x175c <slip_tx+0x50>

// Make sure checksum is less than 128 so it doesn't act as a control
// message
  checksum &= 0x7F;
  // Send the end byte
  put_byte (checksum);
    179e:	8c 2f       	mov	r24, r28
    17a0:	8f 77       	andi	r24, 0x7F	; 127
    17a2:	0e 94 66 0b 	call	0x16cc	; 0x16cc <put_byte>
  put_byte (END);
    17a6:	80 ec       	ldi	r24, 0xC0	; 192
    17a8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <put_byte>
  v = nrk_sem_post (slip_tx_sem);
    17ac:	80 91 af 0a 	lds	r24, 0x0AAF
    17b0:	90 91 b0 0a 	lds	r25, 0x0AB0
    17b4:	0e 94 8a 21 	call	0x4314	; 0x4314 <nrk_sem_post>
  if (v == NRK_ERROR) {
    17b8:	8f 3f       	cpi	r24, 0xFF	; 255
    17ba:	49 f4       	brne	.+18     	; 0x17ce <slip_tx+0xc2>
    nrk_kprintf (PSTR ("SLIP TX ERROR:  Release of semaphore failed\r\n"));
    17bc:	8f ef       	ldi	r24, 0xFF	; 255
    17be:	92 e0       	ldi	r25, 0x02	; 2
    17c0:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    _nrk_errno_set (2);
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	0e 94 c6 1b 	call	0x378c	; 0x378c <_nrk_errno_set>
    return NRK_ERROR;
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <slip_tx+0xc4>
  }
  return NRK_OK;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
}
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	08 95       	ret

000017de <slip_started>:

int8_t slip_started ()
{
  return _slip_started;
}
    17de:	80 91 10 02 	lds	r24, 0x0210
    17e2:	08 95       	ret

000017e4 <slip_rx>:

int8_t slip_rx (uint8_t * buf, uint8_t max_len)
{
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	7c 01       	movw	r14, r24
    17fe:	d6 2e       	mov	r13, r22
  uint8_t c;
  uint8_t index, last_c;
  uint8_t received, checksum, size;
  int8_t v;

my_uart_rx_signal=nrk_uart_rx_signal_get();
    1800:	0e 94 53 12 	call	0x24a6	; 0x24a6 <nrk_uart_rx_signal_get>
    1804:	80 93 1a 06 	sts	0x061A, r24
// Register your task to wakeup on RX Data
  if (my_uart_rx_signal == NRK_ERROR)
    1808:	8f 3f       	cpi	r24, 0xFF	; 255
    180a:	21 f4       	brne	.+8      	; 0x1814 <slip_rx+0x30>
    nrk_kprintf (PSTR ("SLIP RX error: Get Signal\r\n"));
    180c:	83 ee       	ldi	r24, 0xE3	; 227
    180e:	92 e0       	ldi	r25, 0x02	; 2
    1810:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
  
   v=nrk_signal_register (my_uart_rx_signal);
    1814:	80 91 1a 06 	lds	r24, 0x061A
    1818:	0e 94 05 20 	call	0x400a	; 0x400a <nrk_signal_register>
   if(v==NRK_ERROR) nrk_kprintf( PSTR( "SLIP RX error: nrk_signal_register\r\n" ));
    181c:	8f 3f       	cpi	r24, 0xFF	; 255
    181e:	21 f4       	brne	.+8      	; 0x1828 <slip_rx+0x44>
    1820:	8e eb       	ldi	r24, 0xBE	; 190
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>

  received = 0;
  if( nrk_uart_data_ready (NRK_DEFAULT_UART) == 0) sm = nrk_event_wait (SIG (my_uart_rx_signal));
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	0e 94 55 12 	call	0x24aa	; 0x24aa <nrk_uart_data_ready>
    182e:	81 11       	cpse	r24, r1
    1830:	19 c0       	rjmp	.+50     	; 0x1864 <slip_rx+0x80>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e0       	ldi	r26, 0x00	; 0
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	00 90 1a 06 	lds	r0, 0x061A
    1842:	04 c0       	rjmp	.+8      	; 0x184c <slip_rx+0x68>
    1844:	66 0f       	add	r22, r22
    1846:	77 1f       	adc	r23, r23
    1848:	88 1f       	adc	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	d2 f7       	brpl	.-12     	; 0x1844 <slip_rx+0x60>
    1850:	0e 94 a8 20 	call	0x4150	; 0x4150 <nrk_event_wait>
    1854:	60 93 16 06 	sts	0x0616, r22
    1858:	70 93 17 06 	sts	0x0617, r23
    185c:	80 93 18 06 	sts	0x0618, r24
    1860:	90 93 19 06 	sts	0x0619, r25
      //c = getchar ();
      c = get_byte();
      if (c == START)
        goto start;
    }
    if( nrk_uart_data_ready (NRK_DEFAULT_UART) == 0) sm = nrk_event_wait (SIG (my_uart_rx_signal));
    1864:	81 2c       	mov	r8, r1
    1866:	91 2c       	mov	r9, r1
    1868:	54 01       	movw	r10, r8
    186a:	83 94       	inc	r8
  received = 0;
  if( nrk_uart_data_ready (NRK_DEFAULT_UART) == 0) sm = nrk_event_wait (SIG (my_uart_rx_signal));
// Wait until you receive the packet start (START) command
  while (1) {
    // Wait for UART signal
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	0e 94 55 12 	call	0x24aa	; 0x24aa <nrk_uart_data_ready>
    1872:	88 23       	and	r24, r24
    1874:	79 f0       	breq	.+30     	; 0x1894 <slip_rx+0xb0>
      // Read Character
      //c = getchar ();
      c = get_byte();
    1876:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <get_byte>
      if (c == START)
    187a:	81 3c       	cpi	r24, 0xC1	; 193
    187c:	b9 f7       	brne	.-18     	; 0x186c <slip_rx+0x88>
    //c = getchar ();
    if (c == START)
      break;
  }
  start:
  size = get_byte ();
    187e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <get_byte>
    1882:	c8 2e       	mov	r12, r24
  checksum = 0;
    1884:	10 e0       	ldi	r17, 0x00	; 0
    nrk_kprintf (PSTR ("SLIP RX error: Get Signal\r\n"));
  
   v=nrk_signal_register (my_uart_rx_signal);
   if(v==NRK_ERROR) nrk_kprintf( PSTR( "SLIP RX error: nrk_signal_register\r\n" ));

  received = 0;
    1886:	c0 e0       	ldi	r28, 0x00	; 0
    //c = getchar ();
    if (c == START)
      break;
  }
  start:
  size = get_byte ();
    1888:	01 ec       	ldi	r16, 0xC1	; 193
  checksum = 0;
  while (1) {
    if( nrk_uart_data_ready (NRK_DEFAULT_UART) == 0) sm = nrk_event_wait (SIG (my_uart_rx_signal));
    188a:	81 2c       	mov	r8, r1
    188c:	91 2c       	mov	r9, r1
    188e:	54 01       	movw	r10, r8
    1890:	83 94       	inc	r8
    1892:	2b c0       	rjmp	.+86     	; 0x18ea <slip_rx+0x106>
      //c = getchar ();
      c = get_byte();
      if (c == START)
        goto start;
    }
    if( nrk_uart_data_ready (NRK_DEFAULT_UART) == 0) sm = nrk_event_wait (SIG (my_uart_rx_signal));
    1894:	0e 94 55 12 	call	0x24aa	; 0x24aa <nrk_uart_data_ready>
    1898:	81 11       	cpse	r24, r1
    189a:	ed cf       	rjmp	.-38     	; 0x1876 <slip_rx+0x92>
    189c:	c5 01       	movw	r24, r10
    189e:	b4 01       	movw	r22, r8
    18a0:	00 90 1a 06 	lds	r0, 0x061A
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <slip_rx+0xca>
    18a6:	66 0f       	add	r22, r22
    18a8:	77 1f       	adc	r23, r23
    18aa:	88 1f       	adc	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	0a 94       	dec	r0
    18b0:	d2 f7       	brpl	.-12     	; 0x18a6 <slip_rx+0xc2>
    18b2:	0e 94 a8 20 	call	0x4150	; 0x4150 <nrk_event_wait>
    18b6:	60 93 16 06 	sts	0x0616, r22
    18ba:	70 93 17 06 	sts	0x0617, r23
    18be:	80 93 18 06 	sts	0x0618, r24
    18c2:	90 93 19 06 	sts	0x0619, r25
    18c6:	d7 cf       	rjmp	.-82     	; 0x1876 <slip_rx+0x92>
  while (1) {
    if( nrk_uart_data_ready (NRK_DEFAULT_UART) == 0) sm = nrk_event_wait (SIG (my_uart_rx_signal));
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
      last_c = c;
      //c = getchar ();
      c = get_byte();
    18c8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <get_byte>
    18cc:	d8 2f       	mov	r29, r24

      // handle bytestuffing if necessary
      switch (c) {
    18ce:	80 3c       	cpi	r24, 0xC0	; 192
    18d0:	39 f1       	breq	.+78     	; 0x1920 <slip_rx+0x13c>
    18d2:	8b 3d       	cpi	r24, 0xDB	; 219
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <slip_rx+0xf4>
    18d6:	45 c0       	rjmp	.+138    	; 0x1962 <slip_rx+0x17e>
        }

        // here we fall into the default handler and let
        // it store the character for us
      default:
        if (received < max_len && received < size) {
    18d8:	cd 15       	cp	r28, r13
    18da:	08 f4       	brcc	.+2      	; 0x18de <slip_rx+0xfa>
    18dc:	6c c0       	rjmp	.+216    	; 0x19b6 <slip_rx+0x1d2>
          buf[received++] = c;
    18de:	0d 2f       	mov	r16, r29
  start:
  size = get_byte ();
  checksum = 0;
  while (1) {
    if( nrk_uart_data_ready (NRK_DEFAULT_UART) == 0) sm = nrk_event_wait (SIG (my_uart_rx_signal));
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	0e 94 55 12 	call	0x24aa	; 0x24aa <nrk_uart_data_ready>
    18e6:	81 11       	cpse	r24, r1
    18e8:	ef cf       	rjmp	.-34     	; 0x18c8 <slip_rx+0xe4>
  }
  start:
  size = get_byte ();
  checksum = 0;
  while (1) {
    if( nrk_uart_data_ready (NRK_DEFAULT_UART) == 0) sm = nrk_event_wait (SIG (my_uart_rx_signal));
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	0e 94 55 12 	call	0x24aa	; 0x24aa <nrk_uart_data_ready>
    18f0:	81 11       	cpse	r24, r1
    18f2:	f6 cf       	rjmp	.-20     	; 0x18e0 <slip_rx+0xfc>
    18f4:	c5 01       	movw	r24, r10
    18f6:	b4 01       	movw	r22, r8
    18f8:	00 90 1a 06 	lds	r0, 0x061A
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <slip_rx+0x122>
    18fe:	66 0f       	add	r22, r22
    1900:	77 1f       	adc	r23, r23
    1902:	88 1f       	adc	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	d2 f7       	brpl	.-12     	; 0x18fe <slip_rx+0x11a>
    190a:	0e 94 a8 20 	call	0x4150	; 0x4150 <nrk_event_wait>
    190e:	60 93 16 06 	sts	0x0616, r22
    1912:	70 93 17 06 	sts	0x0617, r23
    1916:	80 93 18 06 	sts	0x0618, r24
    191a:	90 93 19 06 	sts	0x0619, r25
    191e:	e0 cf       	rjmp	.-64     	; 0x18e0 <slip_rx+0xfc>
      last_c = c;
      //c = getchar ();
      c = get_byte();

      // handle bytestuffing if necessary
      switch (c) {
    1920:	d1 2f       	mov	r29, r17
        // data in the packet, ignore it. This is
        // meant to avoid bothering IP with all
        // the empty packets generated by the
        // duplicate END characters which are in
        // turn sent to try to detect line noise.
        if (received) {
    1922:	cc 23       	and	r28, r28
    1924:	29 f0       	breq	.+10     	; 0x1930 <slip_rx+0x14c>
	
          checksum &= 0x7f;
    1926:	df 77       	andi	r29, 0x7F	; 127
          if (last_c == checksum)
    1928:	0d 13       	cpse	r16, r29
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <slip_rx+0x14c>
            return received;
    192c:	8c 2f       	mov	r24, r28
    192e:	4d c0       	rjmp	.+154    	; 0x19ca <slip_rx+0x1e6>
        }
	nrk_kprintf( PSTR( "Checksum failed: ") );
    1930:	8c ea       	ldi	r24, 0xAC	; 172
    1932:	92 e0       	ldi	r25, 0x02	; 2
    1934:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
	printf( "%d %d %d\r\n",received, last_c, checksum );
    1938:	1f 92       	push	r1
    193a:	df 93       	push	r29
    193c:	1f 92       	push	r1
    193e:	0f 93       	push	r16
    1940:	1f 92       	push	r1
    1942:	cf 93       	push	r28
    1944:	89 ed       	ldi	r24, 0xD9	; 217
    1946:	92 e0       	ldi	r25, 0x02	; 2
    1948:	9f 93       	push	r25
    194a:	8f 93       	push	r24
    194c:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
        return NRK_ERROR;
    1950:	8d b7       	in	r24, 0x3d	; 61
    1952:	9e b7       	in	r25, 0x3e	; 62
    1954:	08 96       	adiw	r24, 0x08	; 8
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	9e bf       	out	0x3e, r25	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	8d bf       	out	0x3d, r24	; 61
    1960:	28 c0       	rjmp	.+80     	; 0x19b2 <slip_rx+0x1ce>
        // if it's the same code as an ESC character, wait
        // and get another character and then figure out
        // what to store in the packet based on that.
      case ESC:
        last_c = c;
 	if( nrk_uart_data_ready (NRK_DEFAULT_UART)==0 )	sm = nrk_event_wait (SIG (my_uart_rx_signal));
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	0e 94 55 12 	call	0x24aa	; 0x24aa <nrk_uart_data_ready>
    1968:	81 11       	cpse	r24, r1
    196a:	15 c0       	rjmp	.+42     	; 0x1996 <slip_rx+0x1b2>
    196c:	c5 01       	movw	r24, r10
    196e:	b4 01       	movw	r22, r8
    1970:	00 90 1a 06 	lds	r0, 0x061A
    1974:	04 c0       	rjmp	.+8      	; 0x197e <slip_rx+0x19a>
    1976:	66 0f       	add	r22, r22
    1978:	77 1f       	adc	r23, r23
    197a:	88 1f       	adc	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	d2 f7       	brpl	.-12     	; 0x1976 <slip_rx+0x192>
    1982:	0e 94 a8 20 	call	0x4150	; 0x4150 <nrk_event_wait>
    1986:	60 93 16 06 	sts	0x0616, r22
    198a:	70 93 17 06 	sts	0x0617, r23
    198e:	80 93 18 06 	sts	0x0618, r24
    1992:	90 93 19 06 	sts	0x0619, r25
        c = get_byte ();
    1996:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <get_byte>
        switch (c) {
    199a:	8c 3d       	cpi	r24, 0xDC	; 220
    199c:	41 f0       	breq	.+16     	; 0x19ae <slip_rx+0x1ca>
    199e:	8d 3d       	cpi	r24, 0xDD	; 221
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <slip_rx+0x1c0>
    19a2:	9a cf       	rjmp	.-204    	; 0x18d8 <slip_rx+0xf4>
          break;
        case ESC_END:
          c = END;
          break;
	default:
	  nrk_kprintf( PSTR("Malformed ESC sequence\r\n" ));
    19a4:	83 e9       	ldi	r24, 0x93	; 147
    19a6:	92 e0       	ldi	r25, 0x02	; 2
    19a8:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <slip_rx+0x1ce>
        switch (c) {
        case ESC_ESC:
          c = ESC;
          break;
        case ESC_END:
          c = END;
    19ae:	d0 ec       	ldi	r29, 0xC0	; 192
    19b0:	93 cf       	rjmp	.-218    	; 0x18d8 <slip_rx+0xf4>
          break;
	default:
	  nrk_kprintf( PSTR("Malformed ESC sequence\r\n" ));
	  // Return error if ESC before something other than ESC or END
	  return NRK_ERROR;
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	0a c0       	rjmp	.+20     	; 0x19ca <slip_rx+0x1e6>
        }

        // here we fall into the default handler and let
        // it store the character for us
      default:
        if (received < max_len && received < size) {
    19b6:	cc 15       	cp	r28, r12
    19b8:	08 f0       	brcs	.+2      	; 0x19bc <slip_rx+0x1d8>
    19ba:	91 cf       	rjmp	.-222    	; 0x18de <slip_rx+0xfa>
          buf[received++] = c;
    19bc:	f7 01       	movw	r30, r14
    19be:	ec 0f       	add	r30, r28
    19c0:	f1 1d       	adc	r31, r1
    19c2:	d0 83       	st	Z, r29
          checksum += c;
    19c4:	1d 0f       	add	r17, r29

        // here we fall into the default handler and let
        // it store the character for us
      default:
        if (received < max_len && received < size) {
          buf[received++] = c;
    19c6:	cf 5f       	subi	r28, 0xFF	; 255
    19c8:	8a cf       	rjmp	.-236    	; 0x18de <slip_rx+0xfa>
      }
    }
  }

  return 0;
}
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	08 95       	ret

000019e4 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    19e4:	90 91 41 01 	lds	r25, 0x0141
    19e8:	9f 71       	andi	r25, 0x1F	; 31
    19ea:	9f 31       	cpi	r25, 0x1F	; 31
    19ec:	d9 f3       	breq	.-10     	; 0x19e4 <rf_cmd>
		continue;
	TRX_STATE = cmd;
    19ee:	80 93 42 01 	sts	0x0142, r24
    19f2:	08 95       	ret

000019f4 <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
    19f4:	80 93 1b 06 	sts	0x061B, r24
    19f8:	08 95       	ret

000019fa <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 93 ba 0a 	sts	0x0ABA, r24
    1a00:	08 95       	ret

00001a02 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    1a02:	10 92 ba 0a 	sts	0x0ABA, r1
    1a06:	08 95       	ret

00001a08 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1a08:	80 91 41 01 	lds	r24, 0x0141
    1a0c:	8f 71       	andi	r24, 0x1F	; 31
    1a0e:	8f 31       	cpi	r24, 0x1F	; 31
    1a10:	d9 f3       	breq	.-10     	; 0x1a08 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1a12:	80 91 41 01 	lds	r24, 0x0141
    1a16:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    1a18:	e1 f0       	breq	.+56     	; 0x1a52 <rf_power_down+0x4a>
    1a1a:	8f 30       	cpi	r24, 0x0F	; 15
    1a1c:	d1 f0       	breq	.+52     	; 0x1a52 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    1a1e:	80 91 41 01 	lds	r24, 0x0141
    1a22:	8f 71       	andi	r24, 0x1F	; 31
    1a24:	88 30       	cpi	r24, 0x08	; 8
    1a26:	31 f4       	brne	.+12     	; 0x1a34 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    1a28:	80 91 39 01 	lds	r24, 0x0139
    1a2c:	82 60       	ori	r24, 0x02	; 2
    1a2e:	80 93 39 01 	sts	0x0139, r24
    1a32:	0b c0       	rjmp	.+22     	; 0x1a4a <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    1a34:	88 e0       	ldi	r24, 0x08	; 8
    1a36:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    1a3a:	80 91 41 01 	lds	r24, 0x0141
    1a3e:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    1a40:	88 30       	cpi	r24, 0x08	; 8
    1a42:	d9 f7       	brne	.-10     	; 0x1a3a <rf_power_down+0x32>
    1a44:	f1 cf       	rjmp	.-30     	; 0x1a28 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    1a46:	8f 30       	cpi	r24, 0x0F	; 15
    1a48:	21 f0       	breq	.+8      	; 0x1a52 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    1a4a:	80 91 41 01 	lds	r24, 0x0141
    1a4e:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    1a50:	d1 f7       	brne	.-12     	; 0x1a46 <rf_power_down+0x3e>
    1a52:	08 95       	ret

00001a54 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1a54:	80 91 41 01 	lds	r24, 0x0141
    1a58:	8f 71       	andi	r24, 0x1F	; 31
    1a5a:	8f 31       	cpi	r24, 0x1F	; 31
    1a5c:	d9 f3       	breq	.-10     	; 0x1a54 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1a5e:	80 91 41 01 	lds	r24, 0x0141
    1a62:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <rf_power_up+0x16>
    1a66:	8f 30       	cpi	r24, 0x0F	; 15
    1a68:	51 f4       	brne	.+20     	; 0x1a7e <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    1a6a:	80 91 39 01 	lds	r24, 0x0139
    1a6e:	8d 7f       	andi	r24, 0xFD	; 253
    1a70:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    1a74:	80 91 41 01 	lds	r24, 0x0141
    1a78:	8f 71       	andi	r24, 0x1F	; 31
    1a7a:	88 30       	cpi	r24, 0x08	; 8
    1a7c:	d9 f7       	brne	.-10     	; 0x1a74 <rf_power_up+0x20>
    1a7e:	08 95       	ret

00001a80 <rf_pll_on>:
	TRX_STATE = cmd;
}

void rf_pll_on()
{
   rf_cmd(PLL_ON);
    1a80:	89 e0       	ldi	r24, 0x09	; 9
    1a82:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <rf_cmd>

00001a86 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    1a86:	e5 e4       	ldi	r30, 0x45	; 69
    1a88:	f1 e0       	ldi	r31, 0x01	; 1
    1a8a:	90 81       	ld	r25, Z
    1a8c:	90 7f       	andi	r25, 0xF0	; 240
    1a8e:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    1a90:	90 81       	ld	r25, Z
    1a92:	8f 70       	andi	r24, 0x0F	; 15
    1a94:	98 2b       	or	r25, r24
    1a96:	90 83       	st	Z, r25
    1a98:	08 95       	ret

00001a9a <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    1a9a:	e7 e5       	ldi	r30, 0x57	; 87
    1a9c:	f1 e0       	ldi	r31, 0x01	; 1
    1a9e:	80 81       	ld	r24, Z
    1aa0:	8d 7f       	andi	r24, 0xFD	; 253
    1aa2:	80 83       	st	Z, r24
    1aa4:	08 95       	ret

00001aa6 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    1aa6:	e7 e5       	ldi	r30, 0x57	; 87
    1aa8:	f1 e0       	ldi	r31, 0x01	; 1
    1aaa:	80 81       	ld	r24, Z
    1aac:	82 60       	ori	r24, 0x02	; 2
    1aae:	80 83       	st	Z, r24
    1ab0:	08 95       	ret

00001ab2 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    1ab2:	ee e6       	ldi	r30, 0x6E	; 110
    1ab4:	f1 e0       	ldi	r31, 0x01	; 1
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 7e       	andi	r24, 0xEF	; 239
    1aba:	80 83       	st	Z, r24
    1abc:	08 95       	ret

00001abe <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1abe:	ee e6       	ldi	r30, 0x6E	; 110
    1ac0:	f1 e0       	ldi	r31, 0x01	; 1
    1ac2:	80 81       	ld	r24, Z
    1ac4:	80 61       	ori	r24, 0x10	; 16
    1ac6:	80 83       	st	Z, r24
    1ac8:	08 95       	ret

00001aca <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    1aca:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1ace:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    1ad2:	90 93 c4 0a 	sts	0x0AC4, r25
    1ad6:	80 93 c3 0a 	sts	0x0AC3, r24
    1ada:	08 95       	ret

00001adc <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1adc:	90 93 be 0a 	sts	0x0ABE, r25
    1ae0:	80 93 bd 0a 	sts	0x0ABD, r24
	PHY_CC_CCA &= ~(0x1F);
    1ae4:	e8 e4       	ldi	r30, 0x48	; 72
    1ae6:	f1 e0       	ldi	r31, 0x01	; 1
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 7e       	andi	r24, 0xE0	; 224
    1aec:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1aee:	80 81       	ld	r24, Z
    1af0:	68 2b       	or	r22, r24
    1af2:	60 83       	st	Z, r22
    1af4:	08 95       	ret

00001af6 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    1af6:	90 93 1f 06 	sts	0x061F, r25
    1afa:	80 93 1e 06 	sts	0x061E, r24
    1afe:	08 95       	ret

00001b00 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    1b00:	90 93 1d 06 	sts	0x061D, r25
    1b04:	80 93 1c 06 	sts	0x061C, r24
    1b08:	08 95       	ret

00001b0a <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	fc 01       	movw	r30, r24
    1b14:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    1b16:	80 e2       	ldi	r24, 0x20	; 32
    1b18:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    1b1c:	80 ec       	ldi	r24, 0xC0	; 192
    1b1e:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    1b22:	60 62       	ori	r22, 0x20	; 32
    1b24:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1b28:	85 ec       	ldi	r24, 0xC5	; 197
    1b2a:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    1b2e:	87 ea       	ldi	r24, 0xA7	; 167
    1b30:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    1b34:	80 e8       	ldi	r24, 0x80	; 128
    1b36:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    1b3a:	20 93 60 01 	sts	0x0160, r18
    1b3e:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    1b42:	40 93 62 01 	sts	0x0162, r20
    1b46:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1b4a:	c6 e4       	ldi	r28, 0x46	; 70
    1b4c:	d1 e0       	ldi	r29, 0x01	; 1
    1b4e:	08 81       	ld	r16, Y
    1b50:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1b52:	98 81       	ld	r25, Y
    1b54:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1b56:	30 2f       	mov	r19, r16
    1b58:	32 95       	swap	r19
    1b5a:	36 95       	lsr	r19
    1b5c:	37 70       	andi	r19, 0x07	; 7
    1b5e:	60 e4       	ldi	r22, 0x40	; 64
    1b60:	36 9f       	mul	r19, r22
    1b62:	80 01       	movw	r16, r0
    1b64:	11 24       	eor	r1, r1
    1b66:	22 95       	swap	r18
    1b68:	26 95       	lsr	r18
    1b6a:	23 70       	andi	r18, 0x03	; 3
    1b6c:	62 2f       	mov	r22, r18
    1b6e:	60 2b       	or	r22, r16
    1b70:	82 95       	swap	r24
    1b72:	86 95       	lsr	r24
    1b74:	83 70       	andi	r24, 0x03	; 3
    1b76:	70 e1       	ldi	r23, 0x10	; 16
    1b78:	87 9f       	mul	r24, r23
    1b7a:	90 01       	movw	r18, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1b80:	92 95       	swap	r25
    1b82:	96 95       	lsr	r25
    1b84:	93 70       	andi	r25, 0x03	; 3
    1b86:	84 e0       	ldi	r24, 0x04	; 4
    1b88:	98 9f       	mul	r25, r24
    1b8a:	b0 01       	movw	r22, r0
    1b8c:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1b8e:	62 2b       	or	r22, r18
    1b90:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1b94:	88 81       	ld	r24, Y
    1b96:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1b98:	92 95       	swap	r25
    1b9a:	96 95       	lsr	r25
    1b9c:	93 70       	andi	r25, 0x03	; 3
    1b9e:	39 2f       	mov	r19, r25
    1ba0:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1ba2:	98 2f       	mov	r25, r24
    1ba4:	92 95       	swap	r25
    1ba6:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1ba8:	93 2b       	or	r25, r19
    1baa:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    1bae:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Enable all radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    1bb2:	8f ef       	ldi	r24, 0xFF	; 255
    1bb4:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    1bb8:	cd eb       	ldi	r28, 0xBD	; 189
    1bba:	da e0       	ldi	r29, 0x0A	; 10
    1bbc:	f9 83       	std	Y+1, r31	; 0x01
    1bbe:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    1bc0:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    1bc2:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    1bc4:	5d 83       	std	Y+5, r21	; 0x05
    1bc6:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    1bc8:	bf 83       	std	Y+7, r27	; 0x07
    1bca:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    1bcc:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	80 93 d7 0a 	sts	0x0AD7, r24
   rx_ready = 0;
    1bd4:	10 92 ee 0a 	sts	0x0AEE, r1
   tx_done = 0;
    1bd8:	10 92 c6 0a 	sts	0x0AC6, r1

	use_glossy = 0;
    1bdc:	10 92 ba 0a 	sts	0x0ABA, r1

} // rf_init() 
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	08 95       	ret

00001bea <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    1bea:	86 e1       	ldi	r24, 0x16	; 22
    1bec:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <rf_cmd>

00001bf0 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    1bf0:	86 e1       	ldi	r24, 0x16	; 22
    1bf2:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <rf_cmd>

00001bf6 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
   rf_cmd(TRX_OFF);
    1bf6:	88 e0       	ldi	r24, 0x08	; 8
    1bf8:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <rf_cmd>
   rx_ready = 0;
    1bfc:	10 92 ee 0a 	sts	0x0AEE, r1
    1c00:	08 95       	ret

00001c02 <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	fc 01       	movw	r30, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    1c0c:	80 91 d7 0a 	lds	r24, 0x0AD7
    1c10:	81 11       	cpse	r24, r1
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <rf_tx_packet+0x16>
		return NRK_ERROR;
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
    1c16:	ab c0       	rjmp	.+342    	; 0x1d6e <rf_tx_packet+0x16c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    1c18:	26 81       	ldd	r18, Z+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    1c1a:	80 91 bf 0a 	lds	r24, 0x0ABF
    1c1e:	8f 5f       	subi	r24, 0xFF	; 255
    1c20:	80 93 bf 0a 	sts	0x0ABF, r24
	machead->fcf = fcf;
    1c24:	90 91 81 01 	lds	r25, 0x0181
    1c28:	90 7e       	andi	r25, 0xE0	; 224
    1c2a:	91 60       	ori	r25, 0x01	; 1
    1c2c:	20 fb       	bst	r18, 0
    1c2e:	95 f9       	bld	r25, 5
    1c30:	9f 73       	andi	r25, 0x3F	; 63
    1c32:	90 64       	ori	r25, 0x40	; 64
    1c34:	90 93 81 01 	sts	0x0181, r25
    1c38:	88 e8       	ldi	r24, 0x88	; 136
    1c3a:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    1c3e:	80 91 ba 0a 	lds	r24, 0x0ABA
    1c42:	88 23       	and	r24, r24
    1c44:	61 f0       	breq	.+24     	; 0x1c5e <rf_tx_packet+0x5c>
		machead->seq_num = 0xFF;
    1c46:	8f ef       	ldi	r24, 0xFF	; 255
    1c48:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    1c4c:	8a ea       	ldi	r24, 0xAA	; 170
    1c4e:	9a ea       	ldi	r25, 0xAA	; 170
    1c50:	90 93 89 01 	sts	0x0189, r25
    1c54:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    1c58:	8f ef       	ldi	r24, 0xFF	; 255
    1c5a:	9f ef       	ldi	r25, 0xFF	; 255
    1c5c:	10 c0       	rjmp	.+32     	; 0x1c7e <rf_tx_packet+0x7c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    1c5e:	80 91 bf 0a 	lds	r24, 0x0ABF
    1c62:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    1c66:	20 91 61 01 	lds	r18, 0x0161
    1c6a:	80 91 60 01 	lds	r24, 0x0160
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	92 2b       	or	r25, r18
    1c72:	90 93 89 01 	sts	0x0189, r25
    1c76:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	90 93 87 01 	sts	0x0187, r25
    1c82:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    1c86:	20 91 63 01 	lds	r18, 0x0163
    1c8a:	80 91 62 01 	lds	r24, 0x0162
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	92 2b       	or	r25, r18
    1c92:	90 93 85 01 	sts	0x0185, r25
    1c96:	80 93 84 01 	sts	0x0184, r24
    1c9a:	8f 01       	movw	r16, r30
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    1c9c:	42 81       	ldd	r20, Z+2	; 0x02
    1c9e:	55 27       	eor	r21, r21
    1ca0:	47 fd       	sbrc	r20, 7
    1ca2:	50 95       	com	r21
    1ca4:	63 81       	ldd	r22, Z+3	; 0x03
    1ca6:	74 81       	ldd	r23, Z+4	; 0x04
    1ca8:	8a e8       	ldi	r24, 0x8A	; 138
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	0e 94 43 33 	call	0x6686	; 0x6686 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	85 5f       	subi	r24, 0xF5	; 245
    1cb6:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1cba:	80 91 41 01 	lds	r24, 0x0141
    1cbe:	d8 2f       	mov	r29, r24
    1cc0:	df 71       	andi	r29, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1cc2:	9f ef       	ldi	r25, 0xFF	; 255
    1cc4:	9d 0f       	add	r25, r29
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1cc6:	92 30       	cpi	r25, 0x02	; 2
    1cc8:	c0 f3       	brcs	.-16     	; 0x1cba <rf_tx_packet+0xb8>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1cca:	d1 31       	cpi	r29, 0x11	; 17
    1ccc:	b1 f3       	breq	.-20     	; 0x1cba <rf_tx_packet+0xb8>
    1cce:	d2 31       	cpi	r29, 0x12	; 18
    1cd0:	a1 f3       	breq	.-24     	; 0x1cba <rf_tx_packet+0xb8>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1cd2:	df 31       	cpi	r29, 0x1F	; 31
    1cd4:	91 f3       	breq	.-28     	; 0x1cba <rf_tx_packet+0xb8>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1cd6:	98 ef       	ldi	r25, 0xF8	; 248
    1cd8:	9d 0f       	add	r25, r29
    1cda:	92 30       	cpi	r25, 0x02	; 2
    1cdc:	20 f0       	brcs	.+8      	; 0x1ce6 <rf_tx_packet+0xe4>
    1cde:	8f 70       	andi	r24, 0x0F	; 15
    1ce0:	86 30       	cpi	r24, 0x06	; 6
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <rf_tx_packet+0xe4>
    1ce4:	97 cf       	rjmp	.-210    	; 0x1c14 <rf_tx_packet+0x12>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    1ce6:	86 e1       	ldi	r24, 0x16	; 22
    1ce8:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1cec:	f8 01       	movw	r30, r16
    1cee:	85 81       	ldd	r24, Z+5	; 0x05
    1cf0:	81 11       	cpse	r24, r1
    1cf2:	0b c0       	rjmp	.+22     	; 0x1d0a <rf_tx_packet+0x108>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    1cf4:	89 e0       	ldi	r24, 0x09	; 9
    1cf6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <rf_cmd>
	if(pRTI->ackRequest)
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	86 81       	ldd	r24, Z+6	; 0x06
    1cfe:	88 23       	and	r24, r24
    1d00:	91 f0       	breq	.+36     	; 0x1d26 <rf_tx_packet+0x124>
		rf_cmd(TX_ARET_ON);
    1d02:	89 e1       	ldi	r24, 0x19	; 25
    1d04:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <rf_cmd>
    1d08:	0e c0       	rjmp	.+28     	; 0x1d26 <rf_tx_packet+0x124>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    1d0a:	80 91 48 01 	lds	r24, 0x0148
    1d0e:	80 68       	ori	r24, 0x80	; 128
    1d10:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1d14:	80 91 41 01 	lds	r24, 0x0141
    1d18:	87 ff       	sbrs	r24, 7
    1d1a:	fc cf       	rjmp	.-8      	; 0x1d14 <rf_tx_packet+0x112>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    1d1c:	80 91 41 01 	lds	r24, 0x0141
    1d20:	86 ff       	sbrs	r24, 6
    1d22:	78 cf       	rjmp	.-272    	; 0x1c14 <rf_tx_packet+0x12>
    1d24:	e7 cf       	rjmp	.-50     	; 0x1cf4 <rf_tx_packet+0xf2>
	
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

   tx_done = 0;
    1d26:	10 92 c6 0a 	sts	0x0AC6, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <rf_cmd>
   for(i=0; (i<65000) && !tx_done; i++){
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	20 91 c6 0a 	lds	r18, 0x0AC6
    1d38:	21 11       	cpse	r18, r1
    1d3a:	05 c0       	rjmp	.+10     	; 0x1d46 <rf_tx_packet+0x144>
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	88 3e       	cpi	r24, 0xE8	; 232
    1d40:	fd ef       	ldi	r31, 0xFD	; 253
    1d42:	9f 07       	cpc	r25, r31
    1d44:	b9 f7       	brne	.-18     	; 0x1d34 <rf_tx_packet+0x132>
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    1d46:	f8 01       	movw	r30, r16
    1d48:	26 81       	ldd	r18, Z+6	; 0x06
    1d4a:	22 23       	and	r18, r18
    1d4c:	31 f0       	breq	.+12     	; 0x1d5a <rf_tx_packet+0x158>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    1d4e:	20 91 42 01 	lds	r18, 0x0142
    1d52:	22 95       	swap	r18
    1d54:	26 95       	lsr	r18
    1d56:	27 70       	andi	r18, 0x07	; 7
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    1d58:	29 f4       	brne	.+10     	; 0x1d64 <rf_tx_packet+0x162>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    1d5a:	88 3e       	cpi	r24, 0xE8	; 232
    1d5c:	9d 4f       	sbci	r25, 0xFD	; 253
    1d5e:	11 f0       	breq	.+4      	; 0x1d64 <rf_tx_packet+0x162>
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    1d60:	c1 e0       	ldi	r28, 0x01	; 1
    1d62:	01 c0       	rjmp	.+2      	; 0x1d66 <rf_tx_packet+0x164>
    1d64:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    1d66:	8d 2f       	mov	r24, r29
    1d68:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    1d6c:	8c 2f       	mov	r24, r28
}
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	08 95       	ret

00001d78 <rf_tx_packet_resend>:
uint8_t rf_tx_packet_resend()
{
   uint8_t trx_error;
   uint16_t i;

   tx_done = 0;
    1d78:	10 92 c6 0a 	sts	0x0AC6, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <rf_cmd>
    1d82:	88 ee       	ldi	r24, 0xE8	; 232
    1d84:	9d ef       	ldi	r25, 0xFD	; 253
   for(i=0; (i<65000) && !tx_done; i++)
    1d86:	20 91 c6 0a 	lds	r18, 0x0AC6
    1d8a:	21 11       	cpse	r18, r1
    1d8c:	04 c0       	rjmp	.+8      	; 0x1d96 <rf_tx_packet_resend+0x1e>
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	d1 f7       	brne	.-12     	; 0x1d86 <rf_tx_packet_resend+0xe>
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
    1d92:	8f ef       	ldi	r24, 0xFF	; 255

   return trx_error;
}
    1d94:	08 95       	ret
   tx_done = 0;
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; (i<65000) && !tx_done; i++)
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	08 95       	ret

00001d9a <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    1d9e:	80 91 d7 0a 	lds	r24, 0x0AD7
    1da2:	88 23       	and	r24, r24
    1da4:	41 f1       	breq	.+80     	; 0x1df6 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1da6:	80 91 41 01 	lds	r24, 0x0141
    1daa:	c8 2f       	mov	r28, r24
    1dac:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1dae:	9f ef       	ldi	r25, 0xFF	; 255
    1db0:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1db2:	92 30       	cpi	r25, 0x02	; 2
    1db4:	c0 f3       	brcs	.-16     	; 0x1da6 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1db6:	c1 31       	cpi	r28, 0x11	; 17
    1db8:	b1 f3       	breq	.-20     	; 0x1da6 <rf_cca_check+0xc>
    1dba:	c2 31       	cpi	r28, 0x12	; 18
    1dbc:	a1 f3       	breq	.-24     	; 0x1da6 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1dbe:	cf 31       	cpi	r28, 0x1F	; 31
    1dc0:	91 f3       	breq	.-28     	; 0x1da6 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1dc2:	c8 30       	cpi	r28, 0x08	; 8
    1dc4:	19 f0       	breq	.+6      	; 0x1dcc <rf_cca_check+0x32>
    1dc6:	8f 70       	andi	r24, 0x0F	; 15
    1dc8:	86 30       	cpi	r24, 0x06	; 6
    1dca:	a9 f4       	brne	.+42     	; 0x1df6 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    1dcc:	86 e1       	ldi	r24, 0x16	; 22
    1dce:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    1dd2:	80 91 48 01 	lds	r24, 0x0148
    1dd6:	80 68       	ori	r24, 0x80	; 128
    1dd8:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    1ddc:	80 91 41 01 	lds	r24, 0x0141
    1de0:	87 ff       	sbrs	r24, 7
    1de2:	fc cf       	rjmp	.-8      	; 0x1ddc <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1de4:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    1de8:	8c 2f       	mov	r24, r28
    1dea:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1dee:	d6 fb       	bst	r29, 6
    1df0:	88 27       	eor	r24, r24
    1df2:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    1df6:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    1dfe:	80 91 d7 0a 	lds	r24, 0x0AD7
    1e02:	88 23       	and	r24, r24
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <rf_rx_packet_nonblock+0xa>
    1e06:	e3 c0       	rjmp	.+454    	; 0x1fce <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;

   if(!rx_ready)
    1e08:	80 91 ee 0a 	lds	r24, 0x0AEE
    1e0c:	88 23       	and	r24, r24
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <rf_rx_packet_nonblock+0x14>
    1e10:	dc c0       	rjmp	.+440    	; 0x1fca <rf_rx_packet_nonblock+0x1cc>
      return 0;
   else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    1e12:	80 91 7b 01 	lds	r24, 0x017B
    1e16:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1e1a:	f0 91 be 0a 	lds	r31, 0x0ABE
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 97       	sbiw	r24, 0x02	; 2
    1e22:	24 81       	ldd	r18, Z+4	; 0x04
    1e24:	33 27       	eor	r19, r19
    1e26:	27 fd       	sbrc	r18, 7
    1e28:	30 95       	com	r19
    1e2a:	28 17       	cp	r18, r24
    1e2c:	39 07       	cpc	r19, r25
    1e2e:	0c f4       	brge	.+2      	; 0x1e32 <rf_rx_packet_nonblock+0x34>
    1e30:	ce c0       	rjmp	.+412    	; 0x1fce <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;


	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    1e32:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1e36:	f0 91 be 0a 	lds	r31, 0x0ABE
    1e3a:	80 91 82 01 	lds	r24, 0x0182
    1e3e:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    1e40:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1e44:	f0 91 be 0a 	lds	r31, 0x0ABE
    1e48:	80 91 87 01 	lds	r24, 0x0187
    1e4c:	90 91 88 01 	lds	r25, 0x0188
    1e50:	92 83       	std	Z+2, r25	; 0x02
    1e52:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    1e54:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1e58:	f0 91 be 0a 	lds	r31, 0x0ABE
    1e5c:	80 91 7b 01 	lds	r24, 0x017B
    1e60:	8b 50       	subi	r24, 0x0B	; 11
    1e62:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    1e64:	a0 91 bd 0a 	lds	r26, 0x0ABD
    1e68:	b0 91 be 0a 	lds	r27, 0x0ABE
    1e6c:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1e70:	f0 91 be 0a 	lds	r31, 0x0ABE
    1e74:	13 96       	adiw	r26, 0x03	; 3
    1e76:	9c 91       	ld	r25, X
    1e78:	84 81       	ldd	r24, Z+4	; 0x04
    1e7a:	89 17       	cp	r24, r25
    1e7c:	3c f0       	brlt	.+14     	; 0x1e8c <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    1e7e:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1e82:	f0 91 be 0a 	lds	r31, 0x0ABE
    1e86:	83 81       	ldd	r24, Z+3	; 0x03
    1e88:	87 ff       	sbrs	r24, 7
    1e8a:	0d c0       	rjmp	.+26     	; 0x1ea6 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    1e8c:	10 92 ee 0a 	sts	0x0AEE, r1
      TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1e90:	80 91 4c 01 	lds	r24, 0x014C
    1e94:	8f 77       	andi	r24, 0x7F	; 127
    1e96:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1e9a:	80 91 4c 01 	lds	r24, 0x014C
    1e9e:	80 68       	ori	r24, 0x80	; 128
    1ea0:	80 93 4c 01 	sts	0x014C, r24
    1ea4:	94 c0       	rjmp	.+296    	; 0x1fce <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    1ea6:	a0 91 bd 0a 	lds	r26, 0x0ABD
    1eaa:	b0 91 be 0a 	lds	r27, 0x0ABE
      TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1eae:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1eb2:	f0 91 be 0a 	lds	r31, 0x0ABE
    1eb6:	13 96       	adiw	r26, 0x03	; 3
    1eb8:	4c 91       	ld	r20, X
    1eba:	55 27       	eor	r21, r21
    1ebc:	47 fd       	sbrc	r20, 7
    1ebe:	50 95       	com	r21
    1ec0:	69 e8       	ldi	r22, 0x89	; 137
    1ec2:	71 e0       	ldi	r23, 0x01	; 1
    1ec4:	85 81       	ldd	r24, Z+5	; 0x05
    1ec6:	96 81       	ldd	r25, Z+6	; 0x06
    1ec8:	0e 94 43 33 	call	0x6686	; 0x6686 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
    1ecc:	80 91 1b 06 	lds	r24, 0x061B
    1ed0:	88 23       	and	r24, r24
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <rf_rx_packet_nonblock+0xd8>
    1ed4:	3e c0       	rjmp	.+124    	; 0x1f52 <rf_rx_packet_nonblock+0x154>
    1ed6:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1eda:	f0 91 be 0a 	lds	r31, 0x0ABE
    1ede:	83 81       	ldd	r24, Z+3	; 0x03
    1ee0:	80 31       	cpi	r24, 0x10	; 16
    1ee2:	b9 f5       	brne	.+110    	; 0x1f52 <rf_rx_packet_nonblock+0x154>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
    1ee4:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1ee8:	f0 91 be 0a 	lds	r31, 0x0ABE
    1eec:	65 81       	ldd	r22, Z+5	; 0x05
    1eee:	76 81       	ldd	r23, Z+6	; 0x06
    1ef0:	44 e0       	ldi	r20, 0x04	; 4
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	81 e1       	ldi	r24, 0x11	; 17
    1ef6:	92 e0       	ldi	r25, 0x02	; 2
    1ef8:	0e 94 4c 33 	call	0x6698	; 0x6698 <strncmp>
    1efc:	89 2b       	or	r24, r25
    1efe:	49 f5       	brne	.+82     	; 0x1f52 <rf_rx_packet_nonblock+0x154>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
    1f00:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1f04:	f0 91 be 0a 	lds	r31, 0x0ABE
    1f08:	65 81       	ldd	r22, Z+5	; 0x05
    1f0a:	76 81       	ldd	r23, Z+6	; 0x06
    1f0c:	40 e1       	ldi	r20, 0x10	; 16
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	81 e1       	ldi	r24, 0x11	; 17
    1f12:	92 e0       	ldi	r25, 0x02	; 2
    1f14:	0e 94 4c 33 	call	0x6698	; 0x6698 <strncmp>
    1f18:	89 2b       	or	r24, r25
    1f1a:	d9 f4       	brne	.+54     	; 0x1f52 <rf_rx_packet_nonblock+0x154>
            wdt_enable(WDTO_500MS);
    1f1c:	9d e0       	ldi	r25, 0x0D	; 13
    1f1e:	88 e1       	ldi	r24, 0x18	; 24
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	a8 95       	wdr
    1f26:	80 93 60 00 	sts	0x0060, r24
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <nrk_led_set>
            nrk_led_set(1);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <nrk_led_set>
            nrk_led_set(2);
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <nrk_led_set>
            nrk_led_set(3);
    1f48:	83 e0       	ldi	r24, 0x03	; 3
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <nrk_led_set>
    1f50:	ff cf       	rjmp	.-2      	; 0x1f50 <rf_rx_packet_nonblock+0x152>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    1f52:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1f56:	f0 91 be 0a 	lds	r31, 0x0ABE
    1f5a:	80 91 80 01 	lds	r24, 0x0180
    1f5e:	85 fb       	bst	r24, 5
    1f60:	88 27       	eor	r24, r24
    1f62:	80 f9       	bld	r24, 0
    1f64:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    1f66:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1f6a:	f0 91 be 0a 	lds	r31, 0x0ABE
    1f6e:	80 91 47 01 	lds	r24, 0x0147
    1f72:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    1f74:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1f78:	f0 91 be 0a 	lds	r31, 0x0ABE
    1f7c:	80 91 46 01 	lds	r24, 0x0146
    1f80:	86 95       	lsr	r24
    1f82:	86 95       	lsr	r24
    1f84:	86 95       	lsr	r24
    1f86:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    1f88:	e0 91 bd 0a 	lds	r30, 0x0ABD
    1f8c:	f0 91 be 0a 	lds	r31, 0x0ABE
    1f90:	80 91 47 01 	lds	r24, 0x0147
    1f94:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    1f96:	a0 91 bd 0a 	lds	r26, 0x0ABD
    1f9a:	b0 91 be 0a 	lds	r27, 0x0ABE
    1f9e:	e0 91 7b 01 	lds	r30, 0x017B
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	e0 58       	subi	r30, 0x80	; 128
    1fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa8:	80 81       	ld	r24, Z
    1faa:	1b 96       	adiw	r26, 0x0b	; 11
    1fac:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    1fae:	10 92 ee 0a 	sts	0x0AEE, r1
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1fb2:	80 91 4c 01 	lds	r24, 0x014C
    1fb6:	8f 77       	andi	r24, 0x7F	; 127
    1fb8:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1fbc:	80 91 4c 01 	lds	r24, 0x014C
    1fc0:	80 68       	ori	r24, 0x80	; 128
    1fc2:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

   if(!rx_ready)
      return 0;
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1fd0:	08 95       	ret

00001fd2 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1fd2:	1f 92       	push	r1
    1fd4:	0f 92       	push	r0
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	0f 92       	push	r0
    1fda:	11 24       	eor	r1, r1
    1fdc:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1fde:	80 e8       	ldi	r24, 0x80	; 128
    1fe0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1fe4:	8f 91       	pop	r24
    1fe6:	0f 90       	pop	r0
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	0f 90       	pop	r0
    1fec:	1f 90       	pop	r1
    1fee:	18 95       	reti

00001ff0 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1ff0:	1f 92       	push	r1
    1ff2:	0f 92       	push	r0
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	0f 92       	push	r0
    1ff8:	11 24       	eor	r1, r1
    1ffa:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	80 93 c6 0a 	sts	0x0AC6, r24
   IRQ_STATUS = (1 << TX_END);
    2002:	80 e4       	ldi	r24, 0x40	; 64
    2004:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    2008:	8f 91       	pop	r24
    200a:	0f 90       	pop	r0
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	0f 90       	pop	r0
    2010:	1f 90       	pop	r1
    2012:	18 95       	reti

00002014 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    2014:	1f 92       	push	r1
    2016:	0f 92       	push	r0
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	0f 92       	push	r0
    201c:	11 24       	eor	r1, r1
    201e:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    2020:	80 e2       	ldi	r24, 0x20	; 32
    2022:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2026:	8f 91       	pop	r24
    2028:	0f 90       	pop	r0
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	0f 90       	pop	r0
    202e:	1f 90       	pop	r1
    2030:	18 95       	reti

00002032 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    2032:	1f 92       	push	r1
    2034:	0f 92       	push	r0
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	0f 92       	push	r0
    203a:	11 24       	eor	r1, r1
    203c:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    203e:	80 e1       	ldi	r24, 0x10	; 16
    2040:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2044:	8f 91       	pop	r24
    2046:	0f 90       	pop	r0
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	0f 90       	pop	r0
    204c:	1f 90       	pop	r1
    204e:	18 95       	reti

00002050 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    2050:	1f 92       	push	r1
    2052:	0f 92       	push	r0
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	0f 92       	push	r0
    2058:	11 24       	eor	r1, r1
    205a:	0b b6       	in	r0, 0x3b	; 59
    205c:	0f 92       	push	r0
    205e:	2f 93       	push	r18
    2060:	3f 93       	push	r19
    2062:	4f 93       	push	r20
    2064:	5f 93       	push	r21
    2066:	6f 93       	push	r22
    2068:	7f 93       	push	r23
    206a:	8f 93       	push	r24
    206c:	9f 93       	push	r25
    206e:	af 93       	push	r26
    2070:	bf 93       	push	r27
    2072:	ef 93       	push	r30
    2074:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    2076:	84 e0       	ldi	r24, 0x04	; 4
    2078:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    207c:	e0 91 1e 06 	lds	r30, 0x061E
    2080:	f0 91 1f 06 	lds	r31, 0x061F
    2084:	30 97       	sbiw	r30, 0x00	; 0
    2086:	09 f0       	breq	.+2      	; 0x208a <__vector_59+0x3a>
		rx_start_func();
    2088:	09 95       	icall

	return;
}
    208a:	ff 91       	pop	r31
    208c:	ef 91       	pop	r30
    208e:	bf 91       	pop	r27
    2090:	af 91       	pop	r26
    2092:	9f 91       	pop	r25
    2094:	8f 91       	pop	r24
    2096:	7f 91       	pop	r23
    2098:	6f 91       	pop	r22
    209a:	5f 91       	pop	r21
    209c:	4f 91       	pop	r20
    209e:	3f 91       	pop	r19
    20a0:	2f 91       	pop	r18
    20a2:	0f 90       	pop	r0
    20a4:	0b be       	out	0x3b, r0	; 59
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti

000020b0 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    20b0:	1f 92       	push	r1
    20b2:	0f 92       	push	r0
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	0f 92       	push	r0
    20b8:	11 24       	eor	r1, r1
    20ba:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    20c2:	8f 91       	pop	r24
    20c4:	0f 90       	pop	r0
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	0f 90       	pop	r0
    20ca:	1f 90       	pop	r1
    20cc:	18 95       	reti

000020ce <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    20ce:	1f 92       	push	r1
    20d0:	0f 92       	push	r0
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	0f 92       	push	r0
    20d6:	11 24       	eor	r1, r1
    20d8:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    20e0:	8f 91       	pop	r24
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	0f 90       	pop	r0
    20e8:	1f 90       	pop	r1
    20ea:	18 95       	reti

000020ec <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    20ec:	e9 e4       	ldi	r30, 0x49	; 73
    20ee:	f1 e0       	ldi	r31, 0x01	; 1
    20f0:	90 81       	ld	r25, Z
    20f2:	90 7f       	andi	r25, 0xF0	; 240
    20f4:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    20f6:	90 81       	ld	r25, Z
    20f8:	8f 70       	andi	r24, 0x0F	; 15
    20fa:	98 2b       	or	r25, r24
    20fc:	90 83       	st	Z, r25
    20fe:	08 95       	ret

00002100 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	08 95       	ret

00002104 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    2104:	08 95       	ret

00002106 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    2106:	08 95       	ret

00002108 <rf_security_disable>:
}



void rf_security_disable()
{
    2108:	08 95       	ret

0000210a <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    210a:	8f ef       	ldi	r24, 0xFF	; 255
    210c:	08 95       	ret

0000210e <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    210e:	80 91 b8 0a 	lds	r24, 0x0AB8
    2112:	90 91 b9 0a 	lds	r25, 0x0AB9
    2116:	08 95       	ret

00002118 <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
    2118:	08 95       	ret

0000211a <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	08 95       	ret

0000211e <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	08 95       	ret

00002122 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	08 95       	ret

00002126 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    2126:	08 95       	ret

00002128 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    2128:	08 95       	ret

0000212a <rf_test_mode>:
}



void rf_test_mode()
{
    212a:	08 95       	ret

0000212c <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    212c:	08 95       	ret

0000212e <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    212e:	08 95       	ret

00002130 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    2130:	08 95       	ret

00002132 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    2132:	08 95       	ret

00002134 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    2134:	08 95       	ret

00002136 <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
    2136:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
    2138:	8d b1       	in	r24, 0x0d	; 13
    213a:	80 6e       	ori	r24, 0xE0	; 224
    213c:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
    213e:	8e b1       	in	r24, 0x0e	; 14
    2140:	80 6a       	ori	r24, 0xA0	; 160
    2142:	8e b9       	out	0x0e, r24	; 14
    2144:	08 95       	ret

00002146 <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
    2146:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
    2148:	8d b1       	in	r24, 0x0d	; 13
    214a:	80 6e       	ori	r24, 0xE0	; 224
    214c:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
    214e:	8e b1       	in	r24, 0x0e	; 14
    2150:	80 66       	ori	r24, 0x60	; 96
    2152:	8e b9       	out	0x0e, r24	; 14
    2154:	08 95       	ret

00002156 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    2156:	cf 92       	push	r12
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	27 97       	sbiw	r28, 0x07	; 7
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    2176:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    217a:	e0 91 bd 0a 	lds	r30, 0x0ABD
    217e:	f0 91 be 0a 	lds	r31, 0x0ABE
    2182:	c0 80       	ld	r12, Z
    2184:	d3 80       	ldd	r13, Z+3	; 0x03
    2186:	e5 80       	ldd	r14, Z+5	; 0x05
    2188:	f6 80       	ldd	r15, Z+6	; 0x06
    218a:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    218c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <rf_rx_packet_nonblock>
	if (err < 1) {
    2190:	18 16       	cp	r1, r24
    2192:	1c f0       	brlt	.+6      	; 0x219a <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    2194:	84 ee       	ldi	r24, 0xE4	; 228
    2196:	92 e0       	ldi	r25, 0x02	; 2
    2198:	06 c0       	rjmp	.+12     	; 0x21a6 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    219a:	f7 01       	movw	r30, r14
    219c:	10 81       	ld	r17, Z
	if (ttl == 0) {
    219e:	11 11       	cpse	r17, r1
    21a0:	07 c0       	rjmp	.+14     	; 0x21b0 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    21a2:	83 e0       	ldi	r24, 0x03	; 3
    21a4:	93 e0       	ldi	r25, 0x03	; 3
    21a6:	0e 94 35 34 	call	0x686a	; 0x686a <puts>
#endif
		nrk_int_enable();
    21aa:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>
		return;
    21ae:	31 c0       	rjmp	.+98     	; 0x2212 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    21b0:	15 30       	cpi	r17, 0x05	; 5
    21b2:	21 f4       	brne	.+8      	; 0x21bc <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    21b4:	8a e0       	ldi	r24, 0x0A	; 10
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 2f 34 	call	0x685e	; 0x685e <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    21bc:	c7 01       	movw	r24, r14
    21be:	01 96       	adiw	r24, 0x01	; 1
    21c0:	9f 93       	push	r25
    21c2:	8f 93       	push	r24
    21c4:	80 2f       	mov	r24, r16
    21c6:	99 27       	eor	r25, r25
    21c8:	87 fd       	sbrc	r24, 7
    21ca:	90 95       	com	r25
    21cc:	9f 93       	push	r25
    21ce:	0f 93       	push	r16
    21d0:	1f 92       	push	r1
    21d2:	1f 93       	push	r17
    21d4:	1f 92       	push	r1
    21d6:	cf 92       	push	r12
    21d8:	85 e2       	ldi	r24, 0x25	; 37
    21da:	93 e0       	ldi	r25, 0x03	; 3
    21dc:	9f 93       	push	r25
    21de:	8f 93       	push	r24
    21e0:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    21e4:	fd 82       	std	Y+5, r15	; 0x05
    21e6:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    21e8:	11 50       	subi	r17, 0x01	; 1
    21ea:	f7 01       	movw	r30, r14
    21ec:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    21ee:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    21f0:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    21f2:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    21f4:	8f ef       	ldi	r24, 0xFF	; 255
    21f6:	9f ef       	ldi	r25, 0xFF	; 255
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    21fc:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    2200:	ce 01       	movw	r24, r28
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <rf_tx_packet>
#endif
	return;
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
}
    2212:	27 96       	adiw	r28, 0x07	; 7
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	ff 90       	pop	r15
    2228:	ef 90       	pop	r14
    222a:	df 90       	pop	r13
    222c:	cf 90       	pop	r12
    222e:	08 95       	ret

00002230 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    2230:	1f 92       	push	r1
    2232:	0f 92       	push	r0
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	0f 92       	push	r0
    2238:	11 24       	eor	r1, r1
    223a:	0b b6       	in	r0, 0x3b	; 59
    223c:	0f 92       	push	r0
    223e:	2f 93       	push	r18
    2240:	3f 93       	push	r19
    2242:	4f 93       	push	r20
    2244:	5f 93       	push	r21
    2246:	6f 93       	push	r22
    2248:	7f 93       	push	r23
    224a:	8f 93       	push	r24
    224c:	9f 93       	push	r25
    224e:	af 93       	push	r26
    2250:	bf 93       	push	r27
    2252:	ef 93       	push	r30
    2254:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 91 7b 01 	lds	r25, 0x017B
    225c:	89 17       	cp	r24, r25
    225e:	10 f4       	brcc	.+4      	; 0x2264 <__vector_60+0x34>
    2260:	8f 5f       	subi	r24, 0xFF	; 255
    2262:	fa cf       	rjmp	.-12     	; 0x2258 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

   if((PHY_RSSI >> RX_CRC_VALID) & 0x1){
    2264:	80 91 46 01 	lds	r24, 0x0146
    2268:	87 ff       	sbrs	r24, 7
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <__vector_60+0x44>
      rx_ready = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 ee 0a 	sts	0x0AEE, r24
    2272:	04 c0       	rjmp	.+8      	; 0x227c <__vector_60+0x4c>
   } else {
      printf("RX end failed checksum!\r\n");
    2274:	8e e4       	ldi	r24, 0x4E	; 78
    2276:	93 e0       	ldi	r25, 0x03	; 3
    2278:	0e 94 35 34 	call	0x686a	; 0x686a <puts>
   }
   IRQ_STATUS = (1 << RX_END);
    227c:	88 e0       	ldi	r24, 0x08	; 8
    227e:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    2282:	80 91 46 01 	lds	r24, 0x0146
    2286:	87 ff       	sbrs	r24, 7
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    228a:	80 91 ba 0a 	lds	r24, 0x0ABA
    228e:	81 11       	cpse	r24, r1
    2290:	0e 94 ab 10 	call	0x2156	; 0x2156 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    2294:	e0 91 1c 06 	lds	r30, 0x061C
    2298:	f0 91 1d 06 	lds	r31, 0x061D
    229c:	30 97       	sbiw	r30, 0x00	; 0
    229e:	09 f0       	breq	.+2      	; 0x22a2 <__vector_60+0x72>
		rx_end_func();
    22a0:	09 95       	icall

	return;
}
    22a2:	ff 91       	pop	r31
    22a4:	ef 91       	pop	r30
    22a6:	bf 91       	pop	r27
    22a8:	af 91       	pop	r26
    22aa:	9f 91       	pop	r25
    22ac:	8f 91       	pop	r24
    22ae:	7f 91       	pop	r23
    22b0:	6f 91       	pop	r22
    22b2:	5f 91       	pop	r21
    22b4:	4f 91       	pop	r20
    22b6:	3f 91       	pop	r19
    22b8:	2f 91       	pop	r18
    22ba:	0f 90       	pop	r0
    22bc:	0b be       	out	0x3b, r0	; 59
    22be:	0f 90       	pop	r0
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	0f 90       	pop	r0
    22c4:	1f 90       	pop	r1
    22c6:	18 95       	reti

000022c8 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    22c8:	a7 ec       	ldi	r26, 0xC7	; 199
    22ca:	ba e0       	ldi	r27, 0x0A	; 10
    22cc:	fc 01       	movw	r30, r24
    22ce:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    22d0:	20 81       	ld	r18, Z
    22d2:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    22d4:	21 91       	ld	r18, Z+
    22d6:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    22da:	e8 17       	cp	r30, r24
    22dc:	f9 07       	cpc	r31, r25
    22de:	c1 f7       	brne	.-16     	; 0x22d0 <aes_setkey+0x8>
    22e0:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    22e2:	10 92 3e 01 	sts	0x013E, r1
    22e6:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    22e8:	e1 f7       	brne	.-8      	; 0x22e2 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    22ea:	80 e8       	ldi	r24, 0x80	; 128
    22ec:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    22f0:	80 91 3d 01 	lds	r24, 0x013D
    22f4:	80 ff       	sbrs	r24, 0
    22f6:	fc cf       	rjmp	.-8      	; 0x22f0 <aes_setkey+0x28>
    22f8:	e8 ed       	ldi	r30, 0xD8	; 216
    22fa:	fa e0       	ldi	r31, 0x0A	; 10
    22fc:	80 e1       	ldi	r24, 0x10	; 16
    22fe:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    2300:	90 91 3f 01 	lds	r25, 0x013F
    2304:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    2306:	8e 13       	cpse	r24, r30
    2308:	fb cf       	rjmp	.-10     	; 0x2300 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    230a:	08 95       	ret

0000230c <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    2312:	66 23       	and	r22, r22
    2314:	09 f4       	brne	.+2      	; 0x2318 <aes_encrypt+0xc>
    2316:	45 c0       	rjmp	.+138    	; 0x23a2 <aes_encrypt+0x96>
    2318:	86 2f       	mov	r24, r22
    231a:	8f 70       	andi	r24, 0x0F	; 15
    231c:	09 f0       	breq	.+2      	; 0x2320 <aes_encrypt+0x14>
    231e:	41 c0       	rjmp	.+130    	; 0x23a2 <aes_encrypt+0x96>
    2320:	e7 ec       	ldi	r30, 0xC7	; 199
    2322:	fa e0       	ldi	r31, 0x0A	; 10
    2324:	90 e1       	ldi	r25, 0x10	; 16
    2326:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    2328:	21 91       	ld	r18, Z+
    232a:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    232e:	9e 13       	cpse	r25, r30
    2330:	fb cf       	rjmp	.-10     	; 0x2328 <aes_encrypt+0x1c>
    2332:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    2334:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    2336:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    2338:	40 e1       	ldi	r20, 0x10	; 16
    233a:	94 9f       	mul	r25, r20
    233c:	90 01       	movw	r18, r0
    233e:	11 24       	eor	r1, r1
    2340:	26 17       	cp	r18, r22
    2342:	37 07       	cpc	r19, r23
    2344:	7c f5       	brge	.+94     	; 0x23a4 <aes_encrypt+0x98>
      if(i==0)
    2346:	91 11       	cpse	r25, r1
    2348:	03 c0       	rjmp	.+6      	; 0x2350 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    234a:	10 92 3c 01 	sts	0x013C, r1
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    2350:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	2a 0f       	add	r18, r26
    235a:	3b 1f       	adc	r19, r27
    235c:	e9 01       	movw	r28, r18
    235e:	c4 0f       	add	r28, r20
    2360:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    2362:	f8 81       	ld	r31, Y
    2364:	f0 93 3e 01 	sts	0x013E, r31
    2368:	4f 5f       	subi	r20, 0xFF	; 255
    236a:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    236c:	40 31       	cpi	r20, 0x10	; 16
    236e:	51 05       	cpc	r21, r1
    2370:	a9 f7       	brne	.-22     	; 0x235c <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    2372:	40 91 3c 01 	lds	r20, 0x013C
    2376:	40 68       	ori	r20, 0x80	; 128
    2378:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    237c:	40 91 3d 01 	lds	r20, 0x013D
    2380:	40 ff       	sbrs	r20, 0
    2382:	fc cf       	rjmp	.-8      	; 0x237c <aes_encrypt+0x70>
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    2388:	f0 91 3e 01 	lds	r31, 0x013E
    238c:	e9 01       	movw	r28, r18
    238e:	c4 0f       	add	r28, r20
    2390:	d5 1f       	adc	r29, r21
    2392:	f8 83       	st	Y, r31
    2394:	4f 5f       	subi	r20, 0xFF	; 255
    2396:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    2398:	40 31       	cpi	r20, 0x10	; 16
    239a:	51 05       	cpc	r21, r1
    239c:	a9 f7       	brne	.-22     	; 0x2388 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    239e:	9f 5f       	subi	r25, 0xFF	; 255
    23a0:	cb cf       	rjmp	.-106    	; 0x2338 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	08 95       	ret

000023aa <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    23b4:	61 30       	cpi	r22, 0x01	; 1
    23b6:	09 f4       	brne	.+2      	; 0x23ba <aes_decrypt+0x10>
    23b8:	58 c0       	rjmp	.+176    	; 0x246a <aes_decrypt+0xc0>
    23ba:	86 2f       	mov	r24, r22
    23bc:	8f 70       	andi	r24, 0x0F	; 15
    23be:	09 f0       	breq	.+2      	; 0x23c2 <aes_decrypt+0x18>
    23c0:	54 c0       	rjmp	.+168    	; 0x246a <aes_decrypt+0xc0>
    23c2:	e8 ed       	ldi	r30, 0xD8	; 216
    23c4:	fa e0       	ldi	r31, 0x0A	; 10
    23c6:	90 e1       	ldi	r25, 0x10	; 16
    23c8:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    23ca:	21 91       	ld	r18, Z+
    23cc:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    23d0:	9e 13       	cpse	r25, r30
    23d2:	fb cf       	rjmp	.-10     	; 0x23ca <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    23d4:	62 95       	swap	r22
    23d6:	6f 70       	andi	r22, 0x0F	; 15
    23d8:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    23da:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    23dc:	6f 3f       	cpi	r22, 0xFF	; 255
    23de:	09 f4       	brne	.+2      	; 0x23e2 <aes_decrypt+0x38>
    23e0:	45 c0       	rjmp	.+138    	; 0x246c <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    23e2:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    23e6:	46 2f       	mov	r20, r22
    23e8:	55 27       	eor	r21, r21
    23ea:	47 fd       	sbrc	r20, 7
    23ec:	50 95       	com	r21
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	ed 01       	movw	r28, r26
    23f4:	90 e1       	ldi	r25, 0x10	; 16
    23f6:	69 02       	muls	r22, r25
    23f8:	c0 0d       	add	r28, r0
    23fa:	d1 1d       	adc	r29, r1
    23fc:	11 24       	eor	r1, r1
    23fe:	fe 01       	movw	r30, r28
    2400:	e2 0f       	add	r30, r18
    2402:	f3 1f       	adc	r31, r19
    2404:	90 81       	ld	r25, Z
    2406:	90 93 3e 01 	sts	0x013E, r25
    240a:	2f 5f       	subi	r18, 0xFF	; 255
    240c:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    240e:	20 31       	cpi	r18, 0x10	; 16
    2410:	31 05       	cpc	r19, r1
    2412:	a9 f7       	brne	.-22     	; 0x23fe <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    2414:	90 91 3c 01 	lds	r25, 0x013C
    2418:	90 68       	ori	r25, 0x80	; 128
    241a:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    241e:	90 91 3d 01 	lds	r25, 0x013D
    2422:	90 ff       	sbrs	r25, 0
    2424:	fc cf       	rjmp	.-8      	; 0x241e <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    2426:	41 50       	subi	r20, 0x01	; 1
    2428:	51 09       	sbc	r21, r1
    242a:	94 e0       	ldi	r25, 0x04	; 4
    242c:	44 0f       	add	r20, r20
    242e:	55 1f       	adc	r21, r21
    2430:	9a 95       	dec	r25
    2432:	e1 f7       	brne	.-8      	; 0x242c <aes_decrypt+0x82>
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    2438:	90 91 3e 01 	lds	r25, 0x013E
    243c:	8e 01       	movw	r16, r28
    243e:	02 0f       	add	r16, r18
    2440:	13 1f       	adc	r17, r19
    2442:	f8 01       	movw	r30, r16
    2444:	90 83       	st	Z, r25
         if(i!=0)
    2446:	66 23       	and	r22, r22
    2448:	49 f0       	breq	.+18     	; 0x245c <aes_decrypt+0xb2>
    244a:	f9 01       	movw	r30, r18
    244c:	e4 0f       	add	r30, r20
    244e:	f5 1f       	adc	r31, r21
    2450:	ea 0f       	add	r30, r26
    2452:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    2454:	e0 81       	ld	r30, Z
    2456:	9e 27       	eor	r25, r30
    2458:	f8 01       	movw	r30, r16
    245a:	90 83       	st	Z, r25
    245c:	2f 5f       	subi	r18, 0xFF	; 255
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    2460:	20 31       	cpi	r18, 0x10	; 16
    2462:	31 05       	cpc	r19, r1
    2464:	49 f7       	brne	.-46     	; 0x2438 <aes_decrypt+0x8e>
    2466:	61 50       	subi	r22, 0x01	; 1
    2468:	b9 cf       	rjmp	.-142    	; 0x23dc <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    246a:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
    2474:	08 95       	ret

00002476 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    2476:	80 91 c0 00 	lds	r24, 0x00C0
    247a:	87 ff       	sbrs	r24, 7
    247c:	fc cf       	rjmp	.-8      	; 0x2476 <getc0>
    247e:	80 91 c0 00 	lds	r24, 0x00C0
    2482:	8f 77       	andi	r24, 0x7F	; 127
    2484:	80 93 c0 00 	sts	0x00C0, r24
    2488:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    248c:	08 95       	ret

0000248e <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    248e:	90 91 c0 00 	lds	r25, 0x00C0
    2492:	95 ff       	sbrs	r25, 5
    2494:	fc cf       	rjmp	.-8      	; 0x248e <putc0>
    2496:	90 91 c0 00 	lds	r25, 0x00C0
    249a:	9f 7d       	andi	r25, 0xDF	; 223
    249c:	90 93 c0 00 	sts	0x00C0, r25
    24a0:	80 93 c6 00 	sts	0x00C6, r24
    24a4:	08 95       	ret

000024a6 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	08 95       	ret

000024aa <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    24aa:	81 30       	cpi	r24, 0x01	; 1
    24ac:	19 f4       	brne	.+6      	; 0x24b4 <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    24ae:	80 91 c8 00 	lds	r24, 0x00C8
    24b2:	04 c0       	rjmp	.+8      	; 0x24bc <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
    24b4:	81 11       	cpse	r24, r1
    24b6:	06 c0       	rjmp	.+12     	; 0x24c4 <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    24b8:	80 91 c0 00 	lds	r24, 0x00C0
    24bc:	88 1f       	adc	r24, r24
    24be:	88 27       	eor	r24, r24
    24c0:	88 1f       	adc	r24, r24
    24c2:	08 95       	ret
        }
return 0;
    24c4:	80 e0       	ldi	r24, 0x00	; 0
}
    24c6:	08 95       	ret

000024c8 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    24cc:	fc 01       	movw	r30, r24
    24ce:	24 91       	lpm	r18, Z
    24d0:	ec 01       	movw	r28, r24
    24d2:	21 96       	adiw	r28, 0x01	; 1
    24d4:	22 23       	and	r18, r18
    24d6:	51 f0       	breq	.+20     	; 0x24ec <nrk_kprintf+0x24>
        putchar(c);
    24d8:	60 91 46 0c 	lds	r22, 0x0C46
    24dc:	70 91 47 0c 	lds	r23, 0x0C47
    24e0:	82 2f       	mov	r24, r18
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <fputc>
    24e8:	ce 01       	movw	r24, r28
    24ea:	f0 cf       	rjmp	.-32     	; 0x24cc <nrk_kprintf+0x4>
}
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    24f2:	86 e0       	ldi	r24, 0x06	; 6
    24f4:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    24f6:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    24f8:	88 ef       	ldi	r24, 0xF8	; 248
    24fa:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    24fc:	80 ef       	ldi	r24, 0xF0	; 240
    24fe:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	8d b9       	out	0x0d, r24	; 13
    2504:	08 95       	ret

00002506 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    2506:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <PORT_INIT>

0000250a <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    250a:	8f 3f       	cpi	r24, 0xFF	; 255
    250c:	09 f4       	brne	.+2      	; 0x2510 <nrk_gpio_set+0x6>
    250e:	6c c0       	rjmp	.+216    	; 0x25e8 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    2510:	e8 2f       	mov	r30, r24
    2512:	e7 70       	andi	r30, 0x07	; 7
    2514:	4e 2f       	mov	r20, r30
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	47 30       	cpi	r20, 0x07	; 7
    251a:	51 05       	cpc	r21, r1
    251c:	08 f0       	brcs	.+2      	; 0x2520 <nrk_gpio_set+0x16>
    251e:	64 c0       	rjmp	.+200    	; 0x25e8 <nrk_gpio_set+0xde>
    2520:	fa 01       	movw	r30, r20
    2522:	e0 57       	subi	r30, 0x70	; 112
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	86 95       	lsr	r24
    2528:	86 95       	lsr	r24
    252a:	86 95       	lsr	r24
    252c:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2530:	42 b1       	in	r20, 0x02	; 2
    2532:	21 e0       	ldi	r18, 0x01	; 1
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	b9 01       	movw	r22, r18
    2538:	02 c0       	rjmp	.+4      	; 0x253e <nrk_gpio_set+0x34>
    253a:	66 0f       	add	r22, r22
    253c:	77 1f       	adc	r23, r23
    253e:	8a 95       	dec	r24
    2540:	e2 f7       	brpl	.-8      	; 0x253a <nrk_gpio_set+0x30>
    2542:	cb 01       	movw	r24, r22
    2544:	84 2b       	or	r24, r20
    2546:	82 b9       	out	0x02, r24	; 2
    2548:	4d c0       	rjmp	.+154    	; 0x25e4 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    254a:	45 b1       	in	r20, 0x05	; 5
    254c:	21 e0       	ldi	r18, 0x01	; 1
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	b9 01       	movw	r22, r18
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <nrk_gpio_set+0x4e>
    2554:	66 0f       	add	r22, r22
    2556:	77 1f       	adc	r23, r23
    2558:	8a 95       	dec	r24
    255a:	e2 f7       	brpl	.-8      	; 0x2554 <nrk_gpio_set+0x4a>
    255c:	cb 01       	movw	r24, r22
    255e:	84 2b       	or	r24, r20
    2560:	85 b9       	out	0x05, r24	; 5
    2562:	40 c0       	rjmp	.+128    	; 0x25e4 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2564:	48 b1       	in	r20, 0x08	; 8
    2566:	21 e0       	ldi	r18, 0x01	; 1
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	b9 01       	movw	r22, r18
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <nrk_gpio_set+0x68>
    256e:	66 0f       	add	r22, r22
    2570:	77 1f       	adc	r23, r23
    2572:	8a 95       	dec	r24
    2574:	e2 f7       	brpl	.-8      	; 0x256e <nrk_gpio_set+0x64>
    2576:	cb 01       	movw	r24, r22
    2578:	84 2b       	or	r24, r20
    257a:	88 b9       	out	0x08, r24	; 8
    257c:	33 c0       	rjmp	.+102    	; 0x25e4 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    257e:	4b b1       	in	r20, 0x0b	; 11
    2580:	21 e0       	ldi	r18, 0x01	; 1
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	b9 01       	movw	r22, r18
    2586:	02 c0       	rjmp	.+4      	; 0x258c <nrk_gpio_set+0x82>
    2588:	66 0f       	add	r22, r22
    258a:	77 1f       	adc	r23, r23
    258c:	8a 95       	dec	r24
    258e:	e2 f7       	brpl	.-8      	; 0x2588 <nrk_gpio_set+0x7e>
    2590:	cb 01       	movw	r24, r22
    2592:	84 2b       	or	r24, r20
    2594:	8b b9       	out	0x0b, r24	; 11
    2596:	26 c0       	rjmp	.+76     	; 0x25e4 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2598:	4e b1       	in	r20, 0x0e	; 14
    259a:	21 e0       	ldi	r18, 0x01	; 1
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	b9 01       	movw	r22, r18
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <nrk_gpio_set+0x9c>
    25a2:	66 0f       	add	r22, r22
    25a4:	77 1f       	adc	r23, r23
    25a6:	8a 95       	dec	r24
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <nrk_gpio_set+0x98>
    25aa:	cb 01       	movw	r24, r22
    25ac:	84 2b       	or	r24, r20
    25ae:	8e b9       	out	0x0e, r24	; 14
    25b0:	19 c0       	rjmp	.+50     	; 0x25e4 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    25b2:	41 b3       	in	r20, 0x11	; 17
    25b4:	21 e0       	ldi	r18, 0x01	; 1
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	b9 01       	movw	r22, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <nrk_gpio_set+0xb6>
    25bc:	66 0f       	add	r22, r22
    25be:	77 1f       	adc	r23, r23
    25c0:	8a 95       	dec	r24
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <nrk_gpio_set+0xb2>
    25c4:	cb 01       	movw	r24, r22
    25c6:	84 2b       	or	r24, r20
    25c8:	81 bb       	out	0x11, r24	; 17
    25ca:	0c c0       	rjmp	.+24     	; 0x25e4 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    25cc:	44 b3       	in	r20, 0x14	; 20
    25ce:	21 e0       	ldi	r18, 0x01	; 1
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	b9 01       	movw	r22, r18
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <nrk_gpio_set+0xd0>
    25d6:	66 0f       	add	r22, r22
    25d8:	77 1f       	adc	r23, r23
    25da:	8a 95       	dec	r24
    25dc:	e2 f7       	brpl	.-8      	; 0x25d6 <nrk_gpio_set+0xcc>
    25de:	cb 01       	movw	r24, r22
    25e0:	84 2b       	or	r24, r20
    25e2:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    25e6:	08 95       	ret
                default: return -1;
    25e8:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    25ea:	08 95       	ret

000025ec <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    25ec:	8f 3f       	cpi	r24, 0xFF	; 255
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <nrk_gpio_clr+0x6>
    25f0:	73 c0       	rjmp	.+230    	; 0x26d8 <nrk_gpio_clr+0xec>
        switch (pin & 0x07) {
    25f2:	e8 2f       	mov	r30, r24
    25f4:	e7 70       	andi	r30, 0x07	; 7
    25f6:	4e 2f       	mov	r20, r30
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	47 30       	cpi	r20, 0x07	; 7
    25fc:	51 05       	cpc	r21, r1
    25fe:	08 f0       	brcs	.+2      	; 0x2602 <nrk_gpio_clr+0x16>
    2600:	6b c0       	rjmp	.+214    	; 0x26d8 <nrk_gpio_clr+0xec>
    2602:	fa 01       	movw	r30, r20
    2604:	e9 56       	subi	r30, 0x69	; 105
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	86 95       	lsr	r24
    260a:	86 95       	lsr	r24
    260c:	86 95       	lsr	r24
    260e:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2612:	42 b1       	in	r20, 0x02	; 2
    2614:	21 e0       	ldi	r18, 0x01	; 1
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	b9 01       	movw	r22, r18
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <nrk_gpio_clr+0x34>
    261c:	66 0f       	add	r22, r22
    261e:	77 1f       	adc	r23, r23
    2620:	8a 95       	dec	r24
    2622:	e2 f7       	brpl	.-8      	; 0x261c <nrk_gpio_clr+0x30>
    2624:	cb 01       	movw	r24, r22
    2626:	80 95       	com	r24
    2628:	84 23       	and	r24, r20
    262a:	82 b9       	out	0x02, r24	; 2
    262c:	53 c0       	rjmp	.+166    	; 0x26d4 <nrk_gpio_clr+0xe8>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    262e:	45 b1       	in	r20, 0x05	; 5
    2630:	21 e0       	ldi	r18, 0x01	; 1
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	b9 01       	movw	r22, r18
    2636:	02 c0       	rjmp	.+4      	; 0x263c <nrk_gpio_clr+0x50>
    2638:	66 0f       	add	r22, r22
    263a:	77 1f       	adc	r23, r23
    263c:	8a 95       	dec	r24
    263e:	e2 f7       	brpl	.-8      	; 0x2638 <nrk_gpio_clr+0x4c>
    2640:	cb 01       	movw	r24, r22
    2642:	80 95       	com	r24
    2644:	84 23       	and	r24, r20
    2646:	85 b9       	out	0x05, r24	; 5
    2648:	45 c0       	rjmp	.+138    	; 0x26d4 <nrk_gpio_clr+0xe8>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    264a:	48 b1       	in	r20, 0x08	; 8
    264c:	21 e0       	ldi	r18, 0x01	; 1
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	b9 01       	movw	r22, r18
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <nrk_gpio_clr+0x6c>
    2654:	66 0f       	add	r22, r22
    2656:	77 1f       	adc	r23, r23
    2658:	8a 95       	dec	r24
    265a:	e2 f7       	brpl	.-8      	; 0x2654 <nrk_gpio_clr+0x68>
    265c:	cb 01       	movw	r24, r22
    265e:	80 95       	com	r24
    2660:	84 23       	and	r24, r20
    2662:	88 b9       	out	0x08, r24	; 8
    2664:	37 c0       	rjmp	.+110    	; 0x26d4 <nrk_gpio_clr+0xe8>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2666:	4b b1       	in	r20, 0x0b	; 11
    2668:	21 e0       	ldi	r18, 0x01	; 1
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	b9 01       	movw	r22, r18
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <nrk_gpio_clr+0x88>
    2670:	66 0f       	add	r22, r22
    2672:	77 1f       	adc	r23, r23
    2674:	8a 95       	dec	r24
    2676:	e2 f7       	brpl	.-8      	; 0x2670 <nrk_gpio_clr+0x84>
    2678:	cb 01       	movw	r24, r22
    267a:	80 95       	com	r24
    267c:	84 23       	and	r24, r20
    267e:	8b b9       	out	0x0b, r24	; 11
    2680:	29 c0       	rjmp	.+82     	; 0x26d4 <nrk_gpio_clr+0xe8>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2682:	4e b1       	in	r20, 0x0e	; 14
    2684:	21 e0       	ldi	r18, 0x01	; 1
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	b9 01       	movw	r22, r18
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <nrk_gpio_clr+0xa4>
    268c:	66 0f       	add	r22, r22
    268e:	77 1f       	adc	r23, r23
    2690:	8a 95       	dec	r24
    2692:	e2 f7       	brpl	.-8      	; 0x268c <nrk_gpio_clr+0xa0>
    2694:	cb 01       	movw	r24, r22
    2696:	80 95       	com	r24
    2698:	84 23       	and	r24, r20
    269a:	8e b9       	out	0x0e, r24	; 14
    269c:	1b c0       	rjmp	.+54     	; 0x26d4 <nrk_gpio_clr+0xe8>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    269e:	41 b3       	in	r20, 0x11	; 17
    26a0:	21 e0       	ldi	r18, 0x01	; 1
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	b9 01       	movw	r22, r18
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <nrk_gpio_clr+0xc0>
    26a8:	66 0f       	add	r22, r22
    26aa:	77 1f       	adc	r23, r23
    26ac:	8a 95       	dec	r24
    26ae:	e2 f7       	brpl	.-8      	; 0x26a8 <nrk_gpio_clr+0xbc>
    26b0:	cb 01       	movw	r24, r22
    26b2:	80 95       	com	r24
    26b4:	84 23       	and	r24, r20
    26b6:	81 bb       	out	0x11, r24	; 17
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <nrk_gpio_clr+0xe8>
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    26ba:	44 b3       	in	r20, 0x14	; 20
    26bc:	21 e0       	ldi	r18, 0x01	; 1
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	b9 01       	movw	r22, r18
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <nrk_gpio_clr+0xdc>
    26c4:	66 0f       	add	r22, r22
    26c6:	77 1f       	adc	r23, r23
    26c8:	8a 95       	dec	r24
    26ca:	e2 f7       	brpl	.-8      	; 0x26c4 <nrk_gpio_clr+0xd8>
    26cc:	cb 01       	movw	r24, r22
    26ce:	80 95       	com	r24
    26d0:	84 23       	and	r24, r20
    26d2:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    26d6:	08 95       	ret
                default: return -1;
    26d8:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    26da:	08 95       	ret

000026dc <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    26dc:	8f 3f       	cpi	r24, 0xFF	; 255
    26de:	31 f1       	breq	.+76     	; 0x272c <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    26e0:	e8 2f       	mov	r30, r24
    26e2:	e7 70       	andi	r30, 0x07	; 7
    26e4:	4e 2f       	mov	r20, r30
    26e6:	50 e0       	ldi	r21, 0x00	; 0
    26e8:	47 30       	cpi	r20, 0x07	; 7
    26ea:	51 05       	cpc	r21, r1
    26ec:	f8 f4       	brcc	.+62     	; 0x272c <nrk_gpio_get+0x50>
    26ee:	fa 01       	movw	r30, r20
    26f0:	e2 56       	subi	r30, 0x62	; 98
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	28 2f       	mov	r18, r24
    26f6:	26 95       	lsr	r18
    26f8:	26 95       	lsr	r18
    26fa:	26 95       	lsr	r18
    26fc:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2700:	90 b1       	in	r25, 0x00	; 0
    2702:	0b c0       	rjmp	.+22     	; 0x271a <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2704:	93 b1       	in	r25, 0x03	; 3
    2706:	09 c0       	rjmp	.+18     	; 0x271a <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2708:	96 b1       	in	r25, 0x06	; 6
    270a:	07 c0       	rjmp	.+14     	; 0x271a <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    270c:	99 b1       	in	r25, 0x09	; 9
    270e:	05 c0       	rjmp	.+10     	; 0x271a <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2710:	9c b1       	in	r25, 0x0c	; 12
    2712:	03 c0       	rjmp	.+6      	; 0x271a <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2714:	9f b1       	in	r25, 0x0f	; 15
    2716:	01 c0       	rjmp	.+2      	; 0x271a <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    2718:	92 b3       	in	r25, 0x12	; 18
    271a:	89 2f       	mov	r24, r25
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <nrk_gpio_get+0x48>
    2720:	95 95       	asr	r25
    2722:	87 95       	ror	r24
    2724:	2a 95       	dec	r18
    2726:	e2 f7       	brpl	.-8      	; 0x2720 <nrk_gpio_get+0x44>
    2728:	81 70       	andi	r24, 0x01	; 1
    272a:	08 95       	ret
                default: return -1;
    272c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    272e:	08 95       	ret

00002730 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2730:	8f 3f       	cpi	r24, 0xFF	; 255
    2732:	09 f4       	brne	.+2      	; 0x2736 <nrk_gpio_toggle+0x6>
    2734:	06 c1       	rjmp	.+524    	; 0x2942 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    2736:	e8 2f       	mov	r30, r24
    2738:	e7 70       	andi	r30, 0x07	; 7
    273a:	4e 2f       	mov	r20, r30
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	47 30       	cpi	r20, 0x07	; 7
    2740:	51 05       	cpc	r21, r1
    2742:	08 f0       	brcs	.+2      	; 0x2746 <nrk_gpio_toggle+0x16>
    2744:	fe c0       	rjmp	.+508    	; 0x2942 <nrk_gpio_toggle+0x212>
    2746:	fa 01       	movw	r30, r20
    2748:	eb 55       	subi	r30, 0x5B	; 91
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	86 95       	lsr	r24
    274e:	86 95       	lsr	r24
    2750:	86 95       	lsr	r24
    2752:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2756:	20 b1       	in	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	08 2e       	mov	r0, r24
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <nrk_gpio_toggle+0x32>
    275e:	35 95       	asr	r19
    2760:	27 95       	ror	r18
    2762:	0a 94       	dec	r0
    2764:	e2 f7       	brpl	.-8      	; 0x275e <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2766:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2768:	20 fd       	sbrc	r18, 0
    276a:	0b c0       	rjmp	.+22     	; 0x2782 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    276c:	21 e0       	ldi	r18, 0x01	; 1
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	b9 01       	movw	r22, r18
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <nrk_gpio_toggle+0x48>
    2774:	66 0f       	add	r22, r22
    2776:	77 1f       	adc	r23, r23
    2778:	8a 95       	dec	r24
    277a:	e2 f7       	brpl	.-8      	; 0x2774 <nrk_gpio_toggle+0x44>
    277c:	cb 01       	movw	r24, r22
    277e:	84 2b       	or	r24, r20
    2780:	0b c0       	rjmp	.+22     	; 0x2798 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    2782:	21 e0       	ldi	r18, 0x01	; 1
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	b9 01       	movw	r22, r18
    2788:	02 c0       	rjmp	.+4      	; 0x278e <nrk_gpio_toggle+0x5e>
    278a:	66 0f       	add	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	8a 95       	dec	r24
    2790:	e2 f7       	brpl	.-8      	; 0x278a <nrk_gpio_toggle+0x5a>
    2792:	cb 01       	movw	r24, r22
    2794:	80 95       	com	r24
    2796:	84 23       	and	r24, r20
    2798:	82 b9       	out	0x02, r24	; 2
    279a:	16 c0       	rjmp	.+44     	; 0x27c8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    279c:	23 b1       	in	r18, 0x03	; 3
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	08 2e       	mov	r0, r24
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <nrk_gpio_toggle+0x78>
    27a4:	35 95       	asr	r19
    27a6:	27 95       	ror	r18
    27a8:	0a 94       	dec	r0
    27aa:	e2 f7       	brpl	.-8      	; 0x27a4 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    27ac:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    27ae:	20 fd       	sbrc	r18, 0
    27b0:	0d c0       	rjmp	.+26     	; 0x27cc <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    27b2:	21 e0       	ldi	r18, 0x01	; 1
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	b9 01       	movw	r22, r18
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <nrk_gpio_toggle+0x8e>
    27ba:	66 0f       	add	r22, r22
    27bc:	77 1f       	adc	r23, r23
    27be:	8a 95       	dec	r24
    27c0:	e2 f7       	brpl	.-8      	; 0x27ba <nrk_gpio_toggle+0x8a>
    27c2:	cb 01       	movw	r24, r22
    27c4:	84 2b       	or	r24, r20
    27c6:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    27cc:	21 e0       	ldi	r18, 0x01	; 1
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	b9 01       	movw	r22, r18
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <nrk_gpio_toggle+0xa8>
    27d4:	66 0f       	add	r22, r22
    27d6:	77 1f       	adc	r23, r23
    27d8:	8a 95       	dec	r24
    27da:	e2 f7       	brpl	.-8      	; 0x27d4 <nrk_gpio_toggle+0xa4>
    27dc:	cb 01       	movw	r24, r22
    27de:	80 95       	com	r24
    27e0:	84 23       	and	r24, r20
    27e2:	f1 cf       	rjmp	.-30     	; 0x27c6 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    27e4:	26 b1       	in	r18, 0x06	; 6
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	08 2e       	mov	r0, r24
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <nrk_gpio_toggle+0xc0>
    27ec:	35 95       	asr	r19
    27ee:	27 95       	ror	r18
    27f0:	0a 94       	dec	r0
    27f2:	e2 f7       	brpl	.-8      	; 0x27ec <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    27f4:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    27f6:	20 fd       	sbrc	r18, 0
    27f8:	0b c0       	rjmp	.+22     	; 0x2810 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    27fa:	21 e0       	ldi	r18, 0x01	; 1
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	b9 01       	movw	r22, r18
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <nrk_gpio_toggle+0xd6>
    2802:	66 0f       	add	r22, r22
    2804:	77 1f       	adc	r23, r23
    2806:	8a 95       	dec	r24
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <nrk_gpio_toggle+0xd2>
    280a:	cb 01       	movw	r24, r22
    280c:	84 2b       	or	r24, r20
    280e:	0b c0       	rjmp	.+22     	; 0x2826 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2810:	21 e0       	ldi	r18, 0x01	; 1
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	b9 01       	movw	r22, r18
    2816:	02 c0       	rjmp	.+4      	; 0x281c <nrk_gpio_toggle+0xec>
    2818:	66 0f       	add	r22, r22
    281a:	77 1f       	adc	r23, r23
    281c:	8a 95       	dec	r24
    281e:	e2 f7       	brpl	.-8      	; 0x2818 <nrk_gpio_toggle+0xe8>
    2820:	cb 01       	movw	r24, r22
    2822:	80 95       	com	r24
    2824:	84 23       	and	r24, r20
    2826:	88 b9       	out	0x08, r24	; 8
    2828:	cf cf       	rjmp	.-98     	; 0x27c8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    282a:	29 b1       	in	r18, 0x09	; 9
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	08 2e       	mov	r0, r24
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <nrk_gpio_toggle+0x106>
    2832:	35 95       	asr	r19
    2834:	27 95       	ror	r18
    2836:	0a 94       	dec	r0
    2838:	e2 f7       	brpl	.-8      	; 0x2832 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    283a:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    283c:	20 fd       	sbrc	r18, 0
    283e:	0b c0       	rjmp	.+22     	; 0x2856 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2840:	21 e0       	ldi	r18, 0x01	; 1
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	b9 01       	movw	r22, r18
    2846:	02 c0       	rjmp	.+4      	; 0x284c <nrk_gpio_toggle+0x11c>
    2848:	66 0f       	add	r22, r22
    284a:	77 1f       	adc	r23, r23
    284c:	8a 95       	dec	r24
    284e:	e2 f7       	brpl	.-8      	; 0x2848 <nrk_gpio_toggle+0x118>
    2850:	cb 01       	movw	r24, r22
    2852:	84 2b       	or	r24, r20
    2854:	0b c0       	rjmp	.+22     	; 0x286c <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    2856:	21 e0       	ldi	r18, 0x01	; 1
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	b9 01       	movw	r22, r18
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <nrk_gpio_toggle+0x132>
    285e:	66 0f       	add	r22, r22
    2860:	77 1f       	adc	r23, r23
    2862:	8a 95       	dec	r24
    2864:	e2 f7       	brpl	.-8      	; 0x285e <nrk_gpio_toggle+0x12e>
    2866:	cb 01       	movw	r24, r22
    2868:	80 95       	com	r24
    286a:	84 23       	and	r24, r20
    286c:	8b b9       	out	0x0b, r24	; 11
    286e:	ac cf       	rjmp	.-168    	; 0x27c8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    2870:	2c b1       	in	r18, 0x0c	; 12
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	08 2e       	mov	r0, r24
    2876:	02 c0       	rjmp	.+4      	; 0x287c <nrk_gpio_toggle+0x14c>
    2878:	35 95       	asr	r19
    287a:	27 95       	ror	r18
    287c:	0a 94       	dec	r0
    287e:	e2 f7       	brpl	.-8      	; 0x2878 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2880:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    2882:	20 fd       	sbrc	r18, 0
    2884:	0b c0       	rjmp	.+22     	; 0x289c <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2886:	21 e0       	ldi	r18, 0x01	; 1
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	b9 01       	movw	r22, r18
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <nrk_gpio_toggle+0x162>
    288e:	66 0f       	add	r22, r22
    2890:	77 1f       	adc	r23, r23
    2892:	8a 95       	dec	r24
    2894:	e2 f7       	brpl	.-8      	; 0x288e <nrk_gpio_toggle+0x15e>
    2896:	cb 01       	movw	r24, r22
    2898:	84 2b       	or	r24, r20
    289a:	0b c0       	rjmp	.+22     	; 0x28b2 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    289c:	21 e0       	ldi	r18, 0x01	; 1
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	b9 01       	movw	r22, r18
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <nrk_gpio_toggle+0x178>
    28a4:	66 0f       	add	r22, r22
    28a6:	77 1f       	adc	r23, r23
    28a8:	8a 95       	dec	r24
    28aa:	e2 f7       	brpl	.-8      	; 0x28a4 <nrk_gpio_toggle+0x174>
    28ac:	cb 01       	movw	r24, r22
    28ae:	80 95       	com	r24
    28b0:	84 23       	and	r24, r20
    28b2:	8e b9       	out	0x0e, r24	; 14
    28b4:	89 cf       	rjmp	.-238    	; 0x27c8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    28b6:	2f b1       	in	r18, 0x0f	; 15
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	08 2e       	mov	r0, r24
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <nrk_gpio_toggle+0x192>
    28be:	35 95       	asr	r19
    28c0:	27 95       	ror	r18
    28c2:	0a 94       	dec	r0
    28c4:	e2 f7       	brpl	.-8      	; 0x28be <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    28c6:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    28c8:	20 fd       	sbrc	r18, 0
    28ca:	0b c0       	rjmp	.+22     	; 0x28e2 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    28cc:	21 e0       	ldi	r18, 0x01	; 1
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	b9 01       	movw	r22, r18
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <nrk_gpio_toggle+0x1a8>
    28d4:	66 0f       	add	r22, r22
    28d6:	77 1f       	adc	r23, r23
    28d8:	8a 95       	dec	r24
    28da:	e2 f7       	brpl	.-8      	; 0x28d4 <nrk_gpio_toggle+0x1a4>
    28dc:	cb 01       	movw	r24, r22
    28de:	84 2b       	or	r24, r20
    28e0:	0b c0       	rjmp	.+22     	; 0x28f8 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    28e2:	21 e0       	ldi	r18, 0x01	; 1
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	b9 01       	movw	r22, r18
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <nrk_gpio_toggle+0x1be>
    28ea:	66 0f       	add	r22, r22
    28ec:	77 1f       	adc	r23, r23
    28ee:	8a 95       	dec	r24
    28f0:	e2 f7       	brpl	.-8      	; 0x28ea <nrk_gpio_toggle+0x1ba>
    28f2:	cb 01       	movw	r24, r22
    28f4:	80 95       	com	r24
    28f6:	84 23       	and	r24, r20
    28f8:	81 bb       	out	0x11, r24	; 17
    28fa:	66 cf       	rjmp	.-308    	; 0x27c8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    28fc:	22 b3       	in	r18, 0x12	; 18
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	08 2e       	mov	r0, r24
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <nrk_gpio_toggle+0x1d8>
    2904:	35 95       	asr	r19
    2906:	27 95       	ror	r18
    2908:	0a 94       	dec	r0
    290a:	e2 f7       	brpl	.-8      	; 0x2904 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    290c:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    290e:	20 fd       	sbrc	r18, 0
    2910:	0b c0       	rjmp	.+22     	; 0x2928 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2912:	21 e0       	ldi	r18, 0x01	; 1
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	b9 01       	movw	r22, r18
    2918:	02 c0       	rjmp	.+4      	; 0x291e <nrk_gpio_toggle+0x1ee>
    291a:	66 0f       	add	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	8a 95       	dec	r24
    2920:	e2 f7       	brpl	.-8      	; 0x291a <nrk_gpio_toggle+0x1ea>
    2922:	cb 01       	movw	r24, r22
    2924:	84 2b       	or	r24, r20
    2926:	0b c0       	rjmp	.+22     	; 0x293e <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    2928:	21 e0       	ldi	r18, 0x01	; 1
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	b9 01       	movw	r22, r18
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <nrk_gpio_toggle+0x204>
    2930:	66 0f       	add	r22, r22
    2932:	77 1f       	adc	r23, r23
    2934:	8a 95       	dec	r24
    2936:	e2 f7       	brpl	.-8      	; 0x2930 <nrk_gpio_toggle+0x200>
    2938:	cb 01       	movw	r24, r22
    293a:	80 95       	com	r24
    293c:	84 23       	and	r24, r20
    293e:	84 bb       	out	0x14, r24	; 20
    2940:	43 cf       	rjmp	.-378    	; 0x27c8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    2942:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2944:	08 95       	ret

00002946 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2946:	8f 3f       	cpi	r24, 0xFF	; 255
    2948:	09 f4       	brne	.+2      	; 0x294c <nrk_gpio_direction+0x6>
    294a:	d5 c0       	rjmp	.+426    	; 0x2af6 <nrk_gpio_direction+0x1b0>
    294c:	e8 2f       	mov	r30, r24
    294e:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    2950:	4e 2f       	mov	r20, r30
    2952:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    2954:	61 11       	cpse	r22, r1
    2956:	67 c0       	rjmp	.+206    	; 0x2a26 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    2958:	47 30       	cpi	r20, 0x07	; 7
    295a:	51 05       	cpc	r21, r1
    295c:	08 f0       	brcs	.+2      	; 0x2960 <nrk_gpio_direction+0x1a>
    295e:	cb c0       	rjmp	.+406    	; 0x2af6 <nrk_gpio_direction+0x1b0>
    2960:	fa 01       	movw	r30, r20
    2962:	e4 55       	subi	r30, 0x54	; 84
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	86 95       	lsr	r24
    2968:	86 95       	lsr	r24
    296a:	86 95       	lsr	r24
    296c:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    2970:	41 b1       	in	r20, 0x01	; 1
    2972:	21 e0       	ldi	r18, 0x01	; 1
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	b9 01       	movw	r22, r18
    2978:	02 c0       	rjmp	.+4      	; 0x297e <nrk_gpio_direction+0x38>
    297a:	66 0f       	add	r22, r22
    297c:	77 1f       	adc	r23, r23
    297e:	8a 95       	dec	r24
    2980:	e2 f7       	brpl	.-8      	; 0x297a <nrk_gpio_direction+0x34>
    2982:	cb 01       	movw	r24, r22
    2984:	80 95       	com	r24
    2986:	84 23       	and	r24, r20
    2988:	65 c0       	rjmp	.+202    	; 0x2a54 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    298a:	44 b1       	in	r20, 0x04	; 4
    298c:	21 e0       	ldi	r18, 0x01	; 1
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	b9 01       	movw	r22, r18
    2992:	02 c0       	rjmp	.+4      	; 0x2998 <nrk_gpio_direction+0x52>
    2994:	66 0f       	add	r22, r22
    2996:	77 1f       	adc	r23, r23
    2998:	8a 95       	dec	r24
    299a:	e2 f7       	brpl	.-8      	; 0x2994 <nrk_gpio_direction+0x4e>
    299c:	cb 01       	movw	r24, r22
    299e:	80 95       	com	r24
    29a0:	84 23       	and	r24, r20
    29a2:	65 c0       	rjmp	.+202    	; 0x2a6e <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    29a4:	47 b1       	in	r20, 0x07	; 7
    29a6:	21 e0       	ldi	r18, 0x01	; 1
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	b9 01       	movw	r22, r18
    29ac:	02 c0       	rjmp	.+4      	; 0x29b2 <nrk_gpio_direction+0x6c>
    29ae:	66 0f       	add	r22, r22
    29b0:	77 1f       	adc	r23, r23
    29b2:	8a 95       	dec	r24
    29b4:	e2 f7       	brpl	.-8      	; 0x29ae <nrk_gpio_direction+0x68>
    29b6:	cb 01       	movw	r24, r22
    29b8:	80 95       	com	r24
    29ba:	84 23       	and	r24, r20
    29bc:	65 c0       	rjmp	.+202    	; 0x2a88 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    29be:	4a b1       	in	r20, 0x0a	; 10
    29c0:	21 e0       	ldi	r18, 0x01	; 1
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	b9 01       	movw	r22, r18
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <nrk_gpio_direction+0x86>
    29c8:	66 0f       	add	r22, r22
    29ca:	77 1f       	adc	r23, r23
    29cc:	8a 95       	dec	r24
    29ce:	e2 f7       	brpl	.-8      	; 0x29c8 <nrk_gpio_direction+0x82>
    29d0:	cb 01       	movw	r24, r22
    29d2:	80 95       	com	r24
    29d4:	84 23       	and	r24, r20
    29d6:	65 c0       	rjmp	.+202    	; 0x2aa2 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    29d8:	4d b1       	in	r20, 0x0d	; 13
    29da:	21 e0       	ldi	r18, 0x01	; 1
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	b9 01       	movw	r22, r18
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <nrk_gpio_direction+0xa0>
    29e2:	66 0f       	add	r22, r22
    29e4:	77 1f       	adc	r23, r23
    29e6:	8a 95       	dec	r24
    29e8:	e2 f7       	brpl	.-8      	; 0x29e2 <nrk_gpio_direction+0x9c>
    29ea:	cb 01       	movw	r24, r22
    29ec:	80 95       	com	r24
    29ee:	84 23       	and	r24, r20
    29f0:	65 c0       	rjmp	.+202    	; 0x2abc <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    29f2:	40 b3       	in	r20, 0x10	; 16
    29f4:	21 e0       	ldi	r18, 0x01	; 1
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	b9 01       	movw	r22, r18
    29fa:	02 c0       	rjmp	.+4      	; 0x2a00 <nrk_gpio_direction+0xba>
    29fc:	66 0f       	add	r22, r22
    29fe:	77 1f       	adc	r23, r23
    2a00:	8a 95       	dec	r24
    2a02:	e2 f7       	brpl	.-8      	; 0x29fc <nrk_gpio_direction+0xb6>
    2a04:	cb 01       	movw	r24, r22
    2a06:	80 95       	com	r24
    2a08:	84 23       	and	r24, r20
    2a0a:	65 c0       	rjmp	.+202    	; 0x2ad6 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    2a0c:	43 b3       	in	r20, 0x13	; 19
    2a0e:	21 e0       	ldi	r18, 0x01	; 1
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	b9 01       	movw	r22, r18
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <nrk_gpio_direction+0xd4>
    2a16:	66 0f       	add	r22, r22
    2a18:	77 1f       	adc	r23, r23
    2a1a:	8a 95       	dec	r24
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <nrk_gpio_direction+0xd0>
    2a1e:	cb 01       	movw	r24, r22
    2a20:	80 95       	com	r24
    2a22:	84 23       	and	r24, r20
    2a24:	65 c0       	rjmp	.+202    	; 0x2af0 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    2a26:	47 30       	cpi	r20, 0x07	; 7
    2a28:	51 05       	cpc	r21, r1
    2a2a:	08 f0       	brcs	.+2      	; 0x2a2e <nrk_gpio_direction+0xe8>
    2a2c:	64 c0       	rjmp	.+200    	; 0x2af6 <nrk_gpio_direction+0x1b0>
    2a2e:	fa 01       	movw	r30, r20
    2a30:	ed 54       	subi	r30, 0x4D	; 77
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	86 95       	lsr	r24
    2a36:	86 95       	lsr	r24
    2a38:	86 95       	lsr	r24
    2a3a:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    2a3e:	41 b1       	in	r20, 0x01	; 1
    2a40:	21 e0       	ldi	r18, 0x01	; 1
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	b9 01       	movw	r22, r18
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <nrk_gpio_direction+0x106>
    2a48:	66 0f       	add	r22, r22
    2a4a:	77 1f       	adc	r23, r23
    2a4c:	8a 95       	dec	r24
    2a4e:	e2 f7       	brpl	.-8      	; 0x2a48 <nrk_gpio_direction+0x102>
    2a50:	cb 01       	movw	r24, r22
    2a52:	84 2b       	or	r24, r20
    2a54:	81 b9       	out	0x01, r24	; 1
    2a56:	4d c0       	rjmp	.+154    	; 0x2af2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    2a58:	44 b1       	in	r20, 0x04	; 4
    2a5a:	21 e0       	ldi	r18, 0x01	; 1
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	b9 01       	movw	r22, r18
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <nrk_gpio_direction+0x120>
    2a62:	66 0f       	add	r22, r22
    2a64:	77 1f       	adc	r23, r23
    2a66:	8a 95       	dec	r24
    2a68:	e2 f7       	brpl	.-8      	; 0x2a62 <nrk_gpio_direction+0x11c>
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	84 2b       	or	r24, r20
    2a6e:	84 b9       	out	0x04, r24	; 4
    2a70:	40 c0       	rjmp	.+128    	; 0x2af2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    2a72:	47 b1       	in	r20, 0x07	; 7
    2a74:	21 e0       	ldi	r18, 0x01	; 1
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	b9 01       	movw	r22, r18
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <nrk_gpio_direction+0x13a>
    2a7c:	66 0f       	add	r22, r22
    2a7e:	77 1f       	adc	r23, r23
    2a80:	8a 95       	dec	r24
    2a82:	e2 f7       	brpl	.-8      	; 0x2a7c <nrk_gpio_direction+0x136>
    2a84:	cb 01       	movw	r24, r22
    2a86:	84 2b       	or	r24, r20
    2a88:	87 b9       	out	0x07, r24	; 7
    2a8a:	33 c0       	rjmp	.+102    	; 0x2af2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    2a8c:	4a b1       	in	r20, 0x0a	; 10
    2a8e:	21 e0       	ldi	r18, 0x01	; 1
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	b9 01       	movw	r22, r18
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <nrk_gpio_direction+0x154>
    2a96:	66 0f       	add	r22, r22
    2a98:	77 1f       	adc	r23, r23
    2a9a:	8a 95       	dec	r24
    2a9c:	e2 f7       	brpl	.-8      	; 0x2a96 <nrk_gpio_direction+0x150>
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	84 2b       	or	r24, r20
    2aa2:	8a b9       	out	0x0a, r24	; 10
    2aa4:	26 c0       	rjmp	.+76     	; 0x2af2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    2aa6:	4d b1       	in	r20, 0x0d	; 13
    2aa8:	21 e0       	ldi	r18, 0x01	; 1
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	b9 01       	movw	r22, r18
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <nrk_gpio_direction+0x16e>
    2ab0:	66 0f       	add	r22, r22
    2ab2:	77 1f       	adc	r23, r23
    2ab4:	8a 95       	dec	r24
    2ab6:	e2 f7       	brpl	.-8      	; 0x2ab0 <nrk_gpio_direction+0x16a>
    2ab8:	cb 01       	movw	r24, r22
    2aba:	84 2b       	or	r24, r20
    2abc:	8d b9       	out	0x0d, r24	; 13
    2abe:	19 c0       	rjmp	.+50     	; 0x2af2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    2ac0:	40 b3       	in	r20, 0x10	; 16
    2ac2:	21 e0       	ldi	r18, 0x01	; 1
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	b9 01       	movw	r22, r18
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <nrk_gpio_direction+0x188>
    2aca:	66 0f       	add	r22, r22
    2acc:	77 1f       	adc	r23, r23
    2ace:	8a 95       	dec	r24
    2ad0:	e2 f7       	brpl	.-8      	; 0x2aca <nrk_gpio_direction+0x184>
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	84 2b       	or	r24, r20
    2ad6:	80 bb       	out	0x10, r24	; 16
    2ad8:	0c c0       	rjmp	.+24     	; 0x2af2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2ada:	43 b3       	in	r20, 0x13	; 19
    2adc:	21 e0       	ldi	r18, 0x01	; 1
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	b9 01       	movw	r22, r18
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <nrk_gpio_direction+0x1a2>
    2ae4:	66 0f       	add	r22, r22
    2ae6:	77 1f       	adc	r23, r23
    2ae8:	8a 95       	dec	r24
    2aea:	e2 f7       	brpl	.-8      	; 0x2ae4 <nrk_gpio_direction+0x19e>
    2aec:	cb 01       	movw	r24, r22
    2aee:	84 2b       	or	r24, r20
    2af0:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    2af2:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2af4:	08 95       	ret
                        default: return -1;
    2af6:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    2af8:	08 95       	ret

00002afa <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2afa:	81 11       	cpse	r24, r1
    2afc:	06 c0       	rjmp	.+12     	; 0x2b0a <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    2afe:	80 b1       	in	r24, 0x00	; 0
    2b00:	86 95       	lsr	r24
    2b02:	81 70       	andi	r24, 0x01	; 1
    2b04:	91 e0       	ldi	r25, 0x01	; 1
    2b06:	89 27       	eor	r24, r25
    2b08:	08 95       	ret
	} 
return -1;
    2b0a:	8f ef       	ldi	r24, 0xFF	; 255
}
    2b0c:	08 95       	ret

00002b0e <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	11 f4       	brne	.+4      	; 0x2b16 <nrk_led_toggle+0x8>
    2b12:	83 e2       	ldi	r24, 0x23	; 35
    2b14:	0d c0       	rjmp	.+26     	; 0x2b30 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    2b16:	81 30       	cpi	r24, 0x01	; 1
    2b18:	91 05       	cpc	r25, r1
    2b1a:	11 f4       	brne	.+4      	; 0x2b20 <nrk_led_toggle+0x12>
    2b1c:	8b e2       	ldi	r24, 0x2B	; 43
    2b1e:	08 c0       	rjmp	.+16     	; 0x2b30 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2b20:	82 30       	cpi	r24, 0x02	; 2
    2b22:	91 05       	cpc	r25, r1
    2b24:	11 f4       	brne	.+4      	; 0x2b2a <nrk_led_toggle+0x1c>
    2b26:	83 e3       	ldi	r24, 0x33	; 51
    2b28:	03 c0       	rjmp	.+6      	; 0x2b30 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2b2a:	03 97       	sbiw	r24, 0x03	; 3
    2b2c:	29 f4       	brne	.+10     	; 0x2b38 <nrk_led_toggle+0x2a>
    2b2e:	8b e3       	ldi	r24, 0x3B	; 59
    2b30:	0e 94 98 13 	call	0x2730	; 0x2730 <nrk_gpio_toggle>
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	08 95       	ret
return -1;
    2b38:	8f ef       	ldi	r24, 0xFF	; 255
}
    2b3a:	08 95       	ret

00002b3c <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	11 f4       	brne	.+4      	; 0x2b44 <nrk_led_clr+0x8>
    2b40:	83 e2       	ldi	r24, 0x23	; 35
    2b42:	0d c0       	rjmp	.+26     	; 0x2b5e <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    2b44:	81 30       	cpi	r24, 0x01	; 1
    2b46:	91 05       	cpc	r25, r1
    2b48:	11 f4       	brne	.+4      	; 0x2b4e <nrk_led_clr+0x12>
    2b4a:	8b e2       	ldi	r24, 0x2B	; 43
    2b4c:	08 c0       	rjmp	.+16     	; 0x2b5e <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    2b4e:	82 30       	cpi	r24, 0x02	; 2
    2b50:	91 05       	cpc	r25, r1
    2b52:	11 f4       	brne	.+4      	; 0x2b58 <nrk_led_clr+0x1c>
    2b54:	83 e3       	ldi	r24, 0x33	; 51
    2b56:	03 c0       	rjmp	.+6      	; 0x2b5e <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    2b58:	03 97       	sbiw	r24, 0x03	; 3
    2b5a:	29 f4       	brne	.+10     	; 0x2b66 <nrk_led_clr+0x2a>
    2b5c:	8b e3       	ldi	r24, 0x3B	; 59
    2b5e:	0e 94 85 12 	call	0x250a	; 0x250a <nrk_gpio_set>
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	08 95       	ret
return -1;
    2b66:	8f ef       	ldi	r24, 0xFF	; 255
}
    2b68:	08 95       	ret

00002b6a <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	11 f4       	brne	.+4      	; 0x2b72 <nrk_led_set+0x8>
    2b6e:	83 e2       	ldi	r24, 0x23	; 35
    2b70:	0d c0       	rjmp	.+26     	; 0x2b8c <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    2b72:	81 30       	cpi	r24, 0x01	; 1
    2b74:	91 05       	cpc	r25, r1
    2b76:	11 f4       	brne	.+4      	; 0x2b7c <nrk_led_set+0x12>
    2b78:	8b e2       	ldi	r24, 0x2B	; 43
    2b7a:	08 c0       	rjmp	.+16     	; 0x2b8c <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    2b7c:	82 30       	cpi	r24, 0x02	; 2
    2b7e:	91 05       	cpc	r25, r1
    2b80:	11 f4       	brne	.+4      	; 0x2b86 <nrk_led_set+0x1c>
    2b82:	83 e3       	ldi	r24, 0x33	; 51
    2b84:	03 c0       	rjmp	.+6      	; 0x2b8c <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    2b86:	03 97       	sbiw	r24, 0x03	; 3
    2b88:	29 f4       	brne	.+10     	; 0x2b94 <nrk_led_set+0x2a>
    2b8a:	8b e3       	ldi	r24, 0x3B	; 59
    2b8c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <nrk_gpio_clr>
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	08 95       	ret
return -1;
    2b94:	8f ef       	ldi	r24, 0xFF	; 255
}
    2b96:	08 95       	ret

00002b98 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    2b98:	88 23       	and	r24, r24
    2b9a:	19 f0       	breq	.+6      	; 0x2ba2 <nrk_gpio_pullups+0xa>
    2b9c:	85 b7       	in	r24, 0x35	; 53
    2b9e:	8f 7e       	andi	r24, 0xEF	; 239
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    2ba2:	85 b7       	in	r24, 0x35	; 53
    2ba4:	80 61       	ori	r24, 0x10	; 16
    2ba6:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	08 95       	ret

00002bac <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    2bac:	90 91 c8 00 	lds	r25, 0x00C8
    2bb0:	95 ff       	sbrs	r25, 5
    2bb2:	fc cf       	rjmp	.-8      	; 0x2bac <putc1>
    2bb4:	80 93 ce 00 	sts	0x00CE, r24
    2bb8:	08 95       	ret

00002bba <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2bba:	90 93 c5 00 	sts	0x00C5, r25
    2bbe:	80 93 c4 00 	sts	0x00C4, r24
    2bc2:	86 e0       	ldi	r24, 0x06	; 6
    2bc4:	80 93 c2 00 	sts	0x00C2, r24
    2bc8:	e1 ec       	ldi	r30, 0xC1	; 193
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	8b 7f       	andi	r24, 0xFB	; 251
    2bd0:	80 83       	st	Z, r24
    2bd2:	a0 ec       	ldi	r26, 0xC0	; 192
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	8c 91       	ld	r24, X
    2bd8:	82 60       	ori	r24, 0x02	; 2
    2bda:	8c 93       	st	X, r24
ENABLE_UART0();
    2bdc:	80 81       	ld	r24, Z
    2bde:	88 61       	ori	r24, 0x18	; 24
    2be0:	80 83       	st	Z, r24
    2be2:	08 95       	ret

00002be4 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2be4:	90 93 cd 00 	sts	0x00CD, r25
    2be8:	80 93 cc 00 	sts	0x00CC, r24
    2bec:	86 e0       	ldi	r24, 0x06	; 6
    2bee:	80 93 ca 00 	sts	0x00CA, r24
    2bf2:	e9 ec       	ldi	r30, 0xC9	; 201
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	8b 7f       	andi	r24, 0xFB	; 251
    2bfa:	80 83       	st	Z, r24
    2bfc:	a8 ec       	ldi	r26, 0xC8	; 200
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	8c 91       	ld	r24, X
    2c02:	82 60       	ori	r24, 0x02	; 2
    2c04:	8c 93       	st	X, r24
ENABLE_UART1();
    2c06:	80 81       	ld	r24, Z
    2c08:	88 61       	ori	r24, 0x18	; 24
    2c0a:	80 83       	st	Z, r24
    2c0c:	08 95       	ret

00002c0e <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2c12:	0e 94 dd 15 	call	0x2bba	; 0x2bba <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    2c16:	6b e3       	ldi	r22, 0x3B	; 59
    2c18:	72 e1       	ldi	r23, 0x12	; 18
    2c1a:	87 e4       	ldi	r24, 0x47	; 71
    2c1c:	92 e1       	ldi	r25, 0x12	; 18
    2c1e:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <fdevopen>
    2c22:	c4 e4       	ldi	r28, 0x44	; 68
    2c24:	dc e0       	ldi	r29, 0x0C	; 12
    2c26:	9b 83       	std	Y+3, r25	; 0x03
    2c28:	8a 83       	std	Y+2, r24	; 0x02
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    2c2a:	6b e3       	ldi	r22, 0x3B	; 59
    2c2c:	72 e1       	ldi	r23, 0x12	; 18
    2c2e:	87 e4       	ldi	r24, 0x47	; 71
    2c30:	92 e1       	ldi	r25, 0x12	; 18
    2c32:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <fdevopen>
    2c36:	99 83       	std	Y+1, r25	; 0x01
    2c38:	88 83       	st	Y, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	08 95       	ret

00002c40 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    2c40:	80 91 c8 00 	lds	r24, 0x00C8
    2c44:	87 ff       	sbrs	r24, 7
    2c46:	fc cf       	rjmp	.-8      	; 0x2c40 <getc1>
    2c48:	80 91 c8 00 	lds	r24, 0x00C8
    2c4c:	8f 77       	andi	r24, 0x7F	; 127
    2c4e:	80 93 c8 00 	sts	0x00C8, r24
    2c52:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    2c56:	08 95       	ret

00002c58 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	d1 f7       	brne	.-12     	; 0x2c58 <halWait>

} // halWait
    2c64:	08 95       	ret

00002c66 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    2c66:	0c 94 f3 34 	jmp	0x69e6	; 0x69e6 <__eerd_byte_m128rfa1>

00002c6a <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2c6a:	0e 94 fb 34 	call	0x69f6	; 0x69f6 <__eewr_byte_m128rfa1>
}
    2c6e:	08 95       	ret

00002c70 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    2c70:	ef 92       	push	r14
    2c72:	ff 92       	push	r15
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__eerd_byte_m128rfa1>
    2c86:	18 2f       	mov	r17, r24
    2c88:	f7 01       	movw	r30, r14
    2c8a:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__eerd_byte_m128rfa1>
    2c94:	08 2f       	mov	r16, r24
    2c96:	f7 01       	movw	r30, r14
    2c98:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    2c9a:	82 e0       	ldi	r24, 0x02	; 2
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__eerd_byte_m128rfa1>
    2ca2:	d8 2f       	mov	r29, r24
    2ca4:	f7 01       	movw	r30, r14
    2ca6:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    2ca8:	83 e0       	ldi	r24, 0x03	; 3
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__eerd_byte_m128rfa1>
    2cb0:	c8 2f       	mov	r28, r24
    2cb2:	f7 01       	movw	r30, r14
    2cb4:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    2cb6:	84 e0       	ldi	r24, 0x04	; 4
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__eerd_byte_m128rfa1>
    2cbe:	10 0f       	add	r17, r16
    2cc0:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    2cc2:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    2cc4:	8c 17       	cp	r24, r28
    2cc6:	11 f0       	breq	.+4      	; 0x2ccc <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    2cc8:	8f ef       	ldi	r24, 0xFF	; 255
    2cca:	01 c0       	rjmp	.+2      	; 0x2cce <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	1f 91       	pop	r17
    2cd4:	0f 91       	pop	r16
    2cd6:	ff 90       	pop	r15
    2cd8:	ef 90       	pop	r14
    2cda:	08 95       	ret

00002cdc <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    2ce2:	85 e0       	ldi	r24, 0x05	; 5
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__eerd_byte_m128rfa1>
    2cea:	88 83       	st	Y, r24
return NRK_OK;
}
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	08 95       	ret

00002cf4 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	60 81       	ld	r22, Z
    2cf8:	86 e0       	ldi	r24, 0x06	; 6
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	0e 94 fb 34 	call	0x69f6	; 0x69f6 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	08 95       	ret

00002d04 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2d0a:	86 e0       	ldi	r24, 0x06	; 6
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__eerd_byte_m128rfa1>
    2d12:	88 83       	st	Y, r24
  return NRK_OK;
}
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	08 95       	ret

00002d1c <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	8c 01       	movw	r16, r24
    2d26:	c0 e0       	ldi	r28, 0x00	; 0
    2d28:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	08 96       	adiw	r24, 0x08	; 8
    2d2e:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__eerd_byte_m128rfa1>
    2d32:	f8 01       	movw	r30, r16
    2d34:	81 93       	st	Z+, r24
    2d36:	8f 01       	movw	r16, r30
    2d38:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2d3a:	c0 31       	cpi	r28, 0x10	; 16
    2d3c:	d1 05       	cpc	r29, r1
    2d3e:	a9 f7       	brne	.-22     	; 0x2d2a <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	df 91       	pop	r29
    2d44:	cf 91       	pop	r28
    2d46:	1f 91       	pop	r17
    2d48:	0f 91       	pop	r16
    2d4a:	08 95       	ret

00002d4c <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	8c 01       	movw	r16, r24
    2d56:	c0 e0       	ldi	r28, 0x00	; 0
    2d58:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	61 91       	ld	r22, Z+
    2d5e:	8f 01       	movw	r16, r30
    2d60:	ce 01       	movw	r24, r28
    2d62:	08 96       	adiw	r24, 0x08	; 8
    2d64:	0e 94 fb 34 	call	0x69f6	; 0x69f6 <__eewr_byte_m128rfa1>
    2d68:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2d6a:	c0 31       	cpi	r28, 0x10	; 16
    2d6c:	d1 05       	cpc	r29, r1
    2d6e:	a9 f7       	brne	.-22     	; 0x2d5a <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	08 95       	ret

00002d7c <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
    2d80:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    2d82:	87 e0       	ldi	r24, 0x07	; 7
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__eerd_byte_m128rfa1>
    2d8a:	88 83       	st	Y, r24
  return NRK_OK;
}
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	08 95       	ret

00002d94 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    2d94:	fc 01       	movw	r30, r24
    2d96:	60 81       	ld	r22, Z
    2d98:	87 e0       	ldi	r24, 0x07	; 7
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	0e 94 fb 34 	call	0x69f6	; 0x69f6 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	08 95       	ret

00002da4 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2da4:	f8 94       	cli
    2da6:	08 95       	ret

00002da8 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2da8:	78 94       	sei
    2daa:	08 95       	ret

00002dac <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    2dac:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
while(1);
    2db0:	ff cf       	rjmp	.-2      	; 0x2db0 <nrk_halt+0x4>

00002db2 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	a3 97       	sbiw	r28, 0x23	; 35
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    2dc6:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <nrk_signal_create>
    2dca:	80 93 d1 0b 	sts	0x0BD1, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    2dce:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd0:	21 f4       	brne	.+8      	; 0x2dda <nrk_init+0x28>
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	8e e0       	ldi	r24, 0x0E	; 14
    2dd6:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    2dda:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    2dde:	80 ff       	sbrs	r24, 0
    2de0:	04 c0       	rjmp	.+8      	; 0x2dea <nrk_init+0x38>
    2de2:	60 e0       	ldi	r22, 0x00	; 0
    2de4:	86 e0       	ldi	r24, 0x06	; 6
    2de6:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
	   }
   #endif
   #endif

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
    2dea:	0e 94 38 30 	call	0x6070	; 0x6070 <nrk_watchdog_check>
    2dee:	8f 3f       	cpi	r24, 0xFF	; 255
    2df0:	31 f4       	brne	.+12     	; 0x2dfe <nrk_init+0x4c>
	{
    	nrk_watchdog_disable();
    2df2:	0e 94 1b 30 	call	0x6036	; 0x6036 <nrk_watchdog_disable>
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	80 e1       	ldi	r24, 0x10	; 16
    2dfa:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
	}
    nrk_watchdog_enable();
    2dfe:	0e 94 29 30 	call	0x6052	; 0x6052 <nrk_watchdog_enable>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2e02:	10 92 d4 0b 	sts	0x0BD4, r1
    nrk_cur_task_TCB = NULL;
    2e06:	10 92 e2 0b 	sts	0x0BE2, r1
    2e0a:	10 92 e1 0b 	sts	0x0BE1, r1
    
    nrk_high_ready_TCB = NULL;
    2e0e:	10 92 d3 0b 	sts	0x0BD3, r1
    2e12:	10 92 d2 0b 	sts	0x0BD2, r1
    nrk_high_ready_prio = 0; 
    2e16:	10 92 e3 0b 	sts	0x0BE3, r1

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
    2e1a:	0e 94 82 18 	call	0x3104	; 0x3104 <nrk_stats_reset>
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2e1e:	10 92 e0 0b 	sts	0x0BE0, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2e22:	8f ef       	ldi	r24, 0xFF	; 255
    2e24:	80 93 ca 0b 	sts	0x0BCA, r24
    nrk_sem_list[i].value=-1;
    2e28:	80 93 cc 0b 	sts	0x0BCC, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2e2c:	80 93 cb 0b 	sts	0x0BCB, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2e30:	80 93 cd 0b 	sts	0x0BCD, r24
    nrk_sem_list[i].value=-1;
    2e34:	80 93 cf 0b 	sts	0x0BCF, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2e38:	80 93 ce 0b 	sts	0x0BCE, r24
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2e40:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    2e42:	2f ef       	ldi	r18, 0xFF	; 255
    2e44:	fc 01       	movw	r30, r24
    2e46:	ef 50       	subi	r30, 0x0F	; 15
    2e48:	f5 4f       	sbci	r31, 0xF5	; 245
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2e4a:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    2e4c:	20 87       	std	Z+8, r18	; 0x08
    2e4e:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    2e50:	87 3d       	cpi	r24, 0xD7	; 215
    2e52:	91 05       	cpc	r25, r1
    2e54:	b9 f7       	brne	.-18     	; 0x2e44 <nrk_init+0x92>
    2e56:	ed e1       	ldi	r30, 0x1D	; 29
    2e58:	fc e0       	ldi	r31, 0x0C	; 12
    2e5a:	cf 01       	movw	r24, r30
    2e5c:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2e5e:	94 83       	std	Z+4, r25	; 0x04
    2e60:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2e62:	f7 83       	std	Z+7, r31	; 0x07
    2e64:	e6 83       	std	Z+6, r30	; 0x06
    2e66:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    2e68:	8c e0       	ldi	r24, 0x0C	; 12
    2e6a:	e6 33       	cpi	r30, 0x36	; 54
    2e6c:	f8 07       	cpc	r31, r24
    2e6e:	a9 f7       	brne	.-22     	; 0x2e5a <nrk_init+0xa8>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2e70:	10 92 1f 0c 	sts	0x0C1F, r1
    2e74:	10 92 1e 0c 	sts	0x0C1E, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2e78:	10 92 3a 0c 	sts	0x0C3A, r1
    2e7c:	10 92 39 0c 	sts	0x0C39, r1
	_head_node = NULL;
    2e80:	10 92 d7 0b 	sts	0x0BD7, r1
    2e84:	10 92 d6 0b 	sts	0x0BD6, r1
	_free_node = &_nrk_readyQ[0];
    2e88:	8d e1       	ldi	r24, 0x1D	; 29
    2e8a:	9c e0       	ldi	r25, 0x0C	; 12
    2e8c:	90 93 f0 0a 	sts	0x0AF0, r25
    2e90:	80 93 ef 0a 	sts	0x0AEF, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2e94:	65 ee       	ldi	r22, 0xE5	; 229
    2e96:	77 e2       	ldi	r23, 0x27	; 39
    2e98:	ce 01       	movw	r24, r28
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	0e 94 59 30 	call	0x60b2	; 0x60b2 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	50 e0       	ldi	r21, 0x00	; 0
    2ea4:	6c e2       	ldi	r22, 0x2C	; 44
    2ea6:	7a e0       	ldi	r23, 0x0A	; 10
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	01 96       	adiw	r24, 0x01	; 1
    2eac:	0e 94 5d 30 	call	0x60ba	; 0x60ba <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2eb0:	85 e5       	ldi	r24, 0x55	; 85
    2eb2:	80 93 2c 0a 	sts	0x0A2C, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2eb6:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    2eb8:	1c 86       	std	Y+12, r1	; 0x0c
    2eba:	1d 86       	std	Y+13, r1	; 0x0d
    2ebc:	1e 86       	std	Y+14, r1	; 0x0e
    2ebe:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    2ec0:	18 8a       	std	Y+16, r1	; 0x10
    2ec2:	19 8a       	std	Y+17, r1	; 0x11
    2ec4:	1a 8a       	std	Y+18, r1	; 0x12
    2ec6:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2ec8:	1c 8a       	std	Y+20, r1	; 0x14
    2eca:	1d 8a       	std	Y+21, r1	; 0x15
    2ecc:	1e 8a       	std	Y+22, r1	; 0x16
    2ece:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    2ed0:	18 8e       	std	Y+24, r1	; 0x18
    2ed2:	19 8e       	std	Y+25, r1	; 0x19
    2ed4:	1a 8e       	std	Y+26, r1	; 0x1a
    2ed6:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2ed8:	1c 8e       	std	Y+28, r1	; 0x1c
    2eda:	1d 8e       	std	Y+29, r1	; 0x1d
    2edc:	1e 8e       	std	Y+30, r1	; 0x1e
    2ede:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2ee0:	18 a2       	std	Y+32, r1	; 0x20
    2ee2:	19 a2       	std	Y+33, r1	; 0x21
    2ee4:	1a a2       	std	Y+34, r1	; 0x22
    2ee6:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2eec:	92 e0       	ldi	r25, 0x02	; 2
    2eee:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2ef0:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	01 96       	adiw	r24, 0x01	; 1
    2ef6:	0e 94 1a 23 	call	0x4634	; 0x4634 <nrk_activate_task>
	
}
    2efa:	a3 96       	adiw	r28, 0x23	; 35
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	08 95       	ret

00002f0c <nrk_start>:




void nrk_start (void)
{
    2f0c:	09 ef       	ldi	r16, 0xF9	; 249
    2f0e:	1a e0       	ldi	r17, 0x0A	; 10
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2f10:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2f12:	f8 01       	movw	r30, r16
    2f14:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    2f16:	ff ef       	ldi	r31, 0xFF	; 255
    2f18:	df 12       	cpse	r13, r31
    2f1a:	22 c0       	rjmp	.+68     	; 0x2f60 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2f1c:	cf 5f       	subi	r28, 0xFF	; 255
    2f1e:	05 5d       	subi	r16, 0xD5	; 213
    2f20:	1f 4f       	sbci	r17, 0xFF	; 255
    2f22:	c5 30       	cpi	r28, 0x05	; 5
    2f24:	b1 f7       	brne	.-20     	; 0x2f12 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2f26:	0e 94 09 22 	call	0x4412	; 0x4412 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2f2a:	2b e2       	ldi	r18, 0x2B	; 43
    2f2c:	82 02       	muls	r24, r18
    2f2e:	c0 01       	movw	r24, r0
    2f30:	11 24       	eor	r1, r1
    2f32:	fc 01       	movw	r30, r24
    2f34:	ef 50       	subi	r30, 0x0F	; 15
    2f36:	f5 4f       	sbci	r31, 0xF5	; 245
    2f38:	82 85       	ldd	r24, Z+10	; 0x0a
    2f3a:	80 93 e3 0b 	sts	0x0BE3, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2f3e:	f0 93 e2 0b 	sts	0x0BE2, r31
    2f42:	e0 93 e1 0b 	sts	0x0BE1, r30
    2f46:	f0 93 d3 0b 	sts	0x0BD3, r31
    2f4a:	e0 93 d2 0b 	sts	0x0BD2, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2f4e:	80 93 d4 0b 	sts	0x0BD4, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2f52:	0e 94 cf 30 	call	0x619e	; 0x619e <nrk_target_start>
    nrk_stack_pointer_init(); 
    2f56:	0e 94 b9 30 	call	0x6172	; 0x6172 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2f5a:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <nrk_start_high_ready_task>
    2f5e:	16 c0       	rjmp	.+44     	; 0x2f8c <nrk_start+0x80>
    2f60:	89 ef       	ldi	r24, 0xF9	; 249
    2f62:	e8 2e       	mov	r14, r24
    2f64:	8a e0       	ldi	r24, 0x0A	; 10
    2f66:	f8 2e       	mov	r15, r24
    2f68:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2f6a:	cd 17       	cp	r28, r29
    2f6c:	41 f0       	breq	.+16     	; 0x2f7e <nrk_start+0x72>
    2f6e:	f7 01       	movw	r30, r14
    2f70:	80 81       	ld	r24, Z
    2f72:	d8 12       	cpse	r13, r24
    2f74:	04 c0       	rjmp	.+8      	; 0x2f7e <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2f76:	6d 2d       	mov	r22, r13
    2f78:	85 e0       	ldi	r24, 0x05	; 5
    2f7a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    2f7e:	df 5f       	subi	r29, 0xFF	; 255
    2f80:	fb e2       	ldi	r31, 0x2B	; 43
    2f82:	ef 0e       	add	r14, r31
    2f84:	f1 1c       	adc	r15, r1
    2f86:	d5 30       	cpi	r29, 0x05	; 5
    2f88:	81 f7       	brne	.-32     	; 0x2f6a <nrk_start+0x5e>
    2f8a:	c8 cf       	rjmp	.-112    	; 0x2f1c <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    2f8c:	ff cf       	rjmp	.-2      	; 0x2f8c <nrk_start+0x80>

00002f8e <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2f8e:	cf 92       	push	r12
    2f90:	df 92       	push	r13
    2f92:	ef 92       	push	r14
    2f94:	ff 92       	push	r15
    2f96:	0f 93       	push	r16
    2f98:	1f 93       	push	r17
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	ec 01       	movw	r28, r24
    2fa0:	8b 01       	movw	r16, r22
    2fa2:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	82 30       	cpi	r24, 0x02	; 2
    2fa8:	21 f0       	breq	.+8      	; 0x2fb2 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2faa:	80 91 d0 0b 	lds	r24, 0x0BD0
    2fae:	88 83       	st	Y, r24
    2fb0:	01 c0       	rjmp	.+2      	; 0x2fb4 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2fb2:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2fb4:	80 91 d0 0b 	lds	r24, 0x0BD0
    2fb8:	85 30       	cpi	r24, 0x05	; 5
    2fba:	20 f0       	brcs	.+8      	; 0x2fc4 <nrk_TCB_init+0x36>
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
    2fbe:	87 e0       	ldi	r24, 0x07	; 7
    2fc0:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2fc4:	89 85       	ldd	r24, Y+9	; 0x09
    2fc6:	82 30       	cpi	r24, 0x02	; 2
    2fc8:	29 f0       	breq	.+10     	; 0x2fd4 <nrk_TCB_init+0x46>
    2fca:	80 91 d0 0b 	lds	r24, 0x0BD0
    2fce:	8f 5f       	subi	r24, 0xFF	; 255
    2fd0:	80 93 d0 0b 	sts	0x0BD0, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2fd4:	80 91 d0 0b 	lds	r24, 0x0BD0
    2fd8:	81 11       	cpse	r24, r1
    2fda:	03 c0       	rjmp	.+6      	; 0x2fe2 <nrk_TCB_init+0x54>
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	80 93 d0 0b 	sts	0x0BD0, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2fe2:	38 81       	ld	r19, Y
    2fe4:	2b e2       	ldi	r18, 0x2B	; 43
    2fe6:	32 03       	mulsu	r19, r18
    2fe8:	f0 01       	movw	r30, r0
    2fea:	11 24       	eor	r1, r1
    2fec:	ef 50       	subi	r30, 0x0F	; 15
    2fee:	f5 4f       	sbci	r31, 0xF5	; 245
    2ff0:	11 83       	std	Z+1, r17	; 0x01
    2ff2:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2ff4:	88 85       	ldd	r24, Y+8	; 0x08
    2ff6:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2ff8:	38 81       	ld	r19, Y
    2ffa:	32 03       	mulsu	r19, r18
    2ffc:	f0 01       	movw	r30, r0
    2ffe:	11 24       	eor	r1, r1
    3000:	ef 50       	subi	r30, 0x0F	; 15
    3002:	f5 4f       	sbci	r31, 0xF5	; 245
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    3008:	38 81       	ld	r19, Y
    300a:	32 03       	mulsu	r19, r18
    300c:	f0 01       	movw	r30, r0
    300e:	11 24       	eor	r1, r1
    3010:	ef 50       	subi	r30, 0x0F	; 15
    3012:	f5 4f       	sbci	r31, 0xF5	; 245
    3014:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    3016:	08 81       	ld	r16, Y
    3018:	02 03       	mulsu	r16, r18
    301a:	80 01       	movw	r16, r0
    301c:	11 24       	eor	r1, r1
    301e:	0f 50       	subi	r16, 0x0F	; 15
    3020:	15 4f       	sbci	r17, 0xF5	; 245
    3022:	f8 01       	movw	r30, r16
    3024:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    3026:	ce 01       	movw	r24, r28
    3028:	0b 96       	adiw	r24, 0x0b	; 11
    302a:	0e 94 77 27 	call	0x4eee	; 0x4eee <_nrk_time_to_ticks_long>
    302e:	f8 01       	movw	r30, r16
    3030:	61 a3       	std	Z+33, r22	; 0x21
    3032:	72 a3       	std	Z+34, r23	; 0x22
    3034:	83 a3       	std	Z+35, r24	; 0x23
    3036:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    3038:	8b 85       	ldd	r24, Y+11	; 0x0b
    303a:	9c 85       	ldd	r25, Y+12	; 0x0c
    303c:	ad 85       	ldd	r26, Y+13	; 0x0d
    303e:	be 85       	ldd	r27, Y+14	; 0x0e
    3040:	88 33       	cpi	r24, 0x38	; 56
    3042:	99 48       	sbci	r25, 0x89	; 137
    3044:	a1 44       	sbci	r26, 0x41	; 65
    3046:	b1 05       	cpc	r27, r1
    3048:	20 f0       	brcs	.+8      	; 0x3052 <nrk_TCB_init+0xc4>
    304a:	68 81       	ld	r22, Y
    304c:	86 e1       	ldi	r24, 0x16	; 22
    304e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    3052:	c8 80       	ld	r12, Y
    3054:	dd 24       	eor	r13, r13
    3056:	c7 fc       	sbrc	r12, 7
    3058:	d0 94       	com	r13
    305a:	ce 01       	movw	r24, r28
    305c:	4b 96       	adiw	r24, 0x1b	; 27
    305e:	0e 94 77 27 	call	0x4eee	; 0x4eee <_nrk_time_to_ticks_long>
    3062:	1b e2       	ldi	r17, 0x2B	; 43
    3064:	1c 9d       	mul	r17, r12
    3066:	f0 01       	movw	r30, r0
    3068:	1d 9d       	mul	r17, r13
    306a:	f0 0d       	add	r31, r0
    306c:	11 24       	eor	r1, r1
    306e:	ef 50       	subi	r30, 0x0F	; 15
    3070:	f5 4f       	sbci	r31, 0xF5	; 245
    3072:	65 8b       	std	Z+21, r22	; 0x15
    3074:	76 8b       	std	Z+22, r23	; 0x16
    3076:	87 8b       	std	Z+23, r24	; 0x17
    3078:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    307a:	28 81       	ld	r18, Y
    307c:	21 03       	mulsu	r18, r17
    307e:	c0 01       	movw	r24, r0
    3080:	11 24       	eor	r1, r1
    3082:	9c 01       	movw	r18, r24
    3084:	2f 50       	subi	r18, 0x0F	; 15
    3086:	35 4f       	sbci	r19, 0xF5	; 245
    3088:	69 01       	movw	r12, r18
    308a:	f9 01       	movw	r30, r18
    308c:	45 89       	ldd	r20, Z+21	; 0x15
    308e:	56 89       	ldd	r21, Z+22	; 0x16
    3090:	67 89       	ldd	r22, Z+23	; 0x17
    3092:	70 8d       	ldd	r23, Z+24	; 0x18
    3094:	81 a1       	ldd	r24, Z+33	; 0x21
    3096:	92 a1       	ldd	r25, Z+34	; 0x22
    3098:	a3 a1       	ldd	r26, Z+35	; 0x23
    309a:	b4 a1       	ldd	r27, Z+36	; 0x24
    309c:	84 0f       	add	r24, r20
    309e:	95 1f       	adc	r25, r21
    30a0:	a6 1f       	adc	r26, r22
    30a2:	b7 1f       	adc	r27, r23
    30a4:	81 8f       	std	Z+25, r24	; 0x19
    30a6:	92 8f       	std	Z+26, r25	; 0x1a
    30a8:	a3 8f       	std	Z+27, r26	; 0x1b
    30aa:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    30ac:	ce 01       	movw	r24, r28
    30ae:	43 96       	adiw	r24, 0x13	; 19
    30b0:	0e 94 77 27 	call	0x4eee	; 0x4eee <_nrk_time_to_ticks_long>
    30b4:	f6 01       	movw	r30, r12
    30b6:	65 a3       	std	Z+37, r22	; 0x25
    30b8:	76 a3       	std	Z+38, r23	; 0x26
    30ba:	87 a3       	std	Z+39, r24	; 0x27
    30bc:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    30be:	28 81       	ld	r18, Y
    30c0:	21 03       	mulsu	r18, r17
    30c2:	f0 01       	movw	r30, r0
    30c4:	11 24       	eor	r1, r1
    30c6:	ef 50       	subi	r30, 0x0F	; 15
    30c8:	f5 4f       	sbci	r31, 0xF5	; 245
    30ca:	85 a1       	ldd	r24, Z+37	; 0x25
    30cc:	96 a1       	ldd	r25, Z+38	; 0x26
    30ce:	a7 a1       	ldd	r26, Z+39	; 0x27
    30d0:	b0 a5       	ldd	r27, Z+40	; 0x28
    30d2:	85 8f       	std	Z+29, r24	; 0x1d
    30d4:	96 8f       	std	Z+30, r25	; 0x1e
    30d6:	a7 8f       	std	Z+31, r26	; 0x1f
    30d8:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	92 a7       	std	Z+42, r25	; 0x2a
    30e0:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    30e2:	f3 82       	std	Z+3, r15	; 0x03
    30e4:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    30e6:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    30e8:	df 91       	pop	r29
    30ea:	cf 91       	pop	r28
    30ec:	1f 91       	pop	r17
    30ee:	0f 91       	pop	r16
    30f0:	ff 90       	pop	r15
    30f2:	ef 90       	pop	r14
    30f4:	df 90       	pop	r13
    30f6:	cf 90       	pop	r12
    30f8:	08 95       	ret

000030fa <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    30fa:	0c 94 09 28 	jmp	0x5012	; 0x5012 <_nrk_scheduler>

000030fe <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    30fe:	85 e6       	ldi	r24, 0x65	; 101
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	08 95       	ret

00003104 <nrk_stats_reset>:
#ifdef NRK_STATS_TRACKER
void nrk_stats_reset()
{
    uint8_t i;

    _nrk_stats_sleep_time.secs=0;
    3104:	10 92 38 07 	sts	0x0738, r1
    3108:	10 92 39 07 	sts	0x0739, r1
    310c:	10 92 3a 07 	sts	0x073A, r1
    3110:	10 92 3b 07 	sts	0x073B, r1
    _nrk_stats_sleep_time.nano_secs=0;
    3114:	10 92 3c 07 	sts	0x073C, r1
    3118:	10 92 3d 07 	sts	0x073D, r1
    311c:	10 92 3e 07 	sts	0x073E, r1
    3120:	10 92 3f 07 	sts	0x073F, r1
    3124:	e2 e8       	ldi	r30, 0x82	; 130
    3126:	f9 e0       	ldi	r31, 0x09	; 9
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        cur_task_stats[i].total_ticks=0;
    312c:	10 82       	st	Z, r1
    312e:	11 82       	std	Z+1, r1	; 0x01
    3130:	12 82       	std	Z+2, r1	; 0x02
    3132:	13 82       	std	Z+3, r1	; 0x03
        cur_task_stats[i].max_exec_ticks=0;
    3134:	10 86       	std	Z+8, r1	; 0x08
    3136:	11 86       	std	Z+9, r1	; 0x09
    3138:	12 86       	std	Z+10, r1	; 0x0a
    313a:	13 86       	std	Z+11, r1	; 0x0b
        cur_task_stats[i].min_exec_ticks=0;
    313c:	14 82       	std	Z+4, r1	; 0x04
    313e:	15 82       	std	Z+5, r1	; 0x05
    3140:	16 82       	std	Z+6, r1	; 0x06
    3142:	17 82       	std	Z+7, r1	; 0x07
        cur_task_stats[i].last_exec_ticks=0;
    3144:	14 86       	std	Z+12, r1	; 0x0c
    3146:	15 86       	std	Z+13, r1	; 0x0d
    3148:	16 86       	std	Z+14, r1	; 0x0e
    314a:	17 86       	std	Z+15, r1	; 0x0f
        cur_task_stats[i].swapped_in=0;
    314c:	10 8a       	std	Z+16, r1	; 0x10
    314e:	11 8a       	std	Z+17, r1	; 0x11
    3150:	12 8a       	std	Z+18, r1	; 0x12
    3152:	13 8a       	std	Z+19, r1	; 0x13
        cur_task_stats[i].preempted=0;
    3154:	10 8e       	std	Z+24, r1	; 0x18
    3156:	11 8e       	std	Z+25, r1	; 0x19
    3158:	12 8e       	std	Z+26, r1	; 0x1a
    315a:	13 8e       	std	Z+27, r1	; 0x1b
    315c:	dc 01       	movw	r26, r24
    315e:	ae 57       	subi	r26, 0x7E	; 126
    3160:	b6 4f       	sbci	r27, 0xF6	; 246
        cur_task_stats[i].violations=0;
    3162:	5c 96       	adiw	r26, 0x1c	; 28
    3164:	1c 92       	st	X, r1
    3166:	5c 97       	sbiw	r26, 0x1c	; 28
        cur_task_stats[i].overflow=0;
    3168:	5d 96       	adiw	r26, 0x1d	; 29
    316a:	1c 92       	st	X, r1
    316c:	7e 96       	adiw	r30, 0x1e	; 30
    316e:	4e 96       	adiw	r24, 0x1e	; 30
{
    uint8_t i;

    _nrk_stats_sleep_time.secs=0;
    _nrk_stats_sleep_time.nano_secs=0;
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3170:	86 39       	cpi	r24, 0x96	; 150
    3172:	91 05       	cpc	r25, r1
    3174:	d9 f6       	brne	.-74     	; 0x312c <nrk_stats_reset+0x28>
        cur_task_stats[i].preempted=0;
        cur_task_stats[i].violations=0;
        cur_task_stats[i].overflow=0;
    }

}
    3176:	08 95       	ret

00003178 <_nrk_stats_sleep>:


void _nrk_stats_sleep(uint8_t t)
{
    3178:	0f 93       	push	r16
    317a:	1f 93       	push	r17
//_nrk_stats_sleep_time+=t;
    _nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
    317c:	e8 e3       	ldi	r30, 0x38	; 56
    317e:	f7 e0       	ldi	r31, 0x07	; 7
    3180:	a8 2f       	mov	r26, r24
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	23 eb       	ldi	r18, 0xB3	; 179
    3186:	36 ee       	ldi	r19, 0xE6	; 230
    3188:	4e e0       	ldi	r20, 0x0E	; 14
    318a:	50 e0       	ldi	r21, 0x00	; 0
    318c:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__muluhisi3>
    3190:	04 81       	ldd	r16, Z+4	; 0x04
    3192:	15 81       	ldd	r17, Z+5	; 0x05
    3194:	26 81       	ldd	r18, Z+6	; 0x06
    3196:	37 81       	ldd	r19, Z+7	; 0x07
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	80 0f       	add	r24, r16
    319e:	91 1f       	adc	r25, r17
    31a0:	a2 1f       	adc	r26, r18
    31a2:	b3 1f       	adc	r27, r19
    31a4:	84 83       	std	Z+4, r24	; 0x04
    31a6:	95 83       	std	Z+5, r25	; 0x05
    31a8:	a6 83       	std	Z+6, r26	; 0x06
    31aa:	b7 83       	std	Z+7, r27	; 0x07
    nrk_time_compact_nanos(&_nrk_stats_sleep_time);
    31ac:	cf 01       	movw	r24, r30
}
    31ae:	1f 91       	pop	r17
    31b0:	0f 91       	pop	r16

void _nrk_stats_sleep(uint8_t t)
{
//_nrk_stats_sleep_time+=t;
    _nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
    nrk_time_compact_nanos(&_nrk_stats_sleep_time);
    31b2:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <nrk_time_compact_nanos>

000031b6 <nrk_stats_get_deep_sleep>:
}

void nrk_stats_get_deep_sleep(nrk_time_t *t)
{
    t->secs=_nrk_stats_sleep_time.secs;
    31b6:	e8 e3       	ldi	r30, 0x38	; 56
    31b8:	f7 e0       	ldi	r31, 0x07	; 7
    31ba:	40 81       	ld	r20, Z
    31bc:	51 81       	ldd	r21, Z+1	; 0x01
    31be:	62 81       	ldd	r22, Z+2	; 0x02
    31c0:	73 81       	ldd	r23, Z+3	; 0x03
    31c2:	dc 01       	movw	r26, r24
    31c4:	4d 93       	st	X+, r20
    31c6:	5d 93       	st	X+, r21
    31c8:	6d 93       	st	X+, r22
    31ca:	7c 93       	st	X, r23
    31cc:	13 97       	sbiw	r26, 0x03	; 3
    t->nano_secs=_nrk_stats_sleep_time.nano_secs;
    31ce:	44 81       	ldd	r20, Z+4	; 0x04
    31d0:	55 81       	ldd	r21, Z+5	; 0x05
    31d2:	66 81       	ldd	r22, Z+6	; 0x06
    31d4:	77 81       	ldd	r23, Z+7	; 0x07
    31d6:	fc 01       	movw	r30, r24
    31d8:	44 83       	std	Z+4, r20	; 0x04
    31da:	55 83       	std	Z+5, r21	; 0x05
    31dc:	66 83       	std	Z+6, r22	; 0x06
    31de:	77 83       	std	Z+7, r23	; 0x07
    31e0:	08 95       	ret

000031e2 <_nrk_stats_add_violation>:
}

void _nrk_stats_add_violation(uint8_t task_id)
{
    if( cur_task_stats[task_id].overflow==1) return;
    31e2:	2e e1       	ldi	r18, 0x1E	; 30
    31e4:	82 9f       	mul	r24, r18
    31e6:	c0 01       	movw	r24, r0
    31e8:	11 24       	eor	r1, r1
    31ea:	fc 01       	movw	r30, r24
    31ec:	ee 57       	subi	r30, 0x7E	; 126
    31ee:	f6 4f       	sbci	r31, 0xF6	; 246
    31f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    31f2:	81 30       	cpi	r24, 0x01	; 1
    31f4:	39 f0       	breq	.+14     	; 0x3204 <_nrk_stats_add_violation+0x22>
    cur_task_stats[task_id].violations++;
    31f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    31f8:	8f 5f       	subi	r24, 0xFF	; 255
    31fa:	84 8f       	std	Z+28, r24	; 0x1c
    if(cur_task_stats[task_id].violations==255) cur_task_stats[task_id].overflow=1;
    31fc:	8f 3f       	cpi	r24, 0xFF	; 255
    31fe:	11 f4       	brne	.+4      	; 0x3204 <_nrk_stats_add_violation+0x22>
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	85 8f       	std	Z+29, r24	; 0x1d
    3204:	08 95       	ret

00003206 <_nrk_stats_task_start>:


// task_id is the PID of the task in question
void _nrk_stats_task_start(uint8_t task_id)
{
    if( cur_task_stats[task_id].overflow==1) return;
    3206:	2e e1       	ldi	r18, 0x1E	; 30
    3208:	82 9f       	mul	r24, r18
    320a:	c0 01       	movw	r24, r0
    320c:	11 24       	eor	r1, r1
    320e:	fc 01       	movw	r30, r24
    3210:	ee 57       	subi	r30, 0x7E	; 126
    3212:	f6 4f       	sbci	r31, 0xF6	; 246
    3214:	85 8d       	ldd	r24, Z+29	; 0x1d
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	b1 f0       	breq	.+44     	; 0x3246 <_nrk_stats_task_start+0x40>
    cur_task_stats[task_id].cur_ticks=0;
    321a:	14 8a       	std	Z+20, r1	; 0x14
    321c:	15 8a       	std	Z+21, r1	; 0x15
    321e:	16 8a       	std	Z+22, r1	; 0x16
    3220:	17 8a       	std	Z+23, r1	; 0x17
    cur_task_stats[task_id].swapped_in++;
    3222:	80 89       	ldd	r24, Z+16	; 0x10
    3224:	91 89       	ldd	r25, Z+17	; 0x11
    3226:	a2 89       	ldd	r26, Z+18	; 0x12
    3228:	b3 89       	ldd	r27, Z+19	; 0x13
    322a:	01 96       	adiw	r24, 0x01	; 1
    322c:	a1 1d       	adc	r26, r1
    322e:	b1 1d       	adc	r27, r1
    3230:	80 8b       	std	Z+16, r24	; 0x10
    3232:	91 8b       	std	Z+17, r25	; 0x11
    3234:	a2 8b       	std	Z+18, r26	; 0x12
    3236:	b3 8b       	std	Z+19, r27	; 0x13
    if(cur_task_stats[task_id].swapped_in==(UINT32_MAX-1)) cur_task_stats[task_id].overflow=1;
    3238:	8e 3f       	cpi	r24, 0xFE	; 254
    323a:	9f 4f       	sbci	r25, 0xFF	; 255
    323c:	af 4f       	sbci	r26, 0xFF	; 255
    323e:	bf 4f       	sbci	r27, 0xFF	; 255
    3240:	11 f4       	brne	.+4      	; 0x3246 <_nrk_stats_task_start+0x40>
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	85 8f       	std	Z+29, r24	; 0x1d
    3246:	08 95       	ret

00003248 <_nrk_stats_task_preempted>:
}


void _nrk_stats_task_preempted(uint8_t task_id, uint8_t ticks)
{
    3248:	0f 93       	push	r16
    324a:	1f 93       	push	r17
    if( cur_task_stats[task_id].overflow==1) return;
    324c:	2e e1       	ldi	r18, 0x1E	; 30
    324e:	82 9f       	mul	r24, r18
    3250:	c0 01       	movw	r24, r0
    3252:	11 24       	eor	r1, r1
    3254:	fc 01       	movw	r30, r24
    3256:	ee 57       	subi	r30, 0x7E	; 126
    3258:	f6 4f       	sbci	r31, 0xF6	; 246
    325a:	85 8d       	ldd	r24, Z+29	; 0x1d
    325c:	81 30       	cpi	r24, 0x01	; 1
    325e:	71 f1       	breq	.+92     	; 0x32bc <_nrk_stats_task_preempted+0x74>
    cur_task_stats[task_id].preempted++;
    3260:	80 8d       	ldd	r24, Z+24	; 0x18
    3262:	91 8d       	ldd	r25, Z+25	; 0x19
    3264:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3266:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3268:	01 96       	adiw	r24, 0x01	; 1
    326a:	a1 1d       	adc	r26, r1
    326c:	b1 1d       	adc	r27, r1
    326e:	80 8f       	std	Z+24, r24	; 0x18
    3270:	91 8f       	std	Z+25, r25	; 0x19
    3272:	a2 8f       	std	Z+26, r26	; 0x1a
    3274:	b3 8f       	std	Z+27, r27	; 0x1b
    cur_task_stats[task_id].cur_ticks+=ticks;
    3276:	46 2f       	mov	r20, r22
    3278:	50 e0       	ldi	r21, 0x00	; 0
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	04 89       	ldd	r16, Z+20	; 0x14
    3280:	15 89       	ldd	r17, Z+21	; 0x15
    3282:	26 89       	ldd	r18, Z+22	; 0x16
    3284:	37 89       	ldd	r19, Z+23	; 0x17
    3286:	04 0f       	add	r16, r20
    3288:	15 1f       	adc	r17, r21
    328a:	26 1f       	adc	r18, r22
    328c:	37 1f       	adc	r19, r23
    328e:	04 8b       	std	Z+20, r16	; 0x14
    3290:	15 8b       	std	Z+21, r17	; 0x15
    3292:	26 8b       	std	Z+22, r18	; 0x16
    3294:	37 8b       	std	Z+23, r19	; 0x17
    cur_task_stats[task_id].total_ticks+=ticks;
    3296:	00 81       	ld	r16, Z
    3298:	11 81       	ldd	r17, Z+1	; 0x01
    329a:	22 81       	ldd	r18, Z+2	; 0x02
    329c:	33 81       	ldd	r19, Z+3	; 0x03
    329e:	40 0f       	add	r20, r16
    32a0:	51 1f       	adc	r21, r17
    32a2:	62 1f       	adc	r22, r18
    32a4:	73 1f       	adc	r23, r19
    32a6:	40 83       	st	Z, r20
    32a8:	51 83       	std	Z+1, r21	; 0x01
    32aa:	62 83       	std	Z+2, r22	; 0x02
    32ac:	73 83       	std	Z+3, r23	; 0x03
    if(cur_task_stats[task_id].preempted==(UINT32_MAX-1)) cur_task_stats[task_id].overflow=1;
    32ae:	8e 3f       	cpi	r24, 0xFE	; 254
    32b0:	9f 4f       	sbci	r25, 0xFF	; 255
    32b2:	af 4f       	sbci	r26, 0xFF	; 255
    32b4:	bf 4f       	sbci	r27, 0xFF	; 255
    32b6:	11 f4       	brne	.+4      	; 0x32bc <_nrk_stats_task_preempted+0x74>
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	85 8f       	std	Z+29, r24	; 0x1d
}
    32bc:	1f 91       	pop	r17
    32be:	0f 91       	pop	r16
    32c0:	08 95       	ret

000032c2 <_nrk_stats_task_suspend>:

void _nrk_stats_task_suspend(uint8_t task_id, uint8_t ticks)
{
    32c2:	cf 92       	push	r12
    32c4:	df 92       	push	r13
    32c6:	ef 92       	push	r14
    32c8:	ff 92       	push	r15
    if( cur_task_stats[task_id].overflow==1) return;
    32ca:	28 2f       	mov	r18, r24
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	9e e1       	ldi	r25, 0x1E	; 30
    32d0:	89 9f       	mul	r24, r25
    32d2:	f0 01       	movw	r30, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	ee 57       	subi	r30, 0x7E	; 126
    32d8:	f6 4f       	sbci	r31, 0xF6	; 246
    32da:	85 8d       	ldd	r24, Z+29	; 0x1d
    32dc:	81 30       	cpi	r24, 0x01	; 1
    32de:	09 f4       	brne	.+2      	; 0x32e2 <_nrk_stats_task_suspend+0x20>
    32e0:	4b c0       	rjmp	.+150    	; 0x3378 <_nrk_stats_task_suspend+0xb6>
    cur_task_stats[task_id].last_exec_ticks = cur_task_stats[task_id].cur_ticks+ticks;
    32e2:	46 2f       	mov	r20, r22
    32e4:	50 e0       	ldi	r21, 0x00	; 0
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	70 e0       	ldi	r23, 0x00	; 0
    32ea:	84 89       	ldd	r24, Z+20	; 0x14
    32ec:	95 89       	ldd	r25, Z+21	; 0x15
    32ee:	a6 89       	ldd	r26, Z+22	; 0x16
    32f0:	b7 89       	ldd	r27, Z+23	; 0x17
    32f2:	84 0f       	add	r24, r20
    32f4:	95 1f       	adc	r25, r21
    32f6:	a6 1f       	adc	r26, r22
    32f8:	b7 1f       	adc	r27, r23
    32fa:	84 87       	std	Z+12, r24	; 0x0c
    32fc:	95 87       	std	Z+13, r25	; 0x0d
    32fe:	a6 87       	std	Z+14, r26	; 0x0e
    3300:	b7 87       	std	Z+15, r27	; 0x0f
    cur_task_stats[task_id].total_ticks+=ticks;
    3302:	c0 80       	ld	r12, Z
    3304:	d1 80       	ldd	r13, Z+1	; 0x01
    3306:	e2 80       	ldd	r14, Z+2	; 0x02
    3308:	f3 80       	ldd	r15, Z+3	; 0x03
    330a:	4c 0d       	add	r20, r12
    330c:	5d 1d       	adc	r21, r13
    330e:	6e 1d       	adc	r22, r14
    3310:	7f 1d       	adc	r23, r15
    3312:	40 83       	st	Z, r20
    3314:	51 83       	std	Z+1, r21	; 0x01
    3316:	62 83       	std	Z+2, r22	; 0x02
    3318:	73 83       	std	Z+3, r23	; 0x03

    if(cur_task_stats[task_id].min_exec_ticks==0 || cur_task_stats[task_id].last_exec_ticks<cur_task_stats[task_id].min_exec_ticks)
    331a:	44 81       	ldd	r20, Z+4	; 0x04
    331c:	55 81       	ldd	r21, Z+5	; 0x05
    331e:	66 81       	ldd	r22, Z+6	; 0x06
    3320:	77 81       	ldd	r23, Z+7	; 0x07
    3322:	41 15       	cp	r20, r1
    3324:	51 05       	cpc	r21, r1
    3326:	61 05       	cpc	r22, r1
    3328:	71 05       	cpc	r23, r1
    332a:	29 f0       	breq	.+10     	; 0x3336 <_nrk_stats_task_suspend+0x74>
    332c:	84 17       	cp	r24, r20
    332e:	95 07       	cpc	r25, r21
    3330:	a6 07       	cpc	r26, r22
    3332:	b7 07       	cpc	r27, r23
    3334:	60 f4       	brcc	.+24     	; 0x334e <_nrk_stats_task_suspend+0x8c>
        cur_task_stats[task_id].min_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    3336:	4e e1       	ldi	r20, 0x1E	; 30
    3338:	42 9f       	mul	r20, r18
    333a:	f0 01       	movw	r30, r0
    333c:	43 9f       	mul	r20, r19
    333e:	f0 0d       	add	r31, r0
    3340:	11 24       	eor	r1, r1
    3342:	ee 57       	subi	r30, 0x7E	; 126
    3344:	f6 4f       	sbci	r31, 0xF6	; 246
    3346:	84 83       	std	Z+4, r24	; 0x04
    3348:	95 83       	std	Z+5, r25	; 0x05
    334a:	a6 83       	std	Z+6, r26	; 0x06
    334c:	b7 83       	std	Z+7, r27	; 0x07

    if(cur_task_stats[task_id].last_exec_ticks>cur_task_stats[task_id].max_exec_ticks)
    334e:	4e e1       	ldi	r20, 0x1E	; 30
    3350:	42 9f       	mul	r20, r18
    3352:	f0 01       	movw	r30, r0
    3354:	43 9f       	mul	r20, r19
    3356:	f0 0d       	add	r31, r0
    3358:	11 24       	eor	r1, r1
    335a:	ee 57       	subi	r30, 0x7E	; 126
    335c:	f6 4f       	sbci	r31, 0xF6	; 246
    335e:	40 85       	ldd	r20, Z+8	; 0x08
    3360:	51 85       	ldd	r21, Z+9	; 0x09
    3362:	62 85       	ldd	r22, Z+10	; 0x0a
    3364:	73 85       	ldd	r23, Z+11	; 0x0b
    3366:	48 17       	cp	r20, r24
    3368:	59 07       	cpc	r21, r25
    336a:	6a 07       	cpc	r22, r26
    336c:	7b 07       	cpc	r23, r27
    336e:	20 f4       	brcc	.+8      	; 0x3378 <_nrk_stats_task_suspend+0xb6>
        cur_task_stats[task_id].max_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    3370:	80 87       	std	Z+8, r24	; 0x08
    3372:	91 87       	std	Z+9, r25	; 0x09
    3374:	a2 87       	std	Z+10, r26	; 0x0a
    3376:	b3 87       	std	Z+11, r27	; 0x0b

}
    3378:	ff 90       	pop	r15
    337a:	ef 90       	pop	r14
    337c:	df 90       	pop	r13
    337e:	cf 90       	pop	r12
    3380:	08 95       	ret

00003382 <nrk_stats_display_pid>:



void nrk_stats_display_pid(uint8_t pid)
{
    3382:	8f 92       	push	r8
    3384:	9f 92       	push	r9
    3386:	af 92       	push	r10
    3388:	bf 92       	push	r11
    338a:	cf 92       	push	r12
    338c:	df 92       	push	r13
    338e:	ef 92       	push	r14
    3390:	ff 92       	push	r15
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	cf 93       	push	r28
    3398:	df 93       	push	r29
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	28 97       	sbiw	r28, 0x08	; 8
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    33aa:	18 2f       	mov	r17, r24
    nrk_time_t t;

    nrk_kprintf( PSTR( " Task ID: "));
    33ac:	8b e3       	ldi	r24, 0x3B	; 59
    33ae:	94 e0       	ldi	r25, 0x04	; 4
    33b0:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    printf( "%d",pid );
    33b4:	a1 2e       	mov	r10, r17
    33b6:	b1 2c       	mov	r11, r1
    33b8:	1f 92       	push	r1
    33ba:	1f 93       	push	r17
    33bc:	87 ea       	ldi	r24, 0xA7	; 167
    33be:	92 e0       	ldi	r25, 0x02	; 2
    33c0:	9f 93       	push	r25
    33c2:	8f 93       	push	r24
    33c4:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    if(pid==NRK_IDLE_TASK_ID)
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	11 11       	cpse	r17, r1
    33d2:	52 c0       	rjmp	.+164    	; 0x3478 <nrk_stats_display_pid+0xf6>
    {
        nrk_kprintf( PSTR( "\r\n   Total System Uptime: "));
    33d4:	80 e2       	ldi	r24, 0x20	; 32
    33d6:	94 e0       	ldi	r25, 0x04	; 4
    33d8:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
        nrk_time_get(&t);
    33dc:	ce 01       	movw	r24, r28
    33de:	01 96       	adiw	r24, 0x01	; 1
    33e0:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <nrk_time_get>
        printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    33e4:	6d 81       	ldd	r22, Y+5	; 0x05
    33e6:	7e 81       	ldd	r23, Y+6	; 0x06
    33e8:	8f 81       	ldd	r24, Y+7	; 0x07
    33ea:	98 85       	ldd	r25, Y+8	; 0x08
    33ec:	e0 e4       	ldi	r30, 0x40	; 64
    33ee:	ce 2e       	mov	r12, r30
    33f0:	e2 e4       	ldi	r30, 0x42	; 66
    33f2:	de 2e       	mov	r13, r30
    33f4:	ef e0       	ldi	r30, 0x0F	; 15
    33f6:	ee 2e       	mov	r14, r30
    33f8:	f1 2c       	mov	r15, r1
    33fa:	a7 01       	movw	r20, r14
    33fc:	96 01       	movw	r18, r12
    33fe:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    3402:	5f 93       	push	r21
    3404:	4f 93       	push	r20
    3406:	3f 93       	push	r19
    3408:	2f 93       	push	r18
    340a:	8c 81       	ldd	r24, Y+4	; 0x04
    340c:	8f 93       	push	r24
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	8f 93       	push	r24
    3412:	8a 81       	ldd	r24, Y+2	; 0x02
    3414:	8f 93       	push	r24
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	8f 93       	push	r24
    341a:	07 e6       	ldi	r16, 0x67	; 103
    341c:	13 e0       	ldi	r17, 0x03	; 3
    341e:	1f 93       	push	r17
    3420:	0f 93       	push	r16
    3422:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
        nrk_kprintf( PSTR( "\r\n   Idle Task Deep Sleep Time: "));
    3426:	8f ef       	ldi	r24, 0xFF	; 255
    3428:	93 e0       	ldi	r25, 0x03	; 3
    342a:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
        //t=_nrk_ticks_to_time(_nrk_stats_sleep_time);
        //printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
        printf( "%lu secs %lu ms", _nrk_stats_sleep_time.secs, _nrk_stats_sleep_time.nano_secs/NANOS_PER_MS);
    342e:	60 91 3c 07 	lds	r22, 0x073C
    3432:	70 91 3d 07 	lds	r23, 0x073D
    3436:	80 91 3e 07 	lds	r24, 0x073E
    343a:	90 91 3f 07 	lds	r25, 0x073F
    343e:	a7 01       	movw	r20, r14
    3440:	96 01       	movw	r18, r12
    3442:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    3446:	5f 93       	push	r21
    3448:	4f 93       	push	r20
    344a:	3f 93       	push	r19
    344c:	2f 93       	push	r18
    344e:	80 91 3b 07 	lds	r24, 0x073B
    3452:	8f 93       	push	r24
    3454:	80 91 3a 07 	lds	r24, 0x073A
    3458:	8f 93       	push	r24
    345a:	80 91 39 07 	lds	r24, 0x0739
    345e:	8f 93       	push	r24
    3460:	80 91 38 07 	lds	r24, 0x0738
    3464:	8f 93       	push	r24
    3466:	1f 93       	push	r17
    3468:	0f 93       	push	r16
    346a:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	f8 94       	cli
    3472:	de bf       	out	0x3e, r29	; 62
    3474:	0f be       	out	0x3f, r0	; 63
    3476:	cd bf       	out	0x3d, r28	; 61
    }
    nrk_kprintf( PSTR( "\r\n   Total CPU: "));
    3478:	8e ee       	ldi	r24, 0xEE	; 238
    347a:	93 e0       	ldi	r25, 0x03	; 3
    347c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].total_ticks);
    3480:	8e e1       	ldi	r24, 0x1E	; 30
    3482:	8a 9d       	mul	r24, r10
    3484:	80 01       	movw	r16, r0
    3486:	8b 9d       	mul	r24, r11
    3488:	10 0d       	add	r17, r0
    348a:	11 24       	eor	r1, r1
    348c:	0e 57       	subi	r16, 0x7E	; 126
    348e:	16 4f       	sbci	r17, 0xF6	; 246
    3490:	f8 01       	movw	r30, r16
    3492:	60 81       	ld	r22, Z
    3494:	71 81       	ldd	r23, Z+1	; 0x01
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	0e 94 40 27 	call	0x4e80	; 0x4e80 <_nrk_ticks_to_time>
    349e:	29 83       	std	Y+1, r18	; 0x01
    34a0:	3a 83       	std	Y+2, r19	; 0x02
    34a2:	4b 83       	std	Y+3, r20	; 0x03
    34a4:	5c 83       	std	Y+4, r21	; 0x04
    34a6:	6d 83       	std	Y+5, r22	; 0x05
    34a8:	7e 83       	std	Y+6, r23	; 0x06
    34aa:	8f 83       	std	Y+7, r24	; 0x07
    34ac:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    34ae:	6d 81       	ldd	r22, Y+5	; 0x05
    34b0:	7e 81       	ldd	r23, Y+6	; 0x06
    34b2:	8f 81       	ldd	r24, Y+7	; 0x07
    34b4:	98 85       	ldd	r25, Y+8	; 0x08
    34b6:	20 e4       	ldi	r18, 0x40	; 64
    34b8:	82 2e       	mov	r8, r18
    34ba:	22 e4       	ldi	r18, 0x42	; 66
    34bc:	92 2e       	mov	r9, r18
    34be:	2f e0       	ldi	r18, 0x0F	; 15
    34c0:	a2 2e       	mov	r10, r18
    34c2:	b1 2c       	mov	r11, r1
    34c4:	a5 01       	movw	r20, r10
    34c6:	94 01       	movw	r18, r8
    34c8:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    34cc:	5f 93       	push	r21
    34ce:	4f 93       	push	r20
    34d0:	3f 93       	push	r19
    34d2:	2f 93       	push	r18
    34d4:	8c 81       	ldd	r24, Y+4	; 0x04
    34d6:	8f 93       	push	r24
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	8f 93       	push	r24
    34dc:	8a 81       	ldd	r24, Y+2	; 0x02
    34de:	8f 93       	push	r24
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	8f 93       	push	r24
    34e4:	37 e6       	ldi	r19, 0x67	; 103
    34e6:	e3 2e       	mov	r14, r19
    34e8:	33 e0       	ldi	r19, 0x03	; 3
    34ea:	f3 2e       	mov	r15, r19
    34ec:	ff 92       	push	r15
    34ee:	ef 92       	push	r14
    34f0:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    nrk_kprintf( PSTR( "\r\n   Time [Min,Last,Max]: "));
    34f4:	83 ed       	ldi	r24, 0xD3	; 211
    34f6:	93 e0       	ldi	r25, 0x03	; 3
    34f8:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].min_exec_ticks);
    34fc:	f8 01       	movw	r30, r16
    34fe:	64 81       	ldd	r22, Z+4	; 0x04
    3500:	75 81       	ldd	r23, Z+5	; 0x05
    3502:	86 81       	ldd	r24, Z+6	; 0x06
    3504:	97 81       	ldd	r25, Z+7	; 0x07
    3506:	0e 94 40 27 	call	0x4e80	; 0x4e80 <_nrk_ticks_to_time>
    350a:	29 83       	std	Y+1, r18	; 0x01
    350c:	3a 83       	std	Y+2, r19	; 0x02
    350e:	4b 83       	std	Y+3, r20	; 0x03
    3510:	5c 83       	std	Y+4, r21	; 0x04
    3512:	6d 83       	std	Y+5, r22	; 0x05
    3514:	7e 83       	std	Y+6, r23	; 0x06
    3516:	8f 83       	std	Y+7, r24	; 0x07
    3518:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    351a:	6d 81       	ldd	r22, Y+5	; 0x05
    351c:	7e 81       	ldd	r23, Y+6	; 0x06
    351e:	8f 81       	ldd	r24, Y+7	; 0x07
    3520:	98 85       	ldd	r25, Y+8	; 0x08
    3522:	a5 01       	movw	r20, r10
    3524:	94 01       	movw	r18, r8
    3526:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    352a:	5f 93       	push	r21
    352c:	4f 93       	push	r20
    352e:	3f 93       	push	r19
    3530:	2f 93       	push	r18
    3532:	8c 81       	ldd	r24, Y+4	; 0x04
    3534:	8f 93       	push	r24
    3536:	8b 81       	ldd	r24, Y+3	; 0x03
    3538:	8f 93       	push	r24
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	8f 93       	push	r24
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	8f 93       	push	r24
    3542:	47 e7       	ldi	r20, 0x77	; 119
    3544:	c4 2e       	mov	r12, r20
    3546:	43 e0       	ldi	r20, 0x03	; 3
    3548:	d4 2e       	mov	r13, r20
    354a:	df 92       	push	r13
    354c:	cf 92       	push	r12
    354e:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].last_exec_ticks);
    3552:	f8 01       	movw	r30, r16
    3554:	64 85       	ldd	r22, Z+12	; 0x0c
    3556:	75 85       	ldd	r23, Z+13	; 0x0d
    3558:	86 85       	ldd	r24, Z+14	; 0x0e
    355a:	97 85       	ldd	r25, Z+15	; 0x0f
    355c:	0e 94 40 27 	call	0x4e80	; 0x4e80 <_nrk_ticks_to_time>
    3560:	29 83       	std	Y+1, r18	; 0x01
    3562:	3a 83       	std	Y+2, r19	; 0x02
    3564:	4b 83       	std	Y+3, r20	; 0x03
    3566:	5c 83       	std	Y+4, r21	; 0x04
    3568:	6d 83       	std	Y+5, r22	; 0x05
    356a:	7e 83       	std	Y+6, r23	; 0x06
    356c:	8f 83       	std	Y+7, r24	; 0x07
    356e:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    3570:	6d 81       	ldd	r22, Y+5	; 0x05
    3572:	7e 81       	ldd	r23, Y+6	; 0x06
    3574:	8f 81       	ldd	r24, Y+7	; 0x07
    3576:	98 85       	ldd	r25, Y+8	; 0x08
    3578:	a5 01       	movw	r20, r10
    357a:	94 01       	movw	r18, r8
    357c:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    3580:	5f 93       	push	r21
    3582:	4f 93       	push	r20
    3584:	3f 93       	push	r19
    3586:	2f 93       	push	r18
    3588:	8c 81       	ldd	r24, Y+4	; 0x04
    358a:	8f 93       	push	r24
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	8f 93       	push	r24
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	8f 93       	push	r24
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	8f 93       	push	r24
    3598:	df 92       	push	r13
    359a:	cf 92       	push	r12
    359c:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].max_exec_ticks);
    35a0:	f8 01       	movw	r30, r16
    35a2:	60 85       	ldd	r22, Z+8	; 0x08
    35a4:	71 85       	ldd	r23, Z+9	; 0x09
    35a6:	82 85       	ldd	r24, Z+10	; 0x0a
    35a8:	93 85       	ldd	r25, Z+11	; 0x0b
    35aa:	0e 94 40 27 	call	0x4e80	; 0x4e80 <_nrk_ticks_to_time>
    35ae:	29 83       	std	Y+1, r18	; 0x01
    35b0:	3a 83       	std	Y+2, r19	; 0x02
    35b2:	4b 83       	std	Y+3, r20	; 0x03
    35b4:	5c 83       	std	Y+4, r21	; 0x04
    35b6:	6d 83       	std	Y+5, r22	; 0x05
    35b8:	7e 83       	std	Y+6, r23	; 0x06
    35ba:	8f 83       	std	Y+7, r24	; 0x07
    35bc:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    35be:	6d 81       	ldd	r22, Y+5	; 0x05
    35c0:	7e 81       	ldd	r23, Y+6	; 0x06
    35c2:	8f 81       	ldd	r24, Y+7	; 0x07
    35c4:	98 85       	ldd	r25, Y+8	; 0x08
    35c6:	a5 01       	movw	r20, r10
    35c8:	94 01       	movw	r18, r8
    35ca:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    35ce:	5f 93       	push	r21
    35d0:	4f 93       	push	r20
    35d2:	3f 93       	push	r19
    35d4:	2f 93       	push	r18
    35d6:	8c 81       	ldd	r24, Y+4	; 0x04
    35d8:	8f 93       	push	r24
    35da:	8b 81       	ldd	r24, Y+3	; 0x03
    35dc:	8f 93       	push	r24
    35de:	8a 81       	ldd	r24, Y+2	; 0x02
    35e0:	8f 93       	push	r24
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	8f 93       	push	r24
    35e6:	ff 92       	push	r15
    35e8:	ef 92       	push	r14
    35ea:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    nrk_kprintf( PSTR( "\r\n   Swap-ins: "));
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	f8 94       	cli
    35f2:	de bf       	out	0x3e, r29	; 62
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	cd bf       	out	0x3d, r28	; 61
    35f8:	83 ec       	ldi	r24, 0xC3	; 195
    35fa:	93 e0       	ldi	r25, 0x03	; 3
    35fc:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    printf( "%lu",cur_task_stats[pid].swapped_in );
    3600:	f8 01       	movw	r30, r16
    3602:	70 96       	adiw	r30, 0x10	; 16
    3604:	83 81       	ldd	r24, Z+3	; 0x03
    3606:	8f 93       	push	r24
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	8f 93       	push	r24
    360c:	81 81       	ldd	r24, Z+1	; 0x01
    360e:	8f 93       	push	r24
    3610:	f8 01       	movw	r30, r16
    3612:	80 89       	ldd	r24, Z+16	; 0x10
    3614:	8f 93       	push	r24
    3616:	59 e8       	ldi	r21, 0x89	; 137
    3618:	e5 2e       	mov	r14, r21
    361a:	53 e0       	ldi	r21, 0x03	; 3
    361c:	f5 2e       	mov	r15, r21
    361e:	ff 92       	push	r15
    3620:	ef 92       	push	r14
    3622:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    nrk_kprintf( PSTR( "\r\n   Preemptions: "));
    3626:	80 eb       	ldi	r24, 0xB0	; 176
    3628:	93 e0       	ldi	r25, 0x03	; 3
    362a:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    printf( "%lu",cur_task_stats[pid].preempted);
    362e:	f8 01       	movw	r30, r16
    3630:	78 96       	adiw	r30, 0x18	; 24
    3632:	83 81       	ldd	r24, Z+3	; 0x03
    3634:	8f 93       	push	r24
    3636:	82 81       	ldd	r24, Z+2	; 0x02
    3638:	8f 93       	push	r24
    363a:	81 81       	ldd	r24, Z+1	; 0x01
    363c:	8f 93       	push	r24
    363e:	f8 01       	movw	r30, r16
    3640:	80 8d       	ldd	r24, Z+24	; 0x18
    3642:	8f 93       	push	r24
    3644:	ff 92       	push	r15
    3646:	ef 92       	push	r14
    3648:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    nrk_kprintf( PSTR( "\r\n   Kernel Violations: "));
    364c:	87 e9       	ldi	r24, 0x97	; 151
    364e:	93 e0       	ldi	r25, 0x03	; 3
    3650:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    printf( "%u",cur_task_stats[pid].violations);
    3654:	f8 01       	movw	r30, r16
    3656:	84 8d       	ldd	r24, Z+28	; 0x1c
    3658:	1f 92       	push	r1
    365a:	8f 93       	push	r24
    365c:	6d e8       	ldi	r22, 0x8D	; 141
    365e:	e6 2e       	mov	r14, r22
    3660:	63 e0       	ldi	r22, 0x03	; 3
    3662:	f6 2e       	mov	r15, r22
    3664:	ff 92       	push	r15
    3666:	ef 92       	push	r14
    3668:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    nrk_kprintf( PSTR( "\r\n   Overflow Error Status: "));
    366c:	8a e7       	ldi	r24, 0x7A	; 122
    366e:	93 e0       	ldi	r25, 0x03	; 3
    3670:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    printf( "%u",cur_task_stats[pid].overflow);
    3674:	f8 01       	movw	r30, r16
    3676:	85 8d       	ldd	r24, Z+29	; 0x1d
    3678:	1f 92       	push	r1
    367a:	8f 93       	push	r24
    367c:	ff 92       	push	r15
    367e:	ef 92       	push	r14
    3680:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    nrk_kprintf( PSTR("\r\n") );
    3684:	87 e7       	ldi	r24, 0x77	; 119
    3686:	93 e0       	ldi	r25, 0x03	; 3
    3688:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	f8 94       	cli
    3690:	de bf       	out	0x3e, r29	; 62
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	cd bf       	out	0x3d, r28	; 61

}
    3696:	28 96       	adiw	r28, 0x08	; 8
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	ff 90       	pop	r15
    36ac:	ef 90       	pop	r14
    36ae:	df 90       	pop	r13
    36b0:	cf 90       	pop	r12
    36b2:	bf 90       	pop	r11
    36b4:	af 90       	pop	r10
    36b6:	9f 90       	pop	r9
    36b8:	8f 90       	pop	r8
    36ba:	08 95       	ret

000036bc <nrk_stats_display_all>:


void nrk_stats_display_all()
{
    36bc:	cf 93       	push	r28
    uint8_t i;
    nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));
    36be:	8a e5       	ldi	r24, 0x5A	; 90
    36c0:	93 e0       	ldi	r25, 0x03	; 3
    36c2:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>

    for(i=0; i<NRK_MAX_TASKS; i++ )
    36c6:	c0 e0       	ldi	r28, 0x00	; 0
        nrk_stats_display_pid(i);
    36c8:	8c 2f       	mov	r24, r28
    36ca:	0e 94 c1 19 	call	0x3382	; 0x3382 <nrk_stats_display_pid>
void nrk_stats_display_all()
{
    uint8_t i;
    nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));

    for(i=0; i<NRK_MAX_TASKS; i++ )
    36ce:	cf 5f       	subi	r28, 0xFF	; 255
    36d0:	c5 30       	cpi	r28, 0x05	; 5
    36d2:	d1 f7       	brne	.-12     	; 0x36c8 <nrk_stats_display_all+0xc>
        nrk_stats_display_pid(i);
}
    36d4:	cf 91       	pop	r28
    36d6:	08 95       	ret

000036d8 <nrk_stats_get>:


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    36d8:	db 01       	movw	r26, r22
    if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    36da:	85 30       	cpi	r24, 0x05	; 5
    36dc:	08 f0       	brcs	.+2      	; 0x36e0 <nrk_stats_get+0x8>
    36de:	54 c0       	rjmp	.+168    	; 0x3788 <nrk_stats_get+0xb0>

    t->total_ticks=cur_task_stats[pid].total_ticks;
    36e0:	9e e1       	ldi	r25, 0x1E	; 30
    36e2:	89 9f       	mul	r24, r25
    36e4:	f0 01       	movw	r30, r0
    36e6:	11 24       	eor	r1, r1
    36e8:	ee 57       	subi	r30, 0x7E	; 126
    36ea:	f6 4f       	sbci	r31, 0xF6	; 246
    36ec:	40 81       	ld	r20, Z
    36ee:	51 81       	ldd	r21, Z+1	; 0x01
    36f0:	62 81       	ldd	r22, Z+2	; 0x02
    36f2:	73 81       	ldd	r23, Z+3	; 0x03
    36f4:	4d 93       	st	X+, r20
    36f6:	5d 93       	st	X+, r21
    36f8:	6d 93       	st	X+, r22
    36fa:	7c 93       	st	X, r23
    36fc:	13 97       	sbiw	r26, 0x03	; 3
    t->min_exec_ticks=cur_task_stats[pid].min_exec_ticks;
    36fe:	44 81       	ldd	r20, Z+4	; 0x04
    3700:	55 81       	ldd	r21, Z+5	; 0x05
    3702:	66 81       	ldd	r22, Z+6	; 0x06
    3704:	77 81       	ldd	r23, Z+7	; 0x07
    3706:	14 96       	adiw	r26, 0x04	; 4
    3708:	4d 93       	st	X+, r20
    370a:	5d 93       	st	X+, r21
    370c:	6d 93       	st	X+, r22
    370e:	7c 93       	st	X, r23
    3710:	17 97       	sbiw	r26, 0x07	; 7
    t->max_exec_ticks=cur_task_stats[pid].max_exec_ticks;
    3712:	40 85       	ldd	r20, Z+8	; 0x08
    3714:	51 85       	ldd	r21, Z+9	; 0x09
    3716:	62 85       	ldd	r22, Z+10	; 0x0a
    3718:	73 85       	ldd	r23, Z+11	; 0x0b
    371a:	18 96       	adiw	r26, 0x08	; 8
    371c:	4d 93       	st	X+, r20
    371e:	5d 93       	st	X+, r21
    3720:	6d 93       	st	X+, r22
    3722:	7c 93       	st	X, r23
    3724:	1b 97       	sbiw	r26, 0x0b	; 11
    t->last_exec_ticks=cur_task_stats[pid].last_exec_ticks;
    3726:	44 85       	ldd	r20, Z+12	; 0x0c
    3728:	55 85       	ldd	r21, Z+13	; 0x0d
    372a:	66 85       	ldd	r22, Z+14	; 0x0e
    372c:	77 85       	ldd	r23, Z+15	; 0x0f
    372e:	1c 96       	adiw	r26, 0x0c	; 12
    3730:	4d 93       	st	X+, r20
    3732:	5d 93       	st	X+, r21
    3734:	6d 93       	st	X+, r22
    3736:	7c 93       	st	X, r23
    3738:	1f 97       	sbiw	r26, 0x0f	; 15
    t->swapped_in=cur_task_stats[pid].swapped_in;
    373a:	40 89       	ldd	r20, Z+16	; 0x10
    373c:	51 89       	ldd	r21, Z+17	; 0x11
    373e:	62 89       	ldd	r22, Z+18	; 0x12
    3740:	73 89       	ldd	r23, Z+19	; 0x13
    3742:	50 96       	adiw	r26, 0x10	; 16
    3744:	4d 93       	st	X+, r20
    3746:	5d 93       	st	X+, r21
    3748:	6d 93       	st	X+, r22
    374a:	7c 93       	st	X, r23
    374c:	53 97       	sbiw	r26, 0x13	; 19
    t->cur_ticks=cur_task_stats[pid].cur_ticks;
    374e:	44 89       	ldd	r20, Z+20	; 0x14
    3750:	55 89       	ldd	r21, Z+21	; 0x15
    3752:	66 89       	ldd	r22, Z+22	; 0x16
    3754:	77 89       	ldd	r23, Z+23	; 0x17
    3756:	54 96       	adiw	r26, 0x14	; 20
    3758:	4d 93       	st	X+, r20
    375a:	5d 93       	st	X+, r21
    375c:	6d 93       	st	X+, r22
    375e:	7c 93       	st	X, r23
    3760:	57 97       	sbiw	r26, 0x17	; 23
    t->preempted=cur_task_stats[pid].preempted;
    3762:	40 8d       	ldd	r20, Z+24	; 0x18
    3764:	51 8d       	ldd	r21, Z+25	; 0x19
    3766:	62 8d       	ldd	r22, Z+26	; 0x1a
    3768:	73 8d       	ldd	r23, Z+27	; 0x1b
    376a:	58 96       	adiw	r26, 0x18	; 24
    376c:	4d 93       	st	X+, r20
    376e:	5d 93       	st	X+, r21
    3770:	6d 93       	st	X+, r22
    3772:	7c 93       	st	X, r23
    3774:	5b 97       	sbiw	r26, 0x1b	; 27
    t->violations=cur_task_stats[pid].violations;
    3776:	84 8d       	ldd	r24, Z+28	; 0x1c
    3778:	5c 96       	adiw	r26, 0x1c	; 28
    377a:	8c 93       	st	X, r24
    377c:	5c 97       	sbiw	r26, 0x1c	; 28
    t->overflow=cur_task_stats[pid].overflow;
    377e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3780:	5d 96       	adiw	r26, 0x1d	; 29
    3782:	8c 93       	st	X, r24

    return NRK_OK;
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	08 95       	ret
}


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    3788:	8f ef       	ldi	r24, 0xFF	; 255
    t->preempted=cur_task_stats[pid].preempted;
    t->violations=cur_task_stats[pid].violations;
    t->overflow=cur_task_stats[pid].overflow;

    return NRK_OK;
}
    378a:	08 95       	ret

0000378c <_nrk_errno_set>:
inline void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    378c:	e0 91 e1 0b 	lds	r30, 0x0BE1
    3790:	f0 91 e2 0b 	lds	r31, 0x0BE2
    3794:	84 87       	std	Z+12, r24	; 0x0c
    3796:	08 95       	ret

00003798 <nrk_errno_get>:
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    3798:	e0 91 e1 0b 	lds	r30, 0x0BE1
    379c:	f0 91 e2 0b 	lds	r31, 0x0BE2
}
    37a0:	84 85       	ldd	r24, Z+12	; 0x0c
    37a2:	08 95       	ret

000037a4 <_nrk_log_error>:

#ifdef NRK_LOG_ERRORS
void _nrk_log_error(uint8_t error_num, uint8_t error_task)
{
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
    37a8:	d8 2f       	mov	r29, r24
    37aa:	c6 2f       	mov	r28, r22

    // 1) Load error cnt and add 1
    error_cnt=nrk_eeprom_read_byte(NRK_ERROR_EEPROM_INDEX);
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	92 e0       	ldi	r25, 0x02	; 2
    37b0:	0e 94 33 16 	call	0x2c66	; 0x2c66 <nrk_eeprom_read_byte>
    error_cnt++;
    37b4:	8f 5f       	subi	r24, 0xFF	; 255
    if(error_cnt==255) error_cnt=0;
    37b6:	8f 3f       	cpi	r24, 0xFF	; 255
    37b8:	19 f0       	breq	.+6      	; 0x37c0 <_nrk_log_error+0x1c>
void _nrk_log_error(uint8_t error_num, uint8_t error_task)
{

    // 1) Load error cnt and add 1
    error_cnt=nrk_eeprom_read_byte(NRK_ERROR_EEPROM_INDEX);
    error_cnt++;
    37ba:	80 93 20 06 	sts	0x0620, r24
    37be:	02 c0       	rjmp	.+4      	; 0x37c4 <_nrk_log_error+0x20>
    if(error_cnt==255) error_cnt=0;
    37c0:	10 92 20 06 	sts	0x0620, r1
    // 2) write error
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6),error_num);
    37c4:	20 91 20 06 	lds	r18, 0x0620
    37c8:	36 e0       	ldi	r19, 0x06	; 6
    37ca:	23 9f       	mul	r18, r19
    37cc:	c0 01       	movw	r24, r0
    37ce:	11 24       	eor	r1, r1
    37d0:	6d 2f       	mov	r22, r29
    37d2:	8f 5f       	subi	r24, 0xFF	; 255
    37d4:	9d 4f       	sbci	r25, 0xFD	; 253
    37d6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+1),error_task);
    37da:	80 91 20 06 	lds	r24, 0x0620
    37de:	46 e0       	ldi	r20, 0x06	; 6
    37e0:	84 9f       	mul	r24, r20
    37e2:	c0 01       	movw	r24, r0
    37e4:	11 24       	eor	r1, r1
    37e6:	6c 2f       	mov	r22, r28
    37e8:	8e 5f       	subi	r24, 0xFE	; 254
    37ea:	9d 4f       	sbci	r25, 0xFD	; 253
    37ec:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+2),(nrk_system_time.secs>>24)&0xff);
    37f0:	20 91 20 06 	lds	r18, 0x0620
    37f4:	40 91 d8 0b 	lds	r20, 0x0BD8
    37f8:	50 91 d9 0b 	lds	r21, 0x0BD9
    37fc:	60 91 da 0b 	lds	r22, 0x0BDA
    3800:	70 91 db 0b 	lds	r23, 0x0BDB
    3804:	67 2f       	mov	r22, r23
    3806:	77 27       	eor	r23, r23
    3808:	88 27       	eor	r24, r24
    380a:	99 27       	eor	r25, r25
    380c:	46 e0       	ldi	r20, 0x06	; 6
    380e:	24 9f       	mul	r18, r20
    3810:	90 01       	movw	r18, r0
    3812:	11 24       	eor	r1, r1
    3814:	c9 01       	movw	r24, r18
    3816:	8d 5f       	subi	r24, 0xFD	; 253
    3818:	9d 4f       	sbci	r25, 0xFD	; 253
    381a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+3),(nrk_system_time.secs>>16)&0xff);
    381e:	20 91 20 06 	lds	r18, 0x0620
    3822:	40 91 d8 0b 	lds	r20, 0x0BD8
    3826:	50 91 d9 0b 	lds	r21, 0x0BD9
    382a:	60 91 da 0b 	lds	r22, 0x0BDA
    382e:	70 91 db 0b 	lds	r23, 0x0BDB
    3832:	88 27       	eor	r24, r24
    3834:	99 27       	eor	r25, r25
    3836:	46 e0       	ldi	r20, 0x06	; 6
    3838:	24 9f       	mul	r18, r20
    383a:	90 01       	movw	r18, r0
    383c:	11 24       	eor	r1, r1
    383e:	c9 01       	movw	r24, r18
    3840:	8c 5f       	subi	r24, 0xFC	; 252
    3842:	9d 4f       	sbci	r25, 0xFD	; 253
    3844:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+4),(nrk_system_time.secs>>8)&0xff);
    3848:	20 91 20 06 	lds	r18, 0x0620
    384c:	40 91 d8 0b 	lds	r20, 0x0BD8
    3850:	50 91 d9 0b 	lds	r21, 0x0BD9
    3854:	60 91 da 0b 	lds	r22, 0x0BDA
    3858:	70 91 db 0b 	lds	r23, 0x0BDB
    385c:	99 27       	eor	r25, r25
    385e:	87 2f       	mov	r24, r23
    3860:	76 2f       	mov	r23, r22
    3862:	65 2f       	mov	r22, r21
    3864:	46 e0       	ldi	r20, 0x06	; 6
    3866:	24 9f       	mul	r18, r20
    3868:	90 01       	movw	r18, r0
    386a:	11 24       	eor	r1, r1
    386c:	c9 01       	movw	r24, r18
    386e:	8b 5f       	subi	r24, 0xFB	; 251
    3870:	9d 4f       	sbci	r25, 0xFD	; 253
    3872:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+5),(nrk_system_time.secs)&0xff);
    3876:	80 91 20 06 	lds	r24, 0x0620
    387a:	26 e0       	ldi	r18, 0x06	; 6
    387c:	82 9f       	mul	r24, r18
    387e:	c0 01       	movw	r24, r0
    3880:	11 24       	eor	r1, r1
    3882:	60 91 d8 0b 	lds	r22, 0x0BD8
    3886:	8a 5f       	subi	r24, 0xFA	; 250
    3888:	9d 4f       	sbci	r25, 0xFD	; 253
    388a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <nrk_eeprom_write_byte>
    // 3) write error cnt back
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX,error_cnt);
    388e:	60 91 20 06 	lds	r22, 0x0620
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	92 e0       	ldi	r25, 0x02	; 2
}
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+2),(nrk_system_time.secs>>24)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+3),(nrk_system_time.secs>>16)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+4),(nrk_system_time.secs>>8)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+5),(nrk_system_time.secs)&0xff);
    // 3) write error cnt back
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX,error_cnt);
    389a:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <nrk_eeprom_write_byte>

0000389e <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    389e:	fc 01       	movw	r30, r24
    if (error_num == 0)
    38a0:	80 91 18 0a 	lds	r24, 0x0A18
    38a4:	88 23       	and	r24, r24
    38a6:	31 f0       	breq	.+12     	; 0x38b4 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    38a8:	db 01       	movw	r26, r22
    38aa:	8c 93       	st	X, r24
    *task_id = error_task;
    38ac:	80 91 2f 07 	lds	r24, 0x072F
    38b0:	80 83       	st	Z, r24
    return 1;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
}
    38b4:	08 95       	ret

000038b6 <nrk_error_print>:
uint8_t i,t;




    if (error_num == 0)
    38b6:	80 91 18 0a 	lds	r24, 0x0A18
    38ba:	88 23       	and	r24, r24
    38bc:	09 f4       	brne	.+2      	; 0x38c0 <nrk_error_print+0xa>
    38be:	83 c0       	rjmp	.+262    	; 0x39c6 <nrk_error_print+0x110>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    38c0:	82 e7       	ldi	r24, 0x72	; 114
    38c2:	96 e0       	ldi	r25, 0x06	; 6
    38c4:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
        printf ("%d", error_task);
    38c8:	80 91 2f 07 	lds	r24, 0x072F
    38cc:	1f 92       	push	r1
    38ce:	8f 93       	push	r24
    38d0:	87 ea       	ldi	r24, 0xA7	; 167
    38d2:	92 e0       	ldi	r25, 0x02	; 2
    38d4:	9f 93       	push	r25
    38d6:	8f 93       	push	r24
    38d8:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
        nrk_kprintf (PSTR ("): "));
    38dc:	8e e6       	ldi	r24, 0x6E	; 110
    38de:	96 e0       	ldi	r25, 0x06	; 6
    38e0:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    38e4:	0f 90       	pop	r0
    38e6:	0f 90       	pop	r0
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0
    38ec:	80 91 18 0a 	lds	r24, 0x0A18
    38f0:	88 31       	cpi	r24, 0x18	; 24
    38f2:	10 f0       	brcs	.+4      	; 0x38f8 <nrk_error_print+0x42>
            error_num = NRK_UNKOWN;
    38f4:	10 92 18 0a 	sts	0x0A18, r1
        switch (error_num)
    38f8:	e0 91 18 0a 	lds	r30, 0x0A18
    38fc:	8e 2f       	mov	r24, r30
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	fc 01       	movw	r30, r24
    3902:	31 97       	sbiw	r30, 0x01	; 1
    3904:	e6 31       	cpi	r30, 0x16	; 22
    3906:	f1 05       	cpc	r31, r1
    3908:	08 f0       	brcs	.+2      	; 0x390c <nrk_error_print+0x56>
    390a:	46 c0       	rjmp	.+140    	; 0x3998 <nrk_error_print+0xe2>
    390c:	e6 54       	subi	r30, 0x46	; 70
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    3914:	82 e3       	ldi	r24, 0x32	; 50
    3916:	96 e0       	ldi	r25, 0x06	; 6
    3918:	41 c0       	rjmp	.+130    	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    391a:	8b e0       	ldi	r24, 0x0B	; 11
    391c:	96 e0       	ldi	r25, 0x06	; 6
    391e:	3e c0       	rjmp	.+124    	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    3920:	87 ef       	ldi	r24, 0xF7	; 247
    3922:	95 e0       	ldi	r25, 0x05	; 5
    3924:	3b c0       	rjmp	.+118    	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    3926:	81 ee       	ldi	r24, 0xE1	; 225
    3928:	95 e0       	ldi	r25, 0x05	; 5
    392a:	38 c0       	rjmp	.+112    	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    392c:	86 ec       	ldi	r24, 0xC6	; 198
    392e:	95 e0       	ldi	r25, 0x05	; 5
    3930:	35 c0       	rjmp	.+106    	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    3932:	80 eb       	ldi	r24, 0xB0	; 176
    3934:	95 e0       	ldi	r25, 0x05	; 5
    3936:	32 c0       	rjmp	.+100    	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    3938:	88 e9       	ldi	r24, 0x98	; 152
    393a:	95 e0       	ldi	r25, 0x05	; 5
    393c:	2f c0       	rjmp	.+94     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    393e:	85 e8       	ldi	r24, 0x85	; 133
    3940:	95 e0       	ldi	r25, 0x05	; 5
    3942:	2c c0       	rjmp	.+88     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    3944:	82 e7       	ldi	r24, 0x72	; 114
    3946:	95 e0       	ldi	r25, 0x05	; 5
    3948:	29 c0       	rjmp	.+82     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    394a:	84 e5       	ldi	r24, 0x54	; 84
    394c:	95 e0       	ldi	r25, 0x05	; 5
    394e:	26 c0       	rjmp	.+76     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    3950:	8f e2       	ldi	r24, 0x2F	; 47
    3952:	95 e0       	ldi	r25, 0x05	; 5
    3954:	23 c0       	rjmp	.+70     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    3956:	83 e2       	ldi	r24, 0x23	; 35
    3958:	95 e0       	ldi	r25, 0x05	; 5
    395a:	20 c0       	rjmp	.+64     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    395c:	88 e0       	ldi	r24, 0x08	; 8
    395e:	95 e0       	ldi	r25, 0x05	; 5
    3960:	1d c0       	rjmp	.+58     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    3962:	89 ef       	ldi	r24, 0xF9	; 249
    3964:	94 e0       	ldi	r25, 0x04	; 4
    3966:	1a c0       	rjmp	.+52     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    3968:	85 ee       	ldi	r24, 0xE5	; 229
    396a:	94 e0       	ldi	r25, 0x04	; 4
    396c:	17 c0       	rjmp	.+46     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    396e:	84 ed       	ldi	r24, 0xD4	; 212
    3970:	94 e0       	ldi	r25, 0x04	; 4
    3972:	14 c0       	rjmp	.+40     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    3974:	80 ec       	ldi	r24, 0xC0	; 192
    3976:	94 e0       	ldi	r25, 0x04	; 4
    3978:	11 c0       	rjmp	.+34     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    397a:	80 ea       	ldi	r24, 0xA0	; 160
    397c:	94 e0       	ldi	r25, 0x04	; 4
    397e:	0e c0       	rjmp	.+28     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    3980:	88 e8       	ldi	r24, 0x88	; 136
    3982:	94 e0       	ldi	r25, 0x04	; 4
    3984:	0b c0       	rjmp	.+22     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    3986:	8d e6       	ldi	r24, 0x6D	; 109
    3988:	94 e0       	ldi	r25, 0x04	; 4
    398a:	08 c0       	rjmp	.+16     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    398c:	8c e5       	ldi	r24, 0x5C	; 92
    398e:	94 e0       	ldi	r25, 0x04	; 4
    3990:	05 c0       	rjmp	.+10     	; 0x399c <nrk_error_print+0xe6>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    3992:	8d e4       	ldi	r24, 0x4D	; 77
    3994:	94 e0       	ldi	r25, 0x04	; 4
    3996:	02 c0       	rjmp	.+4      	; 0x399c <nrk_error_print+0xe6>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    3998:	86 e4       	ldi	r24, 0x46	; 70
    399a:	94 e0       	ldi	r25, 0x04	; 4
    399c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
        }
        putchar ('\r');
    39a0:	60 91 46 0c 	lds	r22, 0x0C46
    39a4:	70 91 47 0c 	lds	r23, 0x0C47
    39a8:	8d e0       	ldi	r24, 0x0D	; 13
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <fputc>
        putchar ('\n');
    39b0:	60 91 46 0c 	lds	r22, 0x0C46
    39b4:	70 91 47 0c 	lds	r23, 0x0C47
    39b8:	8a e0       	ldi	r24, 0x0A	; 10
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <fputc>
}


#endif

    return error_num;
    39c0:	80 91 18 0a 	lds	r24, 0x0A18
    39c4:	08 95       	ret




    if (error_num == 0)
        return 0;
    39c6:	80 e0       	ldi	r24, 0x00	; 0


#endif

    return error_num;
}
    39c8:	08 95       	ret

000039ca <clear_regs>:

inline void clear_regs()
{

        GTCCR=0;
    39ca:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    39cc:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    39d0:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    39d2:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    39d4:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    39d6:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    39d8:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    39da:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    39dc:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    39de:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    39e0:	10 92 9b 00 	sts	0x009B, r1
    39e4:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    39e8:	10 92 99 00 	sts	0x0099, r1
    39ec:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    39f0:	10 92 95 00 	sts	0x0095, r1
    39f4:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    39f8:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    39fc:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    3a00:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    3a02:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    3a06:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    3a0a:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    3a0e:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    3a12:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    3a16:	e0 eb       	ldi	r30, 0xB0	; 176
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	10 82       	st	Z, r1
        TCCR2A=0;
    3a1c:	10 82       	st	Z, r1
        TIFR2=0;
    3a1e:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    3a20:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    3a24:	8f ef       	ldi	r24, 0xFF	; 255
    3a26:	84 bf       	out	0x34, r24	; 52
    3a28:	08 95       	ret

00003a2a <nrk_error_handle>:
    		nrk_watchdog_disable();
	#endif
#endif

#ifdef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    3a2a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    nrk_watchdog_disable();
    3a2e:	0e 94 1b 30 	call	0x6036	; 0x6036 <nrk_watchdog_disable>
                        ::);
#endif

#ifdef NRK_REBOOT_ON_ERROR
        // wait for watchdog to kick in
        if(error_num!=NRK_WATCHDOG_ERROR && error_num!=NRK_BOD_ERROR && error_num!=NRK_EXT_RST_ERROR)
    3a32:	80 91 18 0a 	lds	r24, 0x0A18
    3a36:	80 31       	cpi	r24, 0x10	; 16
    3a38:	71 f0       	breq	.+28     	; 0x3a56 <nrk_error_handle+0x2c>
    3a3a:	83 51       	subi	r24, 0x13	; 19
    3a3c:	82 30       	cpi	r24, 0x02	; 2
    3a3e:	58 f0       	brcs	.+22     	; 0x3a56 <nrk_error_handle+0x2c>
        {
	    clear_regs();
    3a40:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <clear_regs>
	    #ifdef NRK_REPORT_ERRORS
	    nrk_kprintf(PSTR("NRK Reboot...\r\n" ));
    3a44:	8e e7       	ldi	r24, 0x7E	; 126
    3a46:	96 e0       	ldi	r25, 0x06	; 6
    3a48:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>
	    #endif NRK_REPORT_ERRORS
            nrk_watchdog_enable();
    3a4c:	0e 94 29 30 	call	0x6052	; 0x6052 <nrk_watchdog_enable>
            nrk_int_disable();
    3a50:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    3a54:	ff cf       	rjmp	.-2      	; 0x3a54 <nrk_error_handle+0x2a>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    3a56:	10 92 18 0a 	sts	0x0A18, r1
    3a5a:	08 95       	ret

00003a5c <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    3a5c:	80 93 18 0a 	sts	0x0A18, r24
    error_task = nrk_cur_task_TCB->task_ID;
    3a60:	e0 91 e1 0b 	lds	r30, 0x0BE1
    3a64:	f0 91 e2 0b 	lds	r31, 0x0BE2
    3a68:	60 85       	ldd	r22, Z+8	; 0x08
    3a6a:	60 93 2f 07 	sts	0x072F, r22

#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
    3a6e:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <_nrk_log_error>
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    3a72:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <nrk_error_print>
#endif 

nrk_error_handle();
    3a76:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <nrk_error_handle>

00003a7a <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    3a7a:	80 93 18 0a 	sts	0x0A18, r24
    error_task = task;
    3a7e:	60 93 2f 07 	sts	0x072F, r22

#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
    3a82:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <_nrk_log_error>
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    3a86:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <nrk_error_print>
#endif 

nrk_error_handle();
    3a8a:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <nrk_error_handle>

00003a8e <pause>:
    }

}

void pause()
{
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	1f 92       	push	r1
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    3a98:	19 82       	std	Y+1, r1	; 0x01
    3a9a:	89 81       	ldd	r24, Y+1	; 0x01
    3a9c:	84 36       	cpi	r24, 0x64	; 100
    3a9e:	40 f4       	brcc	.+16     	; 0x3ab0 <pause+0x22>
        nrk_spin_wait_us (2000);
    3aa0:	80 ed       	ldi	r24, 0xD0	; 208
    3aa2:	97 e0       	ldi	r25, 0x07	; 7
    3aa4:	0e 94 57 2c 	call	0x58ae	; 0x58ae <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	8f 5f       	subi	r24, 0xFF	; 255
    3aac:	89 83       	std	Y+1, r24	; 0x01
    3aae:	f5 cf       	rjmp	.-22     	; 0x3a9a <pause+0xc>
        nrk_spin_wait_us (2000);
}
    3ab0:	0f 90       	pop	r0
    3ab2:	df 91       	pop	r29
    3ab4:	cf 91       	pop	r28
    3ab6:	08 95       	ret

00003ab8 <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <nrk_led_set>
    pause();
    3ac0:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <pause>
    pause();
    3ac4:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <pause>
    pause();
    3ac8:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <pause>
    nrk_led_clr(GREEN_LED);
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_led_clr>
    pause();
    3ad4:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <pause>

00003ad8 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <nrk_led_set>
    pause();
    3ae0:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <pause>
    nrk_led_clr(GREEN_LED);
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_led_clr>
    pause();
    3aec:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <pause>

00003af0 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    3af0:	ff 92       	push	r15
    3af2:	0f 93       	push	r16
    3af4:	1f 93       	push	r17
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <blink_morse_code_error+0xc>
    3afc:	1f 92       	push	r1
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    3b02:	1f 92       	push	r1
    3b04:	8f 93       	push	r24
    3b06:	87 ea       	ldi	r24, 0xA7	; 167
    3b08:	92 e0       	ldi	r25, 0x02	; 2
    3b0a:	9f 93       	push	r25
    3b0c:	8f 93       	push	r24
    3b0e:	8e 01       	movw	r16, r28
    3b10:	0f 5f       	subi	r16, 0xFF	; 255
    3b12:	1f 4f       	sbci	r17, 0xFF	; 255
    3b14:	1f 93       	push	r17
    3b16:	0f 93       	push	r16
    3b18:	0e 94 65 34 	call	0x68ca	; 0x68ca <sprintf>

    for(i=0; i<strlen(str); i++ )
    3b1c:	0f 90       	pop	r0
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	f1 2c       	mov	r15, r1
    3b2a:	f8 01       	movw	r30, r16
    3b2c:	01 90       	ld	r0, Z+
    3b2e:	00 20       	and	r0, r0
    3b30:	e9 f7       	brne	.-6      	; 0x3b2c <blink_morse_code_error+0x3c>
    3b32:	31 97       	sbiw	r30, 0x01	; 1
    3b34:	e0 1b       	sub	r30, r16
    3b36:	f1 0b       	sbc	r31, r17
    3b38:	8f 2d       	mov	r24, r15
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	8e 17       	cp	r24, r30
    3b3e:	9f 07       	cpc	r25, r31
    3b40:	08 f0       	brcs	.+2      	; 0x3b44 <blink_morse_code_error+0x54>
    3b42:	5d c0       	rjmp	.+186    	; 0x3bfe <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    3b44:	f8 01       	movw	r30, r16
    3b46:	e8 0f       	add	r30, r24
    3b48:	f9 1f       	adc	r31, r25
    3b4a:	e0 81       	ld	r30, Z
    3b4c:	8e 2f       	mov	r24, r30
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	fc 01       	movw	r30, r24
    3b52:	f0 97       	sbiw	r30, 0x30	; 48
    3b54:	ea 30       	cpi	r30, 0x0A	; 10
    3b56:	f1 05       	cpc	r31, r1
    3b58:	08 f0       	brcs	.+2      	; 0x3b5c <blink_morse_code_error+0x6c>
    3b5a:	49 c0       	rjmp	.+146    	; 0x3bee <blink_morse_code_error+0xfe>
    3b5c:	e0 53       	subi	r30, 0x30	; 48
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__tablejump2__>
        {
        case '0':
            blink_dash();
    3b64:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    3b6a:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
            blink_dash();
    3b6e:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dash();
    3b72:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dash();
    3b76:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dash();
    3b7a:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            break;
    3b7e:	37 c0       	rjmp	.+110    	; 0x3bee <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    3b80:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
            blink_dot();
    3b84:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
    3b88:	f4 cf       	rjmp	.-24     	; 0x3b72 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    3b8a:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
            blink_dot();
    3b8e:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
            blink_dot();
    3b92:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
    3b96:	ef cf       	rjmp	.-34     	; 0x3b76 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    3b98:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
            blink_dot();
    3b9c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
            blink_dot();
    3ba0:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
            blink_dot();
    3ba4:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
    3ba8:	e8 cf       	rjmp	.-48     	; 0x3b7a <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    3baa:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
    3bae:	02 c0       	rjmp	.+4      	; 0x3bb4 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    3bb0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dot();
    3bb4:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
    3bb8:	04 c0       	rjmp	.+8      	; 0x3bc2 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    3bba:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dash();
    3bbe:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dot();
    3bc2:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
    3bc6:	06 c0       	rjmp	.+12     	; 0x3bd4 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    3bc8:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dash();
    3bcc:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dash();
    3bd0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dot();
    3bd4:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
    3bd8:	08 c0       	rjmp	.+16     	; 0x3bea <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    3bda:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dash();
    3bde:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dash();
    3be2:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dash();
    3be6:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <blink_dash>
            blink_dot();
    3bea:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <blink_dot>
            break;
        }
        pause();
    3bee:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <pause>
        pause();
    3bf2:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <pause>
        pause();
    3bf6:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    3bfa:	f3 94       	inc	r15
    3bfc:	96 cf       	rjmp	.-212    	; 0x3b2a <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	df 91       	pop	r29
    3c06:	cf 91       	pop	r28
    3c08:	1f 91       	pop	r17
    3c0a:	0f 91       	pop	r16
    3c0c:	ff 90       	pop	r15
    3c0e:	08 95       	ret

00003c10 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    3c10:	6f 92       	push	r6
    3c12:	7f 92       	push	r7
    3c14:	8f 92       	push	r8
    3c16:	9f 92       	push	r9
    3c18:	af 92       	push	r10
    3c1a:	bf 92       	push	r11
    3c1c:	cf 92       	push	r12
    3c1e:	df 92       	push	r13
    3c20:	ef 92       	push	r14
    3c22:	ff 92       	push	r15
    3c24:	0f 93       	push	r16
    3c26:	1f 93       	push	r17
    3c28:	cf 93       	push	r28
    3c2a:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    3c2c:	8e e8       	ldi	r24, 0x8E	; 142
    3c2e:	96 e0       	ldi	r25, 0x06	; 6
    3c30:	0e 94 64 12 	call	0x24c8	; 0x24c8 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    3c34:	e0 91 e1 0b 	lds	r30, 0x0BE1
    3c38:	f0 91 e2 0b 	lds	r31, 0x0BE2
    3c3c:	80 85       	ldd	r24, Z+8	; 0x08
    3c3e:	28 2f       	mov	r18, r24
    3c40:	33 27       	eor	r19, r19
    3c42:	27 fd       	sbrc	r18, 7
    3c44:	30 95       	com	r19
    3c46:	3f 93       	push	r19
    3c48:	8f 93       	push	r24
    3c4a:	80 e9       	ldi	r24, 0x90	; 144
    3c4c:	93 e0       	ldi	r25, 0x03	; 3
    3c4e:	9f 93       	push	r25
    3c50:	8f 93       	push	r24
    3c52:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    3c56:	e0 91 e1 0b 	lds	r30, 0x0BE1
    3c5a:	f0 91 e2 0b 	lds	r31, 0x0BE2
    3c5e:	c2 81       	ldd	r28, Z+2	; 0x02
    3c60:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    3c62:	df 93       	push	r29
    3c64:	cf 93       	push	r28
    3c66:	84 ec       	ldi	r24, 0xC4	; 196
    3c68:	93 e0       	ldi	r25, 0x03	; 3
    3c6a:	9f 93       	push	r25
    3c6c:	8f 93       	push	r24
    3c6e:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    printf( "canary = %x ",*stkc );
    3c72:	88 81       	ld	r24, Y
    3c74:	1f 92       	push	r1
    3c76:	8f 93       	push	r24
    3c78:	89 e9       	ldi	r24, 0x99	; 153
    3c7a:	93 e0       	ldi	r25, 0x03	; 3
    3c7c:	9f 93       	push	r25
    3c7e:	8f 93       	push	r24
    3c80:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    3c84:	e0 91 e1 0b 	lds	r30, 0x0BE1
    3c88:	f0 91 e2 0b 	lds	r31, 0x0BE2
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    3c8c:	81 81       	ldd	r24, Z+1	; 0x01
    3c8e:	8f 93       	push	r24
    3c90:	80 81       	ld	r24, Z
    3c92:	8f 93       	push	r24
    3c94:	86 ea       	ldi	r24, 0xA6	; 166
    3c96:	93 e0       	ldi	r25, 0x03	; 3
    3c98:	9f 93       	push	r25
    3c9a:	8f 93       	push	r24
    3c9c:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    3ca0:	80 91 e2 0b 	lds	r24, 0x0BE2
    3ca4:	8f 93       	push	r24
    3ca6:	80 91 e1 0b 	lds	r24, 0x0BE1
    3caa:	8f 93       	push	r24
    3cac:	80 eb       	ldi	r24, 0xB0	; 176
    3cae:	93 e0       	ldi	r25, 0x03	; 3
    3cb0:	9f 93       	push	r25
    3cb2:	8f 93       	push	r24
    3cb4:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    3cb8:	c1 ef       	ldi	r28, 0xF1	; 241
    3cba:	da e0       	ldi	r29, 0x0A	; 10
    3cbc:	ed b7       	in	r30, 0x3d	; 61
    3cbe:	fe b7       	in	r31, 0x3e	; 62
    3cc0:	74 96       	adiw	r30, 0x14	; 20
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	fe bf       	out	0x3e, r31	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	ed bf       	out	0x3d, r30	; 61
    3ccc:	00 e0       	ldi	r16, 0x00	; 0
    3cce:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3cd0:	80 ec       	ldi	r24, 0xC0	; 192
    3cd2:	68 2e       	mov	r6, r24
    3cd4:	83 e0       	ldi	r24, 0x03	; 3
    3cd6:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    3cd8:	99 e9       	ldi	r25, 0x99	; 153
    3cda:	89 2e       	mov	r8, r25
    3cdc:	93 e0       	ldi	r25, 0x03	; 3
    3cde:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3ce0:	26 ea       	ldi	r18, 0xA6	; 166
    3ce2:	a2 2e       	mov	r10, r18
    3ce4:	23 e0       	ldi	r18, 0x03	; 3
    3ce6:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3ce8:	30 eb       	ldi	r19, 0xB0	; 176
    3cea:	c3 2e       	mov	r12, r19
    3cec:	33 e0       	ldi	r19, 0x03	; 3
    3cee:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    3cf0:	ea 80       	ldd	r14, Y+2	; 0x02
    3cf2:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3cf4:	ff 92       	push	r15
    3cf6:	ef 92       	push	r14
    3cf8:	1f 93       	push	r17
    3cfa:	0f 93       	push	r16
    3cfc:	7f 92       	push	r7
    3cfe:	6f 92       	push	r6
    3d00:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
        printf( "canary = %x ",*stkc );
    3d04:	f7 01       	movw	r30, r14
    3d06:	80 81       	ld	r24, Z
    3d08:	1f 92       	push	r1
    3d0a:	8f 93       	push	r24
    3d0c:	9f 92       	push	r9
    3d0e:	8f 92       	push	r8
    3d10:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3d14:	89 81       	ldd	r24, Y+1	; 0x01
    3d16:	8f 93       	push	r24
    3d18:	88 81       	ld	r24, Y
    3d1a:	8f 93       	push	r24
    3d1c:	bf 92       	push	r11
    3d1e:	af 92       	push	r10
    3d20:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	df 92       	push	r13
    3d2a:	cf 92       	push	r12
    3d2c:	0e 94 1b 34 	call	0x6836	; 0x6836 <printf>
    3d30:	0f 5f       	subi	r16, 0xFF	; 255
    3d32:	1f 4f       	sbci	r17, 0xFF	; 255
    3d34:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    3d36:	ed b7       	in	r30, 0x3d	; 61
    3d38:	fe b7       	in	r31, 0x3e	; 62
    3d3a:	72 96       	adiw	r30, 0x12	; 18
    3d3c:	0f b6       	in	r0, 0x3f	; 63
    3d3e:	f8 94       	cli
    3d40:	fe bf       	out	0x3e, r31	; 62
    3d42:	0f be       	out	0x3f, r0	; 63
    3d44:	ed bf       	out	0x3d, r30	; 61
    3d46:	05 30       	cpi	r16, 0x05	; 5
    3d48:	11 05       	cpc	r17, r1
    3d4a:	91 f6       	brne	.-92     	; 0x3cf0 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    3d4c:	df 91       	pop	r29
    3d4e:	cf 91       	pop	r28
    3d50:	1f 91       	pop	r17
    3d52:	0f 91       	pop	r16
    3d54:	ff 90       	pop	r15
    3d56:	ef 90       	pop	r14
    3d58:	df 90       	pop	r13
    3d5a:	cf 90       	pop	r12
    3d5c:	bf 90       	pop	r11
    3d5e:	af 90       	pop	r10
    3d60:	9f 90       	pop	r9
    3d62:	8f 90       	pop	r8
    3d64:	7f 90       	pop	r7
    3d66:	6f 90       	pop	r6
    3d68:	08 95       	ret

00003d6a <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    3d6a:	cf 93       	push	r28
    3d6c:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    3d6e:	e0 91 e1 0b 	lds	r30, 0x0BE1
    3d72:	f0 91 e2 0b 	lds	r31, 0x0BE2
    3d76:	c2 81       	ldd	r28, Z+2	; 0x02
    3d78:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3d7a:	88 81       	ld	r24, Y
    3d7c:	85 35       	cpi	r24, 0x55	; 85
    3d7e:	39 f0       	breq	.+14     	; 0x3d8e <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3d80:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    3d8a:	85 e5       	ldi	r24, 0x55	; 85
    3d8c:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    3d8e:	e0 91 e1 0b 	lds	r30, 0x0BE1
    3d92:	f0 91 e2 0b 	lds	r31, 0x0BE2
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3d96:	80 81       	ld	r24, Z
    3d98:	91 81       	ldd	r25, Z+1	; 0x01
    3d9a:	81 15       	cp	r24, r1
    3d9c:	92 44       	sbci	r25, 0x42	; 66
    3d9e:	38 f0       	brcs	.+14     	; 0x3dae <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3da0:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3da4:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    3da6:	df 91       	pop	r29
    3da8:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3daa:	0c 94 2e 1d 	jmp	0x3a5c	; 0x3a5c <nrk_error_add>




#endif
}
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	08 95       	ret

00003db4 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    3db4:	2b e2       	ldi	r18, 0x2B	; 43
    3db6:	82 02       	muls	r24, r18
    3db8:	c0 01       	movw	r24, r0
    3dba:	11 24       	eor	r1, r1
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	ef 50       	subi	r30, 0x0F	; 15
    3dc0:	f5 4f       	sbci	r31, 0xF5	; 245
    3dc2:	a2 81       	ldd	r26, Z+2	; 0x02
    3dc4:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3dc6:	8c 91       	ld	r24, X
    3dc8:	85 35       	cpi	r24, 0x55	; 85
    3dca:	19 f0       	breq	.+6      	; 0x3dd2 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    3dcc:	85 e5       	ldi	r24, 0x55	; 85
    3dce:	8c 93       	st	X, r24
    3dd0:	08 c0       	rjmp	.+16     	; 0x3de2 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3dd2:	80 81       	ld	r24, Z
    3dd4:	91 81       	ldd	r25, Z+1	; 0x01
    3dd6:	81 15       	cp	r24, r1
    3dd8:	92 44       	sbci	r25, 0x42	; 66
    3dda:	28 f0       	brcs	.+10     	; 0x3de6 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3ddc:	82 e1       	ldi	r24, 0x12	; 18
    3dde:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <nrk_error_add>
        return NRK_ERROR;
    3de2:	8f ef       	ldi	r24, 0xFF	; 255
    3de4:	08 95       	ret
    }
#endif
    return NRK_OK;
    3de6:	81 e0       	ldi	r24, 0x01	; 1
}
    3de8:	08 95       	ret

00003dea <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    3dea:	0f 93       	push	r16
    3dec:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3dee:	40 91 40 08 	lds	r20, 0x0840
    3df2:	50 91 41 08 	lds	r21, 0x0841
    3df6:	60 91 42 08 	lds	r22, 0x0842
    3dfa:	70 91 43 08 	lds	r23, 0x0843
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	8a 01       	movw	r16, r20
    3e04:	9b 01       	movw	r18, r22
    3e06:	08 2e       	mov	r0, r24
    3e08:	04 c0       	rjmp	.+8      	; 0x3e12 <nrk_signal_create+0x28>
    3e0a:	36 95       	lsr	r19
    3e0c:	27 95       	ror	r18
    3e0e:	17 95       	ror	r17
    3e10:	07 95       	ror	r16
    3e12:	0a 94       	dec	r0
    3e14:	d2 f7       	brpl	.-12     	; 0x3e0a <nrk_signal_create+0x20>
    3e16:	00 fd       	sbrc	r16, 0
    3e18:	19 c0       	rjmp	.+50     	; 0x3e4c <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    3e1a:	01 e0       	ldi	r16, 0x01	; 1
    3e1c:	10 e0       	ldi	r17, 0x00	; 0
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	08 2e       	mov	r0, r24
    3e24:	04 c0       	rjmp	.+8      	; 0x3e2e <nrk_signal_create+0x44>
    3e26:	00 0f       	add	r16, r16
    3e28:	11 1f       	adc	r17, r17
    3e2a:	22 1f       	adc	r18, r18
    3e2c:	33 1f       	adc	r19, r19
    3e2e:	0a 94       	dec	r0
    3e30:	d2 f7       	brpl	.-12     	; 0x3e26 <nrk_signal_create+0x3c>
    3e32:	40 2b       	or	r20, r16
    3e34:	51 2b       	or	r21, r17
    3e36:	62 2b       	or	r22, r18
    3e38:	73 2b       	or	r23, r19
    3e3a:	40 93 40 08 	sts	0x0840, r20
    3e3e:	50 93 41 08 	sts	0x0841, r21
    3e42:	60 93 42 08 	sts	0x0842, r22
    3e46:	70 93 43 08 	sts	0x0843, r23
			return i;
    3e4a:	05 c0       	rjmp	.+10     	; 0x3e56 <nrk_signal_create+0x6c>
    3e4c:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    3e4e:	80 32       	cpi	r24, 0x20	; 32
    3e50:	91 05       	cpc	r25, r1
    3e52:	b9 f6       	brne	.-82     	; 0x3e02 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    3e54:	8f ef       	ldi	r24, 0xFF	; 255


}
    3e56:	1f 91       	pop	r17
    3e58:	0f 91       	pop	r16
    3e5a:	08 95       	ret

00003e5c <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    3e5c:	e0 91 e1 0b 	lds	r30, 0x0BE1
    3e60:	f0 91 e2 0b 	lds	r31, 0x0BE2
    3e64:	65 85       	ldd	r22, Z+13	; 0x0d
    3e66:	76 85       	ldd	r23, Z+14	; 0x0e
    3e68:	87 85       	ldd	r24, Z+15	; 0x0f
    3e6a:	90 89       	ldd	r25, Z+16	; 0x10
}
    3e6c:	08 95       	ret

00003e6e <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3e6e:	cf 92       	push	r12
    3e70:	df 92       	push	r13
    3e72:	ef 92       	push	r14
    3e74:	ff 92       	push	r15
    3e76:	0f 93       	push	r16
    3e78:	1f 93       	push	r17
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3e7e:	c1 2c       	mov	r12, r1
    3e80:	d1 2c       	mov	r13, r1
    3e82:	76 01       	movw	r14, r12
    3e84:	c3 94       	inc	r12
    3e86:	08 2e       	mov	r0, r24
    3e88:	04 c0       	rjmp	.+8      	; 0x3e92 <nrk_signal_delete+0x24>
    3e8a:	cc 0c       	add	r12, r12
    3e8c:	dd 1c       	adc	r13, r13
    3e8e:	ee 1c       	adc	r14, r14
    3e90:	ff 1c       	adc	r15, r15
    3e92:	0a 94       	dec	r0
    3e94:	d2 f7       	brpl	.-12     	; 0x3e8a <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3e96:	40 91 40 08 	lds	r20, 0x0840
    3e9a:	50 91 41 08 	lds	r21, 0x0841
    3e9e:	60 91 42 08 	lds	r22, 0x0842
    3ea2:	70 91 43 08 	lds	r23, 0x0843
    3ea6:	4c 21       	and	r20, r12
    3ea8:	5d 21       	and	r21, r13
    3eaa:	6e 21       	and	r22, r14
    3eac:	7f 21       	and	r23, r15
    3eae:	45 2b       	or	r20, r21
    3eb0:	46 2b       	or	r20, r22
    3eb2:	47 2b       	or	r20, r23
    3eb4:	09 f4       	brne	.+2      	; 0x3eb8 <nrk_signal_delete+0x4a>
    3eb6:	60 c0       	rjmp	.+192    	; 0x3f78 <nrk_signal_delete+0x10a>
    3eb8:	08 2f       	mov	r16, r24

	nrk_int_disable();
    3eba:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    3ebe:	ea ef       	ldi	r30, 0xFA	; 250
    3ec0:	fa e0       	ldi	r31, 0x0A	; 10
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3ec2:	b7 01       	movw	r22, r14
    3ec4:	a6 01       	movw	r20, r12
    3ec6:	40 95       	com	r20
    3ec8:	50 95       	com	r21
    3eca:	60 95       	com	r22
    3ecc:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3ece:	13 e0       	ldi	r17, 0x03	; 3
    3ed0:	df 01       	movw	r26, r30
    3ed2:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3ed4:	8c 91       	ld	r24, X
    3ed6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ed8:	39 f1       	breq	.+78     	; 0x3f28 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    3eda:	84 81       	ldd	r24, Z+4	; 0x04
    3edc:	95 81       	ldd	r25, Z+5	; 0x05
    3ede:	a6 81       	ldd	r26, Z+6	; 0x06
    3ee0:	b7 81       	ldd	r27, Z+7	; 0x07
    3ee2:	8c 15       	cp	r24, r12
    3ee4:	9d 05       	cpc	r25, r13
    3ee6:	ae 05       	cpc	r26, r14
    3ee8:	bf 05       	cpc	r27, r15
    3eea:	51 f4       	brne	.+20     	; 0x3f00 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3eec:	10 86       	std	Z+8, r1	; 0x08
    3eee:	11 86       	std	Z+9, r1	; 0x09
    3ef0:	12 86       	std	Z+10, r1	; 0x0a
    3ef2:	13 86       	std	Z+11, r1	; 0x0b
    3ef4:	9f 01       	movw	r18, r30
    3ef6:	22 50       	subi	r18, 0x02	; 2
    3ef8:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    3efa:	e9 01       	movw	r28, r18
    3efc:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3efe:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3f00:	84 23       	and	r24, r20
    3f02:	95 23       	and	r25, r21
    3f04:	a6 23       	and	r26, r22
    3f06:	b7 23       	and	r27, r23
    3f08:	84 83       	std	Z+4, r24	; 0x04
    3f0a:	95 83       	std	Z+5, r25	; 0x05
    3f0c:	a6 83       	std	Z+6, r26	; 0x06
    3f0e:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3f10:	80 85       	ldd	r24, Z+8	; 0x08
    3f12:	91 85       	ldd	r25, Z+9	; 0x09
    3f14:	a2 85       	ldd	r26, Z+10	; 0x0a
    3f16:	b3 85       	ldd	r27, Z+11	; 0x0b
    3f18:	84 23       	and	r24, r20
    3f1a:	95 23       	and	r25, r21
    3f1c:	a6 23       	and	r26, r22
    3f1e:	b7 23       	and	r27, r23
    3f20:	80 87       	std	Z+8, r24	; 0x08
    3f22:	91 87       	std	Z+9, r25	; 0x09
    3f24:	a2 87       	std	Z+10, r26	; 0x0a
    3f26:	b3 87       	std	Z+11, r27	; 0x0b
    3f28:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3f2a:	db e0       	ldi	r29, 0x0B	; 11
    3f2c:	e1 3d       	cpi	r30, 0xD1	; 209
    3f2e:	fd 07       	cpc	r31, r29
    3f30:	79 f6       	brne	.-98     	; 0x3ed0 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    3f32:	8e ef       	ldi	r24, 0xFE	; 254
    3f34:	9f ef       	ldi	r25, 0xFF	; 255
    3f36:	af ef       	ldi	r26, 0xFF	; 255
    3f38:	bf ef       	ldi	r27, 0xFF	; 255
    3f3a:	04 c0       	rjmp	.+8      	; 0x3f44 <nrk_signal_delete+0xd6>
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	aa 1f       	adc	r26, r26
    3f42:	bb 1f       	adc	r27, r27
    3f44:	0a 95       	dec	r16
    3f46:	d2 f7       	brpl	.-12     	; 0x3f3c <nrk_signal_delete+0xce>
    3f48:	40 91 40 08 	lds	r20, 0x0840
    3f4c:	50 91 41 08 	lds	r21, 0x0841
    3f50:	60 91 42 08 	lds	r22, 0x0842
    3f54:	70 91 43 08 	lds	r23, 0x0843
    3f58:	84 23       	and	r24, r20
    3f5a:	95 23       	and	r25, r21
    3f5c:	a6 23       	and	r26, r22
    3f5e:	b7 23       	and	r27, r23
    3f60:	80 93 40 08 	sts	0x0840, r24
    3f64:	90 93 41 08 	sts	0x0841, r25
    3f68:	a0 93 42 08 	sts	0x0842, r26
    3f6c:	b0 93 43 08 	sts	0x0843, r27
	nrk_int_enable();
    3f70:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>

	return NRK_OK;
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	01 c0       	rjmp	.+2      	; 0x3f7a <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3f78:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	1f 91       	pop	r17
    3f80:	0f 91       	pop	r16
    3f82:	ff 90       	pop	r15
    3f84:	ef 90       	pop	r14
    3f86:	df 90       	pop	r13
    3f88:	cf 90       	pop	r12
    3f8a:	08 95       	ret

00003f8c <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3f8c:	0f 93       	push	r16
    3f8e:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3f90:	41 e0       	ldi	r20, 0x01	; 1
    3f92:	50 e0       	ldi	r21, 0x00	; 0
    3f94:	60 e0       	ldi	r22, 0x00	; 0
    3f96:	70 e0       	ldi	r23, 0x00	; 0
    3f98:	8a 01       	movw	r16, r20
    3f9a:	9b 01       	movw	r18, r22
    3f9c:	04 c0       	rjmp	.+8      	; 0x3fa6 <nrk_signal_unregister+0x1a>
    3f9e:	00 0f       	add	r16, r16
    3fa0:	11 1f       	adc	r17, r17
    3fa2:	22 1f       	adc	r18, r18
    3fa4:	33 1f       	adc	r19, r19
    3fa6:	8a 95       	dec	r24
    3fa8:	d2 f7       	brpl	.-12     	; 0x3f9e <nrk_signal_unregister+0x12>
    3faa:	d9 01       	movw	r26, r18
    3fac:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3fae:	e0 91 e1 0b 	lds	r30, 0x0BE1
    3fb2:	f0 91 e2 0b 	lds	r31, 0x0BE2
    3fb6:	45 85       	ldd	r20, Z+13	; 0x0d
    3fb8:	56 85       	ldd	r21, Z+14	; 0x0e
    3fba:	67 85       	ldd	r22, Z+15	; 0x0f
    3fbc:	70 89       	ldd	r23, Z+16	; 0x10
    3fbe:	04 23       	and	r16, r20
    3fc0:	15 23       	and	r17, r21
    3fc2:	26 23       	and	r18, r22
    3fc4:	37 23       	and	r19, r23
    3fc6:	01 2b       	or	r16, r17
    3fc8:	02 2b       	or	r16, r18
    3fca:	03 2b       	or	r16, r19
    3fcc:	d1 f0       	breq	.+52     	; 0x4002 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3fce:	80 95       	com	r24
    3fd0:	90 95       	com	r25
    3fd2:	a0 95       	com	r26
    3fd4:	b0 95       	com	r27
    3fd6:	48 23       	and	r20, r24
    3fd8:	59 23       	and	r21, r25
    3fda:	6a 23       	and	r22, r26
    3fdc:	7b 23       	and	r23, r27
    3fde:	45 87       	std	Z+13, r20	; 0x0d
    3fe0:	56 87       	std	Z+14, r21	; 0x0e
    3fe2:	67 87       	std	Z+15, r22	; 0x0f
    3fe4:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3fe6:	41 89       	ldd	r20, Z+17	; 0x11
    3fe8:	52 89       	ldd	r21, Z+18	; 0x12
    3fea:	63 89       	ldd	r22, Z+19	; 0x13
    3fec:	74 89       	ldd	r23, Z+20	; 0x14
    3fee:	84 23       	and	r24, r20
    3ff0:	95 23       	and	r25, r21
    3ff2:	a6 23       	and	r26, r22
    3ff4:	b7 23       	and	r27, r23
    3ff6:	81 8b       	std	Z+17, r24	; 0x11
    3ff8:	92 8b       	std	Z+18, r25	; 0x12
    3ffa:	a3 8b       	std	Z+19, r26	; 0x13
    3ffc:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	01 c0       	rjmp	.+2      	; 0x4004 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    4002:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	08 95       	ret

0000400a <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    400a:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    400c:	40 91 40 08 	lds	r20, 0x0840
    4010:	50 91 41 08 	lds	r21, 0x0841
    4014:	60 91 42 08 	lds	r22, 0x0842
    4018:	70 91 43 08 	lds	r23, 0x0843
    401c:	08 2e       	mov	r0, r24
    401e:	04 c0       	rjmp	.+8      	; 0x4028 <nrk_signal_register+0x1e>
    4020:	76 95       	lsr	r23
    4022:	67 95       	ror	r22
    4024:	57 95       	ror	r21
    4026:	47 95       	ror	r20
    4028:	0a 94       	dec	r0
    402a:	d2 f7       	brpl	.-12     	; 0x4020 <nrk_signal_register+0x16>
    402c:	40 ff       	sbrs	r20, 0
    402e:	1d c0       	rjmp	.+58     	; 0x406a <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    4030:	e0 91 e1 0b 	lds	r30, 0x0BE1
    4034:	f0 91 e2 0b 	lds	r31, 0x0BE2
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	a0 e0       	ldi	r26, 0x00	; 0
    403e:	b0 e0       	ldi	r27, 0x00	; 0
    4040:	04 c0       	rjmp	.+8      	; 0x404a <nrk_signal_register+0x40>
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	aa 1f       	adc	r26, r26
    4048:	bb 1f       	adc	r27, r27
    404a:	2a 95       	dec	r18
    404c:	d2 f7       	brpl	.-12     	; 0x4042 <nrk_signal_register+0x38>
    404e:	45 85       	ldd	r20, Z+13	; 0x0d
    4050:	56 85       	ldd	r21, Z+14	; 0x0e
    4052:	67 85       	ldd	r22, Z+15	; 0x0f
    4054:	70 89       	ldd	r23, Z+16	; 0x10
    4056:	84 2b       	or	r24, r20
    4058:	95 2b       	or	r25, r21
    405a:	a6 2b       	or	r26, r22
    405c:	b7 2b       	or	r27, r23
    405e:	85 87       	std	Z+13, r24	; 0x0d
    4060:	96 87       	std	Z+14, r25	; 0x0e
    4062:	a7 87       	std	Z+15, r26	; 0x0f
    4064:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	08 95       	ret
	}
            
	return NRK_ERROR;
    406a:	8f ef       	ldi	r24, 0xFF	; 255
}
    406c:	08 95       	ret

0000406e <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    406e:	cf 92       	push	r12
    4070:	df 92       	push	r13
    4072:	ef 92       	push	r14
    4074:	ff 92       	push	r15
    4076:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    4078:	c1 2c       	mov	r12, r1
    407a:	d1 2c       	mov	r13, r1
    407c:	76 01       	movw	r14, r12
    407e:	c3 94       	inc	r12
    4080:	04 c0       	rjmp	.+8      	; 0x408a <nrk_event_signal+0x1c>
    4082:	cc 0c       	add	r12, r12
    4084:	dd 1c       	adc	r13, r13
    4086:	ee 1c       	adc	r14, r14
    4088:	ff 1c       	adc	r15, r15
    408a:	8a 95       	dec	r24
    408c:	d2 f7       	brpl	.-12     	; 0x4082 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    408e:	80 91 40 08 	lds	r24, 0x0840
    4092:	90 91 41 08 	lds	r25, 0x0841
    4096:	a0 91 42 08 	lds	r26, 0x0842
    409a:	b0 91 43 08 	lds	r27, 0x0843
    409e:	8c 21       	and	r24, r12
    40a0:	9d 21       	and	r25, r13
    40a2:	ae 21       	and	r26, r14
    40a4:	bf 21       	and	r27, r15
    40a6:	89 2b       	or	r24, r25
    40a8:	8a 2b       	or	r24, r26
    40aa:	8b 2b       	or	r24, r27
    40ac:	11 f4       	brne	.+4      	; 0x40b2 <nrk_event_signal+0x44>
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	44 c0       	rjmp	.+136    	; 0x413a <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    40b2:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    40b6:	e8 ef       	ldi	r30, 0xF8	; 248
    40b8:	fa e0       	ldi	r31, 0x0A	; 10
    40ba:	aa ef       	ldi	r26, 0xFA	; 250
    40bc:	ba e0       	ldi	r27, 0x0A	; 10

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    40be:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    40c0:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    40c2:	90 81       	ld	r25, Z
    40c4:	91 30       	cpi	r25, 0x01	; 1
    40c6:	b9 f4       	brne	.+46     	; 0x40f6 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    40c8:	42 85       	ldd	r20, Z+10	; 0x0a
    40ca:	53 85       	ldd	r21, Z+11	; 0x0b
    40cc:	64 85       	ldd	r22, Z+12	; 0x0c
    40ce:	75 85       	ldd	r23, Z+13	; 0x0d
    40d0:	4c 21       	and	r20, r12
    40d2:	5d 21       	and	r21, r13
    40d4:	6e 21       	and	r22, r14
    40d6:	7f 21       	and	r23, r15
    40d8:	45 2b       	or	r20, r21
    40da:	46 2b       	or	r20, r22
    40dc:	47 2b       	or	r20, r23
    40de:	59 f0       	breq	.+22     	; 0x40f6 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    40e0:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    40e2:	16 86       	std	Z+14, r1	; 0x0e
    40e4:	17 86       	std	Z+15, r1	; 0x0f
    40e6:	10 8a       	std	Z+16, r1	; 0x10
    40e8:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    40ea:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    40ec:	c2 86       	std	Z+10, r12	; 0x0a
    40ee:	d3 86       	std	Z+11, r13	; 0x0b
    40f0:	e4 86       	std	Z+12, r14	; 0x0c
    40f2:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    40f4:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    40f6:	90 81       	ld	r25, Z
    40f8:	92 30       	cpi	r25, 0x02	; 2
    40fa:	a1 f4       	brne	.+40     	; 0x4124 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    40fc:	42 85       	ldd	r20, Z+10	; 0x0a
    40fe:	53 85       	ldd	r21, Z+11	; 0x0b
    4100:	64 85       	ldd	r22, Z+12	; 0x0c
    4102:	75 85       	ldd	r23, Z+13	; 0x0d
    4104:	4c 15       	cp	r20, r12
    4106:	5d 05       	cpc	r21, r13
    4108:	6e 05       	cpc	r22, r14
    410a:	7f 05       	cpc	r23, r15
    410c:	59 f4       	brne	.+22     	; 0x4124 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    410e:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    4110:	16 86       	std	Z+14, r1	; 0x0e
    4112:	17 86       	std	Z+15, r1	; 0x0f
    4114:	10 8a       	std	Z+16, r1	; 0x10
    4116:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    4118:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    411a:	12 86       	std	Z+10, r1	; 0x0a
    411c:	13 86       	std	Z+11, r1	; 0x0b
    411e:	14 86       	std	Z+12, r1	; 0x0c
    4120:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    4122:	c1 e0       	ldi	r28, 0x01	; 1
    4124:	bb 96       	adiw	r30, 0x2b	; 43
    4126:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    4128:	9b e0       	ldi	r25, 0x0B	; 11
    412a:	ef 3c       	cpi	r30, 0xCF	; 207
    412c:	f9 07       	cpc	r31, r25
    412e:	49 f6       	brne	.-110    	; 0x40c2 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    4130:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>
	if(event_occured)
    4134:	c1 11       	cpse	r28, r1
    4136:	05 c0       	rjmp	.+10     	; 0x4142 <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    4138:	82 e0       	ldi	r24, 0x02	; 2
    413a:	0e 94 c6 1b 	call	0x378c	; 0x378c <_nrk_errno_set>
	return NRK_ERROR;
    413e:	8f ef       	ldi	r24, 0xFF	; 255
    4140:	01 c0       	rjmp	.+2      	; 0x4144 <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    4142:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    4144:	cf 91       	pop	r28
    4146:	ff 90       	pop	r15
    4148:	ef 90       	pop	r14
    414a:	df 90       	pop	r13
    414c:	cf 90       	pop	r12
    414e:	08 95       	ret

00004150 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    4150:	0f 93       	push	r16
    4152:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    4154:	e0 91 e1 0b 	lds	r30, 0x0BE1
    4158:	f0 91 e2 0b 	lds	r31, 0x0BE2
    415c:	05 85       	ldd	r16, Z+13	; 0x0d
    415e:	16 85       	ldd	r17, Z+14	; 0x0e
    4160:	27 85       	ldd	r18, Z+15	; 0x0f
    4162:	30 89       	ldd	r19, Z+16	; 0x10
    4164:	06 23       	and	r16, r22
    4166:	17 23       	and	r17, r23
    4168:	28 23       	and	r18, r24
    416a:	39 23       	and	r19, r25
    416c:	01 15       	cp	r16, r1
    416e:	11 05       	cpc	r17, r1
    4170:	21 05       	cpc	r18, r1
    4172:	31 05       	cpc	r19, r1
    4174:	11 f1       	breq	.+68     	; 0x41ba <nrk_event_wait+0x6a>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    417a:	81 8b       	std	Z+17, r24	; 0x11
    417c:	92 8b       	std	Z+18, r25	; 0x12
    417e:	a3 8b       	std	Z+19, r26	; 0x13
    4180:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    4182:	21 e0       	ldi	r18, 0x01	; 1
    4184:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    4186:	00 90 d1 0b 	lds	r0, 0x0BD1
    418a:	04 c0       	rjmp	.+8      	; 0x4194 <nrk_event_wait+0x44>
    418c:	b6 95       	lsr	r27
    418e:	a7 95       	ror	r26
    4190:	97 95       	ror	r25
    4192:	87 95       	ror	r24
    4194:	0a 94       	dec	r0
    4196:	d2 f7       	brpl	.-12     	; 0x418c <nrk_event_wait+0x3c>
    4198:	80 ff       	sbrs	r24, 0
    419a:	03 c0       	rjmp	.+6      	; 0x41a2 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    419c:	0e 94 82 24 	call	0x4904	; 0x4904 <nrk_wait_until_nw>
    41a0:	04 c0       	rjmp	.+8      	; 0x41aa <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 53 24 	call	0x48a6	; 0x48a6 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    41aa:	e0 91 e1 0b 	lds	r30, 0x0BE1
    41ae:	f0 91 e2 0b 	lds	r31, 0x0BE2
    41b2:	01 89       	ldd	r16, Z+17	; 0x11
    41b4:	12 89       	ldd	r17, Z+18	; 0x12
    41b6:	23 89       	ldd	r18, Z+19	; 0x13
    41b8:	34 89       	ldd	r19, Z+20	; 0x14
}
    41ba:	c9 01       	movw	r24, r18
    41bc:	b8 01       	movw	r22, r16
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	08 95       	ret

000041c4 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    41c4:	90 91 e0 0b 	lds	r25, 0x0BE0
    41c8:	91 11       	cpse	r25, r1
    41ca:	1d c0       	rjmp	.+58     	; 0x4206 <__stack+0x7>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    41cc:	90 91 ca 0b 	lds	r25, 0x0BCA
    41d0:	9f 3f       	cpi	r25, 0xFF	; 255
    41d2:	31 f0       	breq	.+12     	; 0x41e0 <nrk_sem_create+0x1c>
    41d4:	90 91 cd 0b 	lds	r25, 0x0BCD
    41d8:	9f 3f       	cpi	r25, 0xFF	; 255
    41da:	21 f0       	breq	.+8      	; 0x41e4 <nrk_sem_create+0x20>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    41dc:	e2 e0       	ldi	r30, 0x02	; 2
    41de:	03 c0       	rjmp	.+6      	; 0x41e6 <nrk_sem_create+0x22>
		{
		   if(nrk_sem_list[i].count==-1) break;
    41e0:	e0 e0       	ldi	r30, 0x00	; 0
    41e2:	01 c0       	rjmp	.+2      	; 0x41e6 <nrk_sem_create+0x22>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    41e4:	e1 e0       	ldi	r30, 0x01	; 1
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	9f 01       	movw	r18, r30
    41ea:	22 0f       	add	r18, r18
    41ec:	33 1f       	adc	r19, r19
    41ee:	e2 0f       	add	r30, r18
    41f0:	f3 1f       	adc	r31, r19
    41f2:	e6 53       	subi	r30, 0x36	; 54
    41f4:	f4 4f       	sbci	r31, 0xF4	; 244
    41f6:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    41f8:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    41fa:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	80 93 e0 0b 	sts	0x0BE0, r24
	return	&nrk_sem_list[i];
    4202:	cf 01       	movw	r24, r30
    4204:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    420a:	08 95       	ret

0000420c <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    420c:	2b e0       	ldi	r18, 0x0B	; 11
    420e:	8a 3c       	cpi	r24, 0xCA	; 202
    4210:	92 07       	cpc	r25, r18
    4212:	29 f0       	breq	.+10     	; 0x421e <nrk_get_resource_index+0x12>
    4214:	8d 5c       	subi	r24, 0xCD	; 205
    4216:	9b 40       	sbci	r25, 0x0B	; 11
    4218:	21 f4       	brne	.+8      	; 0x4222 <nrk_get_resource_index+0x16>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	08 95       	ret
    421e:	80 e0       	ldi	r24, 0x00	; 0
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    4220:	08 95       	ret
	return NRK_ERROR;
    4222:	8f ef       	ldi	r24, 0xFF	; 255
}
    4224:	08 95       	ret

00004226 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    4226:	0e 94 06 21 	call	0x420c	; 0x420c <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    422a:	8f 3f       	cpi	r24, 0xFF	; 255
    422c:	11 f4       	brne	.+4      	; 0x4232 <nrk_sem_query+0xc>
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	02 c0       	rjmp	.+4      	; 0x4236 <nrk_sem_query+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4232:	82 30       	cpi	r24, 0x02	; 2
    4234:	21 f4       	brne	.+8      	; 0x423e <nrk_sem_query+0x18>
    4236:	0e 94 c6 1b 	call	0x378c	; 0x378c <_nrk_errno_set>
    423a:	8f ef       	ldi	r24, 0xFF	; 255
    423c:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    423e:	99 27       	eor	r25, r25
    4240:	87 fd       	sbrc	r24, 7
    4242:	90 95       	com	r25
    4244:	fc 01       	movw	r30, r24
    4246:	ee 0f       	add	r30, r30
    4248:	ff 1f       	adc	r31, r31
    424a:	8e 0f       	add	r24, r30
    424c:	9f 1f       	adc	r25, r31
    424e:	fc 01       	movw	r30, r24
    4250:	e6 53       	subi	r30, 0x36	; 54
    4252:	f4 4f       	sbci	r31, 0xF4	; 244
    4254:	82 81       	ldd	r24, Z+2	; 0x02
}
    4256:	08 95       	ret

00004258 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    4258:	ef 92       	push	r14
    425a:	ff 92       	push	r15
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	1f 92       	push	r1
    4266:	cd b7       	in	r28, 0x3d	; 61
    4268:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    426a:	0e 94 06 21 	call	0x420c	; 0x420c <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    426e:	8f 3f       	cpi	r24, 0xFF	; 255
    4270:	11 f4       	brne	.+4      	; 0x4276 <nrk_sem_pend+0x1e>
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	02 c0       	rjmp	.+4      	; 0x427a <nrk_sem_pend+0x22>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4276:	82 30       	cpi	r24, 0x02	; 2
    4278:	21 f4       	brne	.+8      	; 0x4282 <nrk_sem_pend+0x2a>
    427a:	0e 94 c6 1b 	call	0x378c	; 0x378c <_nrk_errno_set>
    427e:	8f ef       	ldi	r24, 0xFF	; 255
    4280:	41 c0       	rjmp	.+130    	; 0x4304 <nrk_sem_pend+0xac>
	
	nrk_int_disable();
    4282:	89 83       	std	Y+1, r24	; 0x01
    4284:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    4288:	89 81       	ldd	r24, Y+1	; 0x01
    428a:	e8 2e       	mov	r14, r24
    428c:	ff 24       	eor	r15, r15
    428e:	e7 fc       	sbrc	r14, 7
    4290:	f0 94       	com	r15
    4292:	87 01       	movw	r16, r14
    4294:	00 0f       	add	r16, r16
    4296:	11 1f       	adc	r17, r17
    4298:	f8 01       	movw	r30, r16
    429a:	ee 0d       	add	r30, r14
    429c:	ff 1d       	adc	r31, r15
    429e:	e6 53       	subi	r30, 0x36	; 54
    42a0:	f4 4f       	sbci	r31, 0xF4	; 244
    42a2:	92 81       	ldd	r25, Z+2	; 0x02
    42a4:	91 11       	cpse	r25, r1
    42a6:	16 c0       	rjmp	.+44     	; 0x42d4 <nrk_sem_pend+0x7c>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    42a8:	e0 91 e1 0b 	lds	r30, 0x0BE1
    42ac:	f0 91 e2 0b 	lds	r31, 0x0BE2
    42b0:	97 81       	ldd	r25, Z+7	; 0x07
    42b2:	92 60       	ori	r25, 0x02	; 2
    42b4:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    42b6:	99 27       	eor	r25, r25
    42b8:	87 fd       	sbrc	r24, 7
    42ba:	90 95       	com	r25
    42bc:	a9 2f       	mov	r26, r25
    42be:	b9 2f       	mov	r27, r25
    42c0:	81 8b       	std	Z+17, r24	; 0x11
    42c2:	92 8b       	std	Z+18, r25	; 0x12
    42c4:	a3 8b       	std	Z+19, r26	; 0x13
    42c6:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    42c8:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	0e 94 53 24 	call	0x48a6	; 0x48a6 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    42d4:	0e 0d       	add	r16, r14
    42d6:	1f 1d       	adc	r17, r15
    42d8:	d8 01       	movw	r26, r16
    42da:	a6 53       	subi	r26, 0x36	; 54
    42dc:	b4 4f       	sbci	r27, 0xF4	; 244
    42de:	12 96       	adiw	r26, 0x02	; 2
    42e0:	8c 91       	ld	r24, X
    42e2:	12 97       	sbiw	r26, 0x02	; 2
    42e4:	81 50       	subi	r24, 0x01	; 1
    42e6:	12 96       	adiw	r26, 0x02	; 2
    42e8:	8c 93       	st	X, r24
    42ea:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    42ec:	e0 91 e1 0b 	lds	r30, 0x0BE1
    42f0:	f0 91 e2 0b 	lds	r31, 0x0BE2
    42f4:	11 96       	adiw	r26, 0x01	; 1
    42f6:	8c 91       	ld	r24, X
    42f8:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    42fe:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>

	return NRK_OK;
    4302:	81 e0       	ldi	r24, 0x01	; 1
}
    4304:	0f 90       	pop	r0
    4306:	df 91       	pop	r29
    4308:	cf 91       	pop	r28
    430a:	1f 91       	pop	r17
    430c:	0f 91       	pop	r16
    430e:	ff 90       	pop	r15
    4310:	ef 90       	pop	r14
    4312:	08 95       	ret

00004314 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    4314:	0f 93       	push	r16
    4316:	1f 93       	push	r17
    4318:	cf 93       	push	r28
    431a:	df 93       	push	r29
    431c:	1f 92       	push	r1
    431e:	cd b7       	in	r28, 0x3d	; 61
    4320:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    4322:	0e 94 06 21 	call	0x420c	; 0x420c <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4326:	8f 3f       	cpi	r24, 0xFF	; 255
    4328:	11 f4       	brne	.+4      	; 0x432e <nrk_sem_post+0x1a>
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	02 c0       	rjmp	.+4      	; 0x4332 <nrk_sem_post+0x1e>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    432e:	82 30       	cpi	r24, 0x02	; 2
    4330:	21 f4       	brne	.+8      	; 0x433a <nrk_sem_post+0x26>
    4332:	0e 94 c6 1b 	call	0x378c	; 0x378c <_nrk_errno_set>
    4336:	8f ef       	ldi	r24, 0xFF	; 255
    4338:	44 c0       	rjmp	.+136    	; 0x43c2 <nrk_sem_post+0xae>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    433a:	48 2f       	mov	r20, r24
    433c:	55 27       	eor	r21, r21
    433e:	47 fd       	sbrc	r20, 7
    4340:	50 95       	com	r21
    4342:	9a 01       	movw	r18, r20
    4344:	22 0f       	add	r18, r18
    4346:	33 1f       	adc	r19, r19
    4348:	24 0f       	add	r18, r20
    434a:	35 1f       	adc	r19, r21
    434c:	89 01       	movw	r16, r18
    434e:	06 53       	subi	r16, 0x36	; 54
    4350:	14 4f       	sbci	r17, 0xF4	; 244
    4352:	f8 01       	movw	r30, r16
    4354:	22 81       	ldd	r18, Z+2	; 0x02
    4356:	90 81       	ld	r25, Z
    4358:	29 17       	cp	r18, r25
    435a:	94 f5       	brge	.+100    	; 0x43c0 <nrk_sem_post+0xac>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    435c:	89 83       	std	Y+1, r24	; 0x01
    435e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>

		nrk_sem_list[id].value++;
    4362:	f8 01       	movw	r30, r16
    4364:	92 81       	ldd	r25, Z+2	; 0x02
    4366:	9f 5f       	subi	r25, 0xFF	; 255
    4368:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    436a:	e0 91 e1 0b 	lds	r30, 0x0BE1
    436e:	f0 91 e2 0b 	lds	r31, 0x0BE2
    4372:	14 82       	std	Z+4, r1	; 0x04
    4374:	e8 ef       	ldi	r30, 0xF8	; 248
    4376:	fa e0       	ldi	r31, 0x0A	; 10

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	99 27       	eor	r25, r25
    437c:	87 fd       	sbrc	r24, 7
    437e:	90 95       	com	r25
    4380:	a9 2f       	mov	r26, r25
    4382:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4384:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    4386:	30 81       	ld	r19, Z
    4388:	32 30       	cpi	r19, 0x02	; 2
    438a:	99 f4       	brne	.+38     	; 0x43b2 <nrk_sem_post+0x9e>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    438c:	42 85       	ldd	r20, Z+10	; 0x0a
    438e:	53 85       	ldd	r21, Z+11	; 0x0b
    4390:	64 85       	ldd	r22, Z+12	; 0x0c
    4392:	75 85       	ldd	r23, Z+13	; 0x0d
    4394:	48 17       	cp	r20, r24
    4396:	59 07       	cpc	r21, r25
    4398:	6a 07       	cpc	r22, r26
    439a:	7b 07       	cpc	r23, r27
    439c:	51 f4       	brne	.+20     	; 0x43b2 <nrk_sem_post+0x9e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    439e:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    43a0:	16 86       	std	Z+14, r1	; 0x0e
    43a2:	17 86       	std	Z+15, r1	; 0x0f
    43a4:	10 8a       	std	Z+16, r1	; 0x10
    43a6:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    43a8:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    43aa:	12 86       	std	Z+10, r1	; 0x0a
    43ac:	13 86       	std	Z+11, r1	; 0x0b
    43ae:	14 86       	std	Z+12, r1	; 0x0c
    43b0:	15 86       	std	Z+13, r1	; 0x0d
    43b2:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    43b4:	3b e0       	ldi	r19, 0x0B	; 11
    43b6:	ef 3c       	cpi	r30, 0xCF	; 207
    43b8:	f3 07       	cpc	r31, r19
    43ba:	29 f7       	brne	.-54     	; 0x4386 <nrk_sem_post+0x72>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    43bc:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>
	}
		
return NRK_OK;
    43c0:	81 e0       	ldi	r24, 0x01	; 1
}
    43c2:	0f 90       	pop	r0
    43c4:	df 91       	pop	r29
    43c6:	cf 91       	pop	r28
    43c8:	1f 91       	pop	r17
    43ca:	0f 91       	pop	r16
    43cc:	08 95       	ret

000043ce <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    43ce:	0e 94 06 21 	call	0x420c	; 0x420c <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    43d2:	8f 3f       	cpi	r24, 0xFF	; 255
    43d4:	11 f4       	brne	.+4      	; 0x43da <nrk_sem_delete+0xc>
    43d6:	81 e0       	ldi	r24, 0x01	; 1
    43d8:	02 c0       	rjmp	.+4      	; 0x43de <nrk_sem_delete+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    43da:	82 30       	cpi	r24, 0x02	; 2
    43dc:	21 f4       	brne	.+8      	; 0x43e6 <nrk_sem_delete+0x18>
    43de:	0e 94 c6 1b 	call	0x378c	; 0x378c <_nrk_errno_set>
    43e2:	8f ef       	ldi	r24, 0xFF	; 255
    43e4:	08 95       	ret

	nrk_sem_list[id].count=-1;
    43e6:	99 27       	eor	r25, r25
    43e8:	87 fd       	sbrc	r24, 7
    43ea:	90 95       	com	r25
    43ec:	fc 01       	movw	r30, r24
    43ee:	ee 0f       	add	r30, r30
    43f0:	ff 1f       	adc	r31, r31
    43f2:	8e 0f       	add	r24, r30
    43f4:	9f 1f       	adc	r25, r31
    43f6:	fc 01       	movw	r30, r24
    43f8:	e6 53       	subi	r30, 0x36	; 54
    43fa:	f4 4f       	sbci	r31, 0xF4	; 244
    43fc:	8f ef       	ldi	r24, 0xFF	; 255
    43fe:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    4400:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    4402:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    4404:	80 91 e0 0b 	lds	r24, 0x0BE0
    4408:	81 50       	subi	r24, 0x01	; 1
    440a:	80 93 e0 0b 	sts	0x0BE0, r24
return NRK_OK;
    440e:	81 e0       	ldi	r24, 0x01	; 1
}
    4410:	08 95       	ret

00004412 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    4412:	e0 91 d6 0b 	lds	r30, 0x0BD6
    4416:	f0 91 d7 0b 	lds	r31, 0x0BD7
}
    441a:	80 81       	ld	r24, Z
    441c:	08 95       	ret

0000441e <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    441e:	e0 91 d6 0b 	lds	r30, 0x0BD6
    4422:	f0 91 d7 0b 	lds	r31, 0x0BD7
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    4426:	30 97       	sbiw	r30, 0x00	; 0
    4428:	21 f0       	breq	.+8      	; 0x4432 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    442a:	03 80       	ldd	r0, Z+3	; 0x03
    442c:	f4 81       	ldd	r31, Z+4	; 0x04
    442e:	e0 2d       	mov	r30, r0
    4430:	fa cf       	rjmp	.-12     	; 0x4426 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    4432:	08 95       	ret

00004434 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    4434:	af 92       	push	r10
    4436:	bf 92       	push	r11
    4438:	cf 92       	push	r12
    443a:	df 92       	push	r13
    443c:	ef 92       	push	r14
    443e:	ff 92       	push	r15
    4440:	0f 93       	push	r16
    4442:	1f 93       	push	r17
    4444:	cf 93       	push	r28
    4446:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    4448:	e0 91 ef 0a 	lds	r30, 0x0AEF
    444c:	f0 91 f0 0a 	lds	r31, 0x0AF0
    4450:	30 97       	sbiw	r30, 0x00	; 0
    4452:	09 f4       	brne	.+2      	; 0x4456 <nrk_add_to_readyQ+0x22>
    4454:	94 c0       	rjmp	.+296    	; 0x457e <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    4456:	00 91 d6 0b 	lds	r16, 0x0BD6
    445a:	10 91 d7 0b 	lds	r17, 0x0BD7
    CurNode = _free_node;

    if (_head_node != NULL)
    445e:	01 15       	cp	r16, r1
    4460:	11 05       	cpc	r17, r1
    4462:	09 f4       	brne	.+2      	; 0x4466 <nrk_add_to_readyQ+0x32>
    4464:	4c c0       	rjmp	.+152    	; 0x44fe <nrk_add_to_readyQ+0xca>
    4466:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    4468:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    446a:	58 2f       	mov	r21, r24
    446c:	54 03       	mulsu	r21, r20
    446e:	90 01       	movw	r18, r0
    4470:	11 24       	eor	r1, r1
    4472:	2f 50       	subi	r18, 0x0F	; 15
    4474:	35 4f       	sbci	r19, 0xF5	; 245
    4476:	79 01       	movw	r14, r18
    4478:	9a e0       	ldi	r25, 0x0A	; 10
    447a:	e9 0e       	add	r14, r25
    447c:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    447e:	69 01       	movw	r12, r18
    4480:	c4 e0       	ldi	r28, 0x04	; 4
    4482:	cc 0e       	add	r12, r28
    4484:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    4486:	59 01       	movw	r10, r18
    4488:	db e0       	ldi	r29, 0x0B	; 11
    448a:	ad 0e       	add	r10, r29
    448c:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    448e:	2c 91       	ld	r18, X
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	42 9f       	mul	r20, r18
    4494:	b0 01       	movw	r22, r0
    4496:	43 9f       	mul	r20, r19
    4498:	70 0d       	add	r23, r0
    449a:	11 24       	eor	r1, r1
    449c:	6f 50       	subi	r22, 0x0F	; 15
    449e:	75 4f       	sbci	r23, 0xF5	; 245
    44a0:	eb 01       	movw	r28, r22
    44a2:	9c 81       	ldd	r25, Y+4	; 0x04
    44a4:	99 23       	and	r25, r25
    44a6:	29 f0       	breq	.+10     	; 0x44b2 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    44a8:	5b 85       	ldd	r21, Y+11	; 0x0b
    44aa:	e7 01       	movw	r28, r14
    44ac:	98 81       	ld	r25, Y
    44ae:	59 17       	cp	r21, r25
    44b0:	40 f1       	brcs	.+80     	; 0x4502 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    44b2:	e6 01       	movw	r28, r12
    44b4:	98 81       	ld	r25, Y
    44b6:	99 23       	and	r25, r25
    44b8:	69 f0       	breq	.+26     	; 0x44d4 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    44ba:	42 9f       	mul	r20, r18
    44bc:	b0 01       	movw	r22, r0
    44be:	43 9f       	mul	r20, r19
    44c0:	70 0d       	add	r23, r0
    44c2:	11 24       	eor	r1, r1
    44c4:	6f 50       	subi	r22, 0x0F	; 15
    44c6:	75 4f       	sbci	r23, 0xF5	; 245
    44c8:	eb 01       	movw	r28, r22
    44ca:	5a 85       	ldd	r21, Y+10	; 0x0a
    44cc:	e5 01       	movw	r28, r10
    44ce:	98 81       	ld	r25, Y
    44d0:	59 17       	cp	r21, r25
    44d2:	b8 f0       	brcs	.+46     	; 0x4502 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    44d4:	42 9f       	mul	r20, r18
    44d6:	b0 01       	movw	r22, r0
    44d8:	43 9f       	mul	r20, r19
    44da:	70 0d       	add	r23, r0
    44dc:	11 24       	eor	r1, r1
    44de:	9b 01       	movw	r18, r22
    44e0:	2f 50       	subi	r18, 0x0F	; 15
    44e2:	35 4f       	sbci	r19, 0xF5	; 245
    44e4:	e9 01       	movw	r28, r18
    44e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    44e8:	e7 01       	movw	r28, r14
    44ea:	98 81       	ld	r25, Y
    44ec:	29 17       	cp	r18, r25
    44ee:	48 f0       	brcs	.+18     	; 0x4502 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    44f0:	13 96       	adiw	r26, 0x03	; 3
    44f2:	0d 90       	ld	r0, X+
    44f4:	bc 91       	ld	r27, X
    44f6:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    44f8:	10 97       	sbiw	r26, 0x00	; 0
    44fa:	49 f6       	brne	.-110    	; 0x448e <nrk_add_to_readyQ+0x5a>
    44fc:	02 c0       	rjmp	.+4      	; 0x4502 <nrk_add_to_readyQ+0xce>
    44fe:	a0 e0       	ldi	r26, 0x00	; 0
    4500:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    4502:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    4504:	c3 81       	ldd	r28, Z+3	; 0x03
    4506:	d4 81       	ldd	r29, Z+4	; 0x04
    4508:	d0 93 f0 0a 	sts	0x0AF0, r29
    450c:	c0 93 ef 0a 	sts	0x0AEF, r28

    if (NextNode == _head_node)
    4510:	a0 17       	cp	r26, r16
    4512:	b1 07       	cpc	r27, r17
    4514:	b1 f4       	brne	.+44     	; 0x4542 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    4516:	10 97       	sbiw	r26, 0x00	; 0
    4518:	49 f0       	breq	.+18     	; 0x452c <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    451a:	b4 83       	std	Z+4, r27	; 0x04
    451c:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    451e:	12 82       	std	Z+2, r1	; 0x02
    4520:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    4522:	12 96       	adiw	r26, 0x02	; 2
    4524:	fc 93       	st	X, r31
    4526:	ee 93       	st	-X, r30
    4528:	11 97       	sbiw	r26, 0x01	; 1
    452a:	06 c0       	rjmp	.+12     	; 0x4538 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    452c:	14 82       	std	Z+4, r1	; 0x04
    452e:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    4530:	12 82       	std	Z+2, r1	; 0x02
    4532:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    4534:	fa 83       	std	Y+2, r31	; 0x02
    4536:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    4538:	f0 93 d7 0b 	sts	0x0BD7, r31
    453c:	e0 93 d6 0b 	sts	0x0BD6, r30
    4540:	1e c0       	rjmp	.+60     	; 0x457e <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    4542:	ac 17       	cp	r26, r28
    4544:	bd 07       	cpc	r27, r29
    4546:	79 f0       	breq	.+30     	; 0x4566 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    4548:	11 96       	adiw	r26, 0x01	; 1
    454a:	8d 91       	ld	r24, X+
    454c:	9c 91       	ld	r25, X
    454e:	12 97       	sbiw	r26, 0x02	; 2
    4550:	92 83       	std	Z+2, r25	; 0x02
    4552:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    4554:	b4 83       	std	Z+4, r27	; 0x04
    4556:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    4558:	11 96       	adiw	r26, 0x01	; 1
    455a:	cd 91       	ld	r28, X+
    455c:	dc 91       	ld	r29, X
    455e:	12 97       	sbiw	r26, 0x02	; 2
    4560:	fc 83       	std	Y+4, r31	; 0x04
    4562:	eb 83       	std	Y+3, r30	; 0x03
    4564:	08 c0       	rjmp	.+16     	; 0x4576 <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    4566:	14 82       	std	Z+4, r1	; 0x04
    4568:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    456a:	11 96       	adiw	r26, 0x01	; 1
    456c:	8d 91       	ld	r24, X+
    456e:	9c 91       	ld	r25, X
    4570:	12 97       	sbiw	r26, 0x02	; 2
    4572:	92 83       	std	Z+2, r25	; 0x02
    4574:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    4576:	12 96       	adiw	r26, 0x02	; 2
    4578:	fc 93       	st	X, r31
    457a:	ee 93       	st	-X, r30
    457c:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    457e:	df 91       	pop	r29
    4580:	cf 91       	pop	r28
    4582:	1f 91       	pop	r17
    4584:	0f 91       	pop	r16
    4586:	ff 90       	pop	r15
    4588:	ef 90       	pop	r14
    458a:	df 90       	pop	r13
    458c:	cf 90       	pop	r12
    458e:	bf 90       	pop	r11
    4590:	af 90       	pop	r10
    4592:	08 95       	ret

00004594 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    4594:	cf 93       	push	r28
    4596:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    4598:	e0 91 d6 0b 	lds	r30, 0x0BD6
    459c:	f0 91 d7 0b 	lds	r31, 0x0BD7
    45a0:	30 97       	sbiw	r30, 0x00	; 0
    45a2:	09 f4       	brne	.+2      	; 0x45a6 <nrk_rem_from_readyQ+0x12>
    45a4:	44 c0       	rjmp	.+136    	; 0x462e <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    45a6:	99 27       	eor	r25, r25
    45a8:	87 fd       	sbrc	r24, 7
    45aa:	90 95       	com	r25
    45ac:	20 81       	ld	r18, Z
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	28 17       	cp	r18, r24
    45b2:	39 07       	cpc	r19, r25
    45b4:	81 f4       	brne	.+32     	; 0x45d6 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    45b6:	a3 81       	ldd	r26, Z+3	; 0x03
    45b8:	b4 81       	ldd	r27, Z+4	; 0x04
    45ba:	b0 93 d7 0b 	sts	0x0BD7, r27
    45be:	a0 93 d6 0b 	sts	0x0BD6, r26
        _head_node->Prev = NULL;
    45c2:	12 96       	adiw	r26, 0x02	; 2
    45c4:	1c 92       	st	X, r1
    45c6:	1e 92       	st	-X, r1
    45c8:	11 97       	sbiw	r26, 0x01	; 1
    45ca:	18 c0       	rjmp	.+48     	; 0x45fc <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    45cc:	03 80       	ldd	r0, Z+3	; 0x03
    45ce:	f4 81       	ldd	r31, Z+4	; 0x04
    45d0:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    45d2:	30 97       	sbiw	r30, 0x00	; 0
    45d4:	61 f1       	breq	.+88     	; 0x462e <nrk_rem_from_readyQ+0x9a>
    45d6:	20 81       	ld	r18, Z
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	28 17       	cp	r18, r24
    45dc:	39 07       	cpc	r19, r25
    45de:	b1 f7       	brne	.-20     	; 0x45cc <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    45e0:	c1 81       	ldd	r28, Z+1	; 0x01
    45e2:	d2 81       	ldd	r29, Z+2	; 0x02
    45e4:	83 81       	ldd	r24, Z+3	; 0x03
    45e6:	94 81       	ldd	r25, Z+4	; 0x04
    45e8:	9c 83       	std	Y+4, r25	; 0x04
    45ea:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    45ec:	a3 81       	ldd	r26, Z+3	; 0x03
    45ee:	b4 81       	ldd	r27, Z+4	; 0x04
    45f0:	10 97       	sbiw	r26, 0x00	; 0
    45f2:	21 f0       	breq	.+8      	; 0x45fc <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    45f4:	12 96       	adiw	r26, 0x02	; 2
    45f6:	dc 93       	st	X, r29
    45f8:	ce 93       	st	-X, r28
    45fa:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    45fc:	a0 91 ef 0a 	lds	r26, 0x0AEF
    4600:	b0 91 f0 0a 	lds	r27, 0x0AF0
    4604:	10 97       	sbiw	r26, 0x00	; 0
    4606:	39 f4       	brne	.+14     	; 0x4616 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    4608:	f0 93 f0 0a 	sts	0x0AF0, r31
    460c:	e0 93 ef 0a 	sts	0x0AEF, r30
        _free_node->Next = NULL;
    4610:	14 82       	std	Z+4, r1	; 0x04
    4612:	13 82       	std	Z+3, r1	; 0x03
    4614:	0a c0       	rjmp	.+20     	; 0x462a <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    4616:	b4 83       	std	Z+4, r27	; 0x04
    4618:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    461a:	12 96       	adiw	r26, 0x02	; 2
    461c:	fc 93       	st	X, r31
    461e:	ee 93       	st	-X, r30
    4620:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    4622:	f0 93 f0 0a 	sts	0x0AF0, r31
    4626:	e0 93 ef 0a 	sts	0x0AEF, r30
    }
    _free_node->Prev = NULL;
    462a:	12 82       	std	Z+2, r1	; 0x02
    462c:	11 82       	std	Z+1, r1	; 0x01
}
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	08 95       	ret

00004634 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    4634:	ef 92       	push	r14
    4636:	ff 92       	push	r15
    4638:	0f 93       	push	r16
    463a:	1f 93       	push	r17
    463c:	cf 93       	push	r28
    463e:	df 93       	push	r29
    4640:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    4642:	4b 81       	ldd	r20, Y+3	; 0x03
    4644:	5c 81       	ldd	r21, Y+4	; 0x04
    4646:	69 81       	ldd	r22, Y+1	; 0x01
    4648:	7a 81       	ldd	r23, Y+2	; 0x02
    464a:	8d 81       	ldd	r24, Y+5	; 0x05
    464c:	9e 81       	ldd	r25, Y+6	; 0x06
    464e:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    4652:	2f 81       	ldd	r18, Y+7	; 0x07
    4654:	22 23       	and	r18, r18
    4656:	71 f0       	breq	.+28     	; 0x4674 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    4658:	4b 81       	ldd	r20, Y+3	; 0x03
    465a:	5c 81       	ldd	r21, Y+4	; 0x04
    465c:	e1 2c       	mov	r14, r1
    465e:	f1 2c       	mov	r15, r1
    4660:	00 e0       	ldi	r16, 0x00	; 0
    4662:	10 e0       	ldi	r17, 0x00	; 0
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	bc 01       	movw	r22, r24
    466a:	ce 01       	movw	r24, r28
    466c:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    4670:	1f 82       	std	Y+7, r1	; 0x07
    4672:	0c c0       	rjmp	.+24     	; 0x468c <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    4674:	e8 81       	ld	r30, Y
    4676:	2b e2       	ldi	r18, 0x2B	; 43
    4678:	e2 02       	muls	r30, r18
    467a:	f0 01       	movw	r30, r0
    467c:	11 24       	eor	r1, r1
    467e:	ef 50       	subi	r30, 0x0F	; 15
    4680:	f5 4f       	sbci	r31, 0xF5	; 245
    4682:	21 85       	ldd	r18, Z+9	; 0x09
    4684:	23 30       	cpi	r18, 0x03	; 3
    4686:	b9 f4       	brne	.+46     	; 0x46b6 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    4688:	91 83       	std	Z+1, r25	; 0x01
    468a:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    468c:	e8 81       	ld	r30, Y
    468e:	8b e2       	ldi	r24, 0x2B	; 43
    4690:	e8 02       	muls	r30, r24
    4692:	f0 01       	movw	r30, r0
    4694:	11 24       	eor	r1, r1
    4696:	ef 50       	subi	r30, 0x0F	; 15
    4698:	f5 4f       	sbci	r31, 0xF5	; 245
    469a:	85 89       	ldd	r24, Z+21	; 0x15
    469c:	96 89       	ldd	r25, Z+22	; 0x16
    469e:	a7 89       	ldd	r26, Z+23	; 0x17
    46a0:	b0 8d       	ldd	r27, Z+24	; 0x18
    46a2:	89 2b       	or	r24, r25
    46a4:	8a 2b       	or	r24, r26
    46a6:	8b 2b       	or	r24, r27
    46a8:	41 f4       	brne	.+16     	; 0x46ba <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    46aa:	82 e0       	ldi	r24, 0x02	; 2
    46ac:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    46ae:	88 81       	ld	r24, Y
    46b0:	0e 94 1a 22 	call	0x4434	; 0x4434 <nrk_add_to_readyQ>
    46b4:	02 c0       	rjmp	.+4      	; 0x46ba <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    46b6:	8f ef       	ldi	r24, 0xFF	; 255
    46b8:	01 c0       	rjmp	.+2      	; 0x46bc <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    46ba:	81 e0       	ldi	r24, 0x01	; 1
}
    46bc:	df 91       	pop	r29
    46be:	cf 91       	pop	r28
    46c0:	1f 91       	pop	r17
    46c2:	0f 91       	pop	r16
    46c4:	ff 90       	pop	r15
    46c6:	ef 90       	pop	r14
    46c8:	08 95       	ret

000046ca <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    46ca:	1f 93       	push	r17
    46cc:	cf 93       	push	r28
    46ce:	df 93       	push	r29
    46d0:	cd b7       	in	r28, 0x3d	; 61
    46d2:	de b7       	in	r29, 0x3e	; 62
    46d4:	28 97       	sbiw	r28, 0x08	; 8
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	f8 94       	cli
    46da:	de bf       	out	0x3e, r29	; 62
    46dc:	0f be       	out	0x3f, r0	; 63
    46de:	cd bf       	out	0x3d, r28	; 61
    46e0:	29 83       	std	Y+1, r18	; 0x01
    46e2:	3a 83       	std	Y+2, r19	; 0x02
    46e4:	4b 83       	std	Y+3, r20	; 0x03
    46e6:	5c 83       	std	Y+4, r21	; 0x04
    46e8:	6d 83       	std	Y+5, r22	; 0x05
    46ea:	7e 83       	std	Y+6, r23	; 0x06
    46ec:	8f 83       	std	Y+7, r24	; 0x07
    46ee:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    46f0:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    46f4:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_nrk_os_timer_get>
    46f8:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    46fa:	ce 01       	movw	r24, r28
    46fc:	01 96       	adiw	r24, 0x01	; 1
    46fe:	0e 94 77 27 	call	0x4eee	; 0x4eee <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    4702:	63 30       	cpi	r22, 0x03	; 3
    4704:	71 05       	cpc	r23, r1
    4706:	98 f0       	brcs	.+38     	; 0x472e <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    4708:	e0 91 e1 0b 	lds	r30, 0x0BE1
    470c:	f0 91 e2 0b 	lds	r31, 0x0BE2
    4710:	21 2f       	mov	r18, r17
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	62 0f       	add	r22, r18
    4716:	73 1f       	adc	r23, r19
    4718:	cb 01       	movw	r24, r22
    471a:	a0 e0       	ldi	r26, 0x00	; 0
    471c:	b0 e0       	ldi	r27, 0x00	; 0
    471e:	85 8b       	std	Z+21, r24	; 0x15
    4720:	96 8b       	std	Z+22, r25	; 0x16
    4722:	a7 8b       	std	Z+23, r26	; 0x17
    4724:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    4726:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>

    return NRK_OK;
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	01 c0       	rjmp	.+2      	; 0x4730 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    472e:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    4730:	28 96       	adiw	r28, 0x08	; 8
    4732:	0f b6       	in	r0, 0x3f	; 63
    4734:	f8 94       	cli
    4736:	de bf       	out	0x3e, r29	; 62
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	df 91       	pop	r29
    473e:	cf 91       	pop	r28
    4740:	1f 91       	pop	r17
    4742:	08 95       	ret

00004744 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    4744:	0e 94 4e 30 	call	0x609c	; 0x609c <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    4748:	e0 91 e1 0b 	lds	r30, 0x0BE1
    474c:	f0 91 e2 0b 	lds	r31, 0x0BE2
    4750:	85 81       	ldd	r24, Z+5	; 0x05
    4752:	81 11       	cpse	r24, r1
    4754:	f7 cf       	rjmp	.-18     	; 0x4744 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    4756:	08 95       	ret

00004758 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    4758:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    475a:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    475e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    4762:	e0 91 e1 0b 	lds	r30, 0x0BE1
    4766:	f0 91 e2 0b 	lds	r31, 0x0BE2
    476a:	81 e0       	ldi	r24, 0x01	; 1
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	92 a7       	std	Z+42, r25	; 0x2a
    4770:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    4772:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    4774:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_nrk_os_timer_get>
    4778:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    477a:	88 3f       	cpi	r24, 0xF8	; 248
    477c:	80 f4       	brcc	.+32     	; 0x479e <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    477e:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <_nrk_get_next_wakeup>
    4782:	2c 2f       	mov	r18, r28
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	2f 5f       	subi	r18, 0xFF	; 255
    4788:	3f 4f       	sbci	r19, 0xFF	; 255
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	28 17       	cp	r18, r24
    478e:	39 07       	cpc	r19, r25
    4790:	34 f4       	brge	.+12     	; 0x479e <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    4792:	82 e0       	ldi	r24, 0x02	; 2
    4794:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    4796:	80 93 81 09 	sts	0x0981, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    479a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    479e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    47a2:	0e 94 a2 23 	call	0x4744	; 0x4744 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    47a6:	81 e0       	ldi	r24, 0x01	; 1
    47a8:	cf 91       	pop	r28
    47aa:	08 95       	ret

000047ac <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    47ac:	e0 91 e1 0b 	lds	r30, 0x0BE1
    47b0:	f0 91 e2 0b 	lds	r31, 0x0BE2
    47b4:	80 85       	ldd	r24, Z+8	; 0x08
    47b6:	0e 94 ca 22 	call	0x4594	; 0x4594 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    47ba:	e0 91 e1 0b 	lds	r30, 0x0BE1
    47be:	f0 91 e2 0b 	lds	r31, 0x0BE2
    47c2:	84 e0       	ldi	r24, 0x04	; 4
    47c4:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    47c6:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_wait_until_next_period>
    return NRK_OK;
}
    47ca:	81 e0       	ldi	r24, 0x01	; 1
    47cc:	08 95       	ret

000047ce <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    47ce:	cf 93       	push	r28
    47d0:	df 93       	push	r29
    47d2:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    47d4:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <nrk_stack_check>

    if (p == 0)
    47d8:	20 97       	sbiw	r28, 0x00	; 0
    47da:	11 f4       	brne	.+4      	; 0x47e0 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    47dc:	c1 e0       	ldi	r28, 0x01	; 1
    47de:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    47e0:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    47e4:	e0 91 e1 0b 	lds	r30, 0x0BE1
    47e8:	f0 91 e2 0b 	lds	r31, 0x0BE2
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    47f0:	d2 a7       	std	Z+42, r29	; 0x2a
    47f2:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    47f4:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_nrk_os_timer_get>
    47f8:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    47fa:	88 3f       	cpi	r24, 0xF8	; 248
    47fc:	80 f4       	brcc	.+32     	; 0x481e <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    47fe:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <_nrk_get_next_wakeup>
    4802:	2c 2f       	mov	r18, r28
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	2f 5f       	subi	r18, 0xFF	; 255
    4808:	3f 4f       	sbci	r19, 0xFF	; 255
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	28 17       	cp	r18, r24
    480e:	39 07       	cpc	r19, r25
    4810:	34 f4       	brge	.+12     	; 0x481e <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    4812:	82 e0       	ldi	r24, 0x02	; 2
    4814:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4816:	80 93 81 09 	sts	0x0981, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    481a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    481e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    4822:	0e 94 a2 23 	call	0x4744	; 0x4744 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	df 91       	pop	r29
    482a:	cf 91       	pop	r28
    482c:	08 95       	ret

0000482e <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    482e:	ef 92       	push	r14
    4830:	ff 92       	push	r15
    4832:	0f 93       	push	r16
    4834:	1f 93       	push	r17
    4836:	cf 93       	push	r28
    4838:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    483a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    483e:	e0 91 e1 0b 	lds	r30, 0x0BE1
    4842:	f0 91 e2 0b 	lds	r31, 0x0BE2
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    484a:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_nrk_os_timer_get>
    484e:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    4850:	e0 91 e1 0b 	lds	r30, 0x0BE1
    4854:	f0 91 e2 0b 	lds	r31, 0x0BE2
    4858:	e8 2e       	mov	r14, r24
    485a:	f1 2c       	mov	r15, r1
    485c:	c7 01       	movw	r24, r14
    485e:	80 0f       	add	r24, r16
    4860:	91 1f       	adc	r25, r17
    4862:	a0 e0       	ldi	r26, 0x00	; 0
    4864:	b0 e0       	ldi	r27, 0x00	; 0
    4866:	85 8b       	std	Z+21, r24	; 0x15
    4868:	96 8b       	std	Z+22, r25	; 0x16
    486a:	a7 8b       	std	Z+23, r26	; 0x17
    486c:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    486e:	c8 3f       	cpi	r28, 0xF8	; 248
    4870:	78 f4       	brcc	.+30     	; 0x4890 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4872:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <_nrk_get_next_wakeup>
    4876:	9f ef       	ldi	r25, 0xFF	; 255
    4878:	e9 1a       	sub	r14, r25
    487a:	f9 0a       	sbc	r15, r25
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	e8 16       	cp	r14, r24
    4880:	f9 06       	cpc	r15, r25
    4882:	34 f4       	brge	.+12     	; 0x4890 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    4884:	82 e0       	ldi	r24, 0x02	; 2
    4886:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4888:	80 93 81 09 	sts	0x0981, r24
            _nrk_set_next_wakeup (timer);
    488c:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4890:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4894:	0e 94 a2 23 	call	0x4744	; 0x4744 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4898:	81 e0       	ldi	r24, 0x01	; 1
    489a:	cf 91       	pop	r28
    489c:	1f 91       	pop	r17
    489e:	0f 91       	pop	r16
    48a0:	ff 90       	pop	r15
    48a2:	ef 90       	pop	r14
    48a4:	08 95       	ret

000048a6 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    48ac:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    48b0:	e0 91 e1 0b 	lds	r30, 0x0BE1
    48b4:	f0 91 e2 0b 	lds	r31, 0x0BE2
    48b8:	21 e0       	ldi	r18, 0x01	; 1
    48ba:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    48bc:	ce 01       	movw	r24, r28
    48be:	a0 e0       	ldi	r26, 0x00	; 0
    48c0:	b0 e0       	ldi	r27, 0x00	; 0
    48c2:	85 8b       	std	Z+21, r24	; 0x15
    48c4:	96 8b       	std	Z+22, r25	; 0x16
    48c6:	a7 8b       	std	Z+23, r26	; 0x17
    48c8:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    48ca:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_nrk_os_timer_get>
    48ce:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    48d0:	88 3f       	cpi	r24, 0xF8	; 248
    48d2:	80 f4       	brcc	.+32     	; 0x48f4 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    48d4:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <_nrk_get_next_wakeup>
    48d8:	2c 2f       	mov	r18, r28
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	2f 5f       	subi	r18, 0xFF	; 255
    48de:	3f 4f       	sbci	r19, 0xFF	; 255
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	28 17       	cp	r18, r24
    48e4:	39 07       	cpc	r19, r25
    48e6:	34 f4       	brge	.+12     	; 0x48f4 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    48e8:	82 e0       	ldi	r24, 0x02	; 2
    48ea:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    48ec:	80 93 81 09 	sts	0x0981, r24
            _nrk_set_next_wakeup (timer);
    48f0:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    48f4:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    48f8:	0e 94 a2 23 	call	0x4744	; 0x4744 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	df 91       	pop	r29
    4900:	cf 91       	pop	r28
    4902:	08 95       	ret

00004904 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    4904:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    4906:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    490a:	e0 91 e1 0b 	lds	r30, 0x0BE1
    490e:	f0 91 e2 0b 	lds	r31, 0x0BE2
    4912:	81 e0       	ldi	r24, 0x01	; 1
    4914:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    4916:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    4918:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_nrk_os_timer_get>
    491c:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    491e:	88 3f       	cpi	r24, 0xF8	; 248
    4920:	80 f4       	brcc	.+32     	; 0x4942 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4922:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <_nrk_get_next_wakeup>
    4926:	2c 2f       	mov	r18, r28
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	2f 5f       	subi	r18, 0xFF	; 255
    492c:	3f 4f       	sbci	r19, 0xFF	; 255
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	28 17       	cp	r18, r24
    4932:	39 07       	cpc	r19, r25
    4934:	34 f4       	brge	.+12     	; 0x4942 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    4936:	82 e0       	ldi	r24, 0x02	; 2
    4938:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    493a:	80 93 81 09 	sts	0x0981, r24
            _nrk_set_next_wakeup (timer);
    493e:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4942:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4946:	0e 94 a2 23 	call	0x4744	; 0x4744 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	cf 91       	pop	r28
    494e:	08 95       	ret

00004950 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    4950:	1f 93       	push	r17
    4952:	cf 93       	push	r28
    4954:	df 93       	push	r29
    4956:	cd b7       	in	r28, 0x3d	; 61
    4958:	de b7       	in	r29, 0x3e	; 62
    495a:	28 97       	sbiw	r28, 0x08	; 8
    495c:	0f b6       	in	r0, 0x3f	; 63
    495e:	f8 94       	cli
    4960:	de bf       	out	0x3e, r29	; 62
    4962:	0f be       	out	0x3f, r0	; 63
    4964:	cd bf       	out	0x3d, r28	; 61
    4966:	29 83       	std	Y+1, r18	; 0x01
    4968:	3a 83       	std	Y+2, r19	; 0x02
    496a:	4b 83       	std	Y+3, r20	; 0x03
    496c:	5c 83       	std	Y+4, r21	; 0x04
    496e:	6d 83       	std	Y+5, r22	; 0x05
    4970:	7e 83       	std	Y+6, r23	; 0x06
    4972:	8f 83       	std	Y+7, r24	; 0x07
    4974:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    4976:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <nrk_stack_check>

    nrk_int_disable ();
    497a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    497e:	e0 91 e1 0b 	lds	r30, 0x0BE1
    4982:	f0 91 e2 0b 	lds	r31, 0x0BE2
    4986:	81 e0       	ldi	r24, 0x01	; 1
    4988:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	92 a7       	std	Z+42, r25	; 0x2a
    4990:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    4992:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_nrk_os_timer_get>
    4996:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    4998:	ce 01       	movw	r24, r28
    499a:	01 96       	adiw	r24, 0x01	; 1
    499c:	0e 94 77 27 	call	0x4eee	; 0x4eee <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    49a0:	e0 91 e1 0b 	lds	r30, 0x0BE1
    49a4:	f0 91 e2 0b 	lds	r31, 0x0BE2
    49a8:	dc 01       	movw	r26, r24
    49aa:	cb 01       	movw	r24, r22
    49ac:	81 0f       	add	r24, r17
    49ae:	91 1d       	adc	r25, r1
    49b0:	a1 1d       	adc	r26, r1
    49b2:	b1 1d       	adc	r27, r1
    49b4:	85 8b       	std	Z+21, r24	; 0x15
    49b6:	96 8b       	std	Z+22, r25	; 0x16
    49b8:	a7 8b       	std	Z+23, r26	; 0x17
    49ba:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    49bc:	18 3f       	cpi	r17, 0xF8	; 248
    49be:	80 f4       	brcc	.+32     	; 0x49e0 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    49c0:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <_nrk_get_next_wakeup>
    49c4:	21 2f       	mov	r18, r17
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	2f 5f       	subi	r18, 0xFF	; 255
    49ca:	3f 4f       	sbci	r19, 0xFF	; 255
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	28 17       	cp	r18, r24
    49d0:	39 07       	cpc	r19, r25
    49d2:	34 f4       	brge	.+12     	; 0x49e0 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    49d4:	82 e0       	ldi	r24, 0x02	; 2
    49d6:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    49d8:	80 93 81 09 	sts	0x0981, r24
            _nrk_set_next_wakeup (timer);
    49dc:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    49e0:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    49e4:	0e 94 a2 23 	call	0x4744	; 0x4744 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	28 96       	adiw	r28, 0x08	; 8
    49ec:	0f b6       	in	r0, 0x3f	; 63
    49ee:	f8 94       	cli
    49f0:	de bf       	out	0x3e, r29	; 62
    49f2:	0f be       	out	0x3f, r0	; 63
    49f4:	cd bf       	out	0x3d, r28	; 61
    49f6:	df 91       	pop	r29
    49f8:	cf 91       	pop	r28
    49fa:	1f 91       	pop	r17
    49fc:	08 95       	ret

000049fe <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    49fe:	8f 92       	push	r8
    4a00:	9f 92       	push	r9
    4a02:	af 92       	push	r10
    4a04:	bf 92       	push	r11
    4a06:	cf 92       	push	r12
    4a08:	df 92       	push	r13
    4a0a:	ef 92       	push	r14
    4a0c:	ff 92       	push	r15
    4a0e:	0f 93       	push	r16
    4a10:	1f 93       	push	r17
    4a12:	cf 93       	push	r28
    4a14:	df 93       	push	r29
    4a16:	cd b7       	in	r28, 0x3d	; 61
    4a18:	de b7       	in	r29, 0x3e	; 62
    4a1a:	60 97       	sbiw	r28, 0x10	; 16
    4a1c:	0f b6       	in	r0, 0x3f	; 63
    4a1e:	f8 94       	cli
    4a20:	de bf       	out	0x3e, r29	; 62
    4a22:	0f be       	out	0x3f, r0	; 63
    4a24:	cd bf       	out	0x3d, r28	; 61
    4a26:	29 87       	std	Y+9, r18	; 0x09
    4a28:	3a 87       	std	Y+10, r19	; 0x0a
    4a2a:	4b 87       	std	Y+11, r20	; 0x0b
    4a2c:	5c 87       	std	Y+12, r21	; 0x0c
    4a2e:	6d 87       	std	Y+13, r22	; 0x0d
    4a30:	7e 87       	std	Y+14, r23	; 0x0e
    4a32:	8f 87       	std	Y+15, r24	; 0x0f
    4a34:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    4a36:	ce 01       	movw	r24, r28
    4a38:	01 96       	adiw	r24, 0x01	; 1
    4a3a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    4a3e:	89 80       	ldd	r8, Y+1	; 0x01
    4a40:	9a 80       	ldd	r9, Y+2	; 0x02
    4a42:	ab 80       	ldd	r10, Y+3	; 0x03
    4a44:	bc 80       	ldd	r11, Y+4	; 0x04
    4a46:	cd 80       	ldd	r12, Y+5	; 0x05
    4a48:	de 80       	ldd	r13, Y+6	; 0x06
    4a4a:	ef 80       	ldd	r14, Y+7	; 0x07
    4a4c:	f8 84       	ldd	r15, Y+8	; 0x08
    4a4e:	09 85       	ldd	r16, Y+9	; 0x09
    4a50:	1a 85       	ldd	r17, Y+10	; 0x0a
    4a52:	2b 85       	ldd	r18, Y+11	; 0x0b
    4a54:	3c 85       	ldd	r19, Y+12	; 0x0c
    4a56:	4d 85       	ldd	r20, Y+13	; 0x0d
    4a58:	5e 85       	ldd	r21, Y+14	; 0x0e
    4a5a:	6f 85       	ldd	r22, Y+15	; 0x0f
    4a5c:	78 89       	ldd	r23, Y+16	; 0x10
    4a5e:	ce 01       	movw	r24, r28
    4a60:	09 96       	adiw	r24, 0x09	; 9
    4a62:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    4a66:	8f 3f       	cpi	r24, 0xFF	; 255
    4a68:	61 f0       	breq	.+24     	; 0x4a82 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    4a6a:	29 85       	ldd	r18, Y+9	; 0x09
    4a6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a6e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a70:	5c 85       	ldd	r21, Y+12	; 0x0c
    4a72:	6d 85       	ldd	r22, Y+13	; 0x0d
    4a74:	7e 85       	ldd	r23, Y+14	; 0x0e
    4a76:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a78:	98 89       	ldd	r25, Y+16	; 0x10
    4a7a:	0e 94 a8 24 	call	0x4950	; 0x4950 <nrk_wait>

    return NRK_OK;
    4a7e:	81 e0       	ldi	r24, 0x01	; 1
    4a80:	01 c0       	rjmp	.+2      	; 0x4a84 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    4a82:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    4a84:	60 96       	adiw	r28, 0x10	; 16
    4a86:	0f b6       	in	r0, 0x3f	; 63
    4a88:	f8 94       	cli
    4a8a:	de bf       	out	0x3e, r29	; 62
    4a8c:	0f be       	out	0x3f, r0	; 63
    4a8e:	cd bf       	out	0x3d, r28	; 61
    4a90:	df 91       	pop	r29
    4a92:	cf 91       	pop	r28
    4a94:	1f 91       	pop	r17
    4a96:	0f 91       	pop	r16
    4a98:	ff 90       	pop	r15
    4a9a:	ef 90       	pop	r14
    4a9c:	df 90       	pop	r13
    4a9e:	cf 90       	pop	r12
    4aa0:	bf 90       	pop	r11
    4aa2:	af 90       	pop	r10
    4aa4:	9f 90       	pop	r9
    4aa6:	8f 90       	pop	r8
    4aa8:	08 95       	ret

00004aaa <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    4aaa:	e0 91 e1 0b 	lds	r30, 0x0BE1
    4aae:	f0 91 e2 0b 	lds	r31, 0x0BE2
}
    4ab2:	80 85       	ldd	r24, Z+8	; 0x08
    4ab4:	08 95       	ret

00004ab6 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    4ab6:	0f 93       	push	r16
    4ab8:	1f 93       	push	r17
    4aba:	cf 93       	push	r28
    4abc:	df 93       	push	r29
    4abe:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    4ac0:	1c 82       	std	Y+4, r1	; 0x04
    4ac2:	1d 82       	std	Y+5, r1	; 0x05
    4ac4:	1e 82       	std	Y+6, r1	; 0x06
    4ac6:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    4ac8:	80 91 d8 0b 	lds	r24, 0x0BD8
    4acc:	90 91 d9 0b 	lds	r25, 0x0BD9
    4ad0:	a0 91 da 0b 	lds	r26, 0x0BDA
    4ad4:	b0 91 db 0b 	lds	r27, 0x0BDB
    4ad8:	88 83       	st	Y, r24
    4ada:	99 83       	std	Y+1, r25	; 0x01
    4adc:	aa 83       	std	Y+2, r26	; 0x02
    4ade:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    4ae0:	80 91 dc 0b 	lds	r24, 0x0BDC
    4ae4:	90 91 dd 0b 	lds	r25, 0x0BDD
    4ae8:	a0 91 de 0b 	lds	r26, 0x0BDE
    4aec:	b0 91 df 0b 	lds	r27, 0x0BDF
    4af0:	8c 83       	std	Y+4, r24	; 0x04
    4af2:	9d 83       	std	Y+5, r25	; 0x05
    4af4:	ae 83       	std	Y+6, r26	; 0x06
    4af6:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    4af8:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_nrk_os_timer_get>
    4afc:	a8 2f       	mov	r26, r24
    4afe:	b0 e0       	ldi	r27, 0x00	; 0
    4b00:	23 eb       	ldi	r18, 0xB3	; 179
    4b02:	36 ee       	ldi	r19, 0xE6	; 230
    4b04:	4e e0       	ldi	r20, 0x0E	; 14
    4b06:	50 e0       	ldi	r21, 0x00	; 0
    4b08:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__muluhisi3>
    4b0c:	0c 81       	ldd	r16, Y+4	; 0x04
    4b0e:	1d 81       	ldd	r17, Y+5	; 0x05
    4b10:	2e 81       	ldd	r18, Y+6	; 0x06
    4b12:	3f 81       	ldd	r19, Y+7	; 0x07
    4b14:	dc 01       	movw	r26, r24
    4b16:	cb 01       	movw	r24, r22
    4b18:	80 0f       	add	r24, r16
    4b1a:	91 1f       	adc	r25, r17
    4b1c:	a2 1f       	adc	r26, r18
    4b1e:	b3 1f       	adc	r27, r19
    4b20:	8c 83       	std	Y+4, r24	; 0x04
    4b22:	9d 83       	std	Y+5, r25	; 0x05
    4b24:	ae 83       	std	Y+6, r26	; 0x06
    4b26:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    4b28:	8c 81       	ldd	r24, Y+4	; 0x04
    4b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    4b2c:	ae 81       	ldd	r26, Y+6	; 0x06
    4b2e:	bf 81       	ldd	r27, Y+7	; 0x07
    4b30:	81 15       	cp	r24, r1
    4b32:	2a ec       	ldi	r18, 0xCA	; 202
    4b34:	92 07       	cpc	r25, r18
    4b36:	2a e9       	ldi	r18, 0x9A	; 154
    4b38:	a2 07       	cpc	r26, r18
    4b3a:	2b e3       	ldi	r18, 0x3B	; 59
    4b3c:	b2 07       	cpc	r27, r18
    4b3e:	98 f0       	brcs	.+38     	; 0x4b66 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    4b40:	9a 5c       	subi	r25, 0xCA	; 202
    4b42:	aa 49       	sbci	r26, 0x9A	; 154
    4b44:	bb 43       	sbci	r27, 0x3B	; 59
    4b46:	8c 83       	std	Y+4, r24	; 0x04
    4b48:	9d 83       	std	Y+5, r25	; 0x05
    4b4a:	ae 83       	std	Y+6, r26	; 0x06
    4b4c:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    4b4e:	88 81       	ld	r24, Y
    4b50:	99 81       	ldd	r25, Y+1	; 0x01
    4b52:	aa 81       	ldd	r26, Y+2	; 0x02
    4b54:	bb 81       	ldd	r27, Y+3	; 0x03
    4b56:	01 96       	adiw	r24, 0x01	; 1
    4b58:	a1 1d       	adc	r26, r1
    4b5a:	b1 1d       	adc	r27, r1
    4b5c:	88 83       	st	Y, r24
    4b5e:	99 83       	std	Y+1, r25	; 0x01
    4b60:	aa 83       	std	Y+2, r26	; 0x02
    4b62:	bb 83       	std	Y+3, r27	; 0x03
    4b64:	e1 cf       	rjmp	.-62     	; 0x4b28 <nrk_time_get+0x72>
    }

}
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	1f 91       	pop	r17
    4b6c:	0f 91       	pop	r16
    4b6e:	08 95       	ret

00004b70 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    4b70:	8f 92       	push	r8
    4b72:	9f 92       	push	r9
    4b74:	af 92       	push	r10
    4b76:	bf 92       	push	r11
    4b78:	cf 92       	push	r12
    4b7a:	df 92       	push	r13
    4b7c:	ef 92       	push	r14
    4b7e:	ff 92       	push	r15
    4b80:	0f 93       	push	r16
    4b82:	1f 93       	push	r17
    4b84:	cf 93       	push	r28
    4b86:	df 93       	push	r29
    4b88:	cd b7       	in	r28, 0x3d	; 61
    4b8a:	de b7       	in	r29, 0x3e	; 62
    4b8c:	60 97       	sbiw	r28, 0x10	; 16
    4b8e:	0f b6       	in	r0, 0x3f	; 63
    4b90:	f8 94       	cli
    4b92:	de bf       	out	0x3e, r29	; 62
    4b94:	0f be       	out	0x3f, r0	; 63
    4b96:	cd bf       	out	0x3d, r28	; 61
    4b98:	fc 01       	movw	r30, r24
    4b9a:	09 83       	std	Y+1, r16	; 0x01
    4b9c:	1a 83       	std	Y+2, r17	; 0x02
    4b9e:	2b 83       	std	Y+3, r18	; 0x03
    4ba0:	3c 83       	std	Y+4, r19	; 0x04
    4ba2:	4d 83       	std	Y+5, r20	; 0x05
    4ba4:	5e 83       	std	Y+6, r21	; 0x06
    4ba6:	6f 83       	std	Y+7, r22	; 0x07
    4ba8:	78 87       	std	Y+8, r23	; 0x08
    4baa:	89 86       	std	Y+9, r8	; 0x09
    4bac:	9a 86       	std	Y+10, r9	; 0x0a
    4bae:	ab 86       	std	Y+11, r10	; 0x0b
    4bb0:	bc 86       	std	Y+12, r11	; 0x0c
    4bb2:	cd 86       	std	Y+13, r12	; 0x0d
    4bb4:	de 86       	std	Y+14, r13	; 0x0e
    4bb6:	ef 86       	std	Y+15, r14	; 0x0f
    4bb8:	f8 8a       	std	Y+16, r15	; 0x10
    4bba:	09 81       	ldd	r16, Y+1	; 0x01
    4bbc:	1a 81       	ldd	r17, Y+2	; 0x02
    4bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    4bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    4bc2:	4d 81       	ldd	r20, Y+5	; 0x05
    4bc4:	5e 81       	ldd	r21, Y+6	; 0x06
    4bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    4bc8:	78 85       	ldd	r23, Y+8	; 0x08
    4bca:	c9 84       	ldd	r12, Y+9	; 0x09
    4bcc:	da 84       	ldd	r13, Y+10	; 0x0a
    4bce:	eb 84       	ldd	r14, Y+11	; 0x0b
    4bd0:	fc 84       	ldd	r15, Y+12	; 0x0c
    4bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bd6:	af 85       	ldd	r26, Y+15	; 0x0f
    4bd8:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    4bda:	0c 15       	cp	r16, r12
    4bdc:	1d 05       	cpc	r17, r13
    4bde:	2e 05       	cpc	r18, r14
    4be0:	3f 05       	cpc	r19, r15
    4be2:	f0 f1       	brcs	.+124    	; 0x4c60 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    4be4:	c0 16       	cp	r12, r16
    4be6:	d1 06       	cpc	r13, r17
    4be8:	e2 06       	cpc	r14, r18
    4bea:	f3 06       	cpc	r15, r19
    4bec:	91 f4       	brne	.+36     	; 0x4c12 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    4bee:	48 17       	cp	r20, r24
    4bf0:	59 07       	cpc	r21, r25
    4bf2:	6a 07       	cpc	r22, r26
    4bf4:	7b 07       	cpc	r23, r27
    4bf6:	a0 f1       	brcs	.+104    	; 0x4c60 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    4bf8:	48 1b       	sub	r20, r24
    4bfa:	59 0b       	sbc	r21, r25
    4bfc:	6a 0b       	sbc	r22, r26
    4bfe:	7b 0b       	sbc	r23, r27
    4c00:	44 83       	std	Z+4, r20	; 0x04
    4c02:	55 83       	std	Z+5, r21	; 0x05
    4c04:	66 83       	std	Z+6, r22	; 0x06
    4c06:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    4c08:	10 82       	st	Z, r1
    4c0a:	11 82       	std	Z+1, r1	; 0x01
    4c0c:	12 82       	std	Z+2, r1	; 0x02
    4c0e:	13 82       	std	Z+3, r1	; 0x03
    4c10:	25 c0       	rjmp	.+74     	; 0x4c5c <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    4c12:	48 17       	cp	r20, r24
    4c14:	59 07       	cpc	r21, r25
    4c16:	6a 07       	cpc	r22, r26
    4c18:	7b 07       	cpc	r23, r27
    4c1a:	80 f4       	brcc	.+32     	; 0x4c3c <nrk_time_sub+0xcc>
{
	high.secs--;
    4c1c:	01 50       	subi	r16, 0x01	; 1
    4c1e:	11 09       	sbc	r17, r1
    4c20:	21 09       	sbc	r18, r1
    4c22:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    4c24:	0c 19       	sub	r16, r12
    4c26:	1d 09       	sbc	r17, r13
    4c28:	2e 09       	sbc	r18, r14
    4c2a:	3f 09       	sbc	r19, r15
    4c2c:	00 83       	st	Z, r16
    4c2e:	11 83       	std	Z+1, r17	; 0x01
    4c30:	22 83       	std	Z+2, r18	; 0x02
    4c32:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    4c34:	56 53       	subi	r21, 0x36	; 54
    4c36:	65 46       	sbci	r22, 0x65	; 101
    4c38:	74 4c       	sbci	r23, 0xC4	; 196
    4c3a:	08 c0       	rjmp	.+16     	; 0x4c4c <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    4c3c:	0c 19       	sub	r16, r12
    4c3e:	1d 09       	sbc	r17, r13
    4c40:	2e 09       	sbc	r18, r14
    4c42:	3f 09       	sbc	r19, r15
    4c44:	00 83       	st	Z, r16
    4c46:	11 83       	std	Z+1, r17	; 0x01
    4c48:	22 83       	std	Z+2, r18	; 0x02
    4c4a:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    4c4c:	48 1b       	sub	r20, r24
    4c4e:	59 0b       	sbc	r21, r25
    4c50:	6a 0b       	sbc	r22, r26
    4c52:	7b 0b       	sbc	r23, r27
    4c54:	44 83       	std	Z+4, r20	; 0x04
    4c56:	55 83       	std	Z+5, r21	; 0x05
    4c58:	66 83       	std	Z+6, r22	; 0x06
    4c5a:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	01 c0       	rjmp	.+2      	; 0x4c62 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    4c60:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    4c62:	60 96       	adiw	r28, 0x10	; 16
    4c64:	0f b6       	in	r0, 0x3f	; 63
    4c66:	f8 94       	cli
    4c68:	de bf       	out	0x3e, r29	; 62
    4c6a:	0f be       	out	0x3f, r0	; 63
    4c6c:	cd bf       	out	0x3d, r28	; 61
    4c6e:	df 91       	pop	r29
    4c70:	cf 91       	pop	r28
    4c72:	1f 91       	pop	r17
    4c74:	0f 91       	pop	r16
    4c76:	ff 90       	pop	r15
    4c78:	ef 90       	pop	r14
    4c7a:	df 90       	pop	r13
    4c7c:	cf 90       	pop	r12
    4c7e:	bf 90       	pop	r11
    4c80:	af 90       	pop	r10
    4c82:	9f 90       	pop	r9
    4c84:	8f 90       	pop	r8
    4c86:	08 95       	ret

00004c88 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    4c88:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    4c8a:	44 81       	ldd	r20, Z+4	; 0x04
    4c8c:	55 81       	ldd	r21, Z+5	; 0x05
    4c8e:	66 81       	ldd	r22, Z+6	; 0x06
    4c90:	77 81       	ldd	r23, Z+7	; 0x07
    4c92:	41 15       	cp	r20, r1
    4c94:	8a ec       	ldi	r24, 0xCA	; 202
    4c96:	58 07       	cpc	r21, r24
    4c98:	8a e9       	ldi	r24, 0x9A	; 154
    4c9a:	68 07       	cpc	r22, r24
    4c9c:	8b e3       	ldi	r24, 0x3B	; 59
    4c9e:	78 07       	cpc	r23, r24
    4ca0:	98 f0       	brcs	.+38     	; 0x4cc8 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    4ca2:	5a 5c       	subi	r21, 0xCA	; 202
    4ca4:	6a 49       	sbci	r22, 0x9A	; 154
    4ca6:	7b 43       	sbci	r23, 0x3B	; 59
    4ca8:	44 83       	std	Z+4, r20	; 0x04
    4caa:	55 83       	std	Z+5, r21	; 0x05
    4cac:	66 83       	std	Z+6, r22	; 0x06
    4cae:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    4cb0:	80 81       	ld	r24, Z
    4cb2:	91 81       	ldd	r25, Z+1	; 0x01
    4cb4:	a2 81       	ldd	r26, Z+2	; 0x02
    4cb6:	b3 81       	ldd	r27, Z+3	; 0x03
    4cb8:	01 96       	adiw	r24, 0x01	; 1
    4cba:	a1 1d       	adc	r26, r1
    4cbc:	b1 1d       	adc	r27, r1
    4cbe:	80 83       	st	Z, r24
    4cc0:	91 83       	std	Z+1, r25	; 0x01
    4cc2:	a2 83       	std	Z+2, r26	; 0x02
    4cc4:	b3 83       	std	Z+3, r27	; 0x03
    4cc6:	e1 cf       	rjmp	.-62     	; 0x4c8a <nrk_time_compact_nanos+0x2>
    }
}
    4cc8:	08 95       	ret

00004cca <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    4cca:	8f 92       	push	r8
    4ccc:	9f 92       	push	r9
    4cce:	af 92       	push	r10
    4cd0:	bf 92       	push	r11
    4cd2:	cf 92       	push	r12
    4cd4:	df 92       	push	r13
    4cd6:	ef 92       	push	r14
    4cd8:	ff 92       	push	r15
    4cda:	0f 93       	push	r16
    4cdc:	1f 93       	push	r17
    4cde:	cf 93       	push	r28
    4ce0:	df 93       	push	r29
    4ce2:	cd b7       	in	r28, 0x3d	; 61
    4ce4:	de b7       	in	r29, 0x3e	; 62
    4ce6:	60 97       	sbiw	r28, 0x10	; 16
    4ce8:	0f b6       	in	r0, 0x3f	; 63
    4cea:	f8 94       	cli
    4cec:	de bf       	out	0x3e, r29	; 62
    4cee:	0f be       	out	0x3f, r0	; 63
    4cf0:	cd bf       	out	0x3d, r28	; 61
    4cf2:	09 83       	std	Y+1, r16	; 0x01
    4cf4:	1a 83       	std	Y+2, r17	; 0x02
    4cf6:	2b 83       	std	Y+3, r18	; 0x03
    4cf8:	3c 83       	std	Y+4, r19	; 0x04
    4cfa:	4d 83       	std	Y+5, r20	; 0x05
    4cfc:	5e 83       	std	Y+6, r21	; 0x06
    4cfe:	6f 83       	std	Y+7, r22	; 0x07
    4d00:	78 87       	std	Y+8, r23	; 0x08
    4d02:	89 86       	std	Y+9, r8	; 0x09
    4d04:	9a 86       	std	Y+10, r9	; 0x0a
    4d06:	ab 86       	std	Y+11, r10	; 0x0b
    4d08:	bc 86       	std	Y+12, r11	; 0x0c
    4d0a:	cd 86       	std	Y+13, r12	; 0x0d
    4d0c:	de 86       	std	Y+14, r13	; 0x0e
    4d0e:	ef 86       	std	Y+15, r14	; 0x0f
    4d10:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    4d12:	09 85       	ldd	r16, Y+9	; 0x09
    4d14:	1a 85       	ldd	r17, Y+10	; 0x0a
    4d16:	2b 85       	ldd	r18, Y+11	; 0x0b
    4d18:	3c 85       	ldd	r19, Y+12	; 0x0c
    4d1a:	49 81       	ldd	r20, Y+1	; 0x01
    4d1c:	5a 81       	ldd	r21, Y+2	; 0x02
    4d1e:	6b 81       	ldd	r22, Y+3	; 0x03
    4d20:	7c 81       	ldd	r23, Y+4	; 0x04
    4d22:	40 0f       	add	r20, r16
    4d24:	51 1f       	adc	r21, r17
    4d26:	62 1f       	adc	r22, r18
    4d28:	73 1f       	adc	r23, r19
    4d2a:	fc 01       	movw	r30, r24
    4d2c:	40 83       	st	Z, r20
    4d2e:	51 83       	std	Z+1, r21	; 0x01
    4d30:	62 83       	std	Z+2, r22	; 0x02
    4d32:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    4d34:	0d 85       	ldd	r16, Y+13	; 0x0d
    4d36:	1e 85       	ldd	r17, Y+14	; 0x0e
    4d38:	2f 85       	ldd	r18, Y+15	; 0x0f
    4d3a:	38 89       	ldd	r19, Y+16	; 0x10
    4d3c:	4d 81       	ldd	r20, Y+5	; 0x05
    4d3e:	5e 81       	ldd	r21, Y+6	; 0x06
    4d40:	6f 81       	ldd	r22, Y+7	; 0x07
    4d42:	78 85       	ldd	r23, Y+8	; 0x08
    4d44:	40 0f       	add	r20, r16
    4d46:	51 1f       	adc	r21, r17
    4d48:	62 1f       	adc	r22, r18
    4d4a:	73 1f       	adc	r23, r19
    4d4c:	44 83       	std	Z+4, r20	; 0x04
    4d4e:	55 83       	std	Z+5, r21	; 0x05
    4d50:	66 83       	std	Z+6, r22	; 0x06
    4d52:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    4d54:	0e 94 44 26 	call	0x4c88	; 0x4c88 <nrk_time_compact_nanos>
return NRK_OK;
}
    4d58:	81 e0       	ldi	r24, 0x01	; 1
    4d5a:	60 96       	adiw	r28, 0x10	; 16
    4d5c:	0f b6       	in	r0, 0x3f	; 63
    4d5e:	f8 94       	cli
    4d60:	de bf       	out	0x3e, r29	; 62
    4d62:	0f be       	out	0x3f, r0	; 63
    4d64:	cd bf       	out	0x3d, r28	; 61
    4d66:	df 91       	pop	r29
    4d68:	cf 91       	pop	r28
    4d6a:	1f 91       	pop	r17
    4d6c:	0f 91       	pop	r16
    4d6e:	ff 90       	pop	r15
    4d70:	ef 90       	pop	r14
    4d72:	df 90       	pop	r13
    4d74:	cf 90       	pop	r12
    4d76:	bf 90       	pop	r11
    4d78:	af 90       	pop	r10
    4d7a:	9f 90       	pop	r9
    4d7c:	8f 90       	pop	r8
    4d7e:	08 95       	ret

00004d80 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    4d80:	e8 ed       	ldi	r30, 0xD8	; 216
    4d82:	fb e0       	ldi	r31, 0x0B	; 11
    4d84:	60 83       	st	Z, r22
    4d86:	71 83       	std	Z+1, r23	; 0x01
    4d88:	82 83       	std	Z+2, r24	; 0x02
    4d8a:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    4d8c:	24 83       	std	Z+4, r18	; 0x04
    4d8e:	35 83       	std	Z+5, r19	; 0x05
    4d90:	46 83       	std	Z+6, r20	; 0x06
    4d92:	57 83       	std	Z+7, r21	; 0x07
    4d94:	08 95       	ret

00004d96 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    4d96:	2f 92       	push	r2
    4d98:	3f 92       	push	r3
    4d9a:	4f 92       	push	r4
    4d9c:	5f 92       	push	r5
    4d9e:	6f 92       	push	r6
    4da0:	7f 92       	push	r7
    4da2:	8f 92       	push	r8
    4da4:	9f 92       	push	r9
    4da6:	af 92       	push	r10
    4da8:	bf 92       	push	r11
    4daa:	cf 92       	push	r12
    4dac:	df 92       	push	r13
    4dae:	ef 92       	push	r14
    4db0:	ff 92       	push	r15
    4db2:	0f 93       	push	r16
    4db4:	1f 93       	push	r17
    4db6:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4db8:	c0 80       	ld	r12, Z
    4dba:	d1 80       	ldd	r13, Z+1	; 0x01
    4dbc:	e2 80       	ldd	r14, Z+2	; 0x02
    4dbe:	f3 80       	ldd	r15, Z+3	; 0x03
    4dc0:	c1 14       	cp	r12, r1
    4dc2:	d1 04       	cpc	r13, r1
    4dc4:	e1 04       	cpc	r14, r1
    4dc6:	f1 04       	cpc	r15, r1
    4dc8:	e1 f1       	breq	.+120    	; 0x4e42 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    4dca:	84 81       	ldd	r24, Z+4	; 0x04
    4dcc:	95 81       	ldd	r25, Z+5	; 0x05
    4dce:	a6 81       	ldd	r26, Z+6	; 0x06
    4dd0:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    4dd2:	22 e4       	ldi	r18, 0x42	; 66
    4dd4:	c2 16       	cp	r12, r18
    4dd6:	d1 04       	cpc	r13, r1
    4dd8:	e1 04       	cpc	r14, r1
    4dda:	f1 04       	cpc	r15, r1
    4ddc:	f0 f5       	brcc	.+124    	; 0x4e5a <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    4dde:	1c 01       	movw	r2, r24
    4de0:	2d 01       	movw	r4, r26
    4de2:	61 2c       	mov	r6, r1
    4de4:	71 2c       	mov	r7, r1
    4de6:	43 01       	movw	r8, r6
    4de8:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4dea:	8e 2f       	mov	r24, r30
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	a0 e0       	ldi	r26, 0x00	; 0
    4df0:	b0 e0       	ldi	r27, 0x00	; 0
    4df2:	8c 15       	cp	r24, r12
    4df4:	9d 05       	cpc	r25, r13
    4df6:	ae 05       	cpc	r26, r14
    4df8:	bf 05       	cpc	r27, r15
    4dfa:	88 f4       	brcc	.+34     	; 0x4e1e <_nrk_time_to_ticks+0x88>
    4dfc:	91 01       	movw	r18, r2
    4dfe:	a2 01       	movw	r20, r4
    4e00:	b3 01       	movw	r22, r6
    4e02:	c4 01       	movw	r24, r8
    4e04:	36 53       	subi	r19, 0x36	; 54
    4e06:	45 46       	sbci	r20, 0x65	; 101
    4e08:	54 4c       	sbci	r21, 0xC4	; 196
    4e0a:	6f 4f       	sbci	r22, 0xFF	; 255
    4e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e0e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e10:	9f 4f       	sbci	r25, 0xFF	; 255
    4e12:	19 01       	movw	r2, r18
    4e14:	2a 01       	movw	r4, r20
    4e16:	3b 01       	movw	r6, r22
    4e18:	4c 01       	movw	r8, r24
    4e1a:	ef 5f       	subi	r30, 0xFF	; 255
    4e1c:	e6 cf       	rjmp	.-52     	; 0x4dea <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4e1e:	83 eb       	ldi	r24, 0xB3	; 179
    4e20:	a8 2e       	mov	r10, r24
    4e22:	96 ee       	ldi	r25, 0xE6	; 230
    4e24:	b9 2e       	mov	r11, r25
    4e26:	2e e0       	ldi	r18, 0x0E	; 14
    4e28:	c2 2e       	mov	r12, r18
    4e2a:	d1 2c       	mov	r13, r1
    4e2c:	e1 2c       	mov	r14, r1
    4e2e:	f1 2c       	mov	r15, r1
    4e30:	00 e0       	ldi	r16, 0x00	; 0
    4e32:	10 e0       	ldi	r17, 0x00	; 0
    4e34:	91 01       	movw	r18, r2
    4e36:	a2 01       	movw	r20, r4
    4e38:	b3 01       	movw	r22, r6
    4e3a:	c4 01       	movw	r24, r8
    4e3c:	0e 94 c6 32 	call	0x658c	; 0x658c <__udivdi3>
    4e40:	0a c0       	rjmp	.+20     	; 0x4e56 <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4e42:	64 81       	ldd	r22, Z+4	; 0x04
    4e44:	75 81       	ldd	r23, Z+5	; 0x05
    4e46:	86 81       	ldd	r24, Z+6	; 0x06
    4e48:	97 81       	ldd	r25, Z+7	; 0x07
    4e4a:	23 eb       	ldi	r18, 0xB3	; 179
    4e4c:	36 ee       	ldi	r19, 0xE6	; 230
    4e4e:	4e e0       	ldi	r20, 0x0E	; 14
    4e50:	50 e0       	ldi	r21, 0x00	; 0
    4e52:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    4e56:	c9 01       	movw	r24, r18
    4e58:	02 c0       	rjmp	.+4      	; 0x4e5e <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4e5a:	80 e0       	ldi	r24, 0x00	; 0
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4e5e:	1f 91       	pop	r17
    4e60:	0f 91       	pop	r16
    4e62:	ff 90       	pop	r15
    4e64:	ef 90       	pop	r14
    4e66:	df 90       	pop	r13
    4e68:	cf 90       	pop	r12
    4e6a:	bf 90       	pop	r11
    4e6c:	af 90       	pop	r10
    4e6e:	9f 90       	pop	r9
    4e70:	8f 90       	pop	r8
    4e72:	7f 90       	pop	r7
    4e74:	6f 90       	pop	r6
    4e76:	5f 90       	pop	r5
    4e78:	4f 90       	pop	r4
    4e7a:	3f 90       	pop	r3
    4e7c:	2f 90       	pop	r2
    4e7e:	08 95       	ret

00004e80 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4e80:	cf 92       	push	r12
    4e82:	df 92       	push	r13
    4e84:	ef 92       	push	r14
    4e86:	ff 92       	push	r15
    4e88:	cf 93       	push	r28
    4e8a:	df 93       	push	r29
    4e8c:	cd b7       	in	r28, 0x3d	; 61
    4e8e:	de b7       	in	r29, 0x3e	; 62
    4e90:	28 97       	sbiw	r28, 0x08	; 8
    4e92:	0f b6       	in	r0, 0x3f	; 63
    4e94:	f8 94       	cli
    4e96:	de bf       	out	0x3e, r29	; 62
    4e98:	0f be       	out	0x3f, r0	; 63
    4e9a:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    4e9c:	6b 01       	movw	r12, r22
    4e9e:	7c 01       	movw	r14, r24
    4ea0:	2a e0       	ldi	r18, 0x0A	; 10
    4ea2:	f6 94       	lsr	r15
    4ea4:	e7 94       	ror	r14
    4ea6:	d7 94       	ror	r13
    4ea8:	c7 94       	ror	r12
    4eaa:	2a 95       	dec	r18
    4eac:	d1 f7       	brne	.-12     	; 0x4ea2 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    4eae:	c9 82       	std	Y+1, r12	; 0x01
    4eb0:	da 82       	std	Y+2, r13	; 0x02
    4eb2:	eb 82       	std	Y+3, r14	; 0x03
    4eb4:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    4eb6:	9b 01       	movw	r18, r22
    4eb8:	ac 01       	movw	r20, r24
    4eba:	33 70       	andi	r19, 0x03	; 3
    4ebc:	44 27       	eor	r20, r20
    4ebe:	55 27       	eor	r21, r21
    4ec0:	63 eb       	ldi	r22, 0xB3	; 179
    4ec2:	76 ee       	ldi	r23, 0xE6	; 230
    4ec4:	8e e0       	ldi	r24, 0x0E	; 14
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	0e 94 7e 32 	call	0x64fc	; 0x64fc <__mulsi3>

return t;
    4ecc:	2c 2d       	mov	r18, r12
    4ece:	3a 81       	ldd	r19, Y+2	; 0x02
    4ed0:	4b 81       	ldd	r20, Y+3	; 0x03
    4ed2:	5c 81       	ldd	r21, Y+4	; 0x04
}
    4ed4:	28 96       	adiw	r28, 0x08	; 8
    4ed6:	0f b6       	in	r0, 0x3f	; 63
    4ed8:	f8 94       	cli
    4eda:	de bf       	out	0x3e, r29	; 62
    4edc:	0f be       	out	0x3f, r0	; 63
    4ede:	cd bf       	out	0x3d, r28	; 61
    4ee0:	df 91       	pop	r29
    4ee2:	cf 91       	pop	r28
    4ee4:	ff 90       	pop	r15
    4ee6:	ef 90       	pop	r14
    4ee8:	df 90       	pop	r13
    4eea:	cf 90       	pop	r12
    4eec:	08 95       	ret

00004eee <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    4eee:	2f 92       	push	r2
    4ef0:	3f 92       	push	r3
    4ef2:	4f 92       	push	r4
    4ef4:	5f 92       	push	r5
    4ef6:	6f 92       	push	r6
    4ef8:	7f 92       	push	r7
    4efa:	8f 92       	push	r8
    4efc:	9f 92       	push	r9
    4efe:	af 92       	push	r10
    4f00:	bf 92       	push	r11
    4f02:	cf 92       	push	r12
    4f04:	df 92       	push	r13
    4f06:	ef 92       	push	r14
    4f08:	ff 92       	push	r15
    4f0a:	0f 93       	push	r16
    4f0c:	1f 93       	push	r17
    4f0e:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4f10:	c0 80       	ld	r12, Z
    4f12:	d1 80       	ldd	r13, Z+1	; 0x01
    4f14:	e2 80       	ldd	r14, Z+2	; 0x02
    4f16:	f3 80       	ldd	r15, Z+3	; 0x03
    4f18:	c1 14       	cp	r12, r1
    4f1a:	d1 04       	cpc	r13, r1
    4f1c:	e1 04       	cpc	r14, r1
    4f1e:	f1 04       	cpc	r15, r1
    4f20:	b9 f1       	breq	.+110    	; 0x4f90 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    4f22:	84 81       	ldd	r24, Z+4	; 0x04
    4f24:	95 81       	ldd	r25, Z+5	; 0x05
    4f26:	a6 81       	ldd	r26, Z+6	; 0x06
    4f28:	b7 81       	ldd	r27, Z+7	; 0x07
    4f2a:	1c 01       	movw	r2, r24
    4f2c:	2d 01       	movw	r4, r26
    4f2e:	61 2c       	mov	r6, r1
    4f30:	71 2c       	mov	r7, r1
    4f32:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4f34:	e0 e0       	ldi	r30, 0x00	; 0
    4f36:	8e 2f       	mov	r24, r30
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	a0 e0       	ldi	r26, 0x00	; 0
    4f3c:	b0 e0       	ldi	r27, 0x00	; 0
    4f3e:	8c 15       	cp	r24, r12
    4f40:	9d 05       	cpc	r25, r13
    4f42:	ae 05       	cpc	r26, r14
    4f44:	bf 05       	cpc	r27, r15
    4f46:	88 f4       	brcc	.+34     	; 0x4f6a <_nrk_time_to_ticks_long+0x7c>
    4f48:	91 01       	movw	r18, r2
    4f4a:	a2 01       	movw	r20, r4
    4f4c:	b3 01       	movw	r22, r6
    4f4e:	c4 01       	movw	r24, r8
    4f50:	36 53       	subi	r19, 0x36	; 54
    4f52:	45 46       	sbci	r20, 0x65	; 101
    4f54:	54 4c       	sbci	r21, 0xC4	; 196
    4f56:	6f 4f       	sbci	r22, 0xFF	; 255
    4f58:	7f 4f       	sbci	r23, 0xFF	; 255
    4f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f5e:	19 01       	movw	r2, r18
    4f60:	2a 01       	movw	r4, r20
    4f62:	3b 01       	movw	r6, r22
    4f64:	4c 01       	movw	r8, r24
    4f66:	ef 5f       	subi	r30, 0xFF	; 255
    4f68:	e6 cf       	rjmp	.-52     	; 0x4f36 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4f6a:	83 eb       	ldi	r24, 0xB3	; 179
    4f6c:	a8 2e       	mov	r10, r24
    4f6e:	96 ee       	ldi	r25, 0xE6	; 230
    4f70:	b9 2e       	mov	r11, r25
    4f72:	2e e0       	ldi	r18, 0x0E	; 14
    4f74:	c2 2e       	mov	r12, r18
    4f76:	d1 2c       	mov	r13, r1
    4f78:	e1 2c       	mov	r14, r1
    4f7a:	f1 2c       	mov	r15, r1
    4f7c:	00 e0       	ldi	r16, 0x00	; 0
    4f7e:	10 e0       	ldi	r17, 0x00	; 0
    4f80:	91 01       	movw	r18, r2
    4f82:	a2 01       	movw	r20, r4
    4f84:	b3 01       	movw	r22, r6
    4f86:	c4 01       	movw	r24, r8
    4f88:	0e 94 c6 32 	call	0x658c	; 0x658c <__udivdi3>
    4f8c:	ca 01       	movw	r24, r20
    4f8e:	0b c0       	rjmp	.+22     	; 0x4fa6 <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4f90:	64 81       	ldd	r22, Z+4	; 0x04
    4f92:	75 81       	ldd	r23, Z+5	; 0x05
    4f94:	86 81       	ldd	r24, Z+6	; 0x06
    4f96:	97 81       	ldd	r25, Z+7	; 0x07
    4f98:	23 eb       	ldi	r18, 0xB3	; 179
    4f9a:	36 ee       	ldi	r19, 0xE6	; 230
    4f9c:	4e e0       	ldi	r20, 0x0E	; 14
    4f9e:	50 e0       	ldi	r21, 0x00	; 0
    4fa0:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    4fa4:	ca 01       	movw	r24, r20
}
return ticks;
}
    4fa6:	b9 01       	movw	r22, r18
    4fa8:	1f 91       	pop	r17
    4faa:	0f 91       	pop	r16
    4fac:	ff 90       	pop	r15
    4fae:	ef 90       	pop	r14
    4fb0:	df 90       	pop	r13
    4fb2:	cf 90       	pop	r12
    4fb4:	bf 90       	pop	r11
    4fb6:	af 90       	pop	r10
    4fb8:	9f 90       	pop	r9
    4fba:	8f 90       	pop	r8
    4fbc:	7f 90       	pop	r7
    4fbe:	6f 90       	pop	r6
    4fc0:	5f 90       	pop	r5
    4fc2:	4f 90       	pop	r4
    4fc4:	3f 90       	pop	r3
    4fc6:	2f 90       	pop	r2
    4fc8:	08 95       	ret

00004fca <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    4fca:	c2 e0       	ldi	r28, 0x02	; 2
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4fcc:	d1 e0       	ldi	r29, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    4fce:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4fd2:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <_nrk_get_next_wakeup>
    4fd6:	84 30       	cpi	r24, 0x04	; 4
    4fd8:	28 f4       	brcc	.+10     	; 0x4fe4 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4fda:	d0 93 d5 0b 	sts	0x0BD5, r29
	    nrk_idle();
    4fde:	0e 94 4e 30 	call	0x609c	; 0x609c <nrk_idle>
    4fe2:	08 c0       	rjmp	.+16     	; 0x4ff4 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    4fe4:	8a e0       	ldi	r24, 0x0A	; 10
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	0e 94 57 2c 	call	0x58ae	; 0x58ae <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    4fec:	c0 93 d5 0b 	sts	0x0BD5, r28
	    nrk_sleep();
    4ff0:	0e 94 42 30 	call	0x6084	; 0x6084 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4ff4:	80 91 2c 0a 	lds	r24, 0x0A2C
    4ff8:	85 35       	cpi	r24, 0x55	; 85
    4ffa:	19 f0       	breq	.+6      	; 0x5002 <nrk_idle_task+0x38>
    4ffc:	88 e0       	ldi	r24, 0x08	; 8
    4ffe:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    5002:	80 91 fe 40 	lds	r24, 0x40FE
    5006:	85 35       	cpi	r24, 0x55	; 85
    5008:	11 f3       	breq	.-60     	; 0x4fce <nrk_idle_task+0x4>
    500a:	88 e0       	ldi	r24, 0x08	; 8
    500c:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <nrk_error_add>
    5010:	de cf       	rjmp	.-68     	; 0x4fce <nrk_idle_task+0x4>

00005012 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    5012:	2f 92       	push	r2
    5014:	3f 92       	push	r3
    5016:	4f 92       	push	r4
    5018:	5f 92       	push	r5
    501a:	6f 92       	push	r6
    501c:	7f 92       	push	r7
    501e:	8f 92       	push	r8
    5020:	9f 92       	push	r9
    5022:	af 92       	push	r10
    5024:	bf 92       	push	r11
    5026:	cf 92       	push	r12
    5028:	df 92       	push	r13
    502a:	ef 92       	push	r14
    502c:	ff 92       	push	r15
    502e:	0f 93       	push	r16
    5030:	1f 93       	push	r17
    5032:	cf 93       	push	r28
    5034:	df 93       	push	r29
    5036:	00 d0       	rcall	.+0      	; 0x5038 <_nrk_scheduler+0x26>
    5038:	1f 92       	push	r1
    503a:	cd b7       	in	r28, 0x3d	; 61
    503c:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    nrk_int_enable();   // this should be removed...  Not needed
    503e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    5042:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <_nrk_precision_os_timer_reset>
    _nrk_high_speed_timer_reset();
    5046:	0e 94 91 2c 	call	0x5922	; 0x5922 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    504a:	0e 94 99 2c 	call	0x5932	; 0x5932 <_nrk_high_speed_timer_get>
    504e:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    5050:	8a ef       	ldi	r24, 0xFA	; 250
    5052:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <_nrk_set_next_wakeup>
    next_wake=60000;
    // Safety zone starts here....


#ifdef NRK_WATCHDOG
    nrk_watchdog_reset();
    5056:	0e 94 3f 30 	call	0x607e	; 0x607e <nrk_watchdog_reset>
#endif

#ifdef NRK_SW_WDT
    _nrk_sw_wdt_check();
    505a:	0e 94 0d 2b 	call	0x561a	; 0x561a <_nrk_sw_wdt_check>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    505e:	b0 90 81 09 	lds	r11, 0x0981
    5062:	ab 2d       	mov	r26, r11
    5064:	b0 e0       	ldi	r27, 0x00	; 0
    5066:	23 eb       	ldi	r18, 0xB3	; 179
    5068:	36 ee       	ldi	r19, 0xE6	; 230
    506a:	4e e0       	ldi	r20, 0x0E	; 14
    506c:	50 e0       	ldi	r21, 0x00	; 0
    506e:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__muluhisi3>
    5072:	00 91 dc 0b 	lds	r16, 0x0BDC
    5076:	10 91 dd 0b 	lds	r17, 0x0BDD
    507a:	20 91 de 0b 	lds	r18, 0x0BDE
    507e:	30 91 df 0b 	lds	r19, 0x0BDF
    5082:	6b 01       	movw	r12, r22
    5084:	7c 01       	movw	r14, r24
    5086:	c0 0e       	add	r12, r16
    5088:	d1 1e       	adc	r13, r17
    508a:	e2 1e       	adc	r14, r18
    508c:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    508e:	c7 01       	movw	r24, r14
    5090:	b6 01       	movw	r22, r12
    5092:	23 eb       	ldi	r18, 0xB3	; 179
    5094:	36 ee       	ldi	r19, 0xE6	; 230
    5096:	4e e0       	ldi	r20, 0x0E	; 14
    5098:	50 e0       	ldi	r21, 0x00	; 0
    509a:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    509e:	c6 1a       	sub	r12, r22
    50a0:	d7 0a       	sbc	r13, r23
    50a2:	e8 0a       	sbc	r14, r24
    50a4:	f9 0a       	sbc	r15, r25
    50a6:	c0 92 dc 0b 	sts	0x0BDC, r12
    50aa:	d0 92 dd 0b 	sts	0x0BDD, r13
    50ae:	e0 92 de 0b 	sts	0x0BDE, r14
    50b2:	f0 92 df 0b 	sts	0x0BDF, r15

#ifdef NRK_STATS_TRACKER
    if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
    50b6:	e0 91 e1 0b 	lds	r30, 0x0BE1
    50ba:	f0 91 e2 0b 	lds	r31, 0x0BE2
    50be:	80 85       	ldd	r24, Z+8	; 0x08
    50c0:	81 11       	cpse	r24, r1
    50c2:	30 c0       	rjmp	.+96     	; 0x5124 <_nrk_scheduler+0x112>
    {
        if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
    50c4:	80 91 d5 0b 	lds	r24, 0x0BD5
    50c8:	82 30       	cpi	r24, 0x02	; 2
    50ca:	19 f4       	brne	.+6      	; 0x50d2 <_nrk_scheduler+0xc0>
    50cc:	8b 2d       	mov	r24, r11
    50ce:	0e 94 bc 18 	call	0x3178	; 0x3178 <_nrk_stats_sleep>
        _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    50d2:	e0 91 e1 0b 	lds	r30, 0x0BE1
    50d6:	f0 91 e2 0b 	lds	r31, 0x0BE2
    50da:	60 91 81 09 	lds	r22, 0x0981
    50de:	80 85       	ldd	r24, Z+8	; 0x08
    50e0:	0e 94 24 19 	call	0x3248	; 0x3248 <_nrk_stats_task_preempted>
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    50e4:	e0 91 e1 0b 	lds	r30, 0x0BE1
    50e8:	f0 91 e2 0b 	lds	r31, 0x0BE2
    50ec:	60 e0       	ldi	r22, 0x00	; 0
    50ee:	80 85       	ldd	r24, Z+8	; 0x08
    50f0:	0e 94 61 19 	call	0x32c2	; 0x32c2 <_nrk_stats_task_suspend>
    50f4:	80 91 dc 0b 	lds	r24, 0x0BDC
    50f8:	90 91 dd 0b 	lds	r25, 0x0BDD
    50fc:	a0 91 de 0b 	lds	r26, 0x0BDE
    5100:	b0 91 df 0b 	lds	r27, 0x0BDF
    5104:	00 91 d8 0b 	lds	r16, 0x0BD8
    5108:	10 91 d9 0b 	lds	r17, 0x0BD9
    510c:	20 91 da 0b 	lds	r18, 0x0BDA
    5110:	30 91 db 0b 	lds	r19, 0x0BDB

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    5114:	43 eb       	ldi	r20, 0xB3	; 179
    5116:	84 2e       	mov	r8, r20
    5118:	46 ee       	ldi	r20, 0xE6	; 230
    511a:	94 2e       	mov	r9, r20
    511c:	4e e0       	ldi	r20, 0x0E	; 14
    511e:	a4 2e       	mov	r10, r20
    5120:	b1 2c       	mov	r11, r1
    5122:	07 c0       	rjmp	.+14     	; 0x5132 <_nrk_scheduler+0x120>
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    }
    else
    {
        if(nrk_cur_task_TCB->suspend_flag==1)
    5124:	95 81       	ldd	r25, Z+5	; 0x05
            _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    5126:	6b 2d       	mov	r22, r11
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    }
    else
    {
        if(nrk_cur_task_TCB->suspend_flag==1)
    5128:	91 11       	cpse	r25, r1
    512a:	e2 cf       	rjmp	.-60     	; 0x50f0 <_nrk_scheduler+0xde>
            _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    512c:	0e 94 24 19 	call	0x3248	; 0x3248 <_nrk_stats_task_preempted>
    5130:	e1 cf       	rjmp	.-62     	; 0x50f4 <_nrk_scheduler+0xe2>
    5132:	68 01       	movw	r12, r16
    5134:	79 01       	movw	r14, r18
    5136:	4f ef       	ldi	r20, 0xFF	; 255
    5138:	c4 1a       	sub	r12, r20
    513a:	d4 0a       	sbc	r13, r20
    513c:	e4 0a       	sbc	r14, r20
    513e:	f4 0a       	sbc	r15, r20
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    5140:	81 15       	cp	r24, r1
    5142:	5a ec       	ldi	r21, 0xCA	; 202
    5144:	95 07       	cpc	r25, r21
    5146:	5a e9       	ldi	r21, 0x9A	; 154
    5148:	a5 07       	cpc	r26, r21
    514a:	5b e3       	ldi	r21, 0x3B	; 59
    514c:	b5 07       	cpc	r27, r21
    514e:	c8 f0       	brcs	.+50     	; 0x5182 <_nrk_scheduler+0x170>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    5150:	2c 01       	movw	r4, r24
    5152:	3d 01       	movw	r6, r26
    5154:	2a ec       	ldi	r18, 0xCA	; 202
    5156:	52 1a       	sub	r5, r18
    5158:	2a e9       	ldi	r18, 0x9A	; 154
    515a:	62 0a       	sbc	r6, r18
    515c:	2b e3       	ldi	r18, 0x3B	; 59
    515e:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    5160:	c3 01       	movw	r24, r6
    5162:	b2 01       	movw	r22, r4
    5164:	a5 01       	movw	r20, r10
    5166:	94 01       	movw	r18, r8
    5168:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    516c:	a3 01       	movw	r20, r6
    516e:	92 01       	movw	r18, r4
    5170:	26 1b       	sub	r18, r22
    5172:	37 0b       	sbc	r19, r23
    5174:	48 0b       	sbc	r20, r24
    5176:	59 0b       	sbc	r21, r25
    5178:	da 01       	movw	r26, r20
    517a:	c9 01       	movw	r24, r18
    517c:	97 01       	movw	r18, r14
    517e:	86 01       	movw	r16, r12
    5180:	d8 cf       	rjmp	.-80     	; 0x5132 <_nrk_scheduler+0x120>
    5182:	80 93 dc 0b 	sts	0x0BDC, r24
    5186:	90 93 dd 0b 	sts	0x0BDD, r25
    518a:	a0 93 de 0b 	sts	0x0BDE, r26
    518e:	b0 93 df 0b 	sts	0x0BDF, r27
    5192:	00 93 d8 0b 	sts	0x0BD8, r16
    5196:	10 93 d9 0b 	sts	0x0BD9, r17
    519a:	20 93 da 0b 	sts	0x0BDA, r18
    519e:	30 93 db 0b 	sts	0x0BDB, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    51a2:	e0 91 e1 0b 	lds	r30, 0x0BE1
    51a6:	f0 91 e2 0b 	lds	r31, 0x0BE2
    51aa:	85 81       	ldd	r24, Z+5	; 0x05
    51ac:	88 23       	and	r24, r24
    51ae:	39 f1       	breq	.+78     	; 0x51fe <_nrk_scheduler+0x1ec>
    51b0:	81 85       	ldd	r24, Z+9	; 0x09
    51b2:	84 30       	cpi	r24, 0x04	; 4
    51b4:	21 f1       	breq	.+72     	; 0x51fe <_nrk_scheduler+0x1ec>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    51b6:	87 81       	ldd	r24, Z+7	; 0x07
    51b8:	82 30       	cpi	r24, 0x02	; 2
    51ba:	29 f0       	breq	.+10     	; 0x51c6 <_nrk_scheduler+0x1b4>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    51bc:	88 23       	and	r24, r24
    51be:	41 f0       	breq	.+16     	; 0x51d0 <_nrk_scheduler+0x1be>
    51c0:	86 81       	ldd	r24, Z+6	; 0x06
    51c2:	81 11       	cpse	r24, r1
    51c4:	02 c0       	rjmp	.+4      	; 0x51ca <_nrk_scheduler+0x1b8>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    51c6:	85 e0       	ldi	r24, 0x05	; 5
    51c8:	01 c0       	rjmp	.+2      	; 0x51cc <_nrk_scheduler+0x1ba>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    51ca:	83 e0       	ldi	r24, 0x03	; 3
    51cc:	81 87       	std	Z+9, r24	; 0x09
    51ce:	14 c0       	rjmp	.+40     	; 0x51f8 <_nrk_scheduler+0x1e6>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    51d0:	83 e0       	ldi	r24, 0x03	; 3
    51d2:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    51d4:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    51d6:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    51d8:	85 89       	ldd	r24, Z+21	; 0x15
    51da:	96 89       	ldd	r25, Z+22	; 0x16
    51dc:	a7 89       	ldd	r26, Z+23	; 0x17
    51de:	b0 8d       	ldd	r27, Z+24	; 0x18
    51e0:	89 2b       	or	r24, r25
    51e2:	8a 2b       	or	r24, r26
    51e4:	8b 2b       	or	r24, r27
    51e6:	41 f4       	brne	.+16     	; 0x51f8 <_nrk_scheduler+0x1e6>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    51e8:	81 8d       	ldd	r24, Z+25	; 0x19
    51ea:	92 8d       	ldd	r25, Z+26	; 0x1a
    51ec:	a3 8d       	ldd	r26, Z+27	; 0x1b
    51ee:	b4 8d       	ldd	r27, Z+28	; 0x1c
    51f0:	85 8b       	std	Z+21, r24	; 0x15
    51f2:	96 8b       	std	Z+22, r25	; 0x16
    51f4:	a7 8b       	std	Z+23, r26	; 0x17
    51f6:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    51f8:	80 85       	ldd	r24, Z+8	; 0x08
    51fa:	0e 94 ca 22 	call	0x4594	; 0x4594 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    51fe:	e0 91 e1 0b 	lds	r30, 0x0BE1
    5202:	f0 91 e2 0b 	lds	r31, 0x0BE2
    5206:	85 a1       	ldd	r24, Z+37	; 0x25
    5208:	96 a1       	ldd	r25, Z+38	; 0x26
    520a:	a7 a1       	ldd	r26, Z+39	; 0x27
    520c:	b0 a5       	ldd	r27, Z+40	; 0x28
    520e:	89 2b       	or	r24, r25
    5210:	8a 2b       	or	r24, r26
    5212:	8b 2b       	or	r24, r27
    5214:	09 f4       	brne	.+2      	; 0x5218 <_nrk_scheduler+0x206>
    5216:	4e c0       	rjmp	.+156    	; 0x52b4 <_nrk_scheduler+0x2a2>
    5218:	80 85       	ldd	r24, Z+8	; 0x08
    521a:	88 23       	and	r24, r24
    521c:	09 f4       	brne	.+2      	; 0x5220 <_nrk_scheduler+0x20e>
    521e:	4a c0       	rjmp	.+148    	; 0x52b4 <_nrk_scheduler+0x2a2>
    5220:	91 85       	ldd	r25, Z+9	; 0x09
    5222:	94 30       	cpi	r25, 0x04	; 4
    5224:	09 f4       	brne	.+2      	; 0x5228 <_nrk_scheduler+0x216>
    5226:	46 c0       	rjmp	.+140    	; 0x52b4 <_nrk_scheduler+0x2a2>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    5228:	45 8d       	ldd	r20, Z+29	; 0x1d
    522a:	56 8d       	ldd	r21, Z+30	; 0x1e
    522c:	67 8d       	ldd	r22, Z+31	; 0x1f
    522e:	70 a1       	ldd	r23, Z+32	; 0x20
    5230:	00 91 81 09 	lds	r16, 0x0981
    5234:	10 e0       	ldi	r17, 0x00	; 0
    5236:	20 e0       	ldi	r18, 0x00	; 0
    5238:	30 e0       	ldi	r19, 0x00	; 0
    523a:	40 17       	cp	r20, r16
    523c:	51 07       	cpc	r21, r17
    523e:	62 07       	cpc	r22, r18
    5240:	73 07       	cpc	r23, r19
    5242:	98 f4       	brcc	.+38     	; 0x526a <_nrk_scheduler+0x258>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
    5244:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <_nrk_stats_add_violation>
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    5248:	e0 91 e1 0b 	lds	r30, 0x0BE1
    524c:	f0 91 e2 0b 	lds	r31, 0x0BE2
    5250:	60 85       	ldd	r22, Z+8	; 0x08
    5252:	82 e0       	ldi	r24, 0x02	; 2
    5254:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    5258:	e0 91 e1 0b 	lds	r30, 0x0BE1
    525c:	f0 91 e2 0b 	lds	r31, 0x0BE2
    5260:	15 8e       	std	Z+29, r1	; 0x1d
    5262:	16 8e       	std	Z+30, r1	; 0x1e
    5264:	17 8e       	std	Z+31, r1	; 0x1f
    5266:	10 a2       	std	Z+32, r1	; 0x20
    5268:	08 c0       	rjmp	.+16     	; 0x527a <_nrk_scheduler+0x268>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    526a:	40 1b       	sub	r20, r16
    526c:	51 0b       	sbc	r21, r17
    526e:	62 0b       	sbc	r22, r18
    5270:	73 0b       	sbc	r23, r19
    5272:	45 8f       	std	Z+29, r20	; 0x1d
    5274:	56 8f       	std	Z+30, r21	; 0x1e
    5276:	67 8f       	std	Z+31, r22	; 0x1f
    5278:	70 a3       	std	Z+32, r23	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    527a:	e0 91 e1 0b 	lds	r30, 0x0BE1
    527e:	f0 91 e2 0b 	lds	r31, 0x0BE2
    5282:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    5284:	85 8d       	ldd	r24, Z+29	; 0x1d
    5286:	96 8d       	ldd	r25, Z+30	; 0x1e
    5288:	a7 8d       	ldd	r26, Z+31	; 0x1f
    528a:	b0 a1       	ldd	r27, Z+32	; 0x20
    528c:	89 2b       	or	r24, r25
    528e:	8a 2b       	or	r24, r26
    5290:	8b 2b       	or	r24, r27
    5292:	81 f4       	brne	.+32     	; 0x52b4 <_nrk_scheduler+0x2a2>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
    5294:	81 2f       	mov	r24, r17
    5296:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <_nrk_stats_add_violation>
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    529a:	61 2f       	mov	r22, r17
    529c:	83 e0       	ldi	r24, 0x03	; 3
    529e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    52a2:	e0 91 e1 0b 	lds	r30, 0x0BE1
    52a6:	f0 91 e2 0b 	lds	r31, 0x0BE2
    52aa:	83 e0       	ldi	r24, 0x03	; 3
    52ac:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    52ae:	81 2f       	mov	r24, r17
    52b0:	0e 94 ca 22 	call	0x4594	; 0x4594 <nrk_rem_from_readyQ>
    52b4:	8a ef       	ldi	r24, 0xFA	; 250
    52b6:	9a e0       	ldi	r25, 0x0A	; 10
    52b8:	9b 83       	std	Y+3, r25	; 0x03
    52ba:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    52bc:	00 e6       	ldi	r16, 0x60	; 96
    52be:	1a ee       	ldi	r17, 0xEA	; 234
    52c0:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    52c2:	2a ef       	ldi	r18, 0xFA	; 250
    52c4:	c2 2e       	mov	r12, r18
    52c6:	d1 2c       	mov	r13, r1
    52c8:	e1 2c       	mov	r14, r1
    52ca:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    52cc:	81 2c       	mov	r8, r1
    52ce:	91 2c       	mov	r9, r1
    52d0:	54 01       	movw	r10, r8
    52d2:	83 94       	inc	r8
    52d4:	ea 81       	ldd	r30, Y+2	; 0x02
    52d6:	fb 81       	ldd	r31, Y+3	; 0x03
    52d8:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    52da:	80 81       	ld	r24, Z
    52dc:	8f 3f       	cpi	r24, 0xFF	; 255
    52de:	09 f4       	brne	.+2      	; 0x52e2 <_nrk_scheduler+0x2d0>
    52e0:	04 c1       	rjmp	.+520    	; 0x54ea <_nrk_scheduler+0x4d8>
    52e2:	ea 81       	ldd	r30, Y+2	; 0x02
    52e4:	fb 81       	ldd	r31, Y+3	; 0x03
    52e6:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    52e8:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    52ea:	88 23       	and	r24, r24
    52ec:	09 f4       	brne	.+2      	; 0x52f0 <_nrk_scheduler+0x2de>
    52ee:	67 c0       	rjmp	.+206    	; 0x53be <_nrk_scheduler+0x3ac>
    52f0:	ea 81       	ldd	r30, Y+2	; 0x02
    52f2:	fb 81       	ldd	r31, Y+3	; 0x03
    52f4:	80 81       	ld	r24, Z
    52f6:	84 30       	cpi	r24, 0x04	; 4
    52f8:	09 f4       	brne	.+2      	; 0x52fc <_nrk_scheduler+0x2ea>
    52fa:	61 c0       	rjmp	.+194    	; 0x53be <_nrk_scheduler+0x3ac>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    52fc:	44 84       	ldd	r4, Z+12	; 0x0c
    52fe:	55 84       	ldd	r5, Z+13	; 0x0d
    5300:	66 84       	ldd	r6, Z+14	; 0x0e
    5302:	77 84       	ldd	r7, Z+15	; 0x0f
    5304:	60 91 81 09 	lds	r22, 0x0981
    5308:	70 e0       	ldi	r23, 0x00	; 0
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	46 16       	cp	r4, r22
    5310:	57 06       	cpc	r5, r23
    5312:	68 06       	cpc	r6, r24
    5314:	79 06       	cpc	r7, r25
    5316:	48 f0       	brcs	.+18     	; 0x532a <_nrk_scheduler+0x318>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    5318:	46 1a       	sub	r4, r22
    531a:	57 0a       	sbc	r5, r23
    531c:	68 0a       	sbc	r6, r24
    531e:	79 0a       	sbc	r7, r25
    5320:	44 86       	std	Z+12, r4	; 0x0c
    5322:	55 86       	std	Z+13, r5	; 0x0d
    5324:	66 86       	std	Z+14, r6	; 0x0e
    5326:	77 86       	std	Z+15, r7	; 0x0f
    5328:	06 c0       	rjmp	.+12     	; 0x5336 <_nrk_scheduler+0x324>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    532a:	ea 81       	ldd	r30, Y+2	; 0x02
    532c:	fb 81       	ldd	r31, Y+3	; 0x03
    532e:	14 86       	std	Z+12, r1	; 0x0c
    5330:	15 86       	std	Z+13, r1	; 0x0d
    5332:	16 86       	std	Z+14, r1	; 0x0e
    5334:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    5336:	ea 81       	ldd	r30, Y+2	; 0x02
    5338:	fb 81       	ldd	r31, Y+3	; 0x03
    533a:	40 88       	ldd	r4, Z+16	; 0x10
    533c:	51 88       	ldd	r5, Z+17	; 0x11
    533e:	62 88       	ldd	r6, Z+18	; 0x12
    5340:	73 88       	ldd	r7, Z+19	; 0x13
    5342:	46 16       	cp	r4, r22
    5344:	57 06       	cpc	r5, r23
    5346:	68 06       	cpc	r6, r24
    5348:	79 06       	cpc	r7, r25
    534a:	48 f0       	brcs	.+18     	; 0x535e <_nrk_scheduler+0x34c>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    534c:	46 1a       	sub	r4, r22
    534e:	57 0a       	sbc	r5, r23
    5350:	68 0a       	sbc	r6, r24
    5352:	79 0a       	sbc	r7, r25
    5354:	40 8a       	std	Z+16, r4	; 0x10
    5356:	51 8a       	std	Z+17, r5	; 0x11
    5358:	62 8a       	std	Z+18, r6	; 0x12
    535a:	73 8a       	std	Z+19, r7	; 0x13
    535c:	1e c0       	rjmp	.+60     	; 0x539a <_nrk_scheduler+0x388>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    535e:	ea 81       	ldd	r30, Y+2	; 0x02
    5360:	fb 81       	ldd	r31, Y+3	; 0x03
    5362:	20 8d       	ldd	r18, Z+24	; 0x18
    5364:	31 8d       	ldd	r19, Z+25	; 0x19
    5366:	42 8d       	ldd	r20, Z+26	; 0x1a
    5368:	53 8d       	ldd	r21, Z+27	; 0x1b
    536a:	62 17       	cp	r22, r18
    536c:	73 07       	cpc	r23, r19
    536e:	84 07       	cpc	r24, r20
    5370:	95 07       	cpc	r25, r21
    5372:	58 f4       	brcc	.+22     	; 0x538a <_nrk_scheduler+0x378>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    5374:	29 01       	movw	r4, r18
    5376:	3a 01       	movw	r6, r20
    5378:	46 1a       	sub	r4, r22
    537a:	57 0a       	sbc	r5, r23
    537c:	68 0a       	sbc	r6, r24
    537e:	79 0a       	sbc	r7, r25
    5380:	40 8a       	std	Z+16, r4	; 0x10
    5382:	51 8a       	std	Z+17, r5	; 0x11
    5384:	62 8a       	std	Z+18, r6	; 0x12
    5386:	73 8a       	std	Z+19, r7	; 0x13
    5388:	08 c0       	rjmp	.+16     	; 0x539a <_nrk_scheduler+0x388>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    538a:	0e 94 a2 32 	call	0x6544	; 0x6544 <__udivmodsi4>
    538e:	ea 81       	ldd	r30, Y+2	; 0x02
    5390:	fb 81       	ldd	r31, Y+3	; 0x03
    5392:	60 8b       	std	Z+16, r22	; 0x10
    5394:	71 8b       	std	Z+17, r23	; 0x11
    5396:	82 8b       	std	Z+18, r24	; 0x12
    5398:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    539a:	ea 81       	ldd	r30, Y+2	; 0x02
    539c:	fb 81       	ldd	r31, Y+3	; 0x03
    539e:	80 89       	ldd	r24, Z+16	; 0x10
    53a0:	91 89       	ldd	r25, Z+17	; 0x11
    53a2:	a2 89       	ldd	r26, Z+18	; 0x12
    53a4:	b3 89       	ldd	r27, Z+19	; 0x13
    53a6:	89 2b       	or	r24, r25
    53a8:	8a 2b       	or	r24, r26
    53aa:	8b 2b       	or	r24, r27
    53ac:	41 f4       	brne	.+16     	; 0x53be <_nrk_scheduler+0x3ac>
    53ae:	80 8d       	ldd	r24, Z+24	; 0x18
    53b0:	91 8d       	ldd	r25, Z+25	; 0x19
    53b2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    53b4:	b3 8d       	ldd	r27, Z+27	; 0x1b
    53b6:	80 8b       	std	Z+16, r24	; 0x10
    53b8:	91 8b       	std	Z+17, r25	; 0x11
    53ba:	a2 8b       	std	Z+18, r26	; 0x12
    53bc:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    53be:	ea 81       	ldd	r30, Y+2	; 0x02
    53c0:	fb 81       	ldd	r31, Y+3	; 0x03
    53c2:	80 81       	ld	r24, Z
    53c4:	83 30       	cpi	r24, 0x03	; 3
    53c6:	09 f0       	breq	.+2      	; 0x53ca <_nrk_scheduler+0x3b8>
    53c8:	90 c0       	rjmp	.+288    	; 0x54ea <_nrk_scheduler+0x4d8>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    53ca:	84 85       	ldd	r24, Z+12	; 0x0c
    53cc:	95 85       	ldd	r25, Z+13	; 0x0d
    53ce:	a6 85       	ldd	r26, Z+14	; 0x0e
    53d0:	b7 85       	ldd	r27, Z+15	; 0x0f
    53d2:	89 2b       	or	r24, r25
    53d4:	8a 2b       	or	r24, r26
    53d6:	8b 2b       	or	r24, r27
    53d8:	09 f0       	breq	.+2      	; 0x53dc <_nrk_scheduler+0x3ca>
    53da:	74 c0       	rjmp	.+232    	; 0x54c4 <_nrk_scheduler+0x4b2>
    53dc:	df 01       	movw	r26, r30
    53de:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    53e0:	8c 91       	ld	r24, X
    53e2:	9f 01       	movw	r18, r30
    53e4:	23 50       	subi	r18, 0x03	; 3
    53e6:	31 09       	sbc	r19, r1
    53e8:	88 23       	and	r24, r24
    53ea:	a9 f0       	breq	.+42     	; 0x5416 <_nrk_scheduler+0x404>
    53ec:	f9 01       	movw	r30, r18
    53ee:	80 81       	ld	r24, Z
    53f0:	88 23       	and	r24, r24
    53f2:	89 f0       	breq	.+34     	; 0x5416 <_nrk_scheduler+0x404>
    53f4:	b5 01       	movw	r22, r10
    53f6:	a4 01       	movw	r20, r8
    53f8:	00 90 d1 0b 	lds	r0, 0x0BD1
    53fc:	04 c0       	rjmp	.+8      	; 0x5406 <_nrk_scheduler+0x3f4>
    53fe:	44 0f       	add	r20, r20
    5400:	55 1f       	adc	r21, r21
    5402:	66 1f       	adc	r22, r22
    5404:	77 1f       	adc	r23, r23
    5406:	0a 94       	dec	r0
    5408:	d2 f7       	brpl	.-12     	; 0x53fe <_nrk_scheduler+0x3ec>
    540a:	ea 81       	ldd	r30, Y+2	; 0x02
    540c:	fb 81       	ldd	r31, Y+3	; 0x03
    540e:	40 87       	std	Z+8, r20	; 0x08
    5410:	51 87       	std	Z+9, r21	; 0x09
    5412:	62 87       	std	Z+10, r22	; 0x0a
    5414:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    5416:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    5418:	f9 01       	movw	r30, r18
    541a:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    541c:	ea 81       	ldd	r30, Y+2	; 0x02
    541e:	fb 81       	ldd	r31, Y+3	; 0x03
    5420:	a0 a1       	ldd	r26, Z+32	; 0x20
    5422:	b1 a1       	ldd	r27, Z+33	; 0x21
    5424:	a1 30       	cpi	r26, 0x01	; 1
    5426:	b1 05       	cpc	r27, r1
    5428:	19 f5       	brne	.+70     	; 0x5470 <_nrk_scheduler+0x45e>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    542a:	84 8d       	ldd	r24, Z+28	; 0x1c
    542c:	95 8d       	ldd	r25, Z+29	; 0x1d
    542e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    5430:	b7 8d       	ldd	r27, Z+31	; 0x1f
    5432:	84 8b       	std	Z+20, r24	; 0x14
    5434:	95 8b       	std	Z+21, r25	; 0x15
    5436:	a6 8b       	std	Z+22, r26	; 0x16
    5438:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    543a:	92 e0       	ldi	r25, 0x02	; 2
    543c:	49 2e       	mov	r4, r25
    543e:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    5440:	80 89       	ldd	r24, Z+16	; 0x10
    5442:	91 89       	ldd	r25, Z+17	; 0x11
    5444:	a2 89       	ldd	r26, Z+18	; 0x12
    5446:	b3 89       	ldd	r27, Z+19	; 0x13
    5448:	84 87       	std	Z+12, r24	; 0x0c
    544a:	95 87       	std	Z+13, r25	; 0x0d
    544c:	a6 87       	std	Z+14, r26	; 0x0e
    544e:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5450:	80 8d       	ldd	r24, Z+24	; 0x18
    5452:	91 8d       	ldd	r25, Z+25	; 0x19
    5454:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5456:	b3 8d       	ldd	r27, Z+27	; 0x1b
    5458:	89 2b       	or	r24, r25
    545a:	8a 2b       	or	r24, r26
    545c:	8b 2b       	or	r24, r27
    545e:	21 f4       	brne	.+8      	; 0x5468 <_nrk_scheduler+0x456>
    5460:	c4 86       	std	Z+12, r12	; 0x0c
    5462:	d5 86       	std	Z+13, r13	; 0x0d
    5464:	e6 86       	std	Z+14, r14	; 0x0e
    5466:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    5468:	89 81       	ldd	r24, Y+1	; 0x01
    546a:	0e 94 1a 22 	call	0x4434	; 0x4434 <nrk_add_to_readyQ>
    546e:	2a c0       	rjmp	.+84     	; 0x54c4 <_nrk_scheduler+0x4b2>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    5470:	ea 81       	ldd	r30, Y+2	; 0x02
    5472:	fb 81       	ldd	r31, Y+3	; 0x03
    5474:	44 8d       	ldd	r20, Z+28	; 0x1c
    5476:	55 8d       	ldd	r21, Z+29	; 0x1d
    5478:	66 8d       	ldd	r22, Z+30	; 0x1e
    547a:	77 8d       	ldd	r23, Z+31	; 0x1f
    547c:	44 8b       	std	Z+20, r20	; 0x14
    547e:	55 8b       	std	Z+21, r21	; 0x15
    5480:	66 8b       	std	Z+22, r22	; 0x16
    5482:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    5484:	40 8c       	ldd	r4, Z+24	; 0x18
    5486:	51 8c       	ldd	r5, Z+25	; 0x19
    5488:	62 8c       	ldd	r6, Z+26	; 0x1a
    548a:	73 8c       	ldd	r7, Z+27	; 0x1b
    548c:	11 97       	sbiw	r26, 0x01	; 1
    548e:	a3 01       	movw	r20, r6
    5490:	92 01       	movw	r18, r4
    5492:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__muluhisi3>
    5496:	64 87       	std	Z+12, r22	; 0x0c
    5498:	75 87       	std	Z+13, r23	; 0x0d
    549a:	86 87       	std	Z+14, r24	; 0x0e
    549c:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    549e:	60 8b       	std	Z+16, r22	; 0x10
    54a0:	71 8b       	std	Z+17, r23	; 0x11
    54a2:	82 8b       	std	Z+18, r24	; 0x12
    54a4:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    54a6:	45 28       	or	r4, r5
    54a8:	46 28       	or	r4, r6
    54aa:	47 28       	or	r4, r7
    54ac:	21 f4       	brne	.+8      	; 0x54b6 <_nrk_scheduler+0x4a4>
    54ae:	c4 86       	std	Z+12, r12	; 0x0c
    54b0:	d5 86       	std	Z+13, r13	; 0x0d
    54b2:	e6 86       	std	Z+14, r14	; 0x0e
    54b4:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    54b6:	44 24       	eor	r4, r4
    54b8:	43 94       	inc	r4
    54ba:	51 2c       	mov	r5, r1
    54bc:	ea 81       	ldd	r30, Y+2	; 0x02
    54be:	fb 81       	ldd	r31, Y+3	; 0x03
    54c0:	51 a2       	std	Z+33, r5	; 0x21
    54c2:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    54c4:	ea 81       	ldd	r30, Y+2	; 0x02
    54c6:	fb 81       	ldd	r31, Y+3	; 0x03
    54c8:	84 85       	ldd	r24, Z+12	; 0x0c
    54ca:	95 85       	ldd	r25, Z+13	; 0x0d
    54cc:	a6 85       	ldd	r26, Z+14	; 0x0e
    54ce:	b7 85       	ldd	r27, Z+15	; 0x0f
    54d0:	00 97       	sbiw	r24, 0x00	; 0
    54d2:	a1 05       	cpc	r26, r1
    54d4:	b1 05       	cpc	r27, r1
    54d6:	49 f0       	breq	.+18     	; 0x54ea <_nrk_scheduler+0x4d8>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    54d8:	a8 01       	movw	r20, r16
    54da:	60 e0       	ldi	r22, 0x00	; 0
    54dc:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    54de:	84 17       	cp	r24, r20
    54e0:	95 07       	cpc	r25, r21
    54e2:	a6 07       	cpc	r26, r22
    54e4:	b7 07       	cpc	r27, r23
    54e6:	08 f4       	brcc	.+2      	; 0x54ea <_nrk_scheduler+0x4d8>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    54e8:	8c 01       	movw	r16, r24
    54ea:	f9 81       	ldd	r31, Y+1	; 0x01
    54ec:	ff 5f       	subi	r31, 0xFF	; 255
    54ee:	f9 83       	std	Y+1, r31	; 0x01
    54f0:	2a 81       	ldd	r18, Y+2	; 0x02
    54f2:	3b 81       	ldd	r19, Y+3	; 0x03
    54f4:	25 5d       	subi	r18, 0xD5	; 213
    54f6:	3f 4f       	sbci	r19, 0xFF	; 255
    54f8:	3b 83       	std	Y+3, r19	; 0x03
    54fa:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    54fc:	f5 30       	cpi	r31, 0x05	; 5
    54fe:	09 f0       	breq	.+2      	; 0x5502 <_nrk_scheduler+0x4f0>
    5500:	e9 ce       	rjmp	.-558    	; 0x52d4 <_nrk_scheduler+0x2c2>
        }
    }


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
    5502:	e0 91 e1 0b 	lds	r30, 0x0BE1
    5506:	f0 91 e2 0b 	lds	r31, 0x0BE2
    550a:	80 85       	ldd	r24, Z+8	; 0x08
    550c:	0e 94 03 19 	call	0x3206	; 0x3206 <_nrk_stats_task_start>
#endif
    task_ID = nrk_get_high_ready_task_ID();
    5510:	0e 94 09 22 	call	0x4412	; 0x4412 <nrk_get_high_ready_task_ID>
    5514:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    5516:	3b e2       	ldi	r19, 0x2B	; 43
    5518:	83 02       	muls	r24, r19
    551a:	f0 01       	movw	r30, r0
    551c:	11 24       	eor	r1, r1
    551e:	ef 50       	subi	r30, 0x0F	; 15
    5520:	f5 4f       	sbci	r31, 0xF5	; 245
    5522:	22 85       	ldd	r18, Z+10	; 0x0a
    5524:	20 93 e3 0b 	sts	0x0BE3, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    5528:	f0 93 d3 0b 	sts	0x0BD3, r31
    552c:	e0 93 d2 0b 	sts	0x0BD2, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    5530:	88 23       	and	r24, r24
    5532:	f9 f0       	breq	.+62     	; 0x5572 <_nrk_scheduler+0x560>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    5534:	85 a1       	ldd	r24, Z+37	; 0x25
    5536:	96 a1       	ldd	r25, Z+38	; 0x26
    5538:	a7 a1       	ldd	r26, Z+39	; 0x27
    553a:	b0 a5       	ldd	r27, Z+40	; 0x28
    553c:	89 2b       	or	r24, r25
    553e:	8a 2b       	or	r24, r26
    5540:	8b 2b       	or	r24, r27
    5542:	99 f0       	breq	.+38     	; 0x556a <_nrk_scheduler+0x558>
    5544:	85 8d       	ldd	r24, Z+29	; 0x1d
    5546:	96 8d       	ldd	r25, Z+30	; 0x1e
    5548:	a7 8d       	ldd	r26, Z+31	; 0x1f
    554a:	b0 a1       	ldd	r27, Z+32	; 0x20
    554c:	8a 3f       	cpi	r24, 0xFA	; 250
    554e:	91 05       	cpc	r25, r1
    5550:	a1 05       	cpc	r26, r1
    5552:	b1 05       	cpc	r27, r1
    5554:	50 f4       	brcc	.+20     	; 0x556a <_nrk_scheduler+0x558>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    5556:	a8 01       	movw	r20, r16
    5558:	60 e0       	ldi	r22, 0x00	; 0
    555a:	70 e0       	ldi	r23, 0x00	; 0
    555c:	84 17       	cp	r24, r20
    555e:	95 07       	cpc	r25, r21
    5560:	a6 07       	cpc	r26, r22
    5562:	b7 07       	cpc	r27, r23
    5564:	e8 f4       	brcc	.+58     	; 0x55a0 <_nrk_scheduler+0x58e>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    5566:	8c 01       	movw	r16, r24
    5568:	1b c0       	rjmp	.+54     	; 0x55a0 <_nrk_scheduler+0x58e>
    556a:	0b 3f       	cpi	r16, 0xFB	; 251
    556c:	11 05       	cpc	r17, r1
    556e:	c0 f0       	brcs	.+48     	; 0x55a0 <_nrk_scheduler+0x58e>
    5570:	12 c0       	rjmp	.+36     	; 0x5596 <_nrk_scheduler+0x584>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    5572:	04 30       	cpi	r16, 0x04	; 4
    5574:	11 05       	cpc	r17, r1
    5576:	a0 f0       	brcs	.+40     	; 0x55a0 <_nrk_scheduler+0x58e>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    5578:	c8 01       	movw	r24, r16
    557a:	03 97       	sbiw	r24, 0x03	; 3
    557c:	8a 3f       	cpi	r24, 0xFA	; 250
    557e:	91 05       	cpc	r25, r1
    5580:	38 f4       	brcc	.+14     	; 0x5590 <_nrk_scheduler+0x57e>
    5582:	8c 01       	movw	r16, r24
    5584:	82 30       	cpi	r24, 0x02	; 2
    5586:	91 05       	cpc	r25, r1
    5588:	58 f4       	brcc	.+22     	; 0x55a0 <_nrk_scheduler+0x58e>
    558a:	02 e0       	ldi	r16, 0x02	; 2
    558c:	10 e0       	ldi	r17, 0x00	; 0
    558e:	08 c0       	rjmp	.+16     	; 0x55a0 <_nrk_scheduler+0x58e>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    5590:	0d 3f       	cpi	r16, 0xFD	; 253
    5592:	11 05       	cpc	r17, r1
    5594:	19 f0       	breq	.+6      	; 0x559c <_nrk_scheduler+0x58a>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    5596:	0a ef       	ldi	r16, 0xFA	; 250
    5598:	10 e0       	ldi	r17, 0x00	; 0
    559a:	02 c0       	rjmp	.+4      	; 0x55a0 <_nrk_scheduler+0x58e>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    559c:	07 ef       	ldi	r16, 0xF7	; 247
    559e:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    55a0:	20 93 d4 0b 	sts	0x0BD4, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    55a4:	f0 93 e2 0b 	sts	0x0BE2, r31
    55a8:	e0 93 e1 0b 	sts	0x0BE1, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    55ac:	00 93 81 09 	sts	0x0981, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    55b0:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_nrk_os_timer_get>
    55b4:	28 2f       	mov	r18, r24
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	2f 5f       	subi	r18, 0xFF	; 255
    55ba:	3f 4f       	sbci	r19, 0xFF	; 255
    55bc:	20 17       	cp	r18, r16
    55be:	31 07       	cpc	r19, r17
    55c0:	40 f0       	brcs	.+16     	; 0x55d2 <_nrk_scheduler+0x5c0>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    55c2:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_nrk_os_timer_get>
    55c6:	08 2f       	mov	r16, r24
    55c8:	10 e0       	ldi	r17, 0x00	; 0
    55ca:	0e 5f       	subi	r16, 0xFE	; 254
    55cc:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    55ce:	00 93 81 09 	sts	0x0981, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    55d2:	f1 10       	cpse	r15, r1
    55d4:	10 92 d5 0b 	sts	0x0BD5, r1

    _nrk_set_next_wakeup(next_wake);
    55d8:	80 2f       	mov	r24, r16
    55da:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    55de:	6c ed       	ldi	r22, 0xDC	; 220
    55e0:	75 e0       	ldi	r23, 0x05	; 5
    55e2:	c1 01       	movw	r24, r2
    55e4:	0e 94 ab 2c 	call	0x5956	; 0x5956 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    55e8:	0e 94 c8 30 	call	0x6190	; 0x6190 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    55ec:	0f 90       	pop	r0
    55ee:	0f 90       	pop	r0
    55f0:	0f 90       	pop	r0
    55f2:	df 91       	pop	r29
    55f4:	cf 91       	pop	r28
    55f6:	1f 91       	pop	r17
    55f8:	0f 91       	pop	r16
    55fa:	ff 90       	pop	r15
    55fc:	ef 90       	pop	r14
    55fe:	df 90       	pop	r13
    5600:	cf 90       	pop	r12
    5602:	bf 90       	pop	r11
    5604:	af 90       	pop	r10
    5606:	9f 90       	pop	r9
    5608:	8f 90       	pop	r8
    560a:	7f 90       	pop	r7
    560c:	6f 90       	pop	r6
    560e:	5f 90       	pop	r5
    5610:	4f 90       	pop	r4
    5612:	3f 90       	pop	r3
    5614:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    5616:	0c 94 d3 30 	jmp	0x61a6	; 0x61a6 <nrk_start_high_ready_task>

0000561a <_nrk_sw_wdt_check>:
    561a:	3f 92       	push	r3
    561c:	4f 92       	push	r4
    561e:	5f 92       	push	r5
    5620:	6f 92       	push	r6
    5622:	7f 92       	push	r7
    5624:	8f 92       	push	r8
    5626:	9f 92       	push	r9
    5628:	af 92       	push	r10
    562a:	bf 92       	push	r11
    562c:	cf 92       	push	r12
    562e:	df 92       	push	r13
    5630:	ef 92       	push	r14
    5632:	ff 92       	push	r15
    5634:	0f 93       	push	r16
    5636:	1f 93       	push	r17
    5638:	cf 93       	push	r28
    563a:	df 93       	push	r29
    563c:	cd b7       	in	r28, 0x3d	; 61
    563e:	de b7       	in	r29, 0x3e	; 62
    5640:	60 97       	sbiw	r28, 0x10	; 16
    5642:	0f b6       	in	r0, 0x3f	; 63
    5644:	f8 94       	cli
    5646:	de bf       	out	0x3e, r29	; 62
    5648:	0f be       	out	0x3f, r0	; 63
    564a:	cd bf       	out	0x3d, r28	; 61
    564c:	ce 01       	movw	r24, r28
    564e:	09 96       	adiw	r24, 0x09	; 9
    5650:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <nrk_time_get>
    5654:	84 ee       	ldi	r24, 0xE4	; 228
    5656:	48 2e       	mov	r4, r24
    5658:	8b e0       	ldi	r24, 0x0B	; 11
    565a:	58 2e       	mov	r5, r24
    565c:	61 2c       	mov	r6, r1
    565e:	71 2c       	mov	r7, r1
    5660:	93 e1       	ldi	r25, 0x13	; 19
    5662:	39 2e       	mov	r3, r25
    5664:	d2 01       	movw	r26, r4
    5666:	12 96       	adiw	r26, 0x02	; 2
    5668:	8c 91       	ld	r24, X
    566a:	81 30       	cpi	r24, 0x01	; 1
    566c:	51 f5       	brne	.+84     	; 0x56c2 <_nrk_sw_wdt_check+0xa8>
    566e:	36 9c       	mul	r3, r6
    5670:	f0 01       	movw	r30, r0
    5672:	37 9c       	mul	r3, r7
    5674:	f0 0d       	add	r31, r0
    5676:	11 24       	eor	r1, r1
    5678:	e1 51       	subi	r30, 0x11	; 17
    567a:	f4 4f       	sbci	r31, 0xF4	; 244
    567c:	89 84       	ldd	r8, Y+9	; 0x09
    567e:	9a 84       	ldd	r9, Y+10	; 0x0a
    5680:	ab 84       	ldd	r10, Y+11	; 0x0b
    5682:	bc 84       	ldd	r11, Y+12	; 0x0c
    5684:	cd 84       	ldd	r12, Y+13	; 0x0d
    5686:	de 84       	ldd	r13, Y+14	; 0x0e
    5688:	ef 84       	ldd	r14, Y+15	; 0x0f
    568a:	f8 88       	ldd	r15, Y+16	; 0x10
    568c:	00 81       	ld	r16, Z
    568e:	11 81       	ldd	r17, Z+1	; 0x01
    5690:	22 81       	ldd	r18, Z+2	; 0x02
    5692:	33 81       	ldd	r19, Z+3	; 0x03
    5694:	44 81       	ldd	r20, Z+4	; 0x04
    5696:	55 81       	ldd	r21, Z+5	; 0x05
    5698:	66 81       	ldd	r22, Z+6	; 0x06
    569a:	77 81       	ldd	r23, Z+7	; 0x07
    569c:	ce 01       	movw	r24, r28
    569e:	01 96       	adiw	r24, 0x01	; 1
    56a0:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <nrk_time_sub>
    56a4:	8f 3f       	cpi	r24, 0xFF	; 255
    56a6:	69 f4       	brne	.+26     	; 0x56c2 <_nrk_sw_wdt_check+0xa8>
    56a8:	66 2d       	mov	r22, r6
    56aa:	85 e1       	ldi	r24, 0x15	; 21
    56ac:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
    56b0:	d2 01       	movw	r26, r4
    56b2:	ed 91       	ld	r30, X+
    56b4:	fc 91       	ld	r31, X
    56b6:	30 97       	sbiw	r30, 0x00	; 0
    56b8:	19 f4       	brne	.+6      	; 0x56c0 <_nrk_sw_wdt_check+0xa6>
    56ba:	0e 94 d6 16 	call	0x2dac	; 0x2dac <nrk_halt>
    56be:	01 c0       	rjmp	.+2      	; 0x56c2 <_nrk_sw_wdt_check+0xa8>
    56c0:	09 95       	icall
    56c2:	bf ef       	ldi	r27, 0xFF	; 255
    56c4:	6b 1a       	sub	r6, r27
    56c6:	7b 0a       	sbc	r7, r27
    56c8:	e3 e1       	ldi	r30, 0x13	; 19
    56ca:	4e 0e       	add	r4, r30
    56cc:	51 1c       	adc	r5, r1
    56ce:	f3 e0       	ldi	r31, 0x03	; 3
    56d0:	6f 16       	cp	r6, r31
    56d2:	71 04       	cpc	r7, r1
    56d4:	39 f6       	brne	.-114    	; 0x5664 <_nrk_sw_wdt_check+0x4a>
    56d6:	60 96       	adiw	r28, 0x10	; 16
    56d8:	0f b6       	in	r0, 0x3f	; 63
    56da:	f8 94       	cli
    56dc:	de bf       	out	0x3e, r29	; 62
    56de:	0f be       	out	0x3f, r0	; 63
    56e0:	cd bf       	out	0x3d, r28	; 61
    56e2:	df 91       	pop	r29
    56e4:	cf 91       	pop	r28
    56e6:	1f 91       	pop	r17
    56e8:	0f 91       	pop	r16
    56ea:	ff 90       	pop	r15
    56ec:	ef 90       	pop	r14
    56ee:	df 90       	pop	r13
    56f0:	cf 90       	pop	r12
    56f2:	bf 90       	pop	r11
    56f4:	af 90       	pop	r10
    56f6:	9f 90       	pop	r9
    56f8:	8f 90       	pop	r8
    56fa:	7f 90       	pop	r7
    56fc:	6f 90       	pop	r6
    56fe:	5f 90       	pop	r5
    5700:	4f 90       	pop	r4
    5702:	3f 90       	pop	r3
    5704:	08 95       	ret

00005706 <_nrk_sw_wdt_init>:

void _nrk_sw_wdt_init()
{
    uint8_t i;
    for(i=0; i<NRK_MAX_SW_WDT; i++ )
        sw_wdts[i].active=0;
    5706:	e4 ee       	ldi	r30, 0xE4	; 228
    5708:	fb e0       	ldi	r31, 0x0B	; 11
    570a:	12 82       	std	Z+2, r1	; 0x02
    570c:	15 8a       	std	Z+21, r1	; 0x15
    570e:	10 a6       	std	Z+40, r1	; 0x28
    5710:	08 95       	ret

00005712 <nrk_sw_wdt_init>:
}

int8_t nrk_sw_wdt_init(uint8_t id, nrk_time_t *period, void *func)
{
    5712:	cf 93       	push	r28
    5714:	df 93       	push	r29
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    5716:	83 30       	cpi	r24, 0x03	; 3
    5718:	e0 f4       	brcc	.+56     	; 0x5752 <nrk_sw_wdt_init+0x40>
    sw_wdts[id].error_func=func;
    571a:	93 e1       	ldi	r25, 0x13	; 19
    571c:	89 9f       	mul	r24, r25
    571e:	f0 01       	movw	r30, r0
    5720:	11 24       	eor	r1, r1
    5722:	ec 51       	subi	r30, 0x1C	; 28
    5724:	f4 4f       	sbci	r31, 0xF4	; 244
    5726:	51 83       	std	Z+1, r21	; 0x01
    5728:	40 83       	st	Z, r20
    sw_wdts[id].period.secs=period->secs;
    572a:	eb 01       	movw	r28, r22
    572c:	88 81       	ld	r24, Y
    572e:	99 81       	ldd	r25, Y+1	; 0x01
    5730:	aa 81       	ldd	r26, Y+2	; 0x02
    5732:	bb 81       	ldd	r27, Y+3	; 0x03
    5734:	83 83       	std	Z+3, r24	; 0x03
    5736:	94 83       	std	Z+4, r25	; 0x04
    5738:	a5 83       	std	Z+5, r26	; 0x05
    573a:	b6 83       	std	Z+6, r27	; 0x06
    sw_wdts[id].period.nano_secs=period->nano_secs;
    573c:	8c 81       	ldd	r24, Y+4	; 0x04
    573e:	9d 81       	ldd	r25, Y+5	; 0x05
    5740:	ae 81       	ldd	r26, Y+6	; 0x06
    5742:	bf 81       	ldd	r27, Y+7	; 0x07
    5744:	87 83       	std	Z+7, r24	; 0x07
    5746:	90 87       	std	Z+8, r25	; 0x08
    5748:	a1 87       	std	Z+9, r26	; 0x09
    574a:	b2 87       	std	Z+10, r27	; 0x0a
    sw_wdts[id].active=0;
    574c:	12 82       	std	Z+2, r1	; 0x02
    return NRK_OK;
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	01 c0       	rjmp	.+2      	; 0x5754 <nrk_sw_wdt_init+0x42>
        sw_wdts[i].active=0;
}

int8_t nrk_sw_wdt_init(uint8_t id, nrk_time_t *period, void *func)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    5752:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].error_func=func;
    sw_wdts[id].period.secs=period->secs;
    sw_wdts[id].period.nano_secs=period->nano_secs;
    sw_wdts[id].active=0;
    return NRK_OK;
}
    5754:	df 91       	pop	r29
    5756:	cf 91       	pop	r28
    5758:	08 95       	ret

0000575a <nrk_sw_wdt_update>:

int8_t nrk_sw_wdt_update(uint8_t id)
{
    575a:	cf 92       	push	r12
    575c:	df 92       	push	r13
    575e:	ef 92       	push	r14
    5760:	ff 92       	push	r15
    5762:	0f 93       	push	r16
    5764:	1f 93       	push	r17
    5766:	cf 93       	push	r28
    5768:	df 93       	push	r29
    576a:	cd b7       	in	r28, 0x3d	; 61
    576c:	de b7       	in	r29, 0x3e	; 62
    576e:	28 97       	sbiw	r28, 0x08	; 8
    5770:	0f b6       	in	r0, 0x3f	; 63
    5772:	f8 94       	cli
    5774:	de bf       	out	0x3e, r29	; 62
    5776:	0f be       	out	0x3f, r0	; 63
    5778:	cd bf       	out	0x3d, r28	; 61
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    577a:	83 30       	cpi	r24, 0x03	; 3
    577c:	a8 f5       	brcc	.+106    	; 0x57e8 <nrk_sw_wdt_update+0x8e>
    577e:	18 2f       	mov	r17, r24
    nrk_time_get(&now);
    5780:	ce 01       	movw	r24, r28
    5782:	01 96       	adiw	r24, 0x01	; 1
    5784:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <nrk_time_get>
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    5788:	23 e1       	ldi	r18, 0x13	; 19
    578a:	12 9f       	mul	r17, r18
    578c:	c0 01       	movw	r24, r0
    578e:	11 24       	eor	r1, r1
    5790:	8c 01       	movw	r16, r24
    5792:	0c 51       	subi	r16, 0x1C	; 28
    5794:	14 4f       	sbci	r17, 0xF4	; 244
    5796:	f8 01       	movw	r30, r16
    5798:	c3 80       	ldd	r12, Z+3	; 0x03
    579a:	d4 80       	ldd	r13, Z+4	; 0x04
    579c:	e5 80       	ldd	r14, Z+5	; 0x05
    579e:	f6 80       	ldd	r15, Z+6	; 0x06
    57a0:	49 81       	ldd	r20, Y+1	; 0x01
    57a2:	5a 81       	ldd	r21, Y+2	; 0x02
    57a4:	6b 81       	ldd	r22, Y+3	; 0x03
    57a6:	7c 81       	ldd	r23, Y+4	; 0x04
    57a8:	4c 0d       	add	r20, r12
    57aa:	5d 1d       	adc	r21, r13
    57ac:	6e 1d       	adc	r22, r14
    57ae:	7f 1d       	adc	r23, r15
    57b0:	43 87       	std	Z+11, r20	; 0x0b
    57b2:	54 87       	std	Z+12, r21	; 0x0c
    57b4:	65 87       	std	Z+13, r22	; 0x0d
    57b6:	76 87       	std	Z+14, r23	; 0x0e
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    57b8:	c7 80       	ldd	r12, Z+7	; 0x07
    57ba:	d0 84       	ldd	r13, Z+8	; 0x08
    57bc:	e1 84       	ldd	r14, Z+9	; 0x09
    57be:	f2 84       	ldd	r15, Z+10	; 0x0a
    57c0:	4d 81       	ldd	r20, Y+5	; 0x05
    57c2:	5e 81       	ldd	r21, Y+6	; 0x06
    57c4:	6f 81       	ldd	r22, Y+7	; 0x07
    57c6:	78 85       	ldd	r23, Y+8	; 0x08
    57c8:	4c 0d       	add	r20, r12
    57ca:	5d 1d       	adc	r21, r13
    57cc:	6e 1d       	adc	r22, r14
    57ce:	7f 1d       	adc	r23, r15
    57d0:	47 87       	std	Z+15, r20	; 0x0f
    57d2:	50 8b       	std	Z+16, r21	; 0x10
    57d4:	61 8b       	std	Z+17, r22	; 0x11
    57d6:	72 8b       	std	Z+18, r23	; 0x12
    nrk_time_compact_nanos(&(sw_wdts[id].next_period));
    57d8:	81 51       	subi	r24, 0x11	; 17
    57da:	94 4f       	sbci	r25, 0xF4	; 244
    57dc:	0e 94 44 26 	call	0x4c88	; 0x4c88 <nrk_time_compact_nanos>
    sw_wdts[id].active=1;
    57e0:	81 e0       	ldi	r24, 0x01	; 1
    57e2:	f8 01       	movw	r30, r16
    57e4:	82 83       	std	Z+2, r24	; 0x02
    return NRK_OK;
    57e6:	01 c0       	rjmp	.+2      	; 0x57ea <nrk_sw_wdt_update+0x90>
}

int8_t nrk_sw_wdt_update(uint8_t id)
{
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    57e8:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    nrk_time_compact_nanos(&(sw_wdts[id].next_period));
    sw_wdts[id].active=1;
    return NRK_OK;
}
    57ea:	28 96       	adiw	r28, 0x08	; 8
    57ec:	0f b6       	in	r0, 0x3f	; 63
    57ee:	f8 94       	cli
    57f0:	de bf       	out	0x3e, r29	; 62
    57f2:	0f be       	out	0x3f, r0	; 63
    57f4:	cd bf       	out	0x3d, r28	; 61
    57f6:	df 91       	pop	r29
    57f8:	cf 91       	pop	r28
    57fa:	1f 91       	pop	r17
    57fc:	0f 91       	pop	r16
    57fe:	ff 90       	pop	r15
    5800:	ef 90       	pop	r14
    5802:	df 90       	pop	r13
    5804:	cf 90       	pop	r12
    5806:	08 95       	ret

00005808 <nrk_sw_wdt_start>:

int8_t nrk_sw_wdt_start(uint8_t id)
{
    5808:	1f 93       	push	r17
    580a:	cf 93       	push	r28
    580c:	df 93       	push	r29
    580e:	cd b7       	in	r28, 0x3d	; 61
    5810:	de b7       	in	r29, 0x3e	; 62
    5812:	28 97       	sbiw	r28, 0x08	; 8
    5814:	0f b6       	in	r0, 0x3f	; 63
    5816:	f8 94       	cli
    5818:	de bf       	out	0x3e, r29	; 62
    581a:	0f be       	out	0x3f, r0	; 63
    581c:	cd bf       	out	0x3d, r28	; 61
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    581e:	83 30       	cpi	r24, 0x03	; 3
    5820:	70 f5       	brcc	.+92     	; 0x587e <nrk_sw_wdt_start+0x76>
    5822:	18 2f       	mov	r17, r24
    nrk_time_get(&now);
    5824:	ce 01       	movw	r24, r28
    5826:	01 96       	adiw	r24, 0x01	; 1
    5828:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <nrk_time_get>
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    582c:	83 e1       	ldi	r24, 0x13	; 19
    582e:	18 9f       	mul	r17, r24
    5830:	f0 01       	movw	r30, r0
    5832:	11 24       	eor	r1, r1
    5834:	ec 51       	subi	r30, 0x1C	; 28
    5836:	f4 4f       	sbci	r31, 0xF4	; 244
    5838:	43 81       	ldd	r20, Z+3	; 0x03
    583a:	54 81       	ldd	r21, Z+4	; 0x04
    583c:	65 81       	ldd	r22, Z+5	; 0x05
    583e:	76 81       	ldd	r23, Z+6	; 0x06
    5840:	89 81       	ldd	r24, Y+1	; 0x01
    5842:	9a 81       	ldd	r25, Y+2	; 0x02
    5844:	ab 81       	ldd	r26, Y+3	; 0x03
    5846:	bc 81       	ldd	r27, Y+4	; 0x04
    5848:	84 0f       	add	r24, r20
    584a:	95 1f       	adc	r25, r21
    584c:	a6 1f       	adc	r26, r22
    584e:	b7 1f       	adc	r27, r23
    5850:	83 87       	std	Z+11, r24	; 0x0b
    5852:	94 87       	std	Z+12, r25	; 0x0c
    5854:	a5 87       	std	Z+13, r26	; 0x0d
    5856:	b6 87       	std	Z+14, r27	; 0x0e
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    5858:	47 81       	ldd	r20, Z+7	; 0x07
    585a:	50 85       	ldd	r21, Z+8	; 0x08
    585c:	61 85       	ldd	r22, Z+9	; 0x09
    585e:	72 85       	ldd	r23, Z+10	; 0x0a
    5860:	8d 81       	ldd	r24, Y+5	; 0x05
    5862:	9e 81       	ldd	r25, Y+6	; 0x06
    5864:	af 81       	ldd	r26, Y+7	; 0x07
    5866:	b8 85       	ldd	r27, Y+8	; 0x08
    5868:	84 0f       	add	r24, r20
    586a:	95 1f       	adc	r25, r21
    586c:	a6 1f       	adc	r26, r22
    586e:	b7 1f       	adc	r27, r23
    5870:	87 87       	std	Z+15, r24	; 0x0f
    5872:	90 8b       	std	Z+16, r25	; 0x10
    5874:	a1 8b       	std	Z+17, r26	; 0x11
    5876:	b2 8b       	std	Z+18, r27	; 0x12
    sw_wdts[id].active=1;
    5878:	81 e0       	ldi	r24, 0x01	; 1
    587a:	82 83       	std	Z+2, r24	; 0x02

    return NRK_OK;
    587c:	01 c0       	rjmp	.+2      	; 0x5880 <nrk_sw_wdt_start+0x78>
}

int8_t nrk_sw_wdt_start(uint8_t id)
{
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    587e:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    sw_wdts[id].active=1;

    return NRK_OK;
}
    5880:	28 96       	adiw	r28, 0x08	; 8
    5882:	0f b6       	in	r0, 0x3f	; 63
    5884:	f8 94       	cli
    5886:	de bf       	out	0x3e, r29	; 62
    5888:	0f be       	out	0x3f, r0	; 63
    588a:	cd bf       	out	0x3d, r28	; 61
    588c:	df 91       	pop	r29
    588e:	cf 91       	pop	r28
    5890:	1f 91       	pop	r17
    5892:	08 95       	ret

00005894 <nrk_sw_wdt_stop>:

int8_t nrk_sw_wdt_stop(uint8_t id)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    5894:	83 30       	cpi	r24, 0x03	; 3
    5896:	48 f4       	brcc	.+18     	; 0x58aa <nrk_sw_wdt_stop+0x16>
    sw_wdts[id].active=0;
    5898:	93 e1       	ldi	r25, 0x13	; 19
    589a:	89 9f       	mul	r24, r25
    589c:	f0 01       	movw	r30, r0
    589e:	11 24       	eor	r1, r1
    58a0:	ec 51       	subi	r30, 0x1C	; 28
    58a2:	f4 4f       	sbci	r31, 0xF4	; 244
    58a4:	12 82       	std	Z+2, r1	; 0x02
    return NRK_OK;
    58a6:	81 e0       	ldi	r24, 0x01	; 1
    58a8:	08 95       	ret
    return NRK_OK;
}

int8_t nrk_sw_wdt_stop(uint8_t id)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    58aa:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].active=0;
    return NRK_OK;
}
    58ac:	08 95       	ret

000058ae <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    58c6:	01 97       	sbiw	r24, 0x01	; 1
    58c8:	91 f7       	brne	.-28     	; 0x58ae <nrk_spin_wait_us>

}
    58ca:	08 95       	ret

000058cc <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    58cc:	10 92 21 01 	sts	0x0121, r1
    58d0:	08 95       	ret

000058d2 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    58d2:	89 e0       	ldi	r24, 0x09	; 9
    58d4:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    58d8:	8d e8       	ldi	r24, 0x8D	; 141
    58da:	9c e3       	ldi	r25, 0x3C	; 60
    58dc:	90 93 29 01 	sts	0x0129, r25
    58e0:	80 93 28 01 	sts	0x0128, r24
    58e4:	08 95       	ret

000058e6 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    58e6:	10 92 25 01 	sts	0x0125, r1
    58ea:	10 92 24 01 	sts	0x0124, r1
    58ee:	08 95       	ret

000058f0 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    58f0:	cf 93       	push	r28
    58f2:	df 93       	push	r29
    58f4:	00 d0       	rcall	.+0      	; 0x58f6 <_nrk_precision_os_timer_get+0x6>
    58f6:	cd b7       	in	r28, 0x3d	; 61
    58f8:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    58fa:	80 91 24 01 	lds	r24, 0x0124
    58fe:	90 91 25 01 	lds	r25, 0x0125
    5902:	9a 83       	std	Y+2, r25	; 0x02
    5904:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    5906:	89 81       	ldd	r24, Y+1	; 0x01
    5908:	9a 81       	ldd	r25, Y+2	; 0x02
}
    590a:	0f 90       	pop	r0
    590c:	0f 90       	pop	r0
    590e:	df 91       	pop	r29
    5910:	cf 91       	pop	r28
    5912:	08 95       	ret

00005914 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    5914:	10 92 81 00 	sts	0x0081, r1
    5918:	08 95       	ret

0000591a <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    591a:	81 e0       	ldi	r24, 0x01	; 1
    591c:	80 93 81 00 	sts	0x0081, r24
    5920:	08 95       	ret

00005922 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5922:	83 b5       	in	r24, 0x23	; 35
    5924:	81 60       	ori	r24, 0x01	; 1
    5926:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    5928:	10 92 85 00 	sts	0x0085, r1
    592c:	10 92 84 00 	sts	0x0084, r1
    5930:	08 95       	ret

00005932 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    5932:	cf 93       	push	r28
    5934:	df 93       	push	r29
    5936:	00 d0       	rcall	.+0      	; 0x5938 <_nrk_high_speed_timer_get+0x6>
    5938:	cd b7       	in	r28, 0x3d	; 61
    593a:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    593c:	80 91 84 00 	lds	r24, 0x0084
    5940:	90 91 85 00 	lds	r25, 0x0085
    5944:	9a 83       	std	Y+2, r25	; 0x02
    5946:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    5948:	89 81       	ldd	r24, Y+1	; 0x01
    594a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    594c:	0f 90       	pop	r0
    594e:	0f 90       	pop	r0
    5950:	df 91       	pop	r29
    5952:	cf 91       	pop	r28
    5954:	08 95       	ret

00005956 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    5956:	cf 92       	push	r12
    5958:	df 92       	push	r13
    595a:	ef 92       	push	r14
    595c:	ff 92       	push	r15
    595e:	cf 93       	push	r28
    5960:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    5962:	ec 01       	movw	r28, r24
    5964:	cc 0f       	add	r28, r28
    5966:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    5968:	c9 37       	cpi	r28, 0x79	; 121
    596a:	8f ef       	ldi	r24, 0xFF	; 255
    596c:	d8 07       	cpc	r29, r24
    596e:	10 f0       	brcs	.+4      	; 0x5974 <nrk_high_speed_timer_wait+0x1e>
    5970:	c0 e0       	ldi	r28, 0x00	; 0
    5972:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    5974:	6b 01       	movw	r12, r22
    5976:	e1 2c       	mov	r14, r1
    5978:	f1 2c       	mov	r15, r1
    597a:	cc 0e       	add	r12, r28
    597c:	dd 1e       	adc	r13, r29
    597e:	e1 1c       	adc	r14, r1
    5980:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    5982:	81 e0       	ldi	r24, 0x01	; 1
    5984:	c8 16       	cp	r12, r24
    5986:	d1 04       	cpc	r13, r1
    5988:	e8 06       	cpc	r14, r24
    598a:	f1 04       	cpc	r15, r1
    598c:	40 f0       	brcs	.+16     	; 0x599e <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    598e:	81 e0       	ldi	r24, 0x01	; 1
    5990:	e8 1a       	sub	r14, r24
    5992:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    5994:	0e 94 99 2c 	call	0x5932	; 0x5932 <_nrk_high_speed_timer_get>
    5998:	c8 17       	cp	r28, r24
    599a:	d9 07       	cpc	r29, r25
    599c:	d8 f3       	brcs	.-10     	; 0x5994 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    599e:	0e 94 99 2c 	call	0x5932	; 0x5932 <_nrk_high_speed_timer_get>
    59a2:	8c 15       	cp	r24, r12
    59a4:	9d 05       	cpc	r25, r13
    59a6:	d8 f3       	brcs	.-10     	; 0x599e <nrk_high_speed_timer_wait+0x48>
}
    59a8:	df 91       	pop	r29
    59aa:	cf 91       	pop	r28
    59ac:	ff 90       	pop	r15
    59ae:	ef 90       	pop	r14
    59b0:	df 90       	pop	r13
    59b2:	cf 90       	pop	r12
    59b4:	08 95       	ret

000059b6 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    59b6:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    59ba:	e0 e7       	ldi	r30, 0x70	; 112
    59bc:	f0 e0       	ldi	r31, 0x00	; 0
    59be:	80 81       	ld	r24, Z
    59c0:	8d 7f       	andi	r24, 0xFD	; 253
    59c2:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    59c4:	80 81       	ld	r24, Z
    59c6:	8e 7f       	andi	r24, 0xFE	; 254
    59c8:	80 83       	st	Z, r24
    59ca:	08 95       	ret

000059cc <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    59cc:	80 93 b2 00 	sts	0x00B2, r24
    59d0:	08 95       	ret

000059d2 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    59d2:	e0 e7       	ldi	r30, 0x70	; 112
    59d4:	f0 e0       	ldi	r31, 0x00	; 0
    59d6:	80 81       	ld	r24, Z
    59d8:	83 60       	ori	r24, 0x03	; 3
    59da:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    59dc:	83 e0       	ldi	r24, 0x03	; 3
    59de:	80 93 b1 00 	sts	0x00B1, r24
    59e2:	08 95       	ret

000059e4 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    59e4:	83 b5       	in	r24, 0x23	; 35
    59e6:	82 60       	ori	r24, 0x02	; 2
    59e8:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    59ea:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    59ee:	10 92 30 07 	sts	0x0730, r1
    _nrk_prev_timer_val=0;
    59f2:	10 92 81 09 	sts	0x0981, r1
    59f6:	08 95       	ret

000059f8 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    59f8:	cf 93       	push	r28
    59fa:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    59fc:	8e ef       	ldi	r24, 0xFE	; 254
    59fe:	80 93 81 09 	sts	0x0981, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    5a02:	80 e2       	ldi	r24, 0x20	; 32
    5a04:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    5a08:	80 91 81 09 	lds	r24, 0x0981
    5a0c:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    5a10:	83 e0       	ldi	r24, 0x03	; 3
    5a12:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    5a14:	92 e0       	ldi	r25, 0x02	; 2
    5a16:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    5a1a:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    5a1e:	93 b5       	in	r25, 0x23	; 35
    5a20:	92 60       	ori	r25, 0x02	; 2
    5a22:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    5a24:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    5a26:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    5a28:	83 b5       	in	r24, 0x23	; 35
    5a2a:	82 60       	ori	r24, 0x02	; 2
    5a2c:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    5a2e:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    5a32:	81 e0       	ldi	r24, 0x01	; 1
    5a34:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    5a38:	10 92 85 00 	sts	0x0085, r1
    5a3c:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5a40:	83 b5       	in	r24, 0x23	; 35
    5a42:	82 60       	ori	r24, 0x02	; 2
    5a44:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5a46:	83 b5       	in	r24, 0x23	; 35
    5a48:	81 60       	ori	r24, 0x01	; 1
    5a4a:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    5a4c:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    5a50:	c4 e2       	ldi	r28, 0x24	; 36
    5a52:	d1 e0       	ldi	r29, 0x01	; 1
    5a54:	19 82       	std	Y+1, r1	; 0x01
    5a56:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5a58:	83 b5       	in	r24, 0x23	; 35
    5a5a:	82 60       	ori	r24, 0x02	; 2
    5a5c:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5a5e:	83 b5       	in	r24, 0x23	; 35
    5a60:	81 60       	ori	r24, 0x01	; 1
    5a62:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    5a64:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    5a68:	19 82       	std	Y+1, r1	; 0x01
    5a6a:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    5a6c:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    5a70:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    5a74:	10 92 30 07 	sts	0x0730, r1
}
    5a78:	df 91       	pop	r29
    5a7a:	cf 91       	pop	r28
    5a7c:	08 95       	ret

00005a7e <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    5a7e:	80 91 b3 00 	lds	r24, 0x00B3
}
    5a82:	8f 5f       	subi	r24, 0xFF	; 255
    5a84:	08 95       	ret

00005a86 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    5a86:	81 50       	subi	r24, 0x01	; 1
    5a88:	80 93 b3 00 	sts	0x00B3, r24
    5a8c:	08 95       	ret

00005a8e <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5a8e:	81 11       	cpse	r24, r1
    5a90:	02 c0       	rjmp	.+4      	; 0x5a96 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    5a92:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    5a96:	8f ef       	ldi	r24, 0xFF	; 255
    5a98:	08 95       	ret

00005a9a <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5a9a:	81 11       	cpse	r24, r1
    5a9c:	06 c0       	rjmp	.+12     	; 0x5aaa <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    5a9e:	10 92 95 00 	sts	0x0095, r1
    5aa2:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    5aa6:	81 e0       	ldi	r24, 0x01	; 1
    5aa8:	08 95       	ret
	}
return NRK_ERROR;
    5aaa:	8f ef       	ldi	r24, 0xFF	; 255
}
    5aac:	08 95       	ret

00005aae <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5aae:	81 11       	cpse	r24, r1
    5ab0:	05 c0       	rjmp	.+10     	; 0x5abc <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    5ab2:	80 91 94 00 	lds	r24, 0x0094
    5ab6:	90 91 95 00 	lds	r25, 0x0095
    5aba:	08 95       	ret
	}
return 0;
    5abc:	80 e0       	ldi	r24, 0x00	; 0
    5abe:	90 e0       	ldi	r25, 0x00	; 0

}
    5ac0:	08 95       	ret

00005ac2 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    5ac2:	81 11       	cpse	r24, r1
    5ac4:	05 c0       	rjmp	.+10     	; 0x5ad0 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    5ac6:	82 e0       	ldi	r24, 0x02	; 2
    5ac8:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    5acc:	81 e0       	ldi	r24, 0x01	; 1
    5ace:	08 95       	ret
	}
return NRK_ERROR;
    5ad0:	8f ef       	ldi	r24, 0xFF	; 255
}
    5ad2:	08 95       	ret

00005ad4 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    5ad4:	81 11       	cpse	r24, r1
    5ad6:	35 c0       	rjmp	.+106    	; 0x5b42 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    5ad8:	cb 01       	movw	r24, r22
    5ada:	01 97       	sbiw	r24, 0x01	; 1
    5adc:	05 97       	sbiw	r24, 0x05	; 5
    5ade:	10 f4       	brcc	.+4      	; 0x5ae4 <nrk_timer_int_configure+0x10>
    5ae0:	60 93 7e 09 	sts	0x097E, r22
	TCCR3A = 0;  
    5ae4:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    5ae8:	88 e0       	ldi	r24, 0x08	; 8
    5aea:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    5aee:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    5af2:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    5af6:	30 93 22 06 	sts	0x0622, r19
    5afa:	20 93 21 06 	sts	0x0621, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    5afe:	80 91 7e 09 	lds	r24, 0x097E
    5b02:	81 30       	cpi	r24, 0x01	; 1
    5b04:	21 f4       	brne	.+8      	; 0x5b0e <nrk_timer_int_configure+0x3a>
    5b06:	80 91 91 00 	lds	r24, 0x0091
    5b0a:	81 60       	ori	r24, 0x01	; 1
    5b0c:	11 c0       	rjmp	.+34     	; 0x5b30 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    5b0e:	82 30       	cpi	r24, 0x02	; 2
    5b10:	21 f4       	brne	.+8      	; 0x5b1a <nrk_timer_int_configure+0x46>
    5b12:	80 91 91 00 	lds	r24, 0x0091
    5b16:	82 60       	ori	r24, 0x02	; 2
    5b18:	0b c0       	rjmp	.+22     	; 0x5b30 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    5b1a:	83 30       	cpi	r24, 0x03	; 3
    5b1c:	21 f4       	brne	.+8      	; 0x5b26 <nrk_timer_int_configure+0x52>
    5b1e:	80 91 91 00 	lds	r24, 0x0091
    5b22:	83 60       	ori	r24, 0x03	; 3
    5b24:	05 c0       	rjmp	.+10     	; 0x5b30 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    5b26:	84 30       	cpi	r24, 0x04	; 4
    5b28:	31 f4       	brne	.+12     	; 0x5b36 <nrk_timer_int_configure+0x62>
    5b2a:	80 91 91 00 	lds	r24, 0x0091
    5b2e:	84 60       	ori	r24, 0x04	; 4
    5b30:	80 93 91 00 	sts	0x0091, r24
    5b34:	08 c0       	rjmp	.+16     	; 0x5b46 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    5b36:	85 30       	cpi	r24, 0x05	; 5
    5b38:	31 f4       	brne	.+12     	; 0x5b46 <nrk_timer_int_configure+0x72>
    5b3a:	80 91 91 00 	lds	r24, 0x0091
    5b3e:	85 60       	ori	r24, 0x05	; 5
    5b40:	f7 cf       	rjmp	.-18     	; 0x5b30 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    5b42:	8f ef       	ldi	r24, 0xFF	; 255
    5b44:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    5b46:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    5b48:	08 95       	ret

00005b4a <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    5b4a:	80 91 b2 00 	lds	r24, 0x00B2
}
    5b4e:	08 95       	ret

00005b50 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    5b50:	1f 92       	push	r1
    5b52:	0f 92       	push	r0
    5b54:	0f b6       	in	r0, 0x3f	; 63
    5b56:	0f 92       	push	r0
    5b58:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5b5a:	60 e0       	ldi	r22, 0x00	; 0
    5b5c:	8a e0       	ldi	r24, 0x0A	; 10
    5b5e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
	while(1);
    5b62:	ff cf       	rjmp	.-2      	; 0x5b62 <__vector_default+0x12>

00005b64 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    5b64:	0f 92       	push	r0
    5b66:	0f b6       	in	r0, 0x3f	; 63
    5b68:	0f 92       	push	r0
    5b6a:	1f 92       	push	r1
    5b6c:	2f 92       	push	r2
    5b6e:	3f 92       	push	r3
    5b70:	4f 92       	push	r4
    5b72:	5f 92       	push	r5
    5b74:	6f 92       	push	r6
    5b76:	7f 92       	push	r7
    5b78:	8f 92       	push	r8
    5b7a:	9f 92       	push	r9
    5b7c:	af 92       	push	r10
    5b7e:	bf 92       	push	r11
    5b80:	cf 92       	push	r12
    5b82:	df 92       	push	r13
    5b84:	ef 92       	push	r14
    5b86:	ff 92       	push	r15
    5b88:	0f 93       	push	r16
    5b8a:	1f 93       	push	r17
    5b8c:	2f 93       	push	r18
    5b8e:	3f 93       	push	r19
    5b90:	4f 93       	push	r20
    5b92:	5f 93       	push	r21
    5b94:	6f 93       	push	r22
    5b96:	7f 93       	push	r23
    5b98:	8f 93       	push	r24
    5b9a:	9f 93       	push	r25
    5b9c:	af 93       	push	r26
    5b9e:	bf 93       	push	r27
    5ba0:	cf 93       	push	r28
    5ba2:	df 93       	push	r29
    5ba4:	ef 93       	push	r30
    5ba6:	ff 93       	push	r31
    5ba8:	a0 91 e1 0b 	lds	r26, 0x0BE1
    5bac:	b0 91 e2 0b 	lds	r27, 0x0BE2
    5bb0:	0d b6       	in	r0, 0x3d	; 61
    5bb2:	0d 92       	st	X+, r0
    5bb4:	0e b6       	in	r0, 0x3e	; 62
    5bb6:	0d 92       	st	X+, r0
    5bb8:	1f 92       	push	r1
    5bba:	a0 91 e9 08 	lds	r26, 0x08E9
    5bbe:	b0 91 ea 08 	lds	r27, 0x08EA
    5bc2:	1e 90       	ld	r1, -X
    5bc4:	be bf       	out	0x3e, r27	; 62
    5bc6:	ad bf       	out	0x3d, r26	; 61
    5bc8:	08 95       	ret

00005bca <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    5bca:	1f 92       	push	r1
    5bcc:	0f 92       	push	r0
    5bce:	0f b6       	in	r0, 0x3f	; 63
    5bd0:	0f 92       	push	r0
    5bd2:	11 24       	eor	r1, r1
    5bd4:	0b b6       	in	r0, 0x3b	; 59
    5bd6:	0f 92       	push	r0
    5bd8:	2f 93       	push	r18
    5bda:	3f 93       	push	r19
    5bdc:	4f 93       	push	r20
    5bde:	5f 93       	push	r21
    5be0:	6f 93       	push	r22
    5be2:	7f 93       	push	r23
    5be4:	8f 93       	push	r24
    5be6:	9f 93       	push	r25
    5be8:	af 93       	push	r26
    5bea:	bf 93       	push	r27
    5bec:	ef 93       	push	r30
    5bee:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    5bf0:	e0 91 21 06 	lds	r30, 0x0621
    5bf4:	f0 91 22 06 	lds	r31, 0x0622
    5bf8:	30 97       	sbiw	r30, 0x00	; 0
    5bfa:	11 f0       	breq	.+4      	; 0x5c00 <__vector_32+0x36>
    5bfc:	09 95       	icall
    5bfe:	04 c0       	rjmp	.+8      	; 0x5c08 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5c00:	60 e0       	ldi	r22, 0x00	; 0
    5c02:	8a e0       	ldi	r24, 0x0A	; 10
    5c04:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
	return;  	
}
    5c08:	ff 91       	pop	r31
    5c0a:	ef 91       	pop	r30
    5c0c:	bf 91       	pop	r27
    5c0e:	af 91       	pop	r26
    5c10:	9f 91       	pop	r25
    5c12:	8f 91       	pop	r24
    5c14:	7f 91       	pop	r23
    5c16:	6f 91       	pop	r22
    5c18:	5f 91       	pop	r21
    5c1a:	4f 91       	pop	r20
    5c1c:	3f 91       	pop	r19
    5c1e:	2f 91       	pop	r18
    5c20:	0f 90       	pop	r0
    5c22:	0b be       	out	0x3b, r0	; 59
    5c24:	0f 90       	pop	r0
    5c26:	0f be       	out	0x3f, r0	; 63
    5c28:	0f 90       	pop	r0
    5c2a:	1f 90       	pop	r1
    5c2c:	18 95       	reti

00005c2e <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    5c2e:	1f 92       	push	r1
    5c30:	0f 92       	push	r0
    5c32:	0f b6       	in	r0, 0x3f	; 63
    5c34:	0f 92       	push	r0
    5c36:	11 24       	eor	r1, r1

	return;  	
} 
    5c38:	0f 90       	pop	r0
    5c3a:	0f be       	out	0x3f, r0	; 63
    5c3c:	0f 90       	pop	r0
    5c3e:	1f 90       	pop	r1
    5c40:	18 95       	reti

00005c42 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    5c42:	04 b6       	in	r0, 0x34	; 52
    5c44:	03 fe       	sbrs	r0, 3
    5c46:	02 c0       	rjmp	.+4      	; 0x5c4c <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    5c48:	80 e1       	ldi	r24, 0x10	; 16
    5c4a:	01 c0       	rjmp	.+2      	; 0x5c4e <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    5c4c:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    5c4e:	04 b6       	in	r0, 0x34	; 52
    5c50:	02 fe       	sbrs	r0, 2
    5c52:	06 c0       	rjmp	.+12     	; 0x5c60 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    5c54:	94 b7       	in	r25, 0x34	; 52
    5c56:	9b 7f       	andi	r25, 0xFB	; 251
    5c58:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    5c5a:	04 b6       	in	r0, 0x34	; 52
    5c5c:	00 fe       	sbrs	r0, 0
		error|=0x04;
    5c5e:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    5c60:	04 b6       	in	r0, 0x34	; 52
    5c62:	01 fe       	sbrs	r0, 1
    5c64:	05 c0       	rjmp	.+10     	; 0x5c70 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    5c66:	94 b7       	in	r25, 0x34	; 52
    5c68:	9d 7f       	andi	r25, 0xFD	; 253
    5c6a:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    5c6c:	82 60       	ori	r24, 0x02	; 2
    5c6e:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    5c70:	81 11       	cpse	r24, r1
    5c72:	0c c0       	rjmp	.+24     	; 0x5c8c <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    5c74:	04 b6       	in	r0, 0x34	; 52
    5c76:	00 fe       	sbrs	r0, 0
    5c78:	04 c0       	rjmp	.+8      	; 0x5c82 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    5c7a:	94 b7       	in	r25, 0x34	; 52
    5c7c:	9e 7f       	andi	r25, 0xFE	; 254
    5c7e:	94 bf       	out	0x34, r25	; 52
    5c80:	01 c0       	rjmp	.+2      	; 0x5c84 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    5c82:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    5c84:	90 91 b0 00 	lds	r25, 0x00B0
    5c88:	91 11       	cpse	r25, r1
    5c8a:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    5c8c:	08 95       	ret

00005c8e <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    5c8e:	81 11       	cpse	r24, r1
    5c90:	02 c0       	rjmp	.+4      	; 0x5c96 <nrk_ext_int_enable+0x8>
    5c92:	e8 9a       	sbi	0x1d, 0	; 29
    5c94:	39 c0       	rjmp	.+114    	; 0x5d08 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    5c96:	81 30       	cpi	r24, 0x01	; 1
    5c98:	11 f4       	brne	.+4      	; 0x5c9e <nrk_ext_int_enable+0x10>
    5c9a:	e9 9a       	sbi	0x1d, 1	; 29
    5c9c:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    5c9e:	82 30       	cpi	r24, 0x02	; 2
    5ca0:	11 f4       	brne	.+4      	; 0x5ca6 <nrk_ext_int_enable+0x18>
    5ca2:	ea 9a       	sbi	0x1d, 2	; 29
    5ca4:	31 c0       	rjmp	.+98     	; 0x5d08 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    5ca6:	83 30       	cpi	r24, 0x03	; 3
    5ca8:	21 f4       	brne	.+8      	; 0x5cb2 <nrk_ext_int_enable+0x24>
    5caa:	80 91 6b 00 	lds	r24, 0x006B
    5cae:	81 60       	ori	r24, 0x01	; 1
    5cb0:	29 c0       	rjmp	.+82     	; 0x5d04 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    5cb2:	84 30       	cpi	r24, 0x04	; 4
    5cb4:	21 f4       	brne	.+8      	; 0x5cbe <nrk_ext_int_enable+0x30>
    5cb6:	80 91 6b 00 	lds	r24, 0x006B
    5cba:	82 60       	ori	r24, 0x02	; 2
    5cbc:	23 c0       	rjmp	.+70     	; 0x5d04 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    5cbe:	85 30       	cpi	r24, 0x05	; 5
    5cc0:	21 f4       	brne	.+8      	; 0x5cca <nrk_ext_int_enable+0x3c>
    5cc2:	80 91 6b 00 	lds	r24, 0x006B
    5cc6:	84 60       	ori	r24, 0x04	; 4
    5cc8:	1d c0       	rjmp	.+58     	; 0x5d04 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    5cca:	86 30       	cpi	r24, 0x06	; 6
    5ccc:	21 f4       	brne	.+8      	; 0x5cd6 <nrk_ext_int_enable+0x48>
    5cce:	80 91 6b 00 	lds	r24, 0x006B
    5cd2:	88 60       	ori	r24, 0x08	; 8
    5cd4:	17 c0       	rjmp	.+46     	; 0x5d04 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    5cd6:	87 30       	cpi	r24, 0x07	; 7
    5cd8:	21 f4       	brne	.+8      	; 0x5ce2 <nrk_ext_int_enable+0x54>
    5cda:	80 91 6b 00 	lds	r24, 0x006B
    5cde:	80 61       	ori	r24, 0x10	; 16
    5ce0:	11 c0       	rjmp	.+34     	; 0x5d04 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    5ce2:	88 30       	cpi	r24, 0x08	; 8
    5ce4:	21 f4       	brne	.+8      	; 0x5cee <nrk_ext_int_enable+0x60>
    5ce6:	80 91 6b 00 	lds	r24, 0x006B
    5cea:	80 62       	ori	r24, 0x20	; 32
    5cec:	0b c0       	rjmp	.+22     	; 0x5d04 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    5cee:	89 30       	cpi	r24, 0x09	; 9
    5cf0:	21 f4       	brne	.+8      	; 0x5cfa <nrk_ext_int_enable+0x6c>
    5cf2:	80 91 6b 00 	lds	r24, 0x006B
    5cf6:	80 64       	ori	r24, 0x40	; 64
    5cf8:	05 c0       	rjmp	.+10     	; 0x5d04 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    5cfa:	8a 30       	cpi	r24, 0x0A	; 10
    5cfc:	39 f4       	brne	.+14     	; 0x5d0c <nrk_ext_int_enable+0x7e>
    5cfe:	80 91 6b 00 	lds	r24, 0x006B
    5d02:	80 68       	ori	r24, 0x80	; 128
    5d04:	80 93 6b 00 	sts	0x006B, r24
    5d08:	81 e0       	ldi	r24, 0x01	; 1
    5d0a:	08 95       	ret
return NRK_ERROR;
    5d0c:	8f ef       	ldi	r24, 0xFF	; 255
}
    5d0e:	08 95       	ret

00005d10 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    5d10:	81 11       	cpse	r24, r1
    5d12:	02 c0       	rjmp	.+4      	; 0x5d18 <nrk_ext_int_disable+0x8>
    5d14:	e8 98       	cbi	0x1d, 0	; 29
    5d16:	39 c0       	rjmp	.+114    	; 0x5d8a <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    5d18:	81 30       	cpi	r24, 0x01	; 1
    5d1a:	11 f4       	brne	.+4      	; 0x5d20 <nrk_ext_int_disable+0x10>
    5d1c:	e9 98       	cbi	0x1d, 1	; 29
    5d1e:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    5d20:	82 30       	cpi	r24, 0x02	; 2
    5d22:	11 f4       	brne	.+4      	; 0x5d28 <nrk_ext_int_disable+0x18>
    5d24:	e9 98       	cbi	0x1d, 1	; 29
    5d26:	31 c0       	rjmp	.+98     	; 0x5d8a <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    5d28:	83 30       	cpi	r24, 0x03	; 3
    5d2a:	21 f4       	brne	.+8      	; 0x5d34 <nrk_ext_int_disable+0x24>
    5d2c:	80 91 6b 00 	lds	r24, 0x006B
    5d30:	8e 7f       	andi	r24, 0xFE	; 254
    5d32:	29 c0       	rjmp	.+82     	; 0x5d86 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    5d34:	84 30       	cpi	r24, 0x04	; 4
    5d36:	21 f4       	brne	.+8      	; 0x5d40 <nrk_ext_int_disable+0x30>
    5d38:	80 91 6b 00 	lds	r24, 0x006B
    5d3c:	8d 7f       	andi	r24, 0xFD	; 253
    5d3e:	23 c0       	rjmp	.+70     	; 0x5d86 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    5d40:	85 30       	cpi	r24, 0x05	; 5
    5d42:	21 f4       	brne	.+8      	; 0x5d4c <nrk_ext_int_disable+0x3c>
    5d44:	80 91 6b 00 	lds	r24, 0x006B
    5d48:	8b 7f       	andi	r24, 0xFB	; 251
    5d4a:	1d c0       	rjmp	.+58     	; 0x5d86 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    5d4c:	86 30       	cpi	r24, 0x06	; 6
    5d4e:	21 f4       	brne	.+8      	; 0x5d58 <nrk_ext_int_disable+0x48>
    5d50:	80 91 6b 00 	lds	r24, 0x006B
    5d54:	87 7f       	andi	r24, 0xF7	; 247
    5d56:	17 c0       	rjmp	.+46     	; 0x5d86 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    5d58:	87 30       	cpi	r24, 0x07	; 7
    5d5a:	21 f4       	brne	.+8      	; 0x5d64 <nrk_ext_int_disable+0x54>
    5d5c:	80 91 6b 00 	lds	r24, 0x006B
    5d60:	8f 7e       	andi	r24, 0xEF	; 239
    5d62:	11 c0       	rjmp	.+34     	; 0x5d86 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    5d64:	88 30       	cpi	r24, 0x08	; 8
    5d66:	21 f4       	brne	.+8      	; 0x5d70 <nrk_ext_int_disable+0x60>
    5d68:	80 91 6b 00 	lds	r24, 0x006B
    5d6c:	8f 7d       	andi	r24, 0xDF	; 223
    5d6e:	0b c0       	rjmp	.+22     	; 0x5d86 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    5d70:	89 30       	cpi	r24, 0x09	; 9
    5d72:	21 f4       	brne	.+8      	; 0x5d7c <nrk_ext_int_disable+0x6c>
    5d74:	80 91 6b 00 	lds	r24, 0x006B
    5d78:	8f 7b       	andi	r24, 0xBF	; 191
    5d7a:	05 c0       	rjmp	.+10     	; 0x5d86 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    5d7c:	8a 30       	cpi	r24, 0x0A	; 10
    5d7e:	39 f4       	brne	.+14     	; 0x5d8e <nrk_ext_int_disable+0x7e>
    5d80:	80 91 6b 00 	lds	r24, 0x006B
    5d84:	8f 77       	andi	r24, 0x7F	; 127
    5d86:	80 93 6b 00 	sts	0x006B, r24
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	08 95       	ret
return NRK_ERROR;
    5d8e:	8f ef       	ldi	r24, 0xFF	; 255
}
    5d90:	08 95       	ret

00005d92 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    5d92:	81 11       	cpse	r24, r1
    5d94:	26 c0       	rjmp	.+76     	; 0x5de2 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    5d96:	50 93 3f 0c 	sts	0x0C3F, r21
    5d9a:	40 93 3e 0c 	sts	0x0C3E, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    5d9e:	61 11       	cpse	r22, r1
    5da0:	04 c0       	rjmp	.+8      	; 0x5daa <nrk_ext_int_configure+0x18>
    5da2:	80 91 69 00 	lds	r24, 0x0069
    5da6:	8c 7f       	andi	r24, 0xFC	; 252
    5da8:	3d c0       	rjmp	.+122    	; 0x5e24 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5daa:	61 30       	cpi	r22, 0x01	; 1
    5dac:	49 f4       	brne	.+18     	; 0x5dc0 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    5dae:	80 91 69 00 	lds	r24, 0x0069
    5db2:	8d 7f       	andi	r24, 0xFD	; 253
    5db4:	80 93 69 00 	sts	0x0069, r24
    5db8:	80 91 69 00 	lds	r24, 0x0069
    5dbc:	81 60       	ori	r24, 0x01	; 1
    5dbe:	32 c0       	rjmp	.+100    	; 0x5e24 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5dc0:	62 30       	cpi	r22, 0x02	; 2
    5dc2:	49 f4       	brne	.+18     	; 0x5dd6 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    5dc4:	80 91 69 00 	lds	r24, 0x0069
    5dc8:	82 60       	ori	r24, 0x02	; 2
    5dca:	80 93 69 00 	sts	0x0069, r24
    5dce:	80 91 69 00 	lds	r24, 0x0069
    5dd2:	8e 7f       	andi	r24, 0xFE	; 254
    5dd4:	27 c0       	rjmp	.+78     	; 0x5e24 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    5dd6:	63 30       	cpi	r22, 0x03	; 3
    5dd8:	39 f5       	brne	.+78     	; 0x5e28 <nrk_ext_int_configure+0x96>
    5dda:	80 91 69 00 	lds	r24, 0x0069
    5dde:	83 60       	ori	r24, 0x03	; 3
    5de0:	21 c0       	rjmp	.+66     	; 0x5e24 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    5de2:	81 30       	cpi	r24, 0x01	; 1
    5de4:	49 f5       	brne	.+82     	; 0x5e38 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    5de6:	50 93 3d 0c 	sts	0x0C3D, r21
    5dea:	40 93 3c 0c 	sts	0x0C3C, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    5dee:	61 11       	cpse	r22, r1
    5df0:	04 c0       	rjmp	.+8      	; 0x5dfa <nrk_ext_int_configure+0x68>
    5df2:	80 91 69 00 	lds	r24, 0x0069
    5df6:	83 7f       	andi	r24, 0xF3	; 243
    5df8:	15 c0       	rjmp	.+42     	; 0x5e24 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5dfa:	61 30       	cpi	r22, 0x01	; 1
    5dfc:	49 f4       	brne	.+18     	; 0x5e10 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    5dfe:	80 91 69 00 	lds	r24, 0x0069
    5e02:	87 7f       	andi	r24, 0xF7	; 247
    5e04:	80 93 69 00 	sts	0x0069, r24
    5e08:	80 91 69 00 	lds	r24, 0x0069
    5e0c:	84 60       	ori	r24, 0x04	; 4
    5e0e:	0a c0       	rjmp	.+20     	; 0x5e24 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5e10:	62 30       	cpi	r22, 0x02	; 2
    5e12:	61 f4       	brne	.+24     	; 0x5e2c <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    5e14:	80 91 69 00 	lds	r24, 0x0069
    5e18:	88 60       	ori	r24, 0x08	; 8
    5e1a:	80 93 69 00 	sts	0x0069, r24
    5e1e:	80 91 69 00 	lds	r24, 0x0069
    5e22:	8b 7f       	andi	r24, 0xFB	; 251
    5e24:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    5e28:	81 e0       	ldi	r24, 0x01	; 1
    5e2a:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    5e2c:	63 30       	cpi	r22, 0x03	; 3
    5e2e:	e1 f7       	brne	.-8      	; 0x5e28 <nrk_ext_int_configure+0x96>
    5e30:	80 91 69 00 	lds	r24, 0x0069
    5e34:	8c 60       	ori	r24, 0x0C	; 12
    5e36:	f6 cf       	rjmp	.-20     	; 0x5e24 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    5e38:	82 30       	cpi	r24, 0x02	; 2
    5e3a:	31 f5       	brne	.+76     	; 0x5e88 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    5e3c:	50 93 41 0c 	sts	0x0C41, r21
    5e40:	40 93 40 0c 	sts	0x0C40, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    5e44:	61 11       	cpse	r22, r1
    5e46:	04 c0       	rjmp	.+8      	; 0x5e50 <nrk_ext_int_configure+0xbe>
    5e48:	80 91 69 00 	lds	r24, 0x0069
    5e4c:	8f 7c       	andi	r24, 0xCF	; 207
    5e4e:	ea cf       	rjmp	.-44     	; 0x5e24 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5e50:	61 30       	cpi	r22, 0x01	; 1
    5e52:	49 f4       	brne	.+18     	; 0x5e66 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    5e54:	80 91 69 00 	lds	r24, 0x0069
    5e58:	8f 7d       	andi	r24, 0xDF	; 223
    5e5a:	80 93 69 00 	sts	0x0069, r24
    5e5e:	80 91 69 00 	lds	r24, 0x0069
    5e62:	80 61       	ori	r24, 0x10	; 16
    5e64:	df cf       	rjmp	.-66     	; 0x5e24 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5e66:	62 30       	cpi	r22, 0x02	; 2
    5e68:	49 f4       	brne	.+18     	; 0x5e7c <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    5e6a:	80 91 69 00 	lds	r24, 0x0069
    5e6e:	80 62       	ori	r24, 0x20	; 32
    5e70:	80 93 69 00 	sts	0x0069, r24
    5e74:	80 91 69 00 	lds	r24, 0x0069
    5e78:	8f 7e       	andi	r24, 0xEF	; 239
    5e7a:	d4 cf       	rjmp	.-88     	; 0x5e24 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    5e7c:	63 30       	cpi	r22, 0x03	; 3
    5e7e:	a1 f6       	brne	.-88     	; 0x5e28 <nrk_ext_int_configure+0x96>
    5e80:	80 91 69 00 	lds	r24, 0x0069
    5e84:	80 63       	ori	r24, 0x30	; 48
    5e86:	ce cf       	rjmp	.-100    	; 0x5e24 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    5e88:	83 50       	subi	r24, 0x03	; 3
    5e8a:	88 30       	cpi	r24, 0x08	; 8
    5e8c:	50 f4       	brcc	.+20     	; 0x5ea2 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    5e8e:	80 91 68 00 	lds	r24, 0x0068
    5e92:	81 60       	ori	r24, 0x01	; 1
    5e94:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    5e98:	50 93 43 0c 	sts	0x0C43, r21
    5e9c:	40 93 42 0c 	sts	0x0C42, r20
    5ea0:	c3 cf       	rjmp	.-122    	; 0x5e28 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    5ea2:	8f ef       	ldi	r24, 0xFF	; 255
}
    5ea4:	08 95       	ret

00005ea6 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    5ea6:	1f 92       	push	r1
    5ea8:	0f 92       	push	r0
    5eaa:	0f b6       	in	r0, 0x3f	; 63
    5eac:	0f 92       	push	r0
    5eae:	11 24       	eor	r1, r1
    5eb0:	0b b6       	in	r0, 0x3b	; 59
    5eb2:	0f 92       	push	r0
    5eb4:	2f 93       	push	r18
    5eb6:	3f 93       	push	r19
    5eb8:	4f 93       	push	r20
    5eba:	5f 93       	push	r21
    5ebc:	6f 93       	push	r22
    5ebe:	7f 93       	push	r23
    5ec0:	8f 93       	push	r24
    5ec2:	9f 93       	push	r25
    5ec4:	af 93       	push	r26
    5ec6:	bf 93       	push	r27
    5ec8:	ef 93       	push	r30
    5eca:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    5ecc:	e0 91 42 0c 	lds	r30, 0x0C42
    5ed0:	f0 91 43 0c 	lds	r31, 0x0C43
    5ed4:	30 97       	sbiw	r30, 0x00	; 0
    5ed6:	11 f0       	breq	.+4      	; 0x5edc <__vector_9+0x36>
    5ed8:	09 95       	icall
    5eda:	04 c0       	rjmp	.+8      	; 0x5ee4 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5edc:	60 e0       	ldi	r22, 0x00	; 0
    5ede:	8a e0       	ldi	r24, 0x0A	; 10
    5ee0:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
	return;  	
}
    5ee4:	ff 91       	pop	r31
    5ee6:	ef 91       	pop	r30
    5ee8:	bf 91       	pop	r27
    5eea:	af 91       	pop	r26
    5eec:	9f 91       	pop	r25
    5eee:	8f 91       	pop	r24
    5ef0:	7f 91       	pop	r23
    5ef2:	6f 91       	pop	r22
    5ef4:	5f 91       	pop	r21
    5ef6:	4f 91       	pop	r20
    5ef8:	3f 91       	pop	r19
    5efa:	2f 91       	pop	r18
    5efc:	0f 90       	pop	r0
    5efe:	0b be       	out	0x3b, r0	; 59
    5f00:	0f 90       	pop	r0
    5f02:	0f be       	out	0x3f, r0	; 63
    5f04:	0f 90       	pop	r0
    5f06:	1f 90       	pop	r1
    5f08:	18 95       	reti

00005f0a <__vector_1>:


SIGNAL(INT0_vect) {
    5f0a:	1f 92       	push	r1
    5f0c:	0f 92       	push	r0
    5f0e:	0f b6       	in	r0, 0x3f	; 63
    5f10:	0f 92       	push	r0
    5f12:	11 24       	eor	r1, r1
    5f14:	0b b6       	in	r0, 0x3b	; 59
    5f16:	0f 92       	push	r0
    5f18:	2f 93       	push	r18
    5f1a:	3f 93       	push	r19
    5f1c:	4f 93       	push	r20
    5f1e:	5f 93       	push	r21
    5f20:	6f 93       	push	r22
    5f22:	7f 93       	push	r23
    5f24:	8f 93       	push	r24
    5f26:	9f 93       	push	r25
    5f28:	af 93       	push	r26
    5f2a:	bf 93       	push	r27
    5f2c:	ef 93       	push	r30
    5f2e:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    5f30:	e0 91 3e 0c 	lds	r30, 0x0C3E
    5f34:	f0 91 3f 0c 	lds	r31, 0x0C3F
    5f38:	30 97       	sbiw	r30, 0x00	; 0
    5f3a:	11 f0       	breq	.+4      	; 0x5f40 <__vector_1+0x36>
    5f3c:	09 95       	icall
    5f3e:	04 c0       	rjmp	.+8      	; 0x5f48 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5f40:	60 e0       	ldi	r22, 0x00	; 0
    5f42:	8a e0       	ldi	r24, 0x0A	; 10
    5f44:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
	return;  	
}
    5f48:	ff 91       	pop	r31
    5f4a:	ef 91       	pop	r30
    5f4c:	bf 91       	pop	r27
    5f4e:	af 91       	pop	r26
    5f50:	9f 91       	pop	r25
    5f52:	8f 91       	pop	r24
    5f54:	7f 91       	pop	r23
    5f56:	6f 91       	pop	r22
    5f58:	5f 91       	pop	r21
    5f5a:	4f 91       	pop	r20
    5f5c:	3f 91       	pop	r19
    5f5e:	2f 91       	pop	r18
    5f60:	0f 90       	pop	r0
    5f62:	0b be       	out	0x3b, r0	; 59
    5f64:	0f 90       	pop	r0
    5f66:	0f be       	out	0x3f, r0	; 63
    5f68:	0f 90       	pop	r0
    5f6a:	1f 90       	pop	r1
    5f6c:	18 95       	reti

00005f6e <__vector_2>:

SIGNAL(INT1_vect) {
    5f6e:	1f 92       	push	r1
    5f70:	0f 92       	push	r0
    5f72:	0f b6       	in	r0, 0x3f	; 63
    5f74:	0f 92       	push	r0
    5f76:	11 24       	eor	r1, r1
    5f78:	0b b6       	in	r0, 0x3b	; 59
    5f7a:	0f 92       	push	r0
    5f7c:	2f 93       	push	r18
    5f7e:	3f 93       	push	r19
    5f80:	4f 93       	push	r20
    5f82:	5f 93       	push	r21
    5f84:	6f 93       	push	r22
    5f86:	7f 93       	push	r23
    5f88:	8f 93       	push	r24
    5f8a:	9f 93       	push	r25
    5f8c:	af 93       	push	r26
    5f8e:	bf 93       	push	r27
    5f90:	ef 93       	push	r30
    5f92:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    5f94:	e0 91 3c 0c 	lds	r30, 0x0C3C
    5f98:	f0 91 3d 0c 	lds	r31, 0x0C3D
    5f9c:	30 97       	sbiw	r30, 0x00	; 0
    5f9e:	11 f0       	breq	.+4      	; 0x5fa4 <__vector_2+0x36>
    5fa0:	09 95       	icall
    5fa2:	04 c0       	rjmp	.+8      	; 0x5fac <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5fa4:	60 e0       	ldi	r22, 0x00	; 0
    5fa6:	8a e0       	ldi	r24, 0x0A	; 10
    5fa8:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
	return;  	
}
    5fac:	ff 91       	pop	r31
    5fae:	ef 91       	pop	r30
    5fb0:	bf 91       	pop	r27
    5fb2:	af 91       	pop	r26
    5fb4:	9f 91       	pop	r25
    5fb6:	8f 91       	pop	r24
    5fb8:	7f 91       	pop	r23
    5fba:	6f 91       	pop	r22
    5fbc:	5f 91       	pop	r21
    5fbe:	4f 91       	pop	r20
    5fc0:	3f 91       	pop	r19
    5fc2:	2f 91       	pop	r18
    5fc4:	0f 90       	pop	r0
    5fc6:	0b be       	out	0x3b, r0	; 59
    5fc8:	0f 90       	pop	r0
    5fca:	0f be       	out	0x3f, r0	; 63
    5fcc:	0f 90       	pop	r0
    5fce:	1f 90       	pop	r1
    5fd0:	18 95       	reti

00005fd2 <__vector_3>:

SIGNAL(INT2_vect) {
    5fd2:	1f 92       	push	r1
    5fd4:	0f 92       	push	r0
    5fd6:	0f b6       	in	r0, 0x3f	; 63
    5fd8:	0f 92       	push	r0
    5fda:	11 24       	eor	r1, r1
    5fdc:	0b b6       	in	r0, 0x3b	; 59
    5fde:	0f 92       	push	r0
    5fe0:	2f 93       	push	r18
    5fe2:	3f 93       	push	r19
    5fe4:	4f 93       	push	r20
    5fe6:	5f 93       	push	r21
    5fe8:	6f 93       	push	r22
    5fea:	7f 93       	push	r23
    5fec:	8f 93       	push	r24
    5fee:	9f 93       	push	r25
    5ff0:	af 93       	push	r26
    5ff2:	bf 93       	push	r27
    5ff4:	ef 93       	push	r30
    5ff6:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    5ff8:	e0 91 40 0c 	lds	r30, 0x0C40
    5ffc:	f0 91 41 0c 	lds	r31, 0x0C41
    6000:	30 97       	sbiw	r30, 0x00	; 0
    6002:	11 f0       	breq	.+4      	; 0x6008 <__vector_3+0x36>
    6004:	09 95       	icall
    6006:	04 c0       	rjmp	.+8      	; 0x6010 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    6008:	60 e0       	ldi	r22, 0x00	; 0
    600a:	8a e0       	ldi	r24, 0x0A	; 10
    600c:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_kernel_error_add>
	return;  	
}
    6010:	ff 91       	pop	r31
    6012:	ef 91       	pop	r30
    6014:	bf 91       	pop	r27
    6016:	af 91       	pop	r26
    6018:	9f 91       	pop	r25
    601a:	8f 91       	pop	r24
    601c:	7f 91       	pop	r23
    601e:	6f 91       	pop	r22
    6020:	5f 91       	pop	r21
    6022:	4f 91       	pop	r20
    6024:	3f 91       	pop	r19
    6026:	2f 91       	pop	r18
    6028:	0f 90       	pop	r0
    602a:	0b be       	out	0x3b, r0	; 59
    602c:	0f 90       	pop	r0
    602e:	0f be       	out	0x3f, r0	; 63
    6030:	0f 90       	pop	r0
    6032:	1f 90       	pop	r1
    6034:	18 95       	reti

00006036 <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    6036:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    6038:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    603a:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    603c:	84 b7       	in	r24, 0x34	; 52
    603e:	87 7f       	andi	r24, 0xF7	; 247
    6040:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    6042:	e0 e6       	ldi	r30, 0x60	; 96
    6044:	f0 e0       	ldi	r31, 0x00	; 0
    6046:	80 81       	ld	r24, Z
    6048:	88 61       	ori	r24, 0x18	; 24
    604a:	80 83       	st	Z, r24
	WDTCSR = 0;
    604c:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    604e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    6050:	08 95       	ret

00006052 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    6052:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6054:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    6056:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    6058:	84 b7       	in	r24, 0x34	; 52
    605a:	87 7f       	andi	r24, 0xF7	; 247
    605c:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    605e:	e0 e6       	ldi	r30, 0x60	; 96
    6060:	f0 e0       	ldi	r31, 0x00	; 0
    6062:	80 81       	ld	r24, Z
    6064:	88 61       	ori	r24, 0x18	; 24
    6066:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    6068:	8d e0       	ldi	r24, 0x0D	; 13
    606a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    606c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    606e:	08 95       	ret

00006070 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    6070:	04 b6       	in	r0, 0x34	; 52
    6072:	03 fe       	sbrs	r0, 3
    6074:	02 c0       	rjmp	.+4      	; 0x607a <nrk_watchdog_check+0xa>
return NRK_ERROR;
    6076:	8f ef       	ldi	r24, 0xFF	; 255
    6078:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    607a:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    607c:	08 95       	ret

0000607e <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    607e:	a8 95       	wdr
    6080:	08 95       	ret

00006082 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    6082:	08 95       	ret

00006084 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    6084:	83 b7       	in	r24, 0x33	; 51
    6086:	81 7f       	andi	r24, 0xF1	; 241
    6088:	86 60       	ori	r24, 0x06	; 6
    608a:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    608c:	83 b7       	in	r24, 0x33	; 51
    608e:	81 60       	ori	r24, 0x01	; 1
    6090:	83 bf       	out	0x33, r24	; 51
    6092:	88 95       	sleep
    6094:	83 b7       	in	r24, 0x33	; 51
    6096:	8e 7f       	andi	r24, 0xFE	; 254
    6098:	83 bf       	out	0x33, r24	; 51
    609a:	08 95       	ret

0000609c <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    609c:	83 b7       	in	r24, 0x33	; 51
    609e:	81 7f       	andi	r24, 0xF1	; 241
    60a0:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    60a2:	83 b7       	in	r24, 0x33	; 51
    60a4:	81 60       	ori	r24, 0x01	; 1
    60a6:	83 bf       	out	0x33, r24	; 51
    60a8:	88 95       	sleep
    60aa:	83 b7       	in	r24, 0x33	; 51
    60ac:	8e 7f       	andi	r24, 0xFE	; 254
    60ae:	83 bf       	out	0x33, r24	; 51
    60b0:	08 95       	ret

000060b2 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    60b2:	fc 01       	movw	r30, r24
    60b4:	76 83       	std	Z+6, r23	; 0x06
    60b6:	65 83       	std	Z+5, r22	; 0x05
    60b8:	08 95       	ret

000060ba <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    60ba:	ef 92       	push	r14
    60bc:	ff 92       	push	r15
    60be:	0f 93       	push	r16
    60c0:	1f 93       	push	r17
    60c2:	cf 93       	push	r28
    60c4:	df 93       	push	r29
    60c6:	8c 01       	movw	r16, r24
    60c8:	7b 01       	movw	r14, r22
    60ca:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    60cc:	40 32       	cpi	r20, 0x20	; 32
    60ce:	51 05       	cpc	r21, r1
    60d0:	18 f4       	brcc	.+6      	; 0x60d8 <nrk_task_set_stk+0x1e>
    60d2:	81 e1       	ldi	r24, 0x11	; 17
    60d4:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    60d8:	21 97       	sbiw	r28, 0x01	; 1
    60da:	ce 0d       	add	r28, r14
    60dc:	df 1d       	adc	r29, r15
    60de:	f8 01       	movw	r30, r16
    60e0:	d2 83       	std	Z+2, r29	; 0x02
    60e2:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    60e4:	f4 82       	std	Z+4, r15	; 0x04
    60e6:	e3 82       	std	Z+3, r14	; 0x03

}
    60e8:	df 91       	pop	r29
    60ea:	cf 91       	pop	r28
    60ec:	1f 91       	pop	r17
    60ee:	0f 91       	pop	r16
    60f0:	ff 90       	pop	r15
    60f2:	ef 90       	pop	r14
    60f4:	08 95       	ret

000060f6 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    60f6:	25 e5       	ldi	r18, 0x55	; 85
    60f8:	fa 01       	movw	r30, r20
    60fa:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    60fc:	fb 01       	movw	r30, r22
    60fe:	32 97       	sbiw	r30, 0x02	; 2
    6100:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    6102:	31 96       	adiw	r30, 0x01	; 1
    6104:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    6106:	33 97       	sbiw	r30, 0x03	; 3
    6108:	11 82       	std	Z+1, r1	; 0x01
    610a:	10 82       	st	Z, r1
    *(--stk) = 0;       
    610c:	32 97       	sbiw	r30, 0x02	; 2
    610e:	11 82       	std	Z+1, r1	; 0x01
    6110:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    6112:	32 97       	sbiw	r30, 0x02	; 2
    6114:	11 82       	std	Z+1, r1	; 0x01
    6116:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    6118:	32 97       	sbiw	r30, 0x02	; 2
    611a:	11 82       	std	Z+1, r1	; 0x01
    611c:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    611e:	32 97       	sbiw	r30, 0x02	; 2
    6120:	11 82       	std	Z+1, r1	; 0x01
    6122:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    6124:	32 97       	sbiw	r30, 0x02	; 2
    6126:	11 82       	std	Z+1, r1	; 0x01
    6128:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    612a:	32 97       	sbiw	r30, 0x02	; 2
    612c:	11 82       	std	Z+1, r1	; 0x01
    612e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6130:	32 97       	sbiw	r30, 0x02	; 2
    6132:	11 82       	std	Z+1, r1	; 0x01
    6134:	10 82       	st	Z, r1

    *(--stk) = 0; 
    6136:	32 97       	sbiw	r30, 0x02	; 2
    6138:	11 82       	std	Z+1, r1	; 0x01
    613a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    613c:	32 97       	sbiw	r30, 0x02	; 2
    613e:	11 82       	std	Z+1, r1	; 0x01
    6140:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6142:	32 97       	sbiw	r30, 0x02	; 2
    6144:	11 82       	std	Z+1, r1	; 0x01
    6146:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6148:	32 97       	sbiw	r30, 0x02	; 2
    614a:	11 82       	std	Z+1, r1	; 0x01
    614c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    614e:	32 97       	sbiw	r30, 0x02	; 2
    6150:	11 82       	std	Z+1, r1	; 0x01
    6152:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6154:	32 97       	sbiw	r30, 0x02	; 2
    6156:	11 82       	std	Z+1, r1	; 0x01
    6158:	10 82       	st	Z, r1
    *(--stk) = 0; 
    615a:	32 97       	sbiw	r30, 0x02	; 2
    615c:	11 82       	std	Z+1, r1	; 0x01
    615e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6160:	32 97       	sbiw	r30, 0x02	; 2
    6162:	11 82       	std	Z+1, r1	; 0x01
    6164:	10 82       	st	Z, r1
    *(--stk) = 0;
    6166:	cb 01       	movw	r24, r22
    6168:	84 97       	sbiw	r24, 0x24	; 36
    616a:	fc 01       	movw	r30, r24
    616c:	11 82       	std	Z+1, r1	; 0x01
    616e:	10 82       	st	Z, r1


    return ((void *)stk);
}
    6170:	08 95       	ret

00006172 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    6172:	85 e5       	ldi	r24, 0x55	; 85
    6174:	80 93 fe 40 	sts	0x40FE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    6178:	ee ef       	ldi	r30, 0xFE	; 254
    617a:	f1 e4       	ldi	r31, 0x41	; 65
    617c:	f0 93 ea 08 	sts	0x08EA, r31
    6180:	e0 93 e9 08 	sts	0x08E9, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    6184:	8d e7       	ldi	r24, 0x7D	; 125
    6186:	98 e1       	ldi	r25, 0x18	; 24
    6188:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    618a:	80 93 ff 41 	sts	0x41FF, r24
    618e:	08 95       	ret

00006190 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    6190:	8d e7       	ldi	r24, 0x7D	; 125
    6192:	98 e1       	ldi	r25, 0x18	; 24
    6194:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6198:	80 93 ff 41 	sts	0x41FF, r24
    619c:	08 95       	ret

0000619e <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    619e:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_nrk_setup_timer>
  nrk_int_enable();  
    61a2:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <nrk_int_enable>

000061a6 <nrk_start_high_ready_task>:
    61a6:	a0 91 d2 0b 	lds	r26, 0x0BD2
    61aa:	b0 91 d3 0b 	lds	r27, 0x0BD3
    61ae:	cd 91       	ld	r28, X+
    61b0:	cd bf       	out	0x3d, r28	; 61
    61b2:	dd 91       	ld	r29, X+
    61b4:	de bf       	out	0x3e, r29	; 62
    61b6:	ff 91       	pop	r31
    61b8:	ef 91       	pop	r30
    61ba:	df 91       	pop	r29
    61bc:	cf 91       	pop	r28
    61be:	bf 91       	pop	r27
    61c0:	af 91       	pop	r26
    61c2:	9f 91       	pop	r25
    61c4:	8f 91       	pop	r24
    61c6:	7f 91       	pop	r23
    61c8:	6f 91       	pop	r22
    61ca:	5f 91       	pop	r21
    61cc:	4f 91       	pop	r20
    61ce:	3f 91       	pop	r19
    61d0:	2f 91       	pop	r18
    61d2:	1f 91       	pop	r17
    61d4:	0f 91       	pop	r16
    61d6:	ff 90       	pop	r15
    61d8:	ef 90       	pop	r14
    61da:	df 90       	pop	r13
    61dc:	cf 90       	pop	r12
    61de:	bf 90       	pop	r11
    61e0:	af 90       	pop	r10
    61e2:	9f 90       	pop	r9
    61e4:	8f 90       	pop	r8
    61e6:	7f 90       	pop	r7
    61e8:	6f 90       	pop	r6
    61ea:	5f 90       	pop	r5
    61ec:	4f 90       	pop	r4
    61ee:	3f 90       	pop	r3
    61f0:	2f 90       	pop	r2
    61f2:	1f 90       	pop	r1
    61f4:	0f 90       	pop	r0
    61f6:	0f be       	out	0x3f, r0	; 63
    61f8:	0f 90       	pop	r0
    61fa:	18 95       	reti

000061fc <main>:

uint8_t aes_key[16] = {0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee, 0xff}; 

int main ()
{
  nrk_setup_ports ();
    61fc:	0e 94 83 12 	call	0x2506	; 0x2506 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
    6200:	80 e1       	ldi	r24, 0x10	; 16
    6202:	90 e0       	ldi	r25, 0x00	; 0
    6204:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <nrk_setup_uart>

  nrk_init ();
    6208:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <nrk_init>

  nrk_led_clr (ORANGE_LED);
    620c:	82 e0       	ldi	r24, 0x02	; 2
    620e:	90 e0       	ldi	r25, 0x00	; 0
    6210:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_led_clr>
  nrk_led_clr (BLUE_LED);
    6214:	83 e0       	ldi	r24, 0x03	; 3
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_led_clr>
  nrk_led_clr (GREEN_LED);
    621c:	81 e0       	ldi	r24, 0x01	; 1
    621e:	90 e0       	ldi	r25, 0x00	; 0
    6220:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_led_clr>
  nrk_led_clr (RED_LED);
    6224:	80 e0       	ldi	r24, 0x00	; 0
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_led_clr>

  nrk_time_set (0, 0);
    622c:	20 e0       	ldi	r18, 0x00	; 0
    622e:	30 e0       	ldi	r19, 0x00	; 0
    6230:	a9 01       	movw	r20, r18
    6232:	60 e0       	ldi	r22, 0x00	; 0
    6234:	70 e0       	ldi	r23, 0x00	; 0
    6236:	cb 01       	movw	r24, r22
    6238:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <nrk_time_set>
  nrk_create_taskset ();
    623c:	0e 94 48 04 	call	0x890	; 0x890 <nrk_create_taskset>
  nrk_start ();
    6240:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <nrk_start>

  return 0;
}
    6244:	80 e0       	ldi	r24, 0x00	; 0
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	08 95       	ret

0000624a <vfprintf>:
    624a:	6f 92       	push	r6
    624c:	7f 92       	push	r7
    624e:	8f 92       	push	r8
    6250:	9f 92       	push	r9
    6252:	af 92       	push	r10
    6254:	bf 92       	push	r11
    6256:	cf 92       	push	r12
    6258:	df 92       	push	r13
    625a:	ef 92       	push	r14
    625c:	ff 92       	push	r15
    625e:	0f 93       	push	r16
    6260:	1f 93       	push	r17
    6262:	cf 93       	push	r28
    6264:	df 93       	push	r29
    6266:	cd b7       	in	r28, 0x3d	; 61
    6268:	de b7       	in	r29, 0x3e	; 62
    626a:	2c 97       	sbiw	r28, 0x0c	; 12
    626c:	0f b6       	in	r0, 0x3f	; 63
    626e:	f8 94       	cli
    6270:	de bf       	out	0x3e, r29	; 62
    6272:	0f be       	out	0x3f, r0	; 63
    6274:	cd bf       	out	0x3d, r28	; 61
    6276:	6c 01       	movw	r12, r24
    6278:	5b 01       	movw	r10, r22
    627a:	7a 01       	movw	r14, r20
    627c:	fc 01       	movw	r30, r24
    627e:	17 82       	std	Z+7, r1	; 0x07
    6280:	16 82       	std	Z+6, r1	; 0x06
    6282:	83 81       	ldd	r24, Z+3	; 0x03
    6284:	81 ff       	sbrs	r24, 1
    6286:	0e c1       	rjmp	.+540    	; 0x64a4 <vfprintf+0x25a>
    6288:	ce 01       	movw	r24, r28
    628a:	01 96       	adiw	r24, 0x01	; 1
    628c:	4c 01       	movw	r8, r24
    628e:	f6 01       	movw	r30, r12
    6290:	03 81       	ldd	r16, Z+3	; 0x03
    6292:	f5 01       	movw	r30, r10
    6294:	03 fd       	sbrc	r16, 3
    6296:	15 91       	lpm	r17, Z+
    6298:	03 ff       	sbrs	r16, 3
    629a:	11 91       	ld	r17, Z+
    629c:	5f 01       	movw	r10, r30
    629e:	11 23       	and	r17, r17
    62a0:	09 f4       	brne	.+2      	; 0x62a4 <vfprintf+0x5a>
    62a2:	fc c0       	rjmp	.+504    	; 0x649c <vfprintf+0x252>
    62a4:	15 32       	cpi	r17, 0x25	; 37
    62a6:	49 f4       	brne	.+18     	; 0x62ba <vfprintf+0x70>
    62a8:	03 fd       	sbrc	r16, 3
    62aa:	15 91       	lpm	r17, Z+
    62ac:	03 ff       	sbrs	r16, 3
    62ae:	11 91       	ld	r17, Z+
    62b0:	5f 01       	movw	r10, r30
    62b2:	15 32       	cpi	r17, 0x25	; 37
    62b4:	11 f0       	breq	.+4      	; 0x62ba <vfprintf+0x70>
    62b6:	20 e0       	ldi	r18, 0x00	; 0
    62b8:	1b c0       	rjmp	.+54     	; 0x62f0 <vfprintf+0xa6>
    62ba:	b6 01       	movw	r22, r12
    62bc:	81 2f       	mov	r24, r17
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <fputc>
    62c4:	37 01       	movw	r6, r14
    62c6:	73 01       	movw	r14, r6
    62c8:	e2 cf       	rjmp	.-60     	; 0x628e <vfprintf+0x44>
    62ca:	11 23       	and	r17, r17
    62cc:	09 f4       	brne	.+2      	; 0x62d0 <vfprintf+0x86>
    62ce:	e6 c0       	rjmp	.+460    	; 0x649c <vfprintf+0x252>
    62d0:	61 2f       	mov	r22, r17
    62d2:	70 e0       	ldi	r23, 0x00	; 0
    62d4:	84 ea       	ldi	r24, 0xA4	; 164
    62d6:	96 e0       	ldi	r25, 0x06	; 6
    62d8:	2c 87       	std	Y+12, r18	; 0x0c
    62da:	0e 94 38 33 	call	0x6670	; 0x6670 <strchr_P>
    62de:	2c 85       	ldd	r18, Y+12	; 0x0c
    62e0:	89 2b       	or	r24, r25
    62e2:	49 f0       	breq	.+18     	; 0x62f6 <vfprintf+0xac>
    62e4:	f5 01       	movw	r30, r10
    62e6:	03 fd       	sbrc	r16, 3
    62e8:	15 91       	lpm	r17, Z+
    62ea:	03 ff       	sbrs	r16, 3
    62ec:	11 91       	ld	r17, Z+
    62ee:	5f 01       	movw	r10, r30
    62f0:	27 ff       	sbrs	r18, 7
    62f2:	eb cf       	rjmp	.-42     	; 0x62ca <vfprintf+0x80>
    62f4:	09 c0       	rjmp	.+18     	; 0x6308 <vfprintf+0xbe>
    62f6:	13 32       	cpi	r17, 0x23	; 35
    62f8:	29 f0       	breq	.+10     	; 0x6304 <vfprintf+0xba>
    62fa:	1c 36       	cpi	r17, 0x6C	; 108
    62fc:	09 f0       	breq	.+2      	; 0x6300 <vfprintf+0xb6>
    62fe:	d5 c0       	rjmp	.+426    	; 0x64aa <vfprintf+0x260>
    6300:	20 68       	ori	r18, 0x80	; 128
    6302:	f0 cf       	rjmp	.-32     	; 0x62e4 <vfprintf+0x9a>
    6304:	20 e1       	ldi	r18, 0x10	; 16
    6306:	ee cf       	rjmp	.-36     	; 0x62e4 <vfprintf+0x9a>
    6308:	02 2f       	mov	r16, r18
    630a:	11 23       	and	r17, r17
    630c:	09 f4       	brne	.+2      	; 0x6310 <vfprintf+0xc6>
    630e:	c6 c0       	rjmp	.+396    	; 0x649c <vfprintf+0x252>
    6310:	61 2f       	mov	r22, r17
    6312:	70 e0       	ldi	r23, 0x00	; 0
    6314:	8d e9       	ldi	r24, 0x9D	; 157
    6316:	96 e0       	ldi	r25, 0x06	; 6
    6318:	2c 87       	std	Y+12, r18	; 0x0c
    631a:	0e 94 38 33 	call	0x6670	; 0x6670 <strchr_P>
    631e:	2c 85       	ldd	r18, Y+12	; 0x0c
    6320:	89 2b       	or	r24, r25
    6322:	41 f0       	breq	.+16     	; 0x6334 <vfprintf+0xea>
    6324:	37 01       	movw	r6, r14
    6326:	f4 e0       	ldi	r31, 0x04	; 4
    6328:	6f 0e       	add	r6, r31
    632a:	71 1c       	adc	r7, r1
    632c:	b6 01       	movw	r22, r12
    632e:	8f e3       	ldi	r24, 0x3F	; 63
    6330:	90 e0       	ldi	r25, 0x00	; 0
    6332:	11 c0       	rjmp	.+34     	; 0x6356 <vfprintf+0x10c>
    6334:	13 36       	cpi	r17, 0x63	; 99
    6336:	39 f0       	breq	.+14     	; 0x6346 <vfprintf+0xfc>
    6338:	13 37       	cpi	r17, 0x73	; 115
    633a:	81 f0       	breq	.+32     	; 0x635c <vfprintf+0x112>
    633c:	13 35       	cpi	r17, 0x53	; 83
    633e:	19 f5       	brne	.+70     	; 0x6386 <vfprintf+0x13c>
    6340:	02 2f       	mov	r16, r18
    6342:	01 60       	ori	r16, 0x01	; 1
    6344:	0b c0       	rjmp	.+22     	; 0x635c <vfprintf+0x112>
    6346:	37 01       	movw	r6, r14
    6348:	82 e0       	ldi	r24, 0x02	; 2
    634a:	68 0e       	add	r6, r24
    634c:	71 1c       	adc	r7, r1
    634e:	b6 01       	movw	r22, r12
    6350:	f7 01       	movw	r30, r14
    6352:	80 81       	ld	r24, Z
    6354:	91 81       	ldd	r25, Z+1	; 0x01
    6356:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <fputc>
    635a:	b5 cf       	rjmp	.-150    	; 0x62c6 <vfprintf+0x7c>
    635c:	37 01       	movw	r6, r14
    635e:	f2 e0       	ldi	r31, 0x02	; 2
    6360:	6f 0e       	add	r6, r31
    6362:	71 1c       	adc	r7, r1
    6364:	f7 01       	movw	r30, r14
    6366:	e0 80       	ld	r14, Z
    6368:	f1 80       	ldd	r15, Z+1	; 0x01
    636a:	f7 01       	movw	r30, r14
    636c:	00 fd       	sbrc	r16, 0
    636e:	85 91       	lpm	r24, Z+
    6370:	00 ff       	sbrs	r16, 0
    6372:	81 91       	ld	r24, Z+
    6374:	7f 01       	movw	r14, r30
    6376:	88 23       	and	r24, r24
    6378:	09 f4       	brne	.+2      	; 0x637c <vfprintf+0x132>
    637a:	a5 cf       	rjmp	.-182    	; 0x62c6 <vfprintf+0x7c>
    637c:	b6 01       	movw	r22, r12
    637e:	90 e0       	ldi	r25, 0x00	; 0
    6380:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <fputc>
    6384:	f2 cf       	rjmp	.-28     	; 0x636a <vfprintf+0x120>
    6386:	14 36       	cpi	r17, 0x64	; 100
    6388:	11 f0       	breq	.+4      	; 0x638e <vfprintf+0x144>
    638a:	19 36       	cpi	r17, 0x69	; 105
    638c:	29 f5       	brne	.+74     	; 0x63d8 <vfprintf+0x18e>
    638e:	37 01       	movw	r6, r14
    6390:	27 ff       	sbrs	r18, 7
    6392:	09 c0       	rjmp	.+18     	; 0x63a6 <vfprintf+0x15c>
    6394:	f4 e0       	ldi	r31, 0x04	; 4
    6396:	6f 0e       	add	r6, r31
    6398:	71 1c       	adc	r7, r1
    639a:	f7 01       	movw	r30, r14
    639c:	60 81       	ld	r22, Z
    639e:	71 81       	ldd	r23, Z+1	; 0x01
    63a0:	82 81       	ldd	r24, Z+2	; 0x02
    63a2:	93 81       	ldd	r25, Z+3	; 0x03
    63a4:	0a c0       	rjmp	.+20     	; 0x63ba <vfprintf+0x170>
    63a6:	f2 e0       	ldi	r31, 0x02	; 2
    63a8:	6f 0e       	add	r6, r31
    63aa:	71 1c       	adc	r7, r1
    63ac:	f7 01       	movw	r30, r14
    63ae:	60 81       	ld	r22, Z
    63b0:	71 81       	ldd	r23, Z+1	; 0x01
    63b2:	88 27       	eor	r24, r24
    63b4:	77 fd       	sbrc	r23, 7
    63b6:	80 95       	com	r24
    63b8:	98 2f       	mov	r25, r24
    63ba:	02 2f       	mov	r16, r18
    63bc:	0f 7e       	andi	r16, 0xEF	; 239
    63be:	97 ff       	sbrs	r25, 7
    63c0:	08 c0       	rjmp	.+16     	; 0x63d2 <vfprintf+0x188>
    63c2:	90 95       	com	r25
    63c4:	80 95       	com	r24
    63c6:	70 95       	com	r23
    63c8:	61 95       	neg	r22
    63ca:	7f 4f       	sbci	r23, 0xFF	; 255
    63cc:	8f 4f       	sbci	r24, 0xFF	; 255
    63ce:	9f 4f       	sbci	r25, 0xFF	; 255
    63d0:	00 64       	ori	r16, 0x40	; 64
    63d2:	2a e0       	ldi	r18, 0x0A	; 10
    63d4:	30 e0       	ldi	r19, 0x00	; 0
    63d6:	33 c0       	rjmp	.+102    	; 0x643e <vfprintf+0x1f4>
    63d8:	10 37       	cpi	r17, 0x70	; 112
    63da:	99 f0       	breq	.+38     	; 0x6402 <vfprintf+0x1b8>
    63dc:	40 f4       	brcc	.+16     	; 0x63ee <vfprintf+0x1a4>
    63de:	18 35       	cpi	r17, 0x58	; 88
    63e0:	b1 f0       	breq	.+44     	; 0x640e <vfprintf+0x1c4>
    63e2:	1f 36       	cpi	r17, 0x6F	; 111
    63e4:	09 f0       	breq	.+2      	; 0x63e8 <vfprintf+0x19e>
    63e6:	5a c0       	rjmp	.+180    	; 0x649c <vfprintf+0x252>
    63e8:	28 e0       	ldi	r18, 0x08	; 8
    63ea:	30 e0       	ldi	r19, 0x00	; 0
    63ec:	14 c0       	rjmp	.+40     	; 0x6416 <vfprintf+0x1cc>
    63ee:	15 37       	cpi	r17, 0x75	; 117
    63f0:	19 f0       	breq	.+6      	; 0x63f8 <vfprintf+0x1ae>
    63f2:	18 37       	cpi	r17, 0x78	; 120
    63f4:	41 f0       	breq	.+16     	; 0x6406 <vfprintf+0x1bc>
    63f6:	52 c0       	rjmp	.+164    	; 0x649c <vfprintf+0x252>
    63f8:	02 2f       	mov	r16, r18
    63fa:	0f 7e       	andi	r16, 0xEF	; 239
    63fc:	2a e0       	ldi	r18, 0x0A	; 10
    63fe:	30 e0       	ldi	r19, 0x00	; 0
    6400:	0a c0       	rjmp	.+20     	; 0x6416 <vfprintf+0x1cc>
    6402:	02 2f       	mov	r16, r18
    6404:	00 61       	ori	r16, 0x10	; 16
    6406:	04 62       	ori	r16, 0x24	; 36
    6408:	20 e1       	ldi	r18, 0x10	; 16
    640a:	30 e0       	ldi	r19, 0x00	; 0
    640c:	04 c0       	rjmp	.+8      	; 0x6416 <vfprintf+0x1cc>
    640e:	02 2f       	mov	r16, r18
    6410:	04 60       	ori	r16, 0x04	; 4
    6412:	20 e1       	ldi	r18, 0x10	; 16
    6414:	32 e0       	ldi	r19, 0x02	; 2
    6416:	37 01       	movw	r6, r14
    6418:	07 ff       	sbrs	r16, 7
    641a:	09 c0       	rjmp	.+18     	; 0x642e <vfprintf+0x1e4>
    641c:	f4 e0       	ldi	r31, 0x04	; 4
    641e:	6f 0e       	add	r6, r31
    6420:	71 1c       	adc	r7, r1
    6422:	f7 01       	movw	r30, r14
    6424:	60 81       	ld	r22, Z
    6426:	71 81       	ldd	r23, Z+1	; 0x01
    6428:	82 81       	ldd	r24, Z+2	; 0x02
    642a:	93 81       	ldd	r25, Z+3	; 0x03
    642c:	08 c0       	rjmp	.+16     	; 0x643e <vfprintf+0x1f4>
    642e:	f2 e0       	ldi	r31, 0x02	; 2
    6430:	6f 0e       	add	r6, r31
    6432:	71 1c       	adc	r7, r1
    6434:	f7 01       	movw	r30, r14
    6436:	60 81       	ld	r22, Z
    6438:	71 81       	ldd	r23, Z+1	; 0x01
    643a:	80 e0       	ldi	r24, 0x00	; 0
    643c:	90 e0       	ldi	r25, 0x00	; 0
    643e:	a4 01       	movw	r20, r8
    6440:	0e 94 95 34 	call	0x692a	; 0x692a <__ultoa_invert>
    6444:	18 2f       	mov	r17, r24
    6446:	18 19       	sub	r17, r8
    6448:	06 ff       	sbrs	r16, 6
    644a:	05 c0       	rjmp	.+10     	; 0x6456 <vfprintf+0x20c>
    644c:	b6 01       	movw	r22, r12
    644e:	8d e2       	ldi	r24, 0x2D	; 45
    6450:	90 e0       	ldi	r25, 0x00	; 0
    6452:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <fputc>
    6456:	04 ff       	sbrs	r16, 4
    6458:	15 c0       	rjmp	.+42     	; 0x6484 <vfprintf+0x23a>
    645a:	fe 01       	movw	r30, r28
    645c:	e1 0f       	add	r30, r17
    645e:	f1 1d       	adc	r31, r1
    6460:	80 81       	ld	r24, Z
    6462:	80 33       	cpi	r24, 0x30	; 48
    6464:	79 f0       	breq	.+30     	; 0x6484 <vfprintf+0x23a>
    6466:	b6 01       	movw	r22, r12
    6468:	80 e3       	ldi	r24, 0x30	; 48
    646a:	90 e0       	ldi	r25, 0x00	; 0
    646c:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <fputc>
    6470:	02 ff       	sbrs	r16, 2
    6472:	08 c0       	rjmp	.+16     	; 0x6484 <vfprintf+0x23a>
    6474:	00 72       	andi	r16, 0x20	; 32
    6476:	80 2f       	mov	r24, r16
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	b6 01       	movw	r22, r12
    647c:	88 5a       	subi	r24, 0xA8	; 168
    647e:	9f 4f       	sbci	r25, 0xFF	; 255
    6480:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <fputc>
    6484:	11 50       	subi	r17, 0x01	; 1
    6486:	f4 01       	movw	r30, r8
    6488:	e1 0f       	add	r30, r17
    648a:	f1 1d       	adc	r31, r1
    648c:	80 81       	ld	r24, Z
    648e:	b6 01       	movw	r22, r12
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <fputc>
    6496:	11 11       	cpse	r17, r1
    6498:	f5 cf       	rjmp	.-22     	; 0x6484 <vfprintf+0x23a>
    649a:	15 cf       	rjmp	.-470    	; 0x62c6 <vfprintf+0x7c>
    649c:	f6 01       	movw	r30, r12
    649e:	86 81       	ldd	r24, Z+6	; 0x06
    64a0:	97 81       	ldd	r25, Z+7	; 0x07
    64a2:	05 c0       	rjmp	.+10     	; 0x64ae <vfprintf+0x264>
    64a4:	8f ef       	ldi	r24, 0xFF	; 255
    64a6:	9f ef       	ldi	r25, 0xFF	; 255
    64a8:	02 c0       	rjmp	.+4      	; 0x64ae <vfprintf+0x264>
    64aa:	02 2f       	mov	r16, r18
    64ac:	31 cf       	rjmp	.-414    	; 0x6310 <vfprintf+0xc6>
    64ae:	2c 96       	adiw	r28, 0x0c	; 12
    64b0:	0f b6       	in	r0, 0x3f	; 63
    64b2:	f8 94       	cli
    64b4:	de bf       	out	0x3e, r29	; 62
    64b6:	0f be       	out	0x3f, r0	; 63
    64b8:	cd bf       	out	0x3d, r28	; 61
    64ba:	df 91       	pop	r29
    64bc:	cf 91       	pop	r28
    64be:	1f 91       	pop	r17
    64c0:	0f 91       	pop	r16
    64c2:	ff 90       	pop	r15
    64c4:	ef 90       	pop	r14
    64c6:	df 90       	pop	r13
    64c8:	cf 90       	pop	r12
    64ca:	bf 90       	pop	r11
    64cc:	af 90       	pop	r10
    64ce:	9f 90       	pop	r9
    64d0:	8f 90       	pop	r8
    64d2:	7f 90       	pop	r7
    64d4:	6f 90       	pop	r6
    64d6:	08 95       	ret

000064d8 <__usmulhisi3>:
    64d8:	0e 94 29 33 	call	0x6652	; 0x6652 <__umulhisi3>

000064dc <__usmulhisi3_tail>:
    64dc:	b7 ff       	sbrs	r27, 7
    64de:	08 95       	ret
    64e0:	82 1b       	sub	r24, r18
    64e2:	93 0b       	sbc	r25, r19
    64e4:	08 95       	ret

000064e6 <__muluhisi3>:
    64e6:	0e 94 29 33 	call	0x6652	; 0x6652 <__umulhisi3>
    64ea:	a5 9f       	mul	r26, r21
    64ec:	90 0d       	add	r25, r0
    64ee:	b4 9f       	mul	r27, r20
    64f0:	90 0d       	add	r25, r0
    64f2:	a4 9f       	mul	r26, r20
    64f4:	80 0d       	add	r24, r0
    64f6:	91 1d       	adc	r25, r1
    64f8:	11 24       	eor	r1, r1
    64fa:	08 95       	ret

000064fc <__mulsi3>:
    64fc:	db 01       	movw	r26, r22
    64fe:	8f 93       	push	r24
    6500:	9f 93       	push	r25
    6502:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__muluhisi3>
    6506:	bf 91       	pop	r27
    6508:	af 91       	pop	r26
    650a:	a2 9f       	mul	r26, r18
    650c:	80 0d       	add	r24, r0
    650e:	91 1d       	adc	r25, r1
    6510:	a3 9f       	mul	r26, r19
    6512:	90 0d       	add	r25, r0
    6514:	b2 9f       	mul	r27, r18
    6516:	90 0d       	add	r25, r0
    6518:	11 24       	eor	r1, r1
    651a:	08 95       	ret

0000651c <__udivmodhi4>:
    651c:	aa 1b       	sub	r26, r26
    651e:	bb 1b       	sub	r27, r27
    6520:	51 e1       	ldi	r21, 0x11	; 17
    6522:	07 c0       	rjmp	.+14     	; 0x6532 <__udivmodhi4_ep>

00006524 <__udivmodhi4_loop>:
    6524:	aa 1f       	adc	r26, r26
    6526:	bb 1f       	adc	r27, r27
    6528:	a6 17       	cp	r26, r22
    652a:	b7 07       	cpc	r27, r23
    652c:	10 f0       	brcs	.+4      	; 0x6532 <__udivmodhi4_ep>
    652e:	a6 1b       	sub	r26, r22
    6530:	b7 0b       	sbc	r27, r23

00006532 <__udivmodhi4_ep>:
    6532:	88 1f       	adc	r24, r24
    6534:	99 1f       	adc	r25, r25
    6536:	5a 95       	dec	r21
    6538:	a9 f7       	brne	.-22     	; 0x6524 <__udivmodhi4_loop>
    653a:	80 95       	com	r24
    653c:	90 95       	com	r25
    653e:	bc 01       	movw	r22, r24
    6540:	cd 01       	movw	r24, r26
    6542:	08 95       	ret

00006544 <__udivmodsi4>:
    6544:	a1 e2       	ldi	r26, 0x21	; 33
    6546:	1a 2e       	mov	r1, r26
    6548:	aa 1b       	sub	r26, r26
    654a:	bb 1b       	sub	r27, r27
    654c:	fd 01       	movw	r30, r26
    654e:	0d c0       	rjmp	.+26     	; 0x656a <__udivmodsi4_ep>

00006550 <__udivmodsi4_loop>:
    6550:	aa 1f       	adc	r26, r26
    6552:	bb 1f       	adc	r27, r27
    6554:	ee 1f       	adc	r30, r30
    6556:	ff 1f       	adc	r31, r31
    6558:	a2 17       	cp	r26, r18
    655a:	b3 07       	cpc	r27, r19
    655c:	e4 07       	cpc	r30, r20
    655e:	f5 07       	cpc	r31, r21
    6560:	20 f0       	brcs	.+8      	; 0x656a <__udivmodsi4_ep>
    6562:	a2 1b       	sub	r26, r18
    6564:	b3 0b       	sbc	r27, r19
    6566:	e4 0b       	sbc	r30, r20
    6568:	f5 0b       	sbc	r31, r21

0000656a <__udivmodsi4_ep>:
    656a:	66 1f       	adc	r22, r22
    656c:	77 1f       	adc	r23, r23
    656e:	88 1f       	adc	r24, r24
    6570:	99 1f       	adc	r25, r25
    6572:	1a 94       	dec	r1
    6574:	69 f7       	brne	.-38     	; 0x6550 <__udivmodsi4_loop>
    6576:	60 95       	com	r22
    6578:	70 95       	com	r23
    657a:	80 95       	com	r24
    657c:	90 95       	com	r25
    657e:	9b 01       	movw	r18, r22
    6580:	ac 01       	movw	r20, r24
    6582:	bd 01       	movw	r22, r26
    6584:	cf 01       	movw	r24, r30
    6586:	08 95       	ret

00006588 <__umoddi3>:
    6588:	68 94       	set
    658a:	01 c0       	rjmp	.+2      	; 0x658e <__udivdi3_umoddi3>

0000658c <__udivdi3>:
    658c:	e8 94       	clt

0000658e <__udivdi3_umoddi3>:
    658e:	8f 92       	push	r8
    6590:	9f 92       	push	r9
    6592:	cf 93       	push	r28
    6594:	df 93       	push	r29
    6596:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <__udivmod64>
    659a:	df 91       	pop	r29
    659c:	cf 91       	pop	r28
    659e:	9f 90       	pop	r9
    65a0:	8f 90       	pop	r8
    65a2:	08 95       	ret

000065a4 <__udivmod64>:
    65a4:	88 24       	eor	r8, r8
    65a6:	99 24       	eor	r9, r9
    65a8:	f4 01       	movw	r30, r8
    65aa:	e4 01       	movw	r28, r8
    65ac:	b0 e4       	ldi	r27, 0x40	; 64
    65ae:	9f 93       	push	r25
    65b0:	aa 27       	eor	r26, r26
    65b2:	9a 15       	cp	r25, r10
    65b4:	8b 04       	cpc	r8, r11
    65b6:	9c 04       	cpc	r9, r12
    65b8:	ed 05       	cpc	r30, r13
    65ba:	fe 05       	cpc	r31, r14
    65bc:	cf 05       	cpc	r28, r15
    65be:	d0 07       	cpc	r29, r16
    65c0:	a1 07       	cpc	r26, r17
    65c2:	98 f4       	brcc	.+38     	; 0x65ea <__udivmod64+0x46>
    65c4:	ad 2f       	mov	r26, r29
    65c6:	dc 2f       	mov	r29, r28
    65c8:	cf 2f       	mov	r28, r31
    65ca:	fe 2f       	mov	r31, r30
    65cc:	e9 2d       	mov	r30, r9
    65ce:	98 2c       	mov	r9, r8
    65d0:	89 2e       	mov	r8, r25
    65d2:	98 2f       	mov	r25, r24
    65d4:	87 2f       	mov	r24, r23
    65d6:	76 2f       	mov	r23, r22
    65d8:	65 2f       	mov	r22, r21
    65da:	54 2f       	mov	r21, r20
    65dc:	43 2f       	mov	r20, r19
    65de:	32 2f       	mov	r19, r18
    65e0:	22 27       	eor	r18, r18
    65e2:	b8 50       	subi	r27, 0x08	; 8
    65e4:	31 f7       	brne	.-52     	; 0x65b2 <__udivmod64+0xe>
    65e6:	bf 91       	pop	r27
    65e8:	27 c0       	rjmp	.+78     	; 0x6638 <__udivmod64+0x94>
    65ea:	1b 2e       	mov	r1, r27
    65ec:	bf 91       	pop	r27
    65ee:	bb 27       	eor	r27, r27
    65f0:	22 0f       	add	r18, r18
    65f2:	33 1f       	adc	r19, r19
    65f4:	44 1f       	adc	r20, r20
    65f6:	55 1f       	adc	r21, r21
    65f8:	66 1f       	adc	r22, r22
    65fa:	77 1f       	adc	r23, r23
    65fc:	88 1f       	adc	r24, r24
    65fe:	99 1f       	adc	r25, r25
    6600:	88 1c       	adc	r8, r8
    6602:	99 1c       	adc	r9, r9
    6604:	ee 1f       	adc	r30, r30
    6606:	ff 1f       	adc	r31, r31
    6608:	cc 1f       	adc	r28, r28
    660a:	dd 1f       	adc	r29, r29
    660c:	aa 1f       	adc	r26, r26
    660e:	bb 1f       	adc	r27, r27
    6610:	8a 14       	cp	r8, r10
    6612:	9b 04       	cpc	r9, r11
    6614:	ec 05       	cpc	r30, r12
    6616:	fd 05       	cpc	r31, r13
    6618:	ce 05       	cpc	r28, r14
    661a:	df 05       	cpc	r29, r15
    661c:	a0 07       	cpc	r26, r16
    661e:	b1 07       	cpc	r27, r17
    6620:	48 f0       	brcs	.+18     	; 0x6634 <__udivmod64+0x90>
    6622:	8a 18       	sub	r8, r10
    6624:	9b 08       	sbc	r9, r11
    6626:	ec 09       	sbc	r30, r12
    6628:	fd 09       	sbc	r31, r13
    662a:	ce 09       	sbc	r28, r14
    662c:	df 09       	sbc	r29, r15
    662e:	a0 0b       	sbc	r26, r16
    6630:	b1 0b       	sbc	r27, r17
    6632:	21 60       	ori	r18, 0x01	; 1
    6634:	1a 94       	dec	r1
    6636:	e1 f6       	brne	.-72     	; 0x65f0 <__udivmod64+0x4c>
    6638:	2e f4       	brtc	.+10     	; 0x6644 <__udivmod64+0xa0>
    663a:	94 01       	movw	r18, r8
    663c:	af 01       	movw	r20, r30
    663e:	be 01       	movw	r22, r28
    6640:	cd 01       	movw	r24, r26
    6642:	00 0c       	add	r0, r0
    6644:	08 95       	ret

00006646 <__tablejump2__>:
    6646:	ee 0f       	add	r30, r30
    6648:	ff 1f       	adc	r31, r31

0000664a <__tablejump__>:
    664a:	05 90       	lpm	r0, Z+
    664c:	f4 91       	lpm	r31, Z
    664e:	e0 2d       	mov	r30, r0
    6650:	09 94       	ijmp

00006652 <__umulhisi3>:
    6652:	a2 9f       	mul	r26, r18
    6654:	b0 01       	movw	r22, r0
    6656:	b3 9f       	mul	r27, r19
    6658:	c0 01       	movw	r24, r0
    665a:	a3 9f       	mul	r26, r19
    665c:	70 0d       	add	r23, r0
    665e:	81 1d       	adc	r24, r1
    6660:	11 24       	eor	r1, r1
    6662:	91 1d       	adc	r25, r1
    6664:	b2 9f       	mul	r27, r18
    6666:	70 0d       	add	r23, r0
    6668:	81 1d       	adc	r24, r1
    666a:	11 24       	eor	r1, r1
    666c:	91 1d       	adc	r25, r1
    666e:	08 95       	ret

00006670 <strchr_P>:
    6670:	fc 01       	movw	r30, r24
    6672:	05 90       	lpm	r0, Z+
    6674:	06 16       	cp	r0, r22
    6676:	21 f0       	breq	.+8      	; 0x6680 <strchr_P+0x10>
    6678:	00 20       	and	r0, r0
    667a:	d9 f7       	brne	.-10     	; 0x6672 <strchr_P+0x2>
    667c:	c0 01       	movw	r24, r0
    667e:	08 95       	ret
    6680:	31 97       	sbiw	r30, 0x01	; 1
    6682:	cf 01       	movw	r24, r30
    6684:	08 95       	ret

00006686 <memcpy>:
    6686:	fb 01       	movw	r30, r22
    6688:	dc 01       	movw	r26, r24
    668a:	02 c0       	rjmp	.+4      	; 0x6690 <memcpy+0xa>
    668c:	01 90       	ld	r0, Z+
    668e:	0d 92       	st	X+, r0
    6690:	41 50       	subi	r20, 0x01	; 1
    6692:	50 40       	sbci	r21, 0x00	; 0
    6694:	d8 f7       	brcc	.-10     	; 0x668c <memcpy+0x6>
    6696:	08 95       	ret

00006698 <strncmp>:
    6698:	fb 01       	movw	r30, r22
    669a:	dc 01       	movw	r26, r24
    669c:	41 50       	subi	r20, 0x01	; 1
    669e:	50 40       	sbci	r21, 0x00	; 0
    66a0:	30 f0       	brcs	.+12     	; 0x66ae <strncmp+0x16>
    66a2:	8d 91       	ld	r24, X+
    66a4:	01 90       	ld	r0, Z+
    66a6:	80 19       	sub	r24, r0
    66a8:	19 f4       	brne	.+6      	; 0x66b0 <strncmp+0x18>
    66aa:	00 20       	and	r0, r0
    66ac:	b9 f7       	brne	.-18     	; 0x669c <strncmp+0x4>
    66ae:	88 1b       	sub	r24, r24
    66b0:	99 0b       	sbc	r25, r25
    66b2:	08 95       	ret

000066b4 <fdevopen>:
    66b4:	0f 93       	push	r16
    66b6:	1f 93       	push	r17
    66b8:	cf 93       	push	r28
    66ba:	df 93       	push	r29
    66bc:	00 97       	sbiw	r24, 0x00	; 0
    66be:	31 f4       	brne	.+12     	; 0x66cc <fdevopen+0x18>
    66c0:	61 15       	cp	r22, r1
    66c2:	71 05       	cpc	r23, r1
    66c4:	19 f4       	brne	.+6      	; 0x66cc <fdevopen+0x18>
    66c6:	80 e0       	ldi	r24, 0x00	; 0
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	3a c0       	rjmp	.+116    	; 0x6740 <fdevopen+0x8c>
    66cc:	8b 01       	movw	r16, r22
    66ce:	ec 01       	movw	r28, r24
    66d0:	6e e0       	ldi	r22, 0x0E	; 14
    66d2:	70 e0       	ldi	r23, 0x00	; 0
    66d4:	81 e0       	ldi	r24, 0x01	; 1
    66d6:	90 e0       	ldi	r25, 0x00	; 0
    66d8:	0e 94 09 35 	call	0x6a12	; 0x6a12 <calloc>
    66dc:	fc 01       	movw	r30, r24
    66de:	00 97       	sbiw	r24, 0x00	; 0
    66e0:	91 f3       	breq	.-28     	; 0x66c6 <fdevopen+0x12>
    66e2:	80 e8       	ldi	r24, 0x80	; 128
    66e4:	83 83       	std	Z+3, r24	; 0x03
    66e6:	01 15       	cp	r16, r1
    66e8:	11 05       	cpc	r17, r1
    66ea:	71 f0       	breq	.+28     	; 0x6708 <fdevopen+0x54>
    66ec:	13 87       	std	Z+11, r17	; 0x0b
    66ee:	02 87       	std	Z+10, r16	; 0x0a
    66f0:	81 e8       	ldi	r24, 0x81	; 129
    66f2:	83 83       	std	Z+3, r24	; 0x03
    66f4:	80 91 44 0c 	lds	r24, 0x0C44
    66f8:	90 91 45 0c 	lds	r25, 0x0C45
    66fc:	89 2b       	or	r24, r25
    66fe:	21 f4       	brne	.+8      	; 0x6708 <fdevopen+0x54>
    6700:	f0 93 45 0c 	sts	0x0C45, r31
    6704:	e0 93 44 0c 	sts	0x0C44, r30
    6708:	20 97       	sbiw	r28, 0x00	; 0
    670a:	c9 f0       	breq	.+50     	; 0x673e <fdevopen+0x8a>
    670c:	d1 87       	std	Z+9, r29	; 0x09
    670e:	c0 87       	std	Z+8, r28	; 0x08
    6710:	83 81       	ldd	r24, Z+3	; 0x03
    6712:	82 60       	ori	r24, 0x02	; 2
    6714:	83 83       	std	Z+3, r24	; 0x03
    6716:	80 91 46 0c 	lds	r24, 0x0C46
    671a:	90 91 47 0c 	lds	r25, 0x0C47
    671e:	89 2b       	or	r24, r25
    6720:	71 f4       	brne	.+28     	; 0x673e <fdevopen+0x8a>
    6722:	f0 93 47 0c 	sts	0x0C47, r31
    6726:	e0 93 46 0c 	sts	0x0C46, r30
    672a:	80 91 48 0c 	lds	r24, 0x0C48
    672e:	90 91 49 0c 	lds	r25, 0x0C49
    6732:	89 2b       	or	r24, r25
    6734:	21 f4       	brne	.+8      	; 0x673e <fdevopen+0x8a>
    6736:	f0 93 49 0c 	sts	0x0C49, r31
    673a:	e0 93 48 0c 	sts	0x0C48, r30
    673e:	cf 01       	movw	r24, r30
    6740:	df 91       	pop	r29
    6742:	cf 91       	pop	r28
    6744:	1f 91       	pop	r17
    6746:	0f 91       	pop	r16
    6748:	08 95       	ret

0000674a <fgetc>:
    674a:	cf 93       	push	r28
    674c:	df 93       	push	r29
    674e:	ec 01       	movw	r28, r24
    6750:	2b 81       	ldd	r18, Y+3	; 0x03
    6752:	20 ff       	sbrs	r18, 0
    6754:	33 c0       	rjmp	.+102    	; 0x67bc <fgetc+0x72>
    6756:	26 ff       	sbrs	r18, 6
    6758:	0a c0       	rjmp	.+20     	; 0x676e <fgetc+0x24>
    675a:	2f 7b       	andi	r18, 0xBF	; 191
    675c:	2b 83       	std	Y+3, r18	; 0x03
    675e:	8e 81       	ldd	r24, Y+6	; 0x06
    6760:	9f 81       	ldd	r25, Y+7	; 0x07
    6762:	01 96       	adiw	r24, 0x01	; 1
    6764:	9f 83       	std	Y+7, r25	; 0x07
    6766:	8e 83       	std	Y+6, r24	; 0x06
    6768:	8a 81       	ldd	r24, Y+2	; 0x02
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	29 c0       	rjmp	.+82     	; 0x67c0 <fgetc+0x76>
    676e:	22 ff       	sbrs	r18, 2
    6770:	0f c0       	rjmp	.+30     	; 0x6790 <fgetc+0x46>
    6772:	e8 81       	ld	r30, Y
    6774:	f9 81       	ldd	r31, Y+1	; 0x01
    6776:	80 81       	ld	r24, Z
    6778:	99 27       	eor	r25, r25
    677a:	87 fd       	sbrc	r24, 7
    677c:	90 95       	com	r25
    677e:	00 97       	sbiw	r24, 0x00	; 0
    6780:	19 f4       	brne	.+6      	; 0x6788 <fgetc+0x3e>
    6782:	20 62       	ori	r18, 0x20	; 32
    6784:	2b 83       	std	Y+3, r18	; 0x03
    6786:	1a c0       	rjmp	.+52     	; 0x67bc <fgetc+0x72>
    6788:	31 96       	adiw	r30, 0x01	; 1
    678a:	f9 83       	std	Y+1, r31	; 0x01
    678c:	e8 83       	st	Y, r30
    678e:	0e c0       	rjmp	.+28     	; 0x67ac <fgetc+0x62>
    6790:	ea 85       	ldd	r30, Y+10	; 0x0a
    6792:	fb 85       	ldd	r31, Y+11	; 0x0b
    6794:	09 95       	icall
    6796:	97 ff       	sbrs	r25, 7
    6798:	09 c0       	rjmp	.+18     	; 0x67ac <fgetc+0x62>
    679a:	2b 81       	ldd	r18, Y+3	; 0x03
    679c:	01 96       	adiw	r24, 0x01	; 1
    679e:	11 f0       	breq	.+4      	; 0x67a4 <fgetc+0x5a>
    67a0:	80 e2       	ldi	r24, 0x20	; 32
    67a2:	01 c0       	rjmp	.+2      	; 0x67a6 <fgetc+0x5c>
    67a4:	80 e1       	ldi	r24, 0x10	; 16
    67a6:	82 2b       	or	r24, r18
    67a8:	8b 83       	std	Y+3, r24	; 0x03
    67aa:	08 c0       	rjmp	.+16     	; 0x67bc <fgetc+0x72>
    67ac:	2e 81       	ldd	r18, Y+6	; 0x06
    67ae:	3f 81       	ldd	r19, Y+7	; 0x07
    67b0:	2f 5f       	subi	r18, 0xFF	; 255
    67b2:	3f 4f       	sbci	r19, 0xFF	; 255
    67b4:	3f 83       	std	Y+7, r19	; 0x07
    67b6:	2e 83       	std	Y+6, r18	; 0x06
    67b8:	99 27       	eor	r25, r25
    67ba:	02 c0       	rjmp	.+4      	; 0x67c0 <fgetc+0x76>
    67bc:	8f ef       	ldi	r24, 0xFF	; 255
    67be:	9f ef       	ldi	r25, 0xFF	; 255
    67c0:	df 91       	pop	r29
    67c2:	cf 91       	pop	r28
    67c4:	08 95       	ret

000067c6 <fputc>:
    67c6:	0f 93       	push	r16
    67c8:	1f 93       	push	r17
    67ca:	cf 93       	push	r28
    67cc:	df 93       	push	r29
    67ce:	fb 01       	movw	r30, r22
    67d0:	23 81       	ldd	r18, Z+3	; 0x03
    67d2:	21 fd       	sbrc	r18, 1
    67d4:	03 c0       	rjmp	.+6      	; 0x67dc <fputc+0x16>
    67d6:	8f ef       	ldi	r24, 0xFF	; 255
    67d8:	9f ef       	ldi	r25, 0xFF	; 255
    67da:	28 c0       	rjmp	.+80     	; 0x682c <fputc+0x66>
    67dc:	22 ff       	sbrs	r18, 2
    67de:	16 c0       	rjmp	.+44     	; 0x680c <fputc+0x46>
    67e0:	46 81       	ldd	r20, Z+6	; 0x06
    67e2:	57 81       	ldd	r21, Z+7	; 0x07
    67e4:	24 81       	ldd	r18, Z+4	; 0x04
    67e6:	35 81       	ldd	r19, Z+5	; 0x05
    67e8:	42 17       	cp	r20, r18
    67ea:	53 07       	cpc	r21, r19
    67ec:	44 f4       	brge	.+16     	; 0x67fe <fputc+0x38>
    67ee:	a0 81       	ld	r26, Z
    67f0:	b1 81       	ldd	r27, Z+1	; 0x01
    67f2:	9d 01       	movw	r18, r26
    67f4:	2f 5f       	subi	r18, 0xFF	; 255
    67f6:	3f 4f       	sbci	r19, 0xFF	; 255
    67f8:	31 83       	std	Z+1, r19	; 0x01
    67fa:	20 83       	st	Z, r18
    67fc:	8c 93       	st	X, r24
    67fe:	26 81       	ldd	r18, Z+6	; 0x06
    6800:	37 81       	ldd	r19, Z+7	; 0x07
    6802:	2f 5f       	subi	r18, 0xFF	; 255
    6804:	3f 4f       	sbci	r19, 0xFF	; 255
    6806:	37 83       	std	Z+7, r19	; 0x07
    6808:	26 83       	std	Z+6, r18	; 0x06
    680a:	10 c0       	rjmp	.+32     	; 0x682c <fputc+0x66>
    680c:	eb 01       	movw	r28, r22
    680e:	09 2f       	mov	r16, r25
    6810:	18 2f       	mov	r17, r24
    6812:	00 84       	ldd	r0, Z+8	; 0x08
    6814:	f1 85       	ldd	r31, Z+9	; 0x09
    6816:	e0 2d       	mov	r30, r0
    6818:	09 95       	icall
    681a:	89 2b       	or	r24, r25
    681c:	e1 f6       	brne	.-72     	; 0x67d6 <fputc+0x10>
    681e:	8e 81       	ldd	r24, Y+6	; 0x06
    6820:	9f 81       	ldd	r25, Y+7	; 0x07
    6822:	01 96       	adiw	r24, 0x01	; 1
    6824:	9f 83       	std	Y+7, r25	; 0x07
    6826:	8e 83       	std	Y+6, r24	; 0x06
    6828:	81 2f       	mov	r24, r17
    682a:	90 2f       	mov	r25, r16
    682c:	df 91       	pop	r29
    682e:	cf 91       	pop	r28
    6830:	1f 91       	pop	r17
    6832:	0f 91       	pop	r16
    6834:	08 95       	ret

00006836 <printf>:
    6836:	cf 93       	push	r28
    6838:	df 93       	push	r29
    683a:	cd b7       	in	r28, 0x3d	; 61
    683c:	de b7       	in	r29, 0x3e	; 62
    683e:	ae 01       	movw	r20, r28
    6840:	4b 5f       	subi	r20, 0xFB	; 251
    6842:	5f 4f       	sbci	r21, 0xFF	; 255
    6844:	fa 01       	movw	r30, r20
    6846:	61 91       	ld	r22, Z+
    6848:	71 91       	ld	r23, Z+
    684a:	af 01       	movw	r20, r30
    684c:	80 91 46 0c 	lds	r24, 0x0C46
    6850:	90 91 47 0c 	lds	r25, 0x0C47
    6854:	0e 94 25 31 	call	0x624a	; 0x624a <vfprintf>
    6858:	df 91       	pop	r29
    685a:	cf 91       	pop	r28
    685c:	08 95       	ret

0000685e <putchar>:
    685e:	60 91 46 0c 	lds	r22, 0x0C46
    6862:	70 91 47 0c 	lds	r23, 0x0C47
    6866:	0c 94 e3 33 	jmp	0x67c6	; 0x67c6 <fputc>

0000686a <puts>:
    686a:	0f 93       	push	r16
    686c:	1f 93       	push	r17
    686e:	cf 93       	push	r28
    6870:	df 93       	push	r29
    6872:	e0 91 46 0c 	lds	r30, 0x0C46
    6876:	f0 91 47 0c 	lds	r31, 0x0C47
    687a:	23 81       	ldd	r18, Z+3	; 0x03
    687c:	21 ff       	sbrs	r18, 1
    687e:	1b c0       	rjmp	.+54     	; 0x68b6 <puts+0x4c>
    6880:	8c 01       	movw	r16, r24
    6882:	d0 e0       	ldi	r29, 0x00	; 0
    6884:	c0 e0       	ldi	r28, 0x00	; 0
    6886:	f8 01       	movw	r30, r16
    6888:	81 91       	ld	r24, Z+
    688a:	8f 01       	movw	r16, r30
    688c:	60 91 46 0c 	lds	r22, 0x0C46
    6890:	70 91 47 0c 	lds	r23, 0x0C47
    6894:	db 01       	movw	r26, r22
    6896:	18 96       	adiw	r26, 0x08	; 8
    6898:	ed 91       	ld	r30, X+
    689a:	fc 91       	ld	r31, X
    689c:	19 97       	sbiw	r26, 0x09	; 9
    689e:	88 23       	and	r24, r24
    68a0:	31 f0       	breq	.+12     	; 0x68ae <puts+0x44>
    68a2:	09 95       	icall
    68a4:	89 2b       	or	r24, r25
    68a6:	79 f3       	breq	.-34     	; 0x6886 <puts+0x1c>
    68a8:	df ef       	ldi	r29, 0xFF	; 255
    68aa:	cf ef       	ldi	r28, 0xFF	; 255
    68ac:	ec cf       	rjmp	.-40     	; 0x6886 <puts+0x1c>
    68ae:	8a e0       	ldi	r24, 0x0A	; 10
    68b0:	09 95       	icall
    68b2:	89 2b       	or	r24, r25
    68b4:	19 f0       	breq	.+6      	; 0x68bc <puts+0x52>
    68b6:	8f ef       	ldi	r24, 0xFF	; 255
    68b8:	9f ef       	ldi	r25, 0xFF	; 255
    68ba:	02 c0       	rjmp	.+4      	; 0x68c0 <puts+0x56>
    68bc:	8d 2f       	mov	r24, r29
    68be:	9c 2f       	mov	r25, r28
    68c0:	df 91       	pop	r29
    68c2:	cf 91       	pop	r28
    68c4:	1f 91       	pop	r17
    68c6:	0f 91       	pop	r16
    68c8:	08 95       	ret

000068ca <sprintf>:
    68ca:	0f 93       	push	r16
    68cc:	1f 93       	push	r17
    68ce:	cf 93       	push	r28
    68d0:	df 93       	push	r29
    68d2:	cd b7       	in	r28, 0x3d	; 61
    68d4:	de b7       	in	r29, 0x3e	; 62
    68d6:	2e 97       	sbiw	r28, 0x0e	; 14
    68d8:	0f b6       	in	r0, 0x3f	; 63
    68da:	f8 94       	cli
    68dc:	de bf       	out	0x3e, r29	; 62
    68de:	0f be       	out	0x3f, r0	; 63
    68e0:	cd bf       	out	0x3d, r28	; 61
    68e2:	0d 89       	ldd	r16, Y+21	; 0x15
    68e4:	1e 89       	ldd	r17, Y+22	; 0x16
    68e6:	86 e0       	ldi	r24, 0x06	; 6
    68e8:	8c 83       	std	Y+4, r24	; 0x04
    68ea:	1a 83       	std	Y+2, r17	; 0x02
    68ec:	09 83       	std	Y+1, r16	; 0x01
    68ee:	8f ef       	ldi	r24, 0xFF	; 255
    68f0:	9f e7       	ldi	r25, 0x7F	; 127
    68f2:	9e 83       	std	Y+6, r25	; 0x06
    68f4:	8d 83       	std	Y+5, r24	; 0x05
    68f6:	ae 01       	movw	r20, r28
    68f8:	47 5e       	subi	r20, 0xE7	; 231
    68fa:	5f 4f       	sbci	r21, 0xFF	; 255
    68fc:	6f 89       	ldd	r22, Y+23	; 0x17
    68fe:	78 8d       	ldd	r23, Y+24	; 0x18
    6900:	ce 01       	movw	r24, r28
    6902:	01 96       	adiw	r24, 0x01	; 1
    6904:	0e 94 25 31 	call	0x624a	; 0x624a <vfprintf>
    6908:	2f 81       	ldd	r18, Y+7	; 0x07
    690a:	38 85       	ldd	r19, Y+8	; 0x08
    690c:	f8 01       	movw	r30, r16
    690e:	e2 0f       	add	r30, r18
    6910:	f3 1f       	adc	r31, r19
    6912:	10 82       	st	Z, r1
    6914:	2e 96       	adiw	r28, 0x0e	; 14
    6916:	0f b6       	in	r0, 0x3f	; 63
    6918:	f8 94       	cli
    691a:	de bf       	out	0x3e, r29	; 62
    691c:	0f be       	out	0x3f, r0	; 63
    691e:	cd bf       	out	0x3d, r28	; 61
    6920:	df 91       	pop	r29
    6922:	cf 91       	pop	r28
    6924:	1f 91       	pop	r17
    6926:	0f 91       	pop	r16
    6928:	08 95       	ret

0000692a <__ultoa_invert>:
    692a:	fa 01       	movw	r30, r20
    692c:	aa 27       	eor	r26, r26
    692e:	28 30       	cpi	r18, 0x08	; 8
    6930:	51 f1       	breq	.+84     	; 0x6986 <__ultoa_invert+0x5c>
    6932:	20 31       	cpi	r18, 0x10	; 16
    6934:	81 f1       	breq	.+96     	; 0x6996 <__ultoa_invert+0x6c>
    6936:	e8 94       	clt
    6938:	6f 93       	push	r22
    693a:	6e 7f       	andi	r22, 0xFE	; 254
    693c:	6e 5f       	subi	r22, 0xFE	; 254
    693e:	7f 4f       	sbci	r23, 0xFF	; 255
    6940:	8f 4f       	sbci	r24, 0xFF	; 255
    6942:	9f 4f       	sbci	r25, 0xFF	; 255
    6944:	af 4f       	sbci	r26, 0xFF	; 255
    6946:	b1 e0       	ldi	r27, 0x01	; 1
    6948:	3e d0       	rcall	.+124    	; 0x69c6 <__ultoa_invert+0x9c>
    694a:	b4 e0       	ldi	r27, 0x04	; 4
    694c:	3c d0       	rcall	.+120    	; 0x69c6 <__ultoa_invert+0x9c>
    694e:	67 0f       	add	r22, r23
    6950:	78 1f       	adc	r23, r24
    6952:	89 1f       	adc	r24, r25
    6954:	9a 1f       	adc	r25, r26
    6956:	a1 1d       	adc	r26, r1
    6958:	68 0f       	add	r22, r24
    695a:	79 1f       	adc	r23, r25
    695c:	8a 1f       	adc	r24, r26
    695e:	91 1d       	adc	r25, r1
    6960:	a1 1d       	adc	r26, r1
    6962:	6a 0f       	add	r22, r26
    6964:	71 1d       	adc	r23, r1
    6966:	81 1d       	adc	r24, r1
    6968:	91 1d       	adc	r25, r1
    696a:	a1 1d       	adc	r26, r1
    696c:	20 d0       	rcall	.+64     	; 0x69ae <__ultoa_invert+0x84>
    696e:	09 f4       	brne	.+2      	; 0x6972 <__ultoa_invert+0x48>
    6970:	68 94       	set
    6972:	3f 91       	pop	r19
    6974:	2a e0       	ldi	r18, 0x0A	; 10
    6976:	26 9f       	mul	r18, r22
    6978:	11 24       	eor	r1, r1
    697a:	30 19       	sub	r19, r0
    697c:	30 5d       	subi	r19, 0xD0	; 208
    697e:	31 93       	st	Z+, r19
    6980:	de f6       	brtc	.-74     	; 0x6938 <__ultoa_invert+0xe>
    6982:	cf 01       	movw	r24, r30
    6984:	08 95       	ret
    6986:	46 2f       	mov	r20, r22
    6988:	47 70       	andi	r20, 0x07	; 7
    698a:	40 5d       	subi	r20, 0xD0	; 208
    698c:	41 93       	st	Z+, r20
    698e:	b3 e0       	ldi	r27, 0x03	; 3
    6990:	0f d0       	rcall	.+30     	; 0x69b0 <__ultoa_invert+0x86>
    6992:	c9 f7       	brne	.-14     	; 0x6986 <__ultoa_invert+0x5c>
    6994:	f6 cf       	rjmp	.-20     	; 0x6982 <__ultoa_invert+0x58>
    6996:	46 2f       	mov	r20, r22
    6998:	4f 70       	andi	r20, 0x0F	; 15
    699a:	40 5d       	subi	r20, 0xD0	; 208
    699c:	4a 33       	cpi	r20, 0x3A	; 58
    699e:	18 f0       	brcs	.+6      	; 0x69a6 <__ultoa_invert+0x7c>
    69a0:	49 5d       	subi	r20, 0xD9	; 217
    69a2:	31 fd       	sbrc	r19, 1
    69a4:	40 52       	subi	r20, 0x20	; 32
    69a6:	41 93       	st	Z+, r20
    69a8:	02 d0       	rcall	.+4      	; 0x69ae <__ultoa_invert+0x84>
    69aa:	a9 f7       	brne	.-22     	; 0x6996 <__ultoa_invert+0x6c>
    69ac:	ea cf       	rjmp	.-44     	; 0x6982 <__ultoa_invert+0x58>
    69ae:	b4 e0       	ldi	r27, 0x04	; 4
    69b0:	a6 95       	lsr	r26
    69b2:	97 95       	ror	r25
    69b4:	87 95       	ror	r24
    69b6:	77 95       	ror	r23
    69b8:	67 95       	ror	r22
    69ba:	ba 95       	dec	r27
    69bc:	c9 f7       	brne	.-14     	; 0x69b0 <__ultoa_invert+0x86>
    69be:	00 97       	sbiw	r24, 0x00	; 0
    69c0:	61 05       	cpc	r22, r1
    69c2:	71 05       	cpc	r23, r1
    69c4:	08 95       	ret
    69c6:	9b 01       	movw	r18, r22
    69c8:	ac 01       	movw	r20, r24
    69ca:	0a 2e       	mov	r0, r26
    69cc:	06 94       	lsr	r0
    69ce:	57 95       	ror	r21
    69d0:	47 95       	ror	r20
    69d2:	37 95       	ror	r19
    69d4:	27 95       	ror	r18
    69d6:	ba 95       	dec	r27
    69d8:	c9 f7       	brne	.-14     	; 0x69cc <__ultoa_invert+0xa2>
    69da:	62 0f       	add	r22, r18
    69dc:	73 1f       	adc	r23, r19
    69de:	84 1f       	adc	r24, r20
    69e0:	95 1f       	adc	r25, r21
    69e2:	a0 1d       	adc	r26, r0
    69e4:	08 95       	ret

000069e6 <__eerd_byte_m128rfa1>:
    69e6:	f9 99       	sbic	0x1f, 1	; 31
    69e8:	fe cf       	rjmp	.-4      	; 0x69e6 <__eerd_byte_m128rfa1>
    69ea:	92 bd       	out	0x22, r25	; 34
    69ec:	81 bd       	out	0x21, r24	; 33
    69ee:	f8 9a       	sbi	0x1f, 0	; 31
    69f0:	99 27       	eor	r25, r25
    69f2:	80 b5       	in	r24, 0x20	; 32
    69f4:	08 95       	ret

000069f6 <__eewr_byte_m128rfa1>:
    69f6:	26 2f       	mov	r18, r22

000069f8 <__eewr_r18_m128rfa1>:
    69f8:	f9 99       	sbic	0x1f, 1	; 31
    69fa:	fe cf       	rjmp	.-4      	; 0x69f8 <__eewr_r18_m128rfa1>
    69fc:	1f ba       	out	0x1f, r1	; 31
    69fe:	92 bd       	out	0x22, r25	; 34
    6a00:	81 bd       	out	0x21, r24	; 33
    6a02:	20 bd       	out	0x20, r18	; 32
    6a04:	0f b6       	in	r0, 0x3f	; 63
    6a06:	f8 94       	cli
    6a08:	fa 9a       	sbi	0x1f, 2	; 31
    6a0a:	f9 9a       	sbi	0x1f, 1	; 31
    6a0c:	0f be       	out	0x3f, r0	; 63
    6a0e:	01 96       	adiw	r24, 0x01	; 1
    6a10:	08 95       	ret

00006a12 <calloc>:
    6a12:	0f 93       	push	r16
    6a14:	1f 93       	push	r17
    6a16:	cf 93       	push	r28
    6a18:	df 93       	push	r29
    6a1a:	86 9f       	mul	r24, r22
    6a1c:	80 01       	movw	r16, r0
    6a1e:	87 9f       	mul	r24, r23
    6a20:	10 0d       	add	r17, r0
    6a22:	96 9f       	mul	r25, r22
    6a24:	10 0d       	add	r17, r0
    6a26:	11 24       	eor	r1, r1
    6a28:	c8 01       	movw	r24, r16
    6a2a:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <malloc>
    6a2e:	ec 01       	movw	r28, r24
    6a30:	00 97       	sbiw	r24, 0x00	; 0
    6a32:	29 f0       	breq	.+10     	; 0x6a3e <calloc+0x2c>
    6a34:	a8 01       	movw	r20, r16
    6a36:	60 e0       	ldi	r22, 0x00	; 0
    6a38:	70 e0       	ldi	r23, 0x00	; 0
    6a3a:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <memset>
    6a3e:	ce 01       	movw	r24, r28
    6a40:	df 91       	pop	r29
    6a42:	cf 91       	pop	r28
    6a44:	1f 91       	pop	r17
    6a46:	0f 91       	pop	r16
    6a48:	08 95       	ret

00006a4a <malloc>:
    6a4a:	cf 93       	push	r28
    6a4c:	df 93       	push	r29
    6a4e:	82 30       	cpi	r24, 0x02	; 2
    6a50:	91 05       	cpc	r25, r1
    6a52:	10 f4       	brcc	.+4      	; 0x6a58 <malloc+0xe>
    6a54:	82 e0       	ldi	r24, 0x02	; 2
    6a56:	90 e0       	ldi	r25, 0x00	; 0
    6a58:	e0 91 4c 0c 	lds	r30, 0x0C4C
    6a5c:	f0 91 4d 0c 	lds	r31, 0x0C4D
    6a60:	20 e0       	ldi	r18, 0x00	; 0
    6a62:	30 e0       	ldi	r19, 0x00	; 0
    6a64:	c0 e0       	ldi	r28, 0x00	; 0
    6a66:	d0 e0       	ldi	r29, 0x00	; 0
    6a68:	30 97       	sbiw	r30, 0x00	; 0
    6a6a:	11 f1       	breq	.+68     	; 0x6ab0 <malloc+0x66>
    6a6c:	40 81       	ld	r20, Z
    6a6e:	51 81       	ldd	r21, Z+1	; 0x01
    6a70:	48 17       	cp	r20, r24
    6a72:	59 07       	cpc	r21, r25
    6a74:	c0 f0       	brcs	.+48     	; 0x6aa6 <malloc+0x5c>
    6a76:	48 17       	cp	r20, r24
    6a78:	59 07       	cpc	r21, r25
    6a7a:	61 f4       	brne	.+24     	; 0x6a94 <malloc+0x4a>
    6a7c:	82 81       	ldd	r24, Z+2	; 0x02
    6a7e:	93 81       	ldd	r25, Z+3	; 0x03
    6a80:	20 97       	sbiw	r28, 0x00	; 0
    6a82:	19 f0       	breq	.+6      	; 0x6a8a <malloc+0x40>
    6a84:	9b 83       	std	Y+3, r25	; 0x03
    6a86:	8a 83       	std	Y+2, r24	; 0x02
    6a88:	2b c0       	rjmp	.+86     	; 0x6ae0 <malloc+0x96>
    6a8a:	90 93 4d 0c 	sts	0x0C4D, r25
    6a8e:	80 93 4c 0c 	sts	0x0C4C, r24
    6a92:	26 c0       	rjmp	.+76     	; 0x6ae0 <malloc+0x96>
    6a94:	21 15       	cp	r18, r1
    6a96:	31 05       	cpc	r19, r1
    6a98:	19 f0       	breq	.+6      	; 0x6aa0 <malloc+0x56>
    6a9a:	42 17       	cp	r20, r18
    6a9c:	53 07       	cpc	r21, r19
    6a9e:	18 f4       	brcc	.+6      	; 0x6aa6 <malloc+0x5c>
    6aa0:	9a 01       	movw	r18, r20
    6aa2:	be 01       	movw	r22, r28
    6aa4:	df 01       	movw	r26, r30
    6aa6:	ef 01       	movw	r28, r30
    6aa8:	02 80       	ldd	r0, Z+2	; 0x02
    6aaa:	f3 81       	ldd	r31, Z+3	; 0x03
    6aac:	e0 2d       	mov	r30, r0
    6aae:	dc cf       	rjmp	.-72     	; 0x6a68 <malloc+0x1e>
    6ab0:	21 15       	cp	r18, r1
    6ab2:	31 05       	cpc	r19, r1
    6ab4:	09 f1       	breq	.+66     	; 0x6af8 <malloc+0xae>
    6ab6:	28 1b       	sub	r18, r24
    6ab8:	39 0b       	sbc	r19, r25
    6aba:	24 30       	cpi	r18, 0x04	; 4
    6abc:	31 05       	cpc	r19, r1
    6abe:	90 f4       	brcc	.+36     	; 0x6ae4 <malloc+0x9a>
    6ac0:	12 96       	adiw	r26, 0x02	; 2
    6ac2:	8d 91       	ld	r24, X+
    6ac4:	9c 91       	ld	r25, X
    6ac6:	13 97       	sbiw	r26, 0x03	; 3
    6ac8:	61 15       	cp	r22, r1
    6aca:	71 05       	cpc	r23, r1
    6acc:	21 f0       	breq	.+8      	; 0x6ad6 <malloc+0x8c>
    6ace:	fb 01       	movw	r30, r22
    6ad0:	93 83       	std	Z+3, r25	; 0x03
    6ad2:	82 83       	std	Z+2, r24	; 0x02
    6ad4:	04 c0       	rjmp	.+8      	; 0x6ade <malloc+0x94>
    6ad6:	90 93 4d 0c 	sts	0x0C4D, r25
    6ada:	80 93 4c 0c 	sts	0x0C4C, r24
    6ade:	fd 01       	movw	r30, r26
    6ae0:	32 96       	adiw	r30, 0x02	; 2
    6ae2:	44 c0       	rjmp	.+136    	; 0x6b6c <malloc+0x122>
    6ae4:	fd 01       	movw	r30, r26
    6ae6:	e2 0f       	add	r30, r18
    6ae8:	f3 1f       	adc	r31, r19
    6aea:	81 93       	st	Z+, r24
    6aec:	91 93       	st	Z+, r25
    6aee:	22 50       	subi	r18, 0x02	; 2
    6af0:	31 09       	sbc	r19, r1
    6af2:	2d 93       	st	X+, r18
    6af4:	3c 93       	st	X, r19
    6af6:	3a c0       	rjmp	.+116    	; 0x6b6c <malloc+0x122>
    6af8:	20 91 4a 0c 	lds	r18, 0x0C4A
    6afc:	30 91 4b 0c 	lds	r19, 0x0C4B
    6b00:	23 2b       	or	r18, r19
    6b02:	41 f4       	brne	.+16     	; 0x6b14 <malloc+0xca>
    6b04:	20 91 23 02 	lds	r18, 0x0223
    6b08:	30 91 24 02 	lds	r19, 0x0224
    6b0c:	30 93 4b 0c 	sts	0x0C4B, r19
    6b10:	20 93 4a 0c 	sts	0x0C4A, r18
    6b14:	20 91 21 02 	lds	r18, 0x0221
    6b18:	30 91 22 02 	lds	r19, 0x0222
    6b1c:	21 15       	cp	r18, r1
    6b1e:	31 05       	cpc	r19, r1
    6b20:	41 f4       	brne	.+16     	; 0x6b32 <malloc+0xe8>
    6b22:	2d b7       	in	r18, 0x3d	; 61
    6b24:	3e b7       	in	r19, 0x3e	; 62
    6b26:	40 91 25 02 	lds	r20, 0x0225
    6b2a:	50 91 26 02 	lds	r21, 0x0226
    6b2e:	24 1b       	sub	r18, r20
    6b30:	35 0b       	sbc	r19, r21
    6b32:	e0 91 4a 0c 	lds	r30, 0x0C4A
    6b36:	f0 91 4b 0c 	lds	r31, 0x0C4B
    6b3a:	e2 17       	cp	r30, r18
    6b3c:	f3 07       	cpc	r31, r19
    6b3e:	a0 f4       	brcc	.+40     	; 0x6b68 <malloc+0x11e>
    6b40:	2e 1b       	sub	r18, r30
    6b42:	3f 0b       	sbc	r19, r31
    6b44:	28 17       	cp	r18, r24
    6b46:	39 07       	cpc	r19, r25
    6b48:	78 f0       	brcs	.+30     	; 0x6b68 <malloc+0x11e>
    6b4a:	ac 01       	movw	r20, r24
    6b4c:	4e 5f       	subi	r20, 0xFE	; 254
    6b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b50:	24 17       	cp	r18, r20
    6b52:	35 07       	cpc	r19, r21
    6b54:	48 f0       	brcs	.+18     	; 0x6b68 <malloc+0x11e>
    6b56:	4e 0f       	add	r20, r30
    6b58:	5f 1f       	adc	r21, r31
    6b5a:	50 93 4b 0c 	sts	0x0C4B, r21
    6b5e:	40 93 4a 0c 	sts	0x0C4A, r20
    6b62:	81 93       	st	Z+, r24
    6b64:	91 93       	st	Z+, r25
    6b66:	02 c0       	rjmp	.+4      	; 0x6b6c <malloc+0x122>
    6b68:	e0 e0       	ldi	r30, 0x00	; 0
    6b6a:	f0 e0       	ldi	r31, 0x00	; 0
    6b6c:	cf 01       	movw	r24, r30
    6b6e:	df 91       	pop	r29
    6b70:	cf 91       	pop	r28
    6b72:	08 95       	ret

00006b74 <free>:
    6b74:	0f 93       	push	r16
    6b76:	1f 93       	push	r17
    6b78:	cf 93       	push	r28
    6b7a:	df 93       	push	r29
    6b7c:	00 97       	sbiw	r24, 0x00	; 0
    6b7e:	09 f4       	brne	.+2      	; 0x6b82 <free+0xe>
    6b80:	8c c0       	rjmp	.+280    	; 0x6c9a <free+0x126>
    6b82:	fc 01       	movw	r30, r24
    6b84:	32 97       	sbiw	r30, 0x02	; 2
    6b86:	13 82       	std	Z+3, r1	; 0x03
    6b88:	12 82       	std	Z+2, r1	; 0x02
    6b8a:	00 91 4c 0c 	lds	r16, 0x0C4C
    6b8e:	10 91 4d 0c 	lds	r17, 0x0C4D
    6b92:	01 15       	cp	r16, r1
    6b94:	11 05       	cpc	r17, r1
    6b96:	81 f4       	brne	.+32     	; 0x6bb8 <free+0x44>
    6b98:	20 81       	ld	r18, Z
    6b9a:	31 81       	ldd	r19, Z+1	; 0x01
    6b9c:	82 0f       	add	r24, r18
    6b9e:	93 1f       	adc	r25, r19
    6ba0:	20 91 4a 0c 	lds	r18, 0x0C4A
    6ba4:	30 91 4b 0c 	lds	r19, 0x0C4B
    6ba8:	28 17       	cp	r18, r24
    6baa:	39 07       	cpc	r19, r25
    6bac:	79 f5       	brne	.+94     	; 0x6c0c <free+0x98>
    6bae:	f0 93 4b 0c 	sts	0x0C4B, r31
    6bb2:	e0 93 4a 0c 	sts	0x0C4A, r30
    6bb6:	71 c0       	rjmp	.+226    	; 0x6c9a <free+0x126>
    6bb8:	d8 01       	movw	r26, r16
    6bba:	40 e0       	ldi	r20, 0x00	; 0
    6bbc:	50 e0       	ldi	r21, 0x00	; 0
    6bbe:	ae 17       	cp	r26, r30
    6bc0:	bf 07       	cpc	r27, r31
    6bc2:	50 f4       	brcc	.+20     	; 0x6bd8 <free+0x64>
    6bc4:	12 96       	adiw	r26, 0x02	; 2
    6bc6:	2d 91       	ld	r18, X+
    6bc8:	3c 91       	ld	r19, X
    6bca:	13 97       	sbiw	r26, 0x03	; 3
    6bcc:	ad 01       	movw	r20, r26
    6bce:	21 15       	cp	r18, r1
    6bd0:	31 05       	cpc	r19, r1
    6bd2:	09 f1       	breq	.+66     	; 0x6c16 <free+0xa2>
    6bd4:	d9 01       	movw	r26, r18
    6bd6:	f3 cf       	rjmp	.-26     	; 0x6bbe <free+0x4a>
    6bd8:	9d 01       	movw	r18, r26
    6bda:	da 01       	movw	r26, r20
    6bdc:	33 83       	std	Z+3, r19	; 0x03
    6bde:	22 83       	std	Z+2, r18	; 0x02
    6be0:	60 81       	ld	r22, Z
    6be2:	71 81       	ldd	r23, Z+1	; 0x01
    6be4:	86 0f       	add	r24, r22
    6be6:	97 1f       	adc	r25, r23
    6be8:	82 17       	cp	r24, r18
    6bea:	93 07       	cpc	r25, r19
    6bec:	69 f4       	brne	.+26     	; 0x6c08 <free+0x94>
    6bee:	ec 01       	movw	r28, r24
    6bf0:	28 81       	ld	r18, Y
    6bf2:	39 81       	ldd	r19, Y+1	; 0x01
    6bf4:	26 0f       	add	r18, r22
    6bf6:	37 1f       	adc	r19, r23
    6bf8:	2e 5f       	subi	r18, 0xFE	; 254
    6bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    6bfc:	31 83       	std	Z+1, r19	; 0x01
    6bfe:	20 83       	st	Z, r18
    6c00:	8a 81       	ldd	r24, Y+2	; 0x02
    6c02:	9b 81       	ldd	r25, Y+3	; 0x03
    6c04:	93 83       	std	Z+3, r25	; 0x03
    6c06:	82 83       	std	Z+2, r24	; 0x02
    6c08:	45 2b       	or	r20, r21
    6c0a:	29 f4       	brne	.+10     	; 0x6c16 <free+0xa2>
    6c0c:	f0 93 4d 0c 	sts	0x0C4D, r31
    6c10:	e0 93 4c 0c 	sts	0x0C4C, r30
    6c14:	42 c0       	rjmp	.+132    	; 0x6c9a <free+0x126>
    6c16:	13 96       	adiw	r26, 0x03	; 3
    6c18:	fc 93       	st	X, r31
    6c1a:	ee 93       	st	-X, r30
    6c1c:	12 97       	sbiw	r26, 0x02	; 2
    6c1e:	ed 01       	movw	r28, r26
    6c20:	49 91       	ld	r20, Y+
    6c22:	59 91       	ld	r21, Y+
    6c24:	9e 01       	movw	r18, r28
    6c26:	24 0f       	add	r18, r20
    6c28:	35 1f       	adc	r19, r21
    6c2a:	e2 17       	cp	r30, r18
    6c2c:	f3 07       	cpc	r31, r19
    6c2e:	71 f4       	brne	.+28     	; 0x6c4c <free+0xd8>
    6c30:	80 81       	ld	r24, Z
    6c32:	91 81       	ldd	r25, Z+1	; 0x01
    6c34:	84 0f       	add	r24, r20
    6c36:	95 1f       	adc	r25, r21
    6c38:	02 96       	adiw	r24, 0x02	; 2
    6c3a:	11 96       	adiw	r26, 0x01	; 1
    6c3c:	9c 93       	st	X, r25
    6c3e:	8e 93       	st	-X, r24
    6c40:	82 81       	ldd	r24, Z+2	; 0x02
    6c42:	93 81       	ldd	r25, Z+3	; 0x03
    6c44:	13 96       	adiw	r26, 0x03	; 3
    6c46:	9c 93       	st	X, r25
    6c48:	8e 93       	st	-X, r24
    6c4a:	12 97       	sbiw	r26, 0x02	; 2
    6c4c:	e0 e0       	ldi	r30, 0x00	; 0
    6c4e:	f0 e0       	ldi	r31, 0x00	; 0
    6c50:	d8 01       	movw	r26, r16
    6c52:	12 96       	adiw	r26, 0x02	; 2
    6c54:	8d 91       	ld	r24, X+
    6c56:	9c 91       	ld	r25, X
    6c58:	13 97       	sbiw	r26, 0x03	; 3
    6c5a:	00 97       	sbiw	r24, 0x00	; 0
    6c5c:	19 f0       	breq	.+6      	; 0x6c64 <free+0xf0>
    6c5e:	f8 01       	movw	r30, r16
    6c60:	8c 01       	movw	r16, r24
    6c62:	f6 cf       	rjmp	.-20     	; 0x6c50 <free+0xdc>
    6c64:	8d 91       	ld	r24, X+
    6c66:	9c 91       	ld	r25, X
    6c68:	98 01       	movw	r18, r16
    6c6a:	2e 5f       	subi	r18, 0xFE	; 254
    6c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c6e:	82 0f       	add	r24, r18
    6c70:	93 1f       	adc	r25, r19
    6c72:	20 91 4a 0c 	lds	r18, 0x0C4A
    6c76:	30 91 4b 0c 	lds	r19, 0x0C4B
    6c7a:	28 17       	cp	r18, r24
    6c7c:	39 07       	cpc	r19, r25
    6c7e:	69 f4       	brne	.+26     	; 0x6c9a <free+0x126>
    6c80:	30 97       	sbiw	r30, 0x00	; 0
    6c82:	29 f4       	brne	.+10     	; 0x6c8e <free+0x11a>
    6c84:	10 92 4d 0c 	sts	0x0C4D, r1
    6c88:	10 92 4c 0c 	sts	0x0C4C, r1
    6c8c:	02 c0       	rjmp	.+4      	; 0x6c92 <free+0x11e>
    6c8e:	13 82       	std	Z+3, r1	; 0x03
    6c90:	12 82       	std	Z+2, r1	; 0x02
    6c92:	10 93 4b 0c 	sts	0x0C4B, r17
    6c96:	00 93 4a 0c 	sts	0x0C4A, r16
    6c9a:	df 91       	pop	r29
    6c9c:	cf 91       	pop	r28
    6c9e:	1f 91       	pop	r17
    6ca0:	0f 91       	pop	r16
    6ca2:	08 95       	ret

00006ca4 <memset>:
    6ca4:	dc 01       	movw	r26, r24
    6ca6:	01 c0       	rjmp	.+2      	; 0x6caa <memset+0x6>
    6ca8:	6d 93       	st	X+, r22
    6caa:	41 50       	subi	r20, 0x01	; 1
    6cac:	50 40       	sbci	r21, 0x00	; 0
    6cae:	e0 f7       	brcc	.-8      	; 0x6ca8 <memset+0x4>
    6cb0:	08 95       	ret

00006cb2 <_exit>:
    6cb2:	f8 94       	cli

00006cb4 <__stop_program>:
    6cb4:	ff cf       	rjmp	.-2      	; 0x6cb4 <__stop_program>
