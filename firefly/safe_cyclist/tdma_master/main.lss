
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a6  00800200  00006818  000068ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000882  008003a6  008003a6  00006a52  2**0
                  ALLOC
  3 .stab         0001278c  00000000  00000000  00006a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009879  00000000  00000000  000191e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00022a59  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  00022a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  00023bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00024c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00024c59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__ctors_end>
       4:	0c 94 74 2d 	jmp	0x5ae8	; 0x5ae8 <__vector_1>
       8:	0c 94 a6 2d 	jmp	0x5b4c	; 0x5b4c <__vector_2>
       c:	0c 94 d8 2d 	jmp	0x5bb0	; 0x5bb0 <__vector_3>
      10:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      14:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      18:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      1c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      20:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      24:	0c 94 42 2d 	jmp	0x5a84	; 0x5a84 <__vector_9>
      28:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      2c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      30:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      34:	0c 94 a1 2b 	jmp	0x5742	; 0x5742 <__vector_13>
      38:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      3c:	0c 94 a1 2b 	jmp	0x5742	; 0x5742 <__vector_13>
      40:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      44:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      48:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      4c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      50:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      54:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      58:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      5c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      60:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      64:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      68:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      6c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      70:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      74:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      78:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      7c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      80:	0c 94 d4 2b 	jmp	0x57a8	; 0x57a8 <__vector_32>
      84:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      88:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      8c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      90:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      94:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      98:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      9c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      a0:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      a4:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      a8:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      ac:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      b0:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      b4:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      b8:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      bc:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      c0:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      c4:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      c8:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      cc:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      d0:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      d4:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      d8:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      dc:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      e0:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      e4:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_57>
      e8:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__vector_58>
      ec:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__vector_59>
      f0:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__vector_60>
      f4:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__vector_61>
      f8:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__vector_62>
      fc:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__vector_63>
     100:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__vector_64>
     104:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
     108:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
     10c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
     110:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
     114:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
     118:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
     11c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
     120:	af 10       	cpse	r10, r15
     122:	bc 10       	cpse	r11, r12
     124:	c9 10       	cpse	r12, r9
     126:	d6 10       	cpse	r13, r6
     128:	e3 10       	cpse	r14, r3
     12a:	f0 10       	cpse	r15, r0
     12c:	fd 10       	cpse	r15, r13
     12e:	20 11       	cpse	r18, r0
     130:	2e 11       	cpse	r18, r14
     132:	3c 11       	cpse	r19, r12
     134:	4a 11       	cpse	r20, r10
     136:	58 11       	cpse	r21, r8
     138:	66 11       	cpse	r22, r6
     13a:	74 11       	cpse	r23, r4
     13c:	97 11       	cpse	r25, r7
     13e:	99 11       	cpse	r25, r9
     140:	9b 11       	cpse	r25, r11
     142:	9d 11       	cpse	r25, r13
     144:	9f 11       	cpse	r25, r15
     146:	a1 11       	cpse	r26, r1
     148:	a3 11       	cpse	r26, r3
     14a:	c2 11       	cpse	r28, r2
     14c:	e5 11       	cpse	r30, r5
     14e:	09 12       	cpse	r0, r25
     150:	2c 12       	cpse	r2, r28
     152:	4f 12       	cpse	r4, r31
     154:	72 12       	cpse	r7, r18
     156:	95 12       	cpse	r9, r21
     158:	cf 12       	cpse	r12, r31
     15a:	dc 12       	cpse	r13, r28
     15c:	e9 12       	cpse	r14, r25
     15e:	f6 12       	cpse	r15, r22
     160:	03 13       	cpse	r16, r19
     162:	10 13       	cpse	r17, r16
     164:	1d 13       	cpse	r17, r29
     166:	36 13       	cpse	r19, r22
     168:	43 13       	cpse	r20, r19
     16a:	50 13       	cpse	r21, r16
     16c:	5d 13       	cpse	r21, r29
     16e:	6a 13       	cpse	r22, r26
     170:	77 13       	cpse	r23, r23
     172:	84 13       	cpse	r24, r20
     174:	a1 1a       	sub	r10, r17
     176:	a7 1a       	sub	r10, r23
     178:	aa 1a       	sub	r10, r26
     17a:	ad 1a       	sub	r10, r29
     17c:	b0 1a       	sub	r11, r16
     17e:	b3 1a       	sub	r11, r19
     180:	b9 1a       	sub	r11, r25
     182:	b6 1a       	sub	r11, r22
     184:	bc 1a       	sub	r11, r28
     186:	bf 1a       	sub	r11, r31
     188:	c2 1a       	sub	r12, r18
     18a:	cb 1a       	sub	r12, r27
     18c:	ce 1a       	sub	r12, r30
     18e:	d1 1a       	sub	r13, r17
     190:	d4 1a       	sub	r13, r20
     192:	c8 1a       	sub	r12, r24
     194:	9e 1a       	sub	r9, r30
     196:	a4 1a       	sub	r10, r20
     198:	d7 1a       	sub	r13, r23
     19a:	da 1a       	sub	r13, r26
     19c:	c5 1a       	sub	r12, r21
     19e:	9b 1a       	sub	r9, r27
     1a0:	c3 1b       	sub	r28, r19
     1a2:	c6 1b       	sub	r28, r22
     1a4:	d1 1b       	sub	r29, r17
     1a6:	d6 1b       	sub	r29, r22
     1a8:	dd 1b       	sub	r29, r29
     1aa:	e6 1b       	sub	r30, r22
     1ac:	e9 1b       	sub	r30, r25
     1ae:	ee 1b       	sub	r30, r30
     1b0:	f5 1b       	sub	r31, r21
     1b2:	fe 1b       	sub	r31, r30

000001b4 <__trampolines_end>:
     1b4:	46 61       	ori	r20, 0x16	; 22
     1b6:	69 6c       	ori	r22, 0xC9	; 201
     1b8:	65 64       	ori	r22, 0x45	; 69
     1ba:	20 74       	andi	r18, 0x40	; 64
     1bc:	6f 20       	and	r6, r15
     1be:	72 65       	ori	r23, 0x52	; 82
     1c0:	67 69       	ori	r22, 0x97	; 151
     1c2:	73 74       	andi	r23, 0x43	; 67
     1c4:	65 72       	andi	r22, 0x25	; 37
     1c6:	20 73       	andi	r18, 0x30	; 48
     1c8:	69 67       	ori	r22, 0x79	; 121
     1ca:	6e 61       	ori	r22, 0x1E	; 30
     1cc:	6c 0d       	add	r22, r12
     1ce:	0a 00       	.word	0x000a	; ????

000001d0 <__c.3747>:
     1d0:	54 44 4d 41 20 45 52 52 4f 52 3a 20 63 72 65 61     TDMA ERROR: crea
     1e0:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     1f0:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

000001fc <__c.3745>:
     1fc:	54 44 4d 41 20 45 52 52 4f 52 3a 20 63 72 65 61     TDMA ERROR: crea
     20c:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     21c:	61 69 6c 65 64 0d 0a 00                             ailed...

00000224 <__c.3743>:
     224:	54 44 4d 41 20 45 52 52 4f 52 3a 20 63 72 65 61     TDMA ERROR: crea
     234:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     244:	61 69 6c 65 64 0d 0a 00                             ailed...

0000024c <__c.3718>:
     24c:	54 44 4d 41 20 54 58 3a 20 57 6f 6b 65 20 75 70     TDMA TX: Woke up
     25c:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     26c:	0d 0a 00                                            ...

0000026f <__c.3716>:
     26f:	54 44 4d 41 20 54 58 3a 20 45 72 72 6f 72 20 63     TDMA TX: Error c
     27f:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     28f:	74 0d 0a 00                                         t...

00000293 <__c.3341>:
     293:	0d 0a 4e 61 6e 6f 2d 52 4b 20 54 61 73 6b 20 53     ..Nano-RK Task S
     2a3:	74 61 74 69 73 74 69 63 73 3a 0d 0a 00              tatistics:...

000002b0 <__c.3336>:
     2b0:	0d 0a 00                                            ...

000002b3 <__c.3334>:
     2b3:	0d 0a 20 20 20 4f 76 65 72 66 6c 6f 77 20 45 72     ..   Overflow Er
     2c3:	72 6f 72 20 53 74 61 74 75 73 3a 20 00              ror Status: .

000002d0 <__c.3332>:
     2d0:	0d 0a 20 20 20 4b 65 72 6e 65 6c 20 56 69 6f 6c     ..   Kernel Viol
     2e0:	61 74 69 6f 6e 73 3a 20 00                          ations: .

000002e9 <__c.3330>:
     2e9:	0d 0a 20 20 20 50 72 65 65 6d 70 74 69 6f 6e 73     ..   Preemptions
     2f9:	3a 20 00                                            : .

000002fc <__c.3328>:
     2fc:	0d 0a 20 20 20 53 77 61 70 2d 69 6e 73 3a 20 00     ..   Swap-ins: .

0000030c <__c.3326>:
     30c:	0d 0a 20 20 20 54 69 6d 65 20 5b 4d 69 6e 2c 4c     ..   Time [Min,L
     31c:	61 73 74 2c 4d 61 78 5d 3a 20 00                    ast,Max]: .

00000327 <__c.3324>:
     327:	0d 0a 20 20 20 54 6f 74 61 6c 20 43 50 55 3a 20     ..   Total CPU: 
	...

00000338 <__c.3322>:
     338:	0d 0a 20 20 20 49 64 6c 65 20 54 61 73 6b 20 44     ..   Idle Task D
     348:	65 65 70 20 53 6c 65 65 70 20 54 69 6d 65 3a 20     eep Sleep Time: 
	...

00000359 <__c.3320>:
     359:	0d 0a 20 20 20 54 6f 74 61 6c 20 53 79 73 74 65     ..   Total Syste
     369:	6d 20 55 70 74 69 6d 65 3a 20 00                    m Uptime: .

00000374 <__c.3318>:
     374:	20 54 61 73 6b 20 49 44 3a 20 00                     Task ID: .

0000037f <__c.3420>:
     37f:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000386 <__c.3417>:
     386:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000395 <__c.3414>:
     395:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000003a6 <__c.3411>:
     3a6:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     3b6:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000003c1 <__c.3408>:
     3c1:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     3d1:	20 53 69 67 6e 61 6c 00                              Signal.

000003d9 <__c.3405>:
     3d9:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     3e9:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000003f9 <__c.3402>:
     3f9:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     409:	72 6f 72 00                                         ror.

0000040d <__c.3399>:
     40d:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000041e <__c.3396>:
     41e:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     42e:	61 72 74 00                                         art.

00000432 <__c.3393>:
     432:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000441 <__c.3390>:
     441:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     451:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000045c <__c.3387>:
     45c:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000468 <__c.3384>:
     468:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     478:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     488:	20 6f 6b 3f 00                                       ok?.

0000048d <__c.3381>:
     48d:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     49d:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000004ab <__c.3378>:
     4ab:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     4bb:	72 74 00                                            rt.

000004be <__c.3375>:
     4be:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     4ce:	49 44 00                                            ID.

000004d1 <__c.3372>:
     4d1:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     4e1:	20 57 61 6b 65 75 70 00                              Wakeup.

000004e9 <__c.3369>:
     4e9:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     4f9:	6c 61 74 65 64 00                                   lated.

000004ff <__c.3366>:
     4ff:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     50f:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000051a <__c.3363>:
     51a:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     52a:	69 6e 74 65 72 00                                   inter.

00000530 <__c.3360>:
     530:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     540:	6c 6f 77 00                                         low.

00000544 <__c.3357>:
     544:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     554:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     564:	6e 6f 75 67 68 21 00                                nough!.

0000056b <__c.3353>:
     56b:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     57b:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     58b:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     59b:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000005a7 <__c.3350>:
     5a7:	29 3a 20 00                                         ): .

000005ab <__c.3348>:
     5ab:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000005b7 <__c.3341>:
     5b7:	4e 52 4b 20 52 65 62 6f 6f 74 2e 2e 2e 0d 0a 00     NRK Reboot......

000005c7 <__c.3249>:
     5c7:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000005d6 <__c.2228>:
     5d6:	45 46 47 65 66 67 00                                EFGefg.

000005dd <__c.2222>:
     5dd:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

000005ee <__ctors_end>:
     5ee:	11 24       	eor	r1, r1
     5f0:	1f be       	out	0x3f, r1	; 63
     5f2:	cf ef       	ldi	r28, 0xFF	; 255
     5f4:	d1 e4       	ldi	r29, 0x41	; 65
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	cd bf       	out	0x3d, r28	; 61

000005fa <__do_copy_data>:
     5fa:	13 e0       	ldi	r17, 0x03	; 3
     5fc:	a0 e0       	ldi	r26, 0x00	; 0
     5fe:	b2 e0       	ldi	r27, 0x02	; 2
     600:	e8 e1       	ldi	r30, 0x18	; 24
     602:	f8 e6       	ldi	r31, 0x68	; 104
     604:	00 e0       	ldi	r16, 0x00	; 0
     606:	0b bf       	out	0x3b, r16	; 59
     608:	02 c0       	rjmp	.+4      	; 0x60e <__do_copy_data+0x14>
     60a:	07 90       	elpm	r0, Z+
     60c:	0d 92       	st	X+, r0
     60e:	a6 3a       	cpi	r26, 0xA6	; 166
     610:	b1 07       	cpc	r27, r17
     612:	d9 f7       	brne	.-10     	; 0x60a <__do_copy_data+0x10>

00000614 <__do_clear_bss>:
     614:	1c e0       	ldi	r17, 0x0C	; 12
     616:	a6 ea       	ldi	r26, 0xA6	; 166
     618:	b3 e0       	ldi	r27, 0x03	; 3
     61a:	01 c0       	rjmp	.+2      	; 0x61e <.do_clear_bss_start>

0000061c <.do_clear_bss_loop>:
     61c:	1d 92       	st	X+, r1

0000061e <.do_clear_bss_start>:
     61e:	a8 32       	cpi	r26, 0x28	; 40
     620:	b1 07       	cpc	r27, r17
     622:	e1 f7       	brne	.-8      	; 0x61c <.do_clear_bss_loop>
     624:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <main>
     628:	0c 94 0a 34 	jmp	0x6814	; 0x6814 <_exit>

0000062c <__bad_interrupt>:
     62c:	0c 94 97 2b 	jmp	0x572e	; 0x572e <__vector_default>

00000630 <tx_task>:
{
  int8_t v;
  uint8_t len, cnt;


  printf ("Gateway Tx Task PID=%u\r\n", nrk_get_pid ());
     630:	0e 94 44 23 	call	0x4688	; 0x4688 <nrk_get_pid>
     634:	1f 92       	push	r1
     636:	8f 93       	push	r24
     638:	87 e6       	ldi	r24, 0x67	; 103
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>

  while (!tdma_started ())
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0e 94 45 07 	call	0xe8a	; 0xe8a <tdma_started>
     650:	81 11       	cpse	r24, r1
     652:	03 c0       	rjmp	.+6      	; 0x65a <tx_task+0x2a>
    nrk_wait_until_next_period ();
     654:	0e 94 9b 21 	call	0x4336	; 0x4336 <nrk_wait_until_next_period>
     658:	f9 cf       	rjmp	.-14     	; 0x64c <tx_task+0x1c>
     65a:	10 e0       	ldi	r17, 0x00	; 0

  cnt = 0;

  while (1) {

    sprintf (tx_buf, "Host data counter %d\n", cnt);
     65c:	80 e8       	ldi	r24, 0x80	; 128
     65e:	e8 2e       	mov	r14, r24
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	f8 2e       	mov	r15, r24
     664:	cd ed       	ldi	r28, 0xDD	; 221
     666:	d8 e0       	ldi	r29, 0x08	; 8
     668:	1f 92       	push	r1
     66a:	1f 93       	push	r17
     66c:	ff 92       	push	r15
     66e:	ef 92       	push	r14
     670:	df 93       	push	r29
     672:	cf 93       	push	r28
     674:	0e 94 16 32 	call	0x642c	; 0x642c <sprintf>
    cnt++;
     678:	1f 5f       	subi	r17, 0xFF	; 255
    len = strlen (tx_buf) + 1;
     67a:	fe 01       	movw	r30, r28
     67c:	01 90       	ld	r0, Z+
     67e:	00 20       	and	r0, r0
     680:	e9 f7       	brne	.-6      	; 0x67c <tx_task+0x4c>
     682:	31 97       	sbiw	r30, 0x01	; 1
     684:	ed 5d       	subi	r30, 0xDD	; 221
     686:	f8 40       	sbci	r31, 0x08	; 8
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	4e 0f       	add	r20, r30

    // Only transmit data if you want to do so
    // Messages from the host are always broadcasts
    v = tdma_send (&tx_tdma_fd, &tx_buf, len, TDMA_BLOCKING);
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	6d ed       	ldi	r22, 0xDD	; 221
     690:	78 e0       	ldi	r23, 0x08	; 8
     692:	86 e3       	ldi	r24, 0x36	; 54
     694:	98 e0       	ldi	r25, 0x08	; 8
     696:	0e 94 10 05 	call	0xa20	; 0xa20 <tdma_send>
    if (v == NRK_OK) {
      // printf ("Host Packet Sent\r\n");
    }
    // nrk_wait_until_next_period();

  }
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	e0 cf       	rjmp	.-64     	; 0x668 <tx_task+0x38>

000006a8 <rx_task>:
}

void rx_task ()
{
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	1f 92       	push	r1
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
  uint8_t len, i;


  cnt = 0;

  printf("%d",tdma_init (TDMA_HOST, 13, 0));
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	6d e0       	ldi	r22, 0x0D	; 13
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 88 06 	call	0xd10	; 0xd10 <tdma_init>
     6be:	28 2f       	mov	r18, r24
     6c0:	33 27       	eor	r19, r19
     6c2:	27 fd       	sbrc	r18, 7
     6c4:	30 95       	com	r19
     6c6:	3f 93       	push	r19
     6c8:	8f 93       	push	r24
     6ca:	86 e9       	ldi	r24, 0x96	; 150
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>


// Change these parameters at runtime...
  tdma_set_slot_len_ms (25);
     6d6:	89 e1       	ldi	r24, 0x19	; 25
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <tdma_set_slot_len_ms>
  tdma_set_slots_per_cycle (1);
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 0b 05 	call	0xa16	; 0xa16 <tdma_set_slots_per_cycle>

  while (!tdma_started ())
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0e 94 45 07 	call	0xe8a	; 0xe8a <tdma_started>
     6f2:	81 11       	cpse	r24, r1
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <rx_task+0x54>
    nrk_wait_until_next_period ();
     6f6:	0e 94 9b 21 	call	0x4336	; 0x4336 <nrk_wait_until_next_period>
     6fa:	f9 cf       	rjmp	.-14     	; 0x6ee <rx_task+0x46>


  while (1) {
    v = tdma_recv (&rx_tdma_fd, &rx_buf, &len, TDMA_BLOCKING);
    printf("v = %d\r\n", v);
     6fc:	89 e9       	ldi	r24, 0x99	; 153
     6fe:	e8 2e       	mov	r14, r24
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	f8 2e       	mov	r15, r24
    if (v == NRK_OK) {
      printf ("src: %u rssi: %d ", rx_tdma_fd.src, rx_tdma_fd.rssi);
     704:	92 ea       	ldi	r25, 0xA2	; 162
     706:	c9 2e       	mov	r12, r25
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	d9 2e       	mov	r13, r25
      printf ("slot: %u ", rx_tdma_fd.slot);
     70c:	24 eb       	ldi	r18, 0xB4	; 180
     70e:	a2 2e       	mov	r10, r18
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	b2 2e       	mov	r11, r18
      printf ("len: %u\r\npayload: ", len);
     714:	3e eb       	ldi	r19, 0xBE	; 190
     716:	83 2e       	mov	r8, r19
     718:	32 e0       	ldi	r19, 0x02	; 2
     71a:	93 2e       	mov	r9, r19
  while (!tdma_started ())
    nrk_wait_until_next_period ();


  while (1) {
    v = tdma_recv (&rx_tdma_fd, &rx_buf, &len, TDMA_BLOCKING);
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	ae 01       	movw	r20, r28
     720:	4f 5f       	subi	r20, 0xFF	; 255
     722:	5f 4f       	sbci	r21, 0xFF	; 255
     724:	68 e4       	ldi	r22, 0x48	; 72
     726:	78 e0       	ldi	r23, 0x08	; 8
     728:	89 ee       	ldi	r24, 0xE9	; 233
     72a:	99 e0       	ldi	r25, 0x09	; 9
     72c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <tdma_recv>
     730:	18 2f       	mov	r17, r24
    printf("v = %d\r\n", v);
     732:	81 2f       	mov	r24, r17
     734:	99 27       	eor	r25, r25
     736:	87 fd       	sbrc	r24, 7
     738:	90 95       	com	r25
     73a:	9f 93       	push	r25
     73c:	1f 93       	push	r17
     73e:	ff 92       	push	r15
     740:	ef 92       	push	r14
     742:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    if (v == NRK_OK) {
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	11 30       	cpi	r17, 0x01	; 1
     750:	c1 f5       	brne	.+112    	; 0x7c2 <rx_task+0x11a>
      printf ("src: %u rssi: %d ", rx_tdma_fd.src, rx_tdma_fd.rssi);
     752:	80 91 f7 09 	lds	r24, 0x09F7
     756:	8f 93       	push	r24
     758:	80 91 f6 09 	lds	r24, 0x09F6
     75c:	8f 93       	push	r24
     75e:	80 91 f1 09 	lds	r24, 0x09F1
     762:	8f 93       	push	r24
     764:	80 91 f0 09 	lds	r24, 0x09F0
     768:	8f 93       	push	r24
     76a:	df 92       	push	r13
     76c:	cf 92       	push	r12
     76e:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
      printf ("slot: %u ", rx_tdma_fd.slot);
     772:	80 91 ea 09 	lds	r24, 0x09EA
     776:	8f 93       	push	r24
     778:	80 91 e9 09 	lds	r24, 0x09E9
     77c:	8f 93       	push	r24
     77e:	bf 92       	push	r11
     780:	af 92       	push	r10
     782:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
      printf ("len: %u\r\npayload: ", len);
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	1f 92       	push	r1
     78a:	8f 93       	push	r24
     78c:	9f 92       	push	r9
     78e:	8f 92       	push	r8
     790:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
      for (i = 0; i < len; i++)
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	18 17       	cp	r17, r24
     7a4:	50 f4       	brcc	.+20     	; 0x7ba <rx_task+0x112>
        printf ("%c", rx_buf[i]);
     7a6:	e1 2f       	mov	r30, r17
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	e8 5b       	subi	r30, 0xB8	; 184
     7ac:	f7 4f       	sbci	r31, 0xF7	; 247
     7ae:	80 81       	ld	r24, Z
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <putchar>
    printf("v = %d\r\n", v);
    if (v == NRK_OK) {
      printf ("src: %u rssi: %d ", rx_tdma_fd.src, rx_tdma_fd.rssi);
      printf ("slot: %u ", rx_tdma_fd.slot);
      printf ("len: %u\r\npayload: ", len);
      for (i = 0; i < len; i++)
     7b6:	1f 5f       	subi	r17, 0xFF	; 255
     7b8:	f3 cf       	rjmp	.-26     	; 0x7a0 <rx_task+0xf8>
        printf ("%c", rx_buf[i]);
      printf ("\r\n");
     7ba:	8e ee       	ldi	r24, 0xEE	; 238
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	0e 94 e6 31 	call	0x63cc	; 0x63cc <puts>
    }

     nrk_wait_until_next_period();
     7c2:	0e 94 9b 21 	call	0x4336	; 0x4336 <nrk_wait_until_next_period>
  }
     7c6:	aa cf       	rjmp	.-172    	; 0x71c <rx_task+0x74>

000007c8 <nrk_create_taskset>:
}

void nrk_create_taskset ()
{
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	cf 93       	push	r28
  nrk_task_set_entry_function (&rx_task_info, rx_task);
     7da:	64 e5       	ldi	r22, 0x54	; 84
     7dc:	73 e0       	ldi	r23, 0x03	; 3
     7de:	83 e1       	ldi	r24, 0x13	; 19
     7e0:	98 e0       	ldi	r25, 0x08	; 8
     7e2:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <nrk_task_set_entry_function>
  nrk_task_set_stk (&rx_task_info, rx_task_stack, NRK_APP_STACKSIZE);
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	51 e0       	ldi	r21, 0x01	; 1
     7ea:	6f e0       	ldi	r22, 0x0F	; 15
     7ec:	77 e0       	ldi	r23, 0x07	; 7
     7ee:	83 e1       	ldi	r24, 0x13	; 19
     7f0:	98 e0       	ldi	r25, 0x08	; 8
     7f2:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <nrk_task_set_stk>
  rx_task_info.prio = 1;
     7f6:	e3 e1       	ldi	r30, 0x13	; 19
     7f8:	f8 e0       	ldi	r31, 0x08	; 8
     7fa:	c1 e0       	ldi	r28, 0x01	; 1
     7fc:	c0 87       	std	Z+8, r28	; 0x08
  rx_task_info.FirstActivation = TRUE;
     7fe:	c7 83       	std	Z+7, r28	; 0x07
  rx_task_info.Type = BASIC_TASK;
     800:	c1 87       	std	Z+9, r28	; 0x09
  rx_task_info.SchType = PREEMPTIVE;
     802:	c2 87       	std	Z+10, r28	; 0x0a
  rx_task_info.period.secs = 0;
     804:	13 86       	std	Z+11, r1	; 0x0b
     806:	14 86       	std	Z+12, r1	; 0x0c
     808:	15 86       	std	Z+13, r1	; 0x0d
     80a:	16 86       	std	Z+14, r1	; 0x0e
  rx_task_info.period.nano_secs = 250 * NANOS_PER_MS;
     80c:	80 e8       	ldi	r24, 0x80	; 128
     80e:	88 2e       	mov	r8, r24
     810:	82 eb       	ldi	r24, 0xB2	; 178
     812:	98 2e       	mov	r9, r24
     814:	86 ee       	ldi	r24, 0xE6	; 230
     816:	a8 2e       	mov	r10, r24
     818:	8e e0       	ldi	r24, 0x0E	; 14
     81a:	b8 2e       	mov	r11, r24
     81c:	87 86       	std	Z+15, r8	; 0x0f
     81e:	90 8a       	std	Z+16, r9	; 0x10
     820:	a1 8a       	std	Z+17, r10	; 0x11
     822:	b2 8a       	std	Z+18, r11	; 0x12
  rx_task_info.cpu_reserve.secs = 0;
     824:	13 8a       	std	Z+19, r1	; 0x13
     826:	14 8a       	std	Z+20, r1	; 0x14
     828:	15 8a       	std	Z+21, r1	; 0x15
     82a:	16 8a       	std	Z+22, r1	; 0x16
  rx_task_info.cpu_reserve.nano_secs = 100 * NANOS_PER_MS;
     82c:	c1 2c       	mov	r12, r1
     82e:	91 ee       	ldi	r25, 0xE1	; 225
     830:	d9 2e       	mov	r13, r25
     832:	95 ef       	ldi	r25, 0xF5	; 245
     834:	e9 2e       	mov	r14, r25
     836:	95 e0       	ldi	r25, 0x05	; 5
     838:	f9 2e       	mov	r15, r25
     83a:	c7 8a       	std	Z+23, r12	; 0x17
     83c:	d0 8e       	std	Z+24, r13	; 0x18
     83e:	e1 8e       	std	Z+25, r14	; 0x19
     840:	f2 8e       	std	Z+26, r15	; 0x1a
  rx_task_info.offset.secs = 0;
     842:	13 8e       	std	Z+27, r1	; 0x1b
     844:	14 8e       	std	Z+28, r1	; 0x1c
     846:	15 8e       	std	Z+29, r1	; 0x1d
     848:	16 8e       	std	Z+30, r1	; 0x1e
  rx_task_info.offset.nano_secs = 0;
     84a:	17 8e       	std	Z+31, r1	; 0x1f
     84c:	10 a2       	std	Z+32, r1	; 0x20
     84e:	11 a2       	std	Z+33, r1	; 0x21
     850:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&rx_task_info);
     852:	cf 01       	movw	r24, r30
     854:	0e 94 09 21 	call	0x4212	; 0x4212 <nrk_activate_task>

  nrk_task_set_entry_function (&tx_task_info, tx_task);
     858:	68 e1       	ldi	r22, 0x18	; 24
     85a:	73 e0       	ldi	r23, 0x03	; 3
     85c:	8a eb       	ldi	r24, 0xBA	; 186
     85e:	98 e0       	ldi	r25, 0x08	; 8
     860:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <nrk_task_set_entry_function>
  nrk_task_set_stk (&tx_task_info, tx_task_stack, NRK_APP_STACKSIZE);
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	51 e0       	ldi	r21, 0x01	; 1
     868:	6e ef       	ldi	r22, 0xFE	; 254
     86a:	75 e0       	ldi	r23, 0x05	; 5
     86c:	8a eb       	ldi	r24, 0xBA	; 186
     86e:	98 e0       	ldi	r25, 0x08	; 8
     870:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <nrk_task_set_stk>
  tx_task_info.prio = 1;
     874:	ea eb       	ldi	r30, 0xBA	; 186
     876:	f8 e0       	ldi	r31, 0x08	; 8
     878:	c0 87       	std	Z+8, r28	; 0x08
  tx_task_info.FirstActivation = TRUE;
     87a:	c7 83       	std	Z+7, r28	; 0x07
  tx_task_info.Type = BASIC_TASK;
     87c:	c1 87       	std	Z+9, r28	; 0x09
  tx_task_info.SchType = PREEMPTIVE;
     87e:	c2 87       	std	Z+10, r28	; 0x0a
  tx_task_info.period.secs = 0;
     880:	13 86       	std	Z+11, r1	; 0x0b
     882:	14 86       	std	Z+12, r1	; 0x0c
     884:	15 86       	std	Z+13, r1	; 0x0d
     886:	16 86       	std	Z+14, r1	; 0x0e
  tx_task_info.period.nano_secs = 250 * NANOS_PER_MS;
     888:	87 86       	std	Z+15, r8	; 0x0f
     88a:	90 8a       	std	Z+16, r9	; 0x10
     88c:	a1 8a       	std	Z+17, r10	; 0x11
     88e:	b2 8a       	std	Z+18, r11	; 0x12
  tx_task_info.cpu_reserve.secs = 0;
     890:	13 8a       	std	Z+19, r1	; 0x13
     892:	14 8a       	std	Z+20, r1	; 0x14
     894:	15 8a       	std	Z+21, r1	; 0x15
     896:	16 8a       	std	Z+22, r1	; 0x16
  tx_task_info.cpu_reserve.nano_secs = 100 * NANOS_PER_MS;
     898:	c7 8a       	std	Z+23, r12	; 0x17
     89a:	d0 8e       	std	Z+24, r13	; 0x18
     89c:	e1 8e       	std	Z+25, r14	; 0x19
     89e:	f2 8e       	std	Z+26, r15	; 0x1a
  tx_task_info.offset.secs = 0;
     8a0:	13 8e       	std	Z+27, r1	; 0x1b
     8a2:	14 8e       	std	Z+28, r1	; 0x1c
     8a4:	15 8e       	std	Z+29, r1	; 0x1d
     8a6:	16 8e       	std	Z+30, r1	; 0x1e
  tx_task_info.offset.nano_secs = 0;
     8a8:	17 8e       	std	Z+31, r1	; 0x1f
     8aa:	10 a2       	std	Z+32, r1	; 0x20
     8ac:	11 a2       	std	Z+33, r1	; 0x21
     8ae:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&tx_task_info);
     8b0:	cf 01       	movw	r24, r30
     8b2:	0e 94 09 21 	call	0x4212	; 0x4212 <nrk_activate_task>

  tdma_task_config ();

}
     8b6:	cf 91       	pop	r28
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	af 90       	pop	r10
     8c4:	9f 90       	pop	r9
     8c6:	8f 90       	pop	r8
  tx_task_info.cpu_reserve.nano_secs = 100 * NANOS_PER_MS;
  tx_task_info.offset.secs = 0;
  tx_task_info.offset.nano_secs = 0;
  nrk_activate_task (&tx_task_info);

  tdma_task_config ();
     8c8:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <tdma_task_config>

000008cc <_tdma_rx_master>:
{
  int8_t v, i;
  static uint8_t cnt=0;
  v = 0;

  if (tdma_rx_buf_empty != 1) {
     8cc:	80 91 d1 03 	lds	r24, 0x03D1
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	99 f0       	breq	.+38     	; 0x8fa <_tdma_rx_master+0x2e>
    rf_rx_off();
     8d4:	0e 94 32 0c 	call	0x1864	; 0x1864 <rf_rx_off>
    rf_rx_on();
     8d8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <rf_rx_on>
    cnt++;
     8dc:	80 91 a6 03 	lds	r24, 0x03A6
     8e0:	8f 5f       	subi	r24, 0xFF	; 255
     8e2:	80 93 a6 03 	sts	0x03A6, r24
    // catch annoying race condition, FIXME: why does this really happen?
    if(cnt>2){ tdma_rx_buf_empty=0;
     8e6:	83 30       	cpi	r24, 0x03	; 3
     8e8:	30 f0       	brcs	.+12     	; 0x8f6 <_tdma_rx_master+0x2a>
     8ea:	10 92 d1 03 	sts	0x03D1, r1
          nrk_event_signal (tdma_rx_pkt_signal);
     8ee:	80 91 4e 09 	lds	r24, 0x094E
     8f2:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <nrk_event_signal>
	}
    return NRK_ERROR;
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	08 95       	ret
    }
cnt=0;
     8fa:	10 92 a6 03 	sts	0x03A6, r1
  #ifdef GPIO_DEBUG
    nrk_gpio_set(NRK_MISO);
  #endif
//  if (rf_rx_check_fifop () == 1) {
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
     8fe:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <rf_rx_packet_nonblock>
      if (v == 1) {
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	91 f5       	brne	.+100    	; 0x96a <_tdma_rx_master+0x9e>
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
     906:	60 91 f5 05 	lds	r22, 0x05F5
     90a:	6d 30       	cpi	r22, 0x0D	; 13
     90c:	6c f1       	brlt	.+90     	; 0x968 <_tdma_rx_master+0x9c>
	if(_tdma_aes_enabled)
     90e:	80 91 dc 03 	lds	r24, 0x03DC
     912:	81 11       	cpse	r24, r1
     914:	07 c0       	rjmp	.+14     	; 0x924 <_tdma_rx_master+0x58>
   		 	nrk_gpio_clr(NRK_MISO);
  		#endif
			return NRK_ERROR; 
		}
	 }
	  tdma_rx_buf_empty = 0;
     916:	10 92 d1 03 	sts	0x03D1, r1
          nrk_event_signal (tdma_rx_pkt_signal);
     91a:	80 91 4e 09 	lds	r24, 0x094E
     91e:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <nrk_event_signal>
     922:	22 c0       	rjmp	.+68     	; 0x968 <_tdma_rx_master+0x9c>
      if (v == 1) {
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
     924:	80 91 f7 05 	lds	r24, 0x05F7
     928:	90 91 f8 05 	lds	r25, 0x05F8
     92c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <aes_decrypt>
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     930:	80 91 f7 05 	lds	r24, 0x05F7
     934:	90 91 f8 05 	lds	r25, 0x05F8
     938:	20 91 f5 05 	lds	r18, 0x05F5
     93c:	82 0f       	add	r24, r18
     93e:	91 1d       	adc	r25, r1
     940:	27 fd       	sbrc	r18, 7
     942:	9a 95       	dec	r25
     944:	fc 01       	movw	r30, r24
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	20 81       	ld	r18, Z
     94a:	2a 3c       	cpi	r18, 0xCA	; 202
     94c:	a1 f6       	brne	.-88     	; 0x8f6 <_tdma_rx_master+0x2a>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     94e:	31 97       	sbiw	r30, 0x01	; 1
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     950:	20 81       	ld	r18, Z
     952:	2e 3f       	cpi	r18, 0xFE	; 254
     954:	81 f6       	brne	.-96     	; 0x8f6 <_tdma_rx_master+0x2a>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     956:	31 97       	sbiw	r30, 0x01	; 1
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     958:	20 81       	ld	r18, Z
     95a:	2e 3b       	cpi	r18, 0xBE	; 190
     95c:	61 f6       	brne	.-104    	; 0x8f6 <_tdma_rx_master+0x2a>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-4]!= 0xEF ) 
     95e:	31 97       	sbiw	r30, 0x01	; 1
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     960:	80 81       	ld	r24, Z
     962:	8f 3e       	cpi	r24, 0xEF	; 239
     964:	c1 f2       	breq	.-80     	; 0x916 <_tdma_rx_master+0x4a>
     966:	c7 cf       	rjmp	.-114    	; 0x8f6 <_tdma_rx_master+0x2a>
//  if (rf_rx_check_fifop () == 1) {
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
      if (v == 1) {
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
     968:	81 e0       	ldi	r24, 0x01	; 1
  #ifdef GPIO_DEBUG
    nrk_gpio_clr(NRK_MISO);
  #endif

  return v;
}
     96a:	08 95       	ret

0000096c <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     96c:	08 95       	ret

0000096e <tdma_aes_setkey>:

void tdma_aes_setkey(uint8_t *key)
{
uint8_t i;
	aes_setkey(key);
     96e:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <aes_setkey>

00000972 <tdma_aes_enable>:
}


void tdma_aes_enable()
{
  _tdma_aes_enabled=1;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 dc 03 	sts	0x03DC, r24
     978:	08 95       	ret

0000097a <tdma_aes_disable>:
}

void tdma_aes_disable()
{
  _tdma_aes_enabled=1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 dc 03 	sts	0x03DC, r24
     980:	08 95       	ret

00000982 <tdma_sync_ok>:
}

uint8_t tdma_sync_ok()
{
return sync_status;
}
     982:	80 91 a9 03 	lds	r24, 0x03A9
     986:	08 95       	ret

00000988 <tdma_set_error_callback>:

int8_t tdma_set_error_callback(void (*fp)(void))
{
	if(fp==NULL ) return NRK_ERROR;
     988:	00 97       	sbiw	r24, 0x00	; 0
     98a:	31 f0       	breq	.+12     	; 0x998 <tdma_set_error_callback+0x10>
	tdma_error_callback=fp;
     98c:	90 93 a8 03 	sts	0x03A8, r25
     990:	80 93 a7 03 	sts	0x03A7, r24
return NRK_OK;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	08 95       	ret
return sync_status;
}

int8_t tdma_set_error_callback(void (*fp)(void))
{
	if(fp==NULL ) return NRK_ERROR;
     998:	8f ef       	ldi	r24, 0xFF	; 255
	tdma_error_callback=fp;
return NRK_OK;
}
     99a:	08 95       	ret

0000099c <tdma_tx_slot_add>:


int8_t tdma_tx_slot_add (uint16_t slot)
{
  tdma_tx_sched[0] = slot;
     99c:	90 93 df 03 	sts	0x03DF, r25
     9a0:	80 93 de 03 	sts	0x03DE, r24
  tdma_tx_slots = 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 dd 03 	sts	0x03DD, r24
  return NRK_OK;
}
     9aa:	08 95       	ret

000009ac <tdma_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	08 95       	ret

000009b0 <tdma_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	08 95       	ret

000009b6 <tdma_set_rf_power>:

int8_t tdma_set_rf_power (uint8_t power)
{
  if (power > 31)
     9b6:	80 32       	cpi	r24, 0x20	; 32
     9b8:	20 f4       	brcc	.+8      	; 0x9c2 <tdma_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     9ba:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <rf_tx_power>
  return NRK_OK;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	08 95       	ret
}

int8_t tdma_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     9c4:	08 95       	ret

000009c6 <tdma_set_channel>:

int8_t tdma_set_channel (uint8_t chan)
{
  if (chan > 26)
     9c6:	8b 31       	cpi	r24, 0x1B	; 27
     9c8:	68 f4       	brcc	.+26     	; 0x9e4 <tdma_set_channel+0x1e>
     9ca:	68 2f       	mov	r22, r24
    return NRK_ERROR;
  tdma_chan = chan;
     9cc:	80 93 cf 03 	sts	0x03CF, r24
//rf_init (&tdma_rfRxInfo, chan, 0xFFFF, 0x00000);
  rf_init (&tdma_rfRxInfo, chan, 0x2420, 0x1214);
     9d0:	24 e1       	ldi	r18, 0x14	; 20
     9d2:	32 e1       	ldi	r19, 0x12	; 18
     9d4:	40 e2       	ldi	r20, 0x20	; 32
     9d6:	54 e2       	ldi	r21, 0x24	; 36
     9d8:	82 ef       	ldi	r24, 0xF2	; 242
     9da:	95 e0       	ldi	r25, 0x05	; 5
     9dc:	0e 94 c0 0b 	call	0x1780	; 0x1780 <rf_init>
  return NRK_OK;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	08 95       	ret
}

int8_t tdma_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
  tdma_chan = chan;
//rf_init (&tdma_rfRxInfo, chan, 0xFFFF, 0x00000);
  rf_init (&tdma_rfRxInfo, chan, 0x2420, 0x1214);
  return NRK_OK;
}
     9e6:	08 95       	ret

000009e8 <tdma_set_slot_len_ms>:

int8_t tdma_set_slot_len_ms (uint16_t len)
{
  tdma_slot_len_ms = len;
     9e8:	90 93 d7 03 	sts	0x03D7, r25
     9ec:	80 93 d6 03 	sts	0x03D6, r24
  _tdma_slot_time.nano_secs = len * NANOS_PER_MS;
     9f0:	e5 eb       	ldi	r30, 0xB5	; 181
     9f2:	f3 e0       	ldi	r31, 0x03	; 3
     9f4:	dc 01       	movw	r26, r24
     9f6:	20 e4       	ldi	r18, 0x40	; 64
     9f8:	32 e4       	ldi	r19, 0x42	; 66
     9fa:	4f e0       	ldi	r20, 0x0F	; 15
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__muluhisi3>
     a02:	64 83       	std	Z+4, r22	; 0x04
     a04:	75 83       	std	Z+5, r23	; 0x05
     a06:	86 83       	std	Z+6, r24	; 0x06
     a08:	97 83       	std	Z+7, r25	; 0x07
  _tdma_slot_time.secs = 0;
     a0a:	10 82       	st	Z, r1
     a0c:	11 82       	std	Z+1, r1	; 0x01
     a0e:	12 82       	std	Z+2, r1	; 0x02
     a10:	13 82       	std	Z+3, r1	; 0x03
  return NRK_OK;
}
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 95       	ret

00000a16 <tdma_set_slots_per_cycle>:


int8_t tdma_set_slots_per_cycle (uint16_t slots_per_cycle)
{

  tdma_slots_per_cycle = slots_per_cycle;
     a16:	90 93 d5 03 	sts	0x03D5, r25
     a1a:	80 93 d4 03 	sts	0x03D4, r24
}
     a1e:	08 95       	ret

00000a20 <tdma_send>:

int8_t tdma_send (tdma_info * fd, uint8_t * buf, uint8_t len, uint8_t flags)
{
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <tdma_send+0xe>
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
     a32:	6c 01       	movw	r12, r24
     a34:	7b 01       	movw	r14, r22
  uint32_t mask;
  uint8_t i;

  if (tx_data_ready == 1)
     a36:	80 91 d8 03 	lds	r24, 0x03D8
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	09 f4       	brne	.+2      	; 0xa40 <tdma_send+0x20>
     a3e:	8d c0       	rjmp	.+282    	; 0xb5a <tdma_send+0x13a>
    return NRK_ERROR;
  if (len == 0)
     a40:	44 23       	and	r20, r20
     a42:	09 f4       	brne	.+2      	; 0xa46 <tdma_send+0x26>
     a44:	8a c0       	rjmp	.+276    	; 0xb5a <tdma_send+0x13a>
    return NRK_ERROR;
  if (buf == NULL)
     a46:	61 15       	cp	r22, r1
     a48:	71 05       	cpc	r23, r1
     a4a:	09 f4       	brne	.+2      	; 0xa4e <tdma_send+0x2e>
     a4c:	86 c0       	rjmp	.+268    	; 0xb5a <tdma_send+0x13a>
    return NRK_ERROR;
  if (fd == NULL)
     a4e:	c1 14       	cp	r12, r1
     a50:	d1 04       	cpc	r13, r1
     a52:	09 f4       	brne	.+2      	; 0xa56 <tdma_send+0x36>
     a54:	82 c0       	rjmp	.+260    	; 0xb5a <tdma_send+0x13a>
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  if (flags == TDMA_BLOCKING)
     a56:	21 11       	cpse	r18, r1
     a58:	08 c0       	rjmp	.+16     	; 0xa6a <tdma_send+0x4a>
    nrk_signal_register (tdma_tx_pkt_done_signal);
     a5a:	80 91 4f 09 	lds	r24, 0x094F
     a5e:	2a 83       	std	Y+2, r18	; 0x02
     a60:	49 83       	std	Y+1, r20	; 0x01
     a62:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <nrk_signal_register>
     a66:	49 81       	ldd	r20, Y+1	; 0x01
     a68:	2a 81       	ldd	r18, Y+2	; 0x02

  tx_data_ready = 1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 d8 03 	sts	0x03D8, r24

  tdma_rfTxInfo.pPayload = tdma_tx_buf;
     a70:	86 e5       	ldi	r24, 0x56	; 86
     a72:	94 e0       	ldi	r25, 0x04	; 4
     a74:	90 93 04 07 	sts	0x0704, r25
     a78:	80 93 03 07 	sts	0x0703, r24
// Setup the header data
  tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = (fd->slot >> 8) & 0xff;
     a7c:	f6 01       	movw	r30, r12
     a7e:	81 81       	ldd	r24, Z+1	; 0x01
     a80:	80 93 57 04 	sts	0x0457, r24
  tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = (fd->slot & 0xff);
     a84:	80 81       	ld	r24, Z
     a86:	80 93 56 04 	sts	0x0456, r24
  tdma_rfTxInfo.pPayload[TDMA_DST_HIGH] = (fd->dst >> 8) & 0xff;
     a8a:	85 81       	ldd	r24, Z+5	; 0x05
     a8c:	96 81       	ldd	r25, Z+6	; 0x06
     a8e:	90 93 59 04 	sts	0x0459, r25
  tdma_rfTxInfo.pPayload[TDMA_DST_LOW] = (fd->dst & 0xff);
     a92:	80 93 58 04 	sts	0x0458, r24
//  tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = (fd->src >> 8) & 0xff;
  tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = (tdma_my_mac & 0xff);
     a96:	80 91 db 03 	lds	r24, 0x03DB
     a9a:	80 93 5b 04 	sts	0x045B, r24
  tdma_rfTxInfo.pPayload[TDMA_SRC_LOW] = (tdma_my_mac >> 8) & 0xff;
     a9e:	10 92 5a 04 	sts	0x045A, r1
  fd->seq_num++;
     aa2:	81 85       	ldd	r24, Z+9	; 0x09
     aa4:	92 85       	ldd	r25, Z+10	; 0x0a
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	92 87       	std	Z+10, r25	; 0x0a
     aaa:	81 87       	std	Z+9, r24	; 0x09
  tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_HIGH] = ((fd->seq_num>>8) & 0xff);
     aac:	90 93 5d 04 	sts	0x045D, r25
  tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_LOW] = (fd->seq_num & 0xff);
     ab0:	80 93 5c 04 	sts	0x045C, r24
  tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_HIGH] = (fd->cycle_size >> 8) & 0xff;
     ab4:	83 81       	ldd	r24, Z+3	; 0x03
     ab6:	80 93 5f 04 	sts	0x045F, r24
  tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_LOW] = (fd->cycle_size & 0xff);
     aba:	82 81       	ldd	r24, Z+2	; 0x02
     abc:	80 93 5e 04 	sts	0x045E, r24
  tdma_rfTxInfo.pPayload[TDMA_TTL] = tdma_ttl<<4 | tdma_ttl;
     ac0:	30 91 d9 03 	lds	r19, 0x03D9
     ac4:	f0 e1       	ldi	r31, 0x10	; 16
     ac6:	3f 9f       	mul	r19, r31
     ac8:	c0 01       	movw	r24, r0
     aca:	11 24       	eor	r1, r1
     acc:	83 2b       	or	r24, r19
     ace:	80 93 60 04 	sts	0x0460, r24
     ad2:	5e 2d       	mov	r21, r14

// Copy the user payload to the back of the header
  for (i = 0; i < len; i++)
     ad4:	f7 01       	movw	r30, r14
     ad6:	8c e0       	ldi	r24, 0x0C	; 12
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	3e 2f       	mov	r19, r30
     adc:	35 1b       	sub	r19, r21
     ade:	34 17       	cp	r19, r20
     ae0:	50 f4       	brcc	.+20     	; 0xaf6 <tdma_send+0xd6>
    tdma_rfTxInfo.pPayload[i + TDMA_PCF_HEADER] = buf[i];
     ae2:	31 91       	ld	r19, Z+
     ae4:	a0 91 03 07 	lds	r26, 0x0703
     ae8:	b0 91 04 07 	lds	r27, 0x0704
     aec:	a8 0f       	add	r26, r24
     aee:	b9 1f       	adc	r27, r25
     af0:	3c 93       	st	X, r19
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	f2 cf       	rjmp	.-28     	; 0xada <tdma_send+0xba>
// Set packet length with header
  tdma_rfTxInfo.length = len + TDMA_PCF_HEADER;
     af6:	44 5f       	subi	r20, 0xF4	; 244
     af8:	40 93 02 07 	sts	0x0702, r20
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif

  if (flags == TDMA_BLOCKING) {
     afc:	21 11       	cpse	r18, r1
     afe:	2b c0       	rjmp	.+86     	; 0xb56 <tdma_send+0x136>
    mask = nrk_event_wait (SIG (tdma_tx_pkt_done_signal));
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	bc 01       	movw	r22, r24
     b0a:	cd 01       	movw	r24, r26
     b0c:	00 90 4f 09 	lds	r0, 0x094F
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <tdma_send+0xfa>
     b12:	66 0f       	add	r22, r22
     b14:	77 1f       	adc	r23, r23
     b16:	88 1f       	adc	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	0a 94       	dec	r0
     b1c:	d2 f7       	brpl	.-12     	; 0xb12 <tdma_send+0xf2>
     b1e:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <nrk_event_wait>
     b22:	6b 01       	movw	r12, r22
     b24:	7c 01       	movw	r14, r24
    if (mask == 0)
     b26:	61 15       	cp	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	81 05       	cpc	r24, r1
     b2c:	91 05       	cpc	r25, r1
     b2e:	21 f4       	brne	.+8      	; 0xb38 <tdma_send+0x118>
      nrk_kprintf (PSTR ("TDMA TX: Error calling event wait\r\n"));
     b30:	8f e6       	ldi	r24, 0x6F	; 111
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    if ((mask & SIG (tdma_tx_pkt_done_signal)) == 0)
     b38:	00 90 4f 09 	lds	r0, 0x094F
     b3c:	04 c0       	rjmp	.+8      	; 0xb46 <tdma_send+0x126>
     b3e:	f6 94       	lsr	r15
     b40:	e7 94       	ror	r14
     b42:	d7 94       	ror	r13
     b44:	c7 94       	ror	r12
     b46:	0a 94       	dec	r0
     b48:	d2 f7       	brpl	.-12     	; 0xb3e <tdma_send+0x11e>
     b4a:	c0 fc       	sbrc	r12, 0
     b4c:	04 c0       	rjmp	.+8      	; 0xb56 <tdma_send+0x136>
      nrk_kprintf (PSTR ("TDMA TX: Woke up on wrong signal\r\n"));
     b4e:	8c e4       	ldi	r24, 0x4C	; 76
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    return NRK_OK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <tdma_send+0x13c>
{
  uint32_t mask;
  uint8_t i;

  if (tx_data_ready == 1)
    return NRK_ERROR;
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
      nrk_kprintf (PSTR ("TDMA TX: Woke up on wrong signal\r\n"));
    return NRK_OK;
  }

  return NRK_OK;
}
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	08 95       	ret

00000b6e <tdma_recv>:

int8_t tdma_recv (tdma_info * fd, uint8_t * buf, uint8_t * len, uint8_t flags)
{
     b6e:	8f 92       	push	r8
     b70:	9f 92       	push	r9
     b72:	af 92       	push	r10
     b74:	bf 92       	push	r11
     b76:	cf 92       	push	r12
     b78:	df 92       	push	r13
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	1f 92       	push	r1
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	4c 01       	movw	r8, r24
     b8e:	8b 01       	movw	r16, r22
     b90:	5a 01       	movw	r10, r20
     b92:	80 91 d1 03 	lds	r24, 0x03D1
  nrk_sig_mask_t event;
  uint8_t i;
  if (flags == TDMA_BLOCKING) {
     b96:	21 11       	cpse	r18, r1
     b98:	1c c0       	rjmp	.+56     	; 0xbd2 <tdma_recv+0x64>
    if (tdma_rx_buf_empty == 1) {
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	f1 f4       	brne	.+60     	; 0xbda <tdma_recv+0x6c>
      nrk_signal_register (tdma_rx_pkt_signal);
     b9e:	80 91 4e 09 	lds	r24, 0x094E
     ba2:	29 83       	std	Y+1, r18	; 0x01
     ba4:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <nrk_signal_register>
      event = nrk_event_wait (SIG (tdma_rx_pkt_signal));
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	bc 01       	movw	r22, r24
     bb2:	cd 01       	movw	r24, r26
     bb4:	00 90 4e 09 	lds	r0, 0x094E
     bb8:	04 c0       	rjmp	.+8      	; 0xbc2 <tdma_recv+0x54>
     bba:	66 0f       	add	r22, r22
     bbc:	77 1f       	adc	r23, r23
     bbe:	88 1f       	adc	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	d2 f7       	brpl	.-12     	; 0xbba <tdma_recv+0x4c>
     bc6:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <nrk_event_wait>
     bca:	6b 01       	movw	r12, r22
     bcc:	7c 01       	movw	r14, r24
     bce:	29 81       	ldd	r18, Y+1	; 0x01
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <tdma_recv+0x6c>
    }
  }
  else if (tdma_rx_buf_empty == 1)
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	11 f4       	brne	.+4      	; 0xbda <tdma_recv+0x6c>
    return NRK_ERROR;
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	7c c0       	rjmp	.+248    	; 0xcd2 <tdma_recv+0x164>

  if (tdma_rfRxInfo.length < TDMA_PCF_HEADER)
     bda:	80 91 f5 05 	lds	r24, 0x05F5
     bde:	8c 30       	cpi	r24, 0x0C	; 12
     be0:	d4 f3       	brlt	.-12     	; 0xbd6 <tdma_recv+0x68>
    return NRK_ERROR;
  // Set the length
  *len = (uint8_t) (tdma_rfRxInfo.length - TDMA_PCF_HEADER);
     be2:	8c 50       	subi	r24, 0x0C	; 12
     be4:	d5 01       	movw	r26, r10
     be6:	8c 93       	st	X, r24
  // Copy the payload data
  for (i = 0; i < *len; i++)
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	f5 01       	movw	r30, r10
     bec:	90 81       	ld	r25, Z
     bee:	89 17       	cp	r24, r25
     bf0:	78 f4       	brcc	.+30     	; 0xc10 <tdma_recv+0xa2>
    buf[i] = tdma_rfRxInfo.pPayload[i + TDMA_PCF_HEADER];
     bf2:	48 2f       	mov	r20, r24
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	e0 91 f7 05 	lds	r30, 0x05F7
     bfa:	f0 91 f8 05 	lds	r31, 0x05F8
     bfe:	e4 0f       	add	r30, r20
     c00:	f5 1f       	adc	r31, r21
     c02:	94 85       	ldd	r25, Z+12	; 0x0c
     c04:	f8 01       	movw	r30, r16
     c06:	e4 0f       	add	r30, r20
     c08:	f5 1f       	adc	r31, r21
     c0a:	90 83       	st	Z, r25
  if (tdma_rfRxInfo.length < TDMA_PCF_HEADER)
    return NRK_ERROR;
  // Set the length
  *len = (uint8_t) (tdma_rfRxInfo.length - TDMA_PCF_HEADER);
  // Copy the payload data
  for (i = 0; i < *len; i++)
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	ed cf       	rjmp	.-38     	; 0xbea <tdma_recv+0x7c>
    buf[i] = tdma_rfRxInfo.pPayload[i + TDMA_PCF_HEADER];

  // Fill the information struct
  fd->rssi = tdma_rfRxInfo.rssi;
     c10:	80 91 fa 05 	lds	r24, 0x05FA
     c14:	99 27       	eor	r25, r25
     c16:	87 fd       	sbrc	r24, 7
     c18:	90 95       	com	r25
     c1a:	d4 01       	movw	r26, r8
     c1c:	1e 96       	adiw	r26, 0x0e	; 14
     c1e:	9c 93       	st	X, r25
     c20:	8e 93       	st	-X, r24
     c22:	1d 97       	sbiw	r26, 0x0d	; 13
  fd->actualRssi = tdma_rfRxInfo.actualRssi;
     c24:	80 91 fb 05 	lds	r24, 0x05FB
     c28:	1f 96       	adiw	r26, 0x0f	; 15
     c2a:	8c 93       	st	X, r24
     c2c:	1f 97       	sbiw	r26, 0x0f	; 15
  fd->energyDetectionLevel = tdma_rfRxInfo.energyDetectionLevel;
     c2e:	80 91 fc 05 	lds	r24, 0x05FC
     c32:	50 96       	adiw	r26, 0x10	; 16
     c34:	8c 93       	st	X, r24
     c36:	50 97       	sbiw	r26, 0x10	; 16
  fd->linkQualityIndication = tdma_rfRxInfo.linkQualityIndication;
     c38:	80 91 fd 05 	lds	r24, 0x05FD
     c3c:	51 96       	adiw	r26, 0x11	; 17
     c3e:	8c 93       	st	X, r24
     c40:	51 97       	sbiw	r26, 0x11	; 17
  fd->src =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
     c42:	e0 91 f7 05 	lds	r30, 0x05F7
     c46:	f0 91 f8 05 	lds	r31, 0x05F8
     c4a:	85 81       	ldd	r24, Z+5	; 0x05
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	98 2f       	mov	r25, r24
     c50:	88 27       	eor	r24, r24
     c52:	34 81       	ldd	r19, Z+4	; 0x04
     c54:	83 2b       	or	r24, r19
  // Fill the information struct
  fd->rssi = tdma_rfRxInfo.rssi;
  fd->actualRssi = tdma_rfRxInfo.actualRssi;
  fd->energyDetectionLevel = tdma_rfRxInfo.energyDetectionLevel;
  fd->linkQualityIndication = tdma_rfRxInfo.linkQualityIndication;
  fd->src =
     c56:	18 96       	adiw	r26, 0x08	; 8
     c58:	9c 93       	st	X, r25
     c5a:	8e 93       	st	-X, r24
     c5c:	17 97       	sbiw	r26, 0x07	; 7
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SRC_LOW];
  fd->dst =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
     c5e:	83 81       	ldd	r24, Z+3	; 0x03
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	98 2f       	mov	r25, r24
     c64:	88 27       	eor	r24, r24
     c66:	32 81       	ldd	r19, Z+2	; 0x02
     c68:	83 2b       	or	r24, r19
  fd->energyDetectionLevel = tdma_rfRxInfo.energyDetectionLevel;
  fd->linkQualityIndication = tdma_rfRxInfo.linkQualityIndication;
  fd->src =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SRC_LOW];
  fd->dst =
     c6a:	16 96       	adiw	r26, 0x06	; 6
     c6c:	9c 93       	st	X, r25
     c6e:	8e 93       	st	-X, r24
     c70:	15 97       	sbiw	r26, 0x05	; 5
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_DST_LOW];
  fd->slot =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
     c72:	81 81       	ldd	r24, Z+1	; 0x01
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	98 2f       	mov	r25, r24
     c78:	88 27       	eor	r24, r24
     c7a:	30 81       	ld	r19, Z
     c7c:	83 2b       	or	r24, r19
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SRC_LOW];
  fd->dst =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_DST_LOW];
  fd->slot =
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	8e 93       	st	-X, r24
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SLOT_LOW];
  fd->seq_num =
    ((uint16_t) tdma_rfRxInfo.
     c84:	87 81       	ldd	r24, Z+7	; 0x07
     c86:	90 e0       	ldi	r25, 0x00	; 0
     pPayload[TDMA_SEQ_NUM_HIGH] << 8) | tdma_rfRxInfo.
     c88:	98 2f       	mov	r25, r24
     c8a:	88 27       	eor	r24, r24
     c8c:	36 81       	ldd	r19, Z+6	; 0x06
     c8e:	83 2b       	or	r24, r19
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_DST_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_DST_LOW];
  fd->slot =
    ((uint16_t) tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SLOT_LOW];
  fd->seq_num =
     c90:	1a 96       	adiw	r26, 0x0a	; 10
     c92:	9c 93       	st	X, r25
     c94:	8e 93       	st	-X, r24
     c96:	19 97       	sbiw	r26, 0x09	; 9
    ((uint16_t) tdma_rfRxInfo.
     pPayload[TDMA_SEQ_NUM_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SEQ_NUM_LOW];
  fd->cycle_size =
    ((uint16_t) tdma_rfRxInfo.
     c98:	81 85       	ldd	r24, Z+9	; 0x09
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
     c9c:	98 2f       	mov	r25, r24
     c9e:	88 27       	eor	r24, r24
     ca0:	30 85       	ldd	r19, Z+8	; 0x08
     ca2:	83 2b       	or	r24, r19
    pPayload[TDMA_SLOT_LOW];
  fd->seq_num =
    ((uint16_t) tdma_rfRxInfo.
     pPayload[TDMA_SEQ_NUM_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_SEQ_NUM_LOW];
  fd->cycle_size =
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
    ((uint16_t) tdma_rfRxInfo.
     pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
    pPayload[TDMA_CYCLE_SIZE_LOW];

  fd->ttl= (uint8_t) tdma_rfRxInfo.pPayload[TDMA_TTL]; 
     cac:	82 85       	ldd	r24, Z+10	; 0x0a
     cae:	1c 96       	adiw	r26, 0x0c	; 12
     cb0:	8c 93       	st	X, r24


  // Check if it was a time out instead of packet RX signal
  if (flags == TDMA_BLOCKING)
     cb2:	21 11       	cpse	r18, r1
     cb4:	0b c0       	rjmp	.+22     	; 0xccc <tdma_recv+0x15e>
    if ((event & SIG (tdma_rx_pkt_signal)) == 0)
     cb6:	00 90 4e 09 	lds	r0, 0x094E
     cba:	04 c0       	rjmp	.+8      	; 0xcc4 <tdma_recv+0x156>
     cbc:	f6 94       	lsr	r15
     cbe:	e7 94       	ror	r14
     cc0:	d7 94       	ror	r13
     cc2:	c7 94       	ror	r12
     cc4:	0a 94       	dec	r0
     cc6:	d2 f7       	brpl	.-12     	; 0xcbc <tdma_recv+0x14e>
     cc8:	c0 fe       	sbrs	r12, 0
     cca:	85 cf       	rjmp	.-246    	; 0xbd6 <tdma_recv+0x68>
      return NRK_ERROR;

  // Set the buffer as empty
  tdma_rx_buf_empty = 1;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 d1 03 	sts	0x03D1, r24
  return NRK_OK;

}
     cd2:	0f 90       	pop	r0
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	bf 90       	pop	r11
     ce6:	af 90       	pop	r10
     ce8:	9f 90       	pop	r9
     cea:	8f 90       	pop	r8
     cec:	08 95       	ret

00000cee <tdma_rx_pkt_set_buffer>:


int8_t tdma_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	51 f0       	breq	.+20     	; 0xd06 <tdma_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  tdma_rfRxInfo.pPayload = buf;
     cf2:	90 93 f8 05 	sts	0x05F8, r25
     cf6:	80 93 f7 05 	sts	0x05F7, r24
  tdma_rfRxInfo.max_length = size;
     cfa:	60 93 f6 05 	sts	0x05F6, r22
  tdma_rx_buf_empty = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 93 d1 03 	sts	0x03D1, r24
  return NRK_OK;
     d04:	08 95       	ret


int8_t tdma_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     d06:	8f ef       	ldi	r24, 0xFF	; 255
  tdma_rfRxInfo.pPayload = buf;
  tdma_rfRxInfo.max_length = size;
  tdma_rx_buf_empty = 1;
  return NRK_OK;
}
     d08:	08 95       	ret

00000d0a <tdma_ttl_set>:

void tdma_ttl_set(uint8_t ttl)
{
tdma_ttl=ttl;
     d0a:	80 93 d9 03 	sts	0x03D9, r24
     d0e:	08 95       	ret

00000d10 <tdma_init>:
}

int8_t tdma_init (uint8_t mode, uint8_t chan, uint16_t my_mac)
{
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	16 2f       	mov	r17, r22
     d1a:	d4 2f       	mov	r29, r20
     d1c:	05 2f       	mov	r16, r21
  tx_reserve = -1;
     d1e:	9f ef       	ldi	r25, 0xFF	; 255
     d20:	90 93 ac 03 	sts	0x03AC, r25
  tdma_rx_failure_cnt = 0;
     d24:	10 92 ab 03 	sts	0x03AB, r1
     d28:	10 92 aa 03 	sts	0x03AA, r1
  tdma_mode = mode;
     d2c:	80 93 da 03 	sts	0x03DA, r24
  tdma_tx_slots = 0;
     d30:	10 92 dd 03 	sts	0x03DD, r1
  tdma_ttl=TDMA_DEFAULT_TTL;
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	80 93 d9 03 	sts	0x03D9, r24
  sync_status=0;
     d3a:	10 92 a9 03 	sts	0x03A9, r1
    nrk_gpio_direction(NRK_MOSI,NRK_PIN_OUTPUT);
    nrk_gpio_direction(NRK_MISO,NRK_PIN_OUTPUT);
  #endif


  tdma_slots_per_cycle = TDMA_DEFAULT_SLOTS_PER_CYCLE;
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	94 e0       	ldi	r25, 0x04	; 4
     d42:	90 93 d5 03 	sts	0x03D5, r25
     d46:	80 93 d4 03 	sts	0x03D4, r24

  _tdma_slot_time.nano_secs = TDMA_DEFAULT_SLOT_MS * NANOS_PER_MS;
     d4a:	80 e8       	ldi	r24, 0x80	; 128
     d4c:	96 e9       	ldi	r25, 0x96	; 150
     d4e:	a8 e9       	ldi	r26, 0x98	; 152
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	80 93 b9 03 	sts	0x03B9, r24
     d56:	90 93 ba 03 	sts	0x03BA, r25
     d5a:	a0 93 bb 03 	sts	0x03BB, r26
     d5e:	b0 93 bc 03 	sts	0x03BC, r27
  _tdma_slot_time.secs = 0;
     d62:	10 92 b5 03 	sts	0x03B5, r1
     d66:	10 92 b6 03 	sts	0x03B6, r1
     d6a:	10 92 b7 03 	sts	0x03B7, r1
     d6e:	10 92 b8 03 	sts	0x03B8, r1

  tdma_rx_pkt_signal = nrk_signal_create ();
     d72:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <nrk_signal_create>
     d76:	c8 2f       	mov	r28, r24
     d78:	80 93 4e 09 	sts	0x094E, r24
  if (tdma_rx_pkt_signal == NRK_ERROR) {
     d7c:	8f 3f       	cpi	r24, 0xFF	; 255
     d7e:	19 f4       	brne	.+6      	; 0xd86 <tdma_init+0x76>
    nrk_kprintf (PSTR ("TDMA ERROR: creating rx signal failed\r\n"));
     d80:	84 e2       	ldi	r24, 0x24	; 36
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	09 c0       	rjmp	.+18     	; 0xd98 <tdma_init+0x88>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  tdma_tx_pkt_done_signal = nrk_signal_create ();
     d86:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <nrk_signal_create>
     d8a:	c8 2f       	mov	r28, r24
     d8c:	80 93 4f 09 	sts	0x094F, r24
  if (tdma_tx_pkt_done_signal == NRK_ERROR) {
     d90:	8f 3f       	cpi	r24, 0xFF	; 255
     d92:	69 f4       	brne	.+26     	; 0xdae <tdma_init+0x9e>
    nrk_kprintf (PSTR ("TDMA ERROR: creating tx signal failed\r\n"));
     d94:	8c ef       	ldi	r24, 0xFC	; 252
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     d9c:	e0 91 bb 0b 	lds	r30, 0x0BBB
     da0:	f0 91 bc 0b 	lds	r31, 0x0BBC
     da4:	60 85       	ldd	r22, Z+8	; 0x08
     da6:	8e e0       	ldi	r24, 0x0E	; 14
     da8:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
    return NRK_ERROR;
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <tdma_init+0xf8>
  }
  tdma_enable_signal = nrk_signal_create ();
     dae:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <nrk_signal_create>
     db2:	c8 2f       	mov	r28, r24
     db4:	80 93 e8 09 	sts	0x09E8, r24
  if (tdma_enable_signal == NRK_ERROR) {
     db8:	8f 3f       	cpi	r24, 0xFF	; 255
     dba:	19 f4       	brne	.+6      	; 0xdc2 <tdma_init+0xb2>
    nrk_kprintf (PSTR ("TDMA ERROR: creating enable signal failed\r\n"));
     dbc:	80 ed       	ldi	r24, 0xD0	; 208
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	eb cf       	rjmp	.-42     	; 0xd98 <tdma_init+0x88>

int8_t tdma_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
  tdma_rfRxInfo.pPayload = buf;
     dc2:	86 ee       	ldi	r24, 0xE6	; 230
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	90 93 f8 05 	sts	0x05F8, r25
     dca:	80 93 f7 05 	sts	0x05F7, r24
  tdma_rfRxInfo.max_length = size;
     dce:	80 e7       	ldi	r24, 0x70	; 112
     dd0:	80 93 f6 05 	sts	0x05F6, r24
  }


  // Set the one main rx buffer
  tdma_rx_pkt_set_buffer (tdma_rx_buf, TDMA_MAX_PKT_SIZE);
  tdma_rx_buf_empty = 1;
     dd4:	c1 e0       	ldi	r28, 0x01	; 1
     dd6:	c0 93 d1 03 	sts	0x03D1, r28
  tx_data_ready = 0;
     dda:	10 92 d8 03 	sts	0x03D8, r1


  // Setup the radio 
  rf_init (&tdma_rfRxInfo, chan, 0xffff, my_mac);
     dde:	2d 2f       	mov	r18, r29
     de0:	30 2f       	mov	r19, r16
     de2:	4f ef       	ldi	r20, 0xFF	; 255
     de4:	5f ef       	ldi	r21, 0xFF	; 255
     de6:	61 2f       	mov	r22, r17
     de8:	82 ef       	ldi	r24, 0xF2	; 242
     dea:	95 e0       	ldi	r25, 0x05	; 5
     dec:	0e 94 c0 0b 	call	0x1780	; 0x1780 <rf_init>
  tdma_chan = chan;
     df0:	10 93 cf 03 	sts	0x03CF, r17
  tdma_my_mac = my_mac;
     df4:	d0 93 db 03 	sts	0x03DB, r29

  //FASTSPI_SETREG (CC2420_RSSI, 0xE580); // CCA THR=-25
  //FASTSPI_SETREG (CC2420_TXCTRL, 0x80FF);       // TX TURNAROUND = 128 us
  //FASTSPI_SETREG (CC2420_RXCTRL1, 0x0A56);
  // default cca thresh of -45
  rf_set_cca_thresh (-45);
     df8:	83 ed       	ldi	r24, 0xD3	; 211
     dfa:	9f ef       	ldi	r25, 0xFF	; 255
     dfc:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <rf_set_cca_thresh>

  asm volatile ("":::"memory");
  tdma_running = 1;
     e00:	c0 93 d0 03 	sts	0x03D0, r28
  tdma_is_enabled = 1;
     e04:	c0 93 ce 03 	sts	0x03CE, r28
  return NRK_OK;
}
     e08:	8c 2f       	mov	r24, r28
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	08 95       	ret

00000e14 <tdma_get_rx_pkt_signal>:


nrk_sig_t tdma_get_rx_pkt_signal ()
{
  nrk_signal_register (tdma_rx_pkt_signal);
     e14:	80 91 4e 09 	lds	r24, 0x094E
     e18:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <nrk_signal_register>
  return (tdma_rx_pkt_signal);
}
     e1c:	80 91 4e 09 	lds	r24, 0x094E
     e20:	08 95       	ret

00000e22 <tdma_get_tx_done_signal>:

nrk_sig_t tdma_get_tx_done_signal ()
{
  nrk_signal_register (tdma_tx_pkt_done_signal);
     e22:	80 91 4f 09 	lds	r24, 0x094F
     e26:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <nrk_signal_register>
  return (tdma_tx_pkt_done_signal);
}
     e2a:	80 91 4f 09 	lds	r24, 0x094F
     e2e:	08 95       	ret

00000e30 <tdma_rx_pkt_get>:


uint8_t *tdma_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (tdma_rx_buf_empty == 1) {
     e30:	20 91 d1 03 	lds	r18, 0x03D1
     e34:	21 30       	cpi	r18, 0x01	; 1
     e36:	39 f4       	brne	.+14     	; 0xe46 <tdma_rx_pkt_get+0x16>
    *len = 0;
     e38:	fc 01       	movw	r30, r24
     e3a:	10 82       	st	Z, r1
    *rssi = 0;
     e3c:	fb 01       	movw	r30, r22
     e3e:	10 82       	st	Z, r1
    return NULL;
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	08 95       	ret
  }
  *len = tdma_rfRxInfo.length;
     e46:	20 91 f5 05 	lds	r18, 0x05F5
     e4a:	fc 01       	movw	r30, r24
     e4c:	20 83       	st	Z, r18
  *rssi = tdma_rfRxInfo.rssi;
     e4e:	80 91 fa 05 	lds	r24, 0x05FA
     e52:	fb 01       	movw	r30, r22
     e54:	80 83       	st	Z, r24
  return tdma_rfRxInfo.pPayload;
     e56:	80 91 f7 05 	lds	r24, 0x05F7
     e5a:	90 91 f8 05 	lds	r25, 0x05F8
}
     e5e:	08 95       	ret

00000e60 <tdma_rx_pkt_release>:


int8_t tdma_rx_pkt_release(void)
{
    tdma_rx_buf_empty=1;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 d1 03 	sts	0x03D1, r24
return NRK_OK;
}
     e66:	08 95       	ret

00000e68 <tdma_disable>:


void tdma_disable ()
{
  tdma_is_enabled = 0;
     e68:	10 92 ce 03 	sts	0x03CE, r1
  rf_power_down ();
     e6c:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <rf_power_down>

00000e70 <tdma_enable>:
}

void tdma_enable ()
{
  tdma_is_enabled = 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	80 93 ce 03 	sts	0x03CE, r24
  rf_power_up ();
     e76:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <rf_power_up>
  nrk_event_signal (tdma_enable_signal);
     e7a:	80 91 e8 09 	lds	r24, 0x09E8
     e7e:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <nrk_event_signal>

00000e82 <tdma_wakeup>:

}

void tdma_wakeup()
{
tdma_wakeup_flag=1;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 e9 05 	sts	0x05E9, r24
     e88:	08 95       	ret

00000e8a <tdma_started>:

}

int8_t tdma_started ()
{
  return tdma_running;
     e8a:	80 91 d0 03 	lds	r24, 0x03D0
}
     e8e:	08 95       	ret

00000e90 <_tdma_rx>:
  return v;
}


int8_t _tdma_rx ()
{
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
  int8_t v, i;
  v = 0;

  if (tdma_rx_buf_empty != 1)
     e94:	80 91 d1 03 	lds	r24, 0x03D1
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	11 f0       	breq	.+4      	; 0xea0 <_tdma_rx+0x10>
    return NRK_ERROR;
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	40 c0       	rjmp	.+128    	; 0xf20 <_tdma_rx+0x90>
     ea0:	d4 e6       	ldi	r29, 0x64	; 100
    nrk_gpio_set(NRK_MISO);
  #endif
//  if (rf_rx_check_fifop () == 1) {
    for (i = 0; i < 100; i++) {
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
     ea2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <rf_rx_packet_nonblock>
     ea6:	c8 2f       	mov	r28, r24
      if (v == 1) {
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	89 f5       	brne	.+98     	; 0xf0e <_tdma_rx+0x7e>
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
     eac:	60 91 f5 05 	lds	r22, 0x05F5
     eb0:	6d 30       	cpi	r22, 0x0D	; 13
     eb2:	ac f1       	brlt	.+106    	; 0xf1e <_tdma_rx+0x8e>
	if(_tdma_aes_enabled)
     eb4:	80 91 dc 03 	lds	r24, 0x03DC
     eb8:	81 11       	cpse	r24, r1
     eba:	07 c0       	rjmp	.+14     	; 0xeca <_tdma_rx+0x3a>
    nrk_gpio_clr(NRK_MISO);
  #endif
			return NRK_ERROR; 
			}
	 }
	  tdma_rx_buf_empty = 0;
     ebc:	10 92 d1 03 	sts	0x03D1, r1
          nrk_event_signal (tdma_rx_pkt_signal);
     ec0:	80 91 4e 09 	lds	r24, 0x094E
     ec4:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <nrk_event_signal>
     ec8:	2a c0       	rjmp	.+84     	; 0xf1e <_tdma_rx+0x8e>
      if (v == 1) {
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
     eca:	80 91 f7 05 	lds	r24, 0x05F7
     ece:	90 91 f8 05 	lds	r25, 0x05F8
     ed2:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <aes_decrypt>
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     ed6:	80 91 f7 05 	lds	r24, 0x05F7
     eda:	90 91 f8 05 	lds	r25, 0x05F8
     ede:	20 91 f5 05 	lds	r18, 0x05F5
     ee2:	82 0f       	add	r24, r18
     ee4:	91 1d       	adc	r25, r1
     ee6:	27 fd       	sbrc	r18, 7
     ee8:	9a 95       	dec	r25
     eea:	fc 01       	movw	r30, r24
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	20 81       	ld	r18, Z
     ef0:	2a 3c       	cpi	r18, 0xCA	; 202
     ef2:	a1 f6       	brne	.-88     	; 0xe9c <_tdma_rx+0xc>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     ef4:	31 97       	sbiw	r30, 0x01	; 1
        // Grab packet, do good stuff
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
     ef6:	20 81       	ld	r18, Z
     ef8:	2e 3f       	cpi	r18, 0xFE	; 254
     efa:	81 f6       	brne	.-96     	; 0xe9c <_tdma_rx+0xc>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     efc:	31 97       	sbiw	r30, 0x01	; 1
        if (tdma_rfRxInfo.length > TDMA_PCF_HEADER) {
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
     efe:	20 81       	ld	r18, Z
     f00:	2e 3b       	cpi	r18, 0xBE	; 190
     f02:	61 f6       	brne	.-104    	; 0xe9c <_tdma_rx+0xc>
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-4]!= 0xEF ) {
     f04:	31 97       	sbiw	r30, 0x01	; 1
	if(_tdma_aes_enabled)
	{
          aes_decrypt(tdma_rfRxInfo.pPayload, tdma_rfRxInfo.length );
	  if(tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-1]!= 0xCA ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-2]!= 0xFE ||
	     tdma_rfRxInfo.pPayload[tdma_rfRxInfo.length-3]!= 0xBE ||
     f06:	80 81       	ld	r24, Z
     f08:	8f 3e       	cpi	r24, 0xEF	; 239
     f0a:	c1 f2       	breq	.-80     	; 0xebc <_tdma_rx+0x2c>
     f0c:	c7 cf       	rjmp	.-114    	; 0xe9c <_tdma_rx+0xc>
	  tdma_rx_buf_empty = 0;
          nrk_event_signal (tdma_rx_pkt_signal);
        }
        break;
      }
      nrk_spin_wait_us (100);
     f0e:	84 e6       	ldi	r24, 0x64	; 100
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 46 2a 	call	0x548c	; 0x548c <nrk_spin_wait_us>
     f16:	d1 50       	subi	r29, 0x01	; 1

  #ifdef GPIO_DEBUG
    nrk_gpio_set(NRK_MISO);
  #endif
//  if (rf_rx_check_fifop () == 1) {
    for (i = 0; i < 100; i++) {
     f18:	21 f6       	brne	.-120    	; 0xea2 <_tdma_rx+0x12>
     f1a:	8c 2f       	mov	r24, r28
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <_tdma_rx+0x90>
  //    v = rf_polling_rx_packet ();
  v = rf_rx_packet_nonblock ();
     f1e:	81 e0       	ldi	r24, 0x01	; 1

  #ifdef GPIO_DEBUG
    nrk_gpio_clr(NRK_MISO);
  #endif
  return v;
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	08 95       	ret

00000f26 <_tdma_tx>:


int8_t _tdma_tx ()
{
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
  int8_t v;
  uint8_t checksum, i;
  uint8_t *data_start, *frame_start = &TRXFBST;
 

if(_tdma_aes_enabled)
     f2c:	90 91 dc 03 	lds	r25, 0x03DC
     f30:	99 23       	and	r25, r25
     f32:	09 f4       	brne	.+2      	; 0xf36 <_tdma_tx+0x10>
     f34:	43 c0       	rjmp	.+134    	; 0xfbc <_tdma_tx+0x96>
{
   // Add 0xCAFEBEEF as a magic number for AES MAC
   tdma_rfTxInfo.length=tdma_rfTxInfo.length+4;
     f36:	20 91 02 07 	lds	r18, 0x0702
     f3a:	84 e0       	ldi	r24, 0x04	; 4
     f3c:	82 0f       	add	r24, r18

   // Make packet a multiple of 16
   if((tdma_rfTxInfo.length%16)!=0) tdma_rfTxInfo.length=((tdma_rfTxInfo.length/16)+1)*16;
     f3e:	38 2f       	mov	r19, r24
     f40:	3f 70       	andi	r19, 0x0F	; 15
     f42:	31 f0       	breq	.+12     	; 0xf50 <_tdma_tx+0x2a>
     f44:	87 ff       	sbrs	r24, 7
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <_tdma_tx+0x26>
     f48:	83 e1       	ldi	r24, 0x13	; 19
     f4a:	82 0f       	add	r24, r18
     f4c:	80 7f       	andi	r24, 0xF0	; 240
     f4e:	80 5f       	subi	r24, 0xF0	; 240
     f50:	80 93 02 07 	sts	0x0702, r24
   
//   printf( "l2: %d\r\n",tdma_rfTxInfo.length );
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-1]=0xCA;
     f54:	80 91 02 07 	lds	r24, 0x0702
     f58:	e0 91 03 07 	lds	r30, 0x0703
     f5c:	f0 91 04 07 	lds	r31, 0x0704
     f60:	e8 0f       	add	r30, r24
     f62:	f1 1d       	adc	r31, r1
     f64:	87 fd       	sbrc	r24, 7
     f66:	fa 95       	dec	r31
     f68:	31 97       	sbiw	r30, 0x01	; 1
     f6a:	8a ec       	ldi	r24, 0xCA	; 202
     f6c:	80 83       	st	Z, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-2]=0xFE;
     f6e:	80 91 02 07 	lds	r24, 0x0702
     f72:	e0 91 03 07 	lds	r30, 0x0703
     f76:	f0 91 04 07 	lds	r31, 0x0704
     f7a:	e8 0f       	add	r30, r24
     f7c:	f1 1d       	adc	r31, r1
     f7e:	87 fd       	sbrc	r24, 7
     f80:	fa 95       	dec	r31
     f82:	32 97       	sbiw	r30, 0x02	; 2
     f84:	8e ef       	ldi	r24, 0xFE	; 254
     f86:	80 83       	st	Z, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-3]=0xBE;
     f88:	80 91 02 07 	lds	r24, 0x0702
     f8c:	e0 91 03 07 	lds	r30, 0x0703
     f90:	f0 91 04 07 	lds	r31, 0x0704
     f94:	e8 0f       	add	r30, r24
     f96:	f1 1d       	adc	r31, r1
     f98:	87 fd       	sbrc	r24, 7
     f9a:	fa 95       	dec	r31
     f9c:	33 97       	sbiw	r30, 0x03	; 3
     f9e:	8e eb       	ldi	r24, 0xBE	; 190
     fa0:	80 83       	st	Z, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-4]=0xEF;
     fa2:	80 91 02 07 	lds	r24, 0x0702
     fa6:	e0 91 03 07 	lds	r30, 0x0703
     faa:	f0 91 04 07 	lds	r31, 0x0704
     fae:	e8 0f       	add	r30, r24
     fb0:	f1 1d       	adc	r31, r1
     fb2:	87 fd       	sbrc	r24, 7
     fb4:	fa 95       	dec	r31
     fb6:	34 97       	sbiw	r30, 0x04	; 4
     fb8:	8f ee       	ldi	r24, 0xEF	; 239
     fba:	80 83       	st	Z, r24
}
  checksum=0;
  for(i=0; i<tdma_rfTxInfo.length; i++ )
     fbc:	60 91 02 07 	lds	r22, 0x0702
     fc0:	06 2f       	mov	r16, r22
     fc2:	11 27       	eor	r17, r17
     fc4:	07 fd       	sbrc	r16, 7
     fc6:	10 95       	com	r17
	checksum+=tdma_rfTxInfo.pPayload[i];
     fc8:	e0 91 03 07 	lds	r30, 0x0703
     fcc:	f0 91 04 07 	lds	r31, 0x0704
     fd0:	c0 e0       	ldi	r28, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-2]=0xFE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-3]=0xBE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-4]=0xEF;
}
  checksum=0;
  for(i=0; i<tdma_rfTxInfo.length; i++ )
     fd4:	24 2f       	mov	r18, r20
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	20 17       	cp	r18, r16
     fda:	31 07       	cpc	r19, r17
     fdc:	3c f4       	brge	.+14     	; 0xfec <_tdma_tx+0xc6>
	checksum+=tdma_rfTxInfo.pPayload[i];
     fde:	2e 0f       	add	r18, r30
     fe0:	3f 1f       	adc	r19, r31
     fe2:	d9 01       	movw	r26, r18
     fe4:	8c 91       	ld	r24, X
     fe6:	c8 0f       	add	r28, r24
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-2]=0xFE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-3]=0xBE;
   tdma_rfTxInfo.pPayload[tdma_rfTxInfo.length-4]=0xEF;
}
  checksum=0;
  for(i=0; i<tdma_rfTxInfo.length; i++ )
     fe8:	4f 5f       	subi	r20, 0xFF	; 255
     fea:	f4 cf       	rjmp	.-24     	; 0xfd4 <_tdma_tx+0xae>
	checksum+=tdma_rfTxInfo.pPayload[i];

if(_tdma_aes_enabled)   aes_encrypt(tdma_rfTxInfo.pPayload, tdma_rfTxInfo.length );
     fec:	99 23       	and	r25, r25
     fee:	19 f0       	breq	.+6      	; 0xff6 <_tdma_tx+0xd0>
     ff0:	cf 01       	movw	r24, r30
     ff2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <aes_encrypt>
  

  data_start = frame_start + 9 + 1 + tdma_rfTxInfo.length;
     ff6:	e0 91 02 07 	lds	r30, 0x0702
     ffa:	ff 27       	eor	r31, r31
     ffc:	e7 fd       	sbrc	r30, 7
     ffe:	f0 95       	com	r31
  memcpy(data_start, &checksum, sizeof(uint8_t));
    1000:	e6 57       	subi	r30, 0x76	; 118
    1002:	fe 4f       	sbci	r31, 0xFE	; 254
    1004:	c0 83       	st	Z, r28
    nrk_gpio_set(NRK_MOSI);
  #endif

for(i=0; i<TX_PKT_RETRY; i++ )
{
  v = rf_tx_packet (&tdma_rfTxInfo);
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	97 e0       	ldi	r25, 0x07	; 7
    100a:	0e 94 35 0c 	call	0x186a	; 0x186a <rf_tx_packet>
  // Too delay or not?
}

  tx_data_ready = 0;
    100e:	10 92 d8 03 	sts	0x03D8, r1
  nrk_event_signal (tdma_tx_pkt_done_signal);
    1012:	80 91 4f 09 	lds	r24, 0x094F
    1016:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <nrk_event_signal>
  #ifdef GPIO_DEBUG
    nrk_gpio_clr(NRK_MOSI);
  #endif
  return NRK_OK;
}
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <tdma_nw_task>:
  nrk_event_signal (tdma_enable_signal);
}


void tdma_nw_task ()
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	00 d0       	rcall	.+0      	; 0x102a <tdma_nw_task+0x6>
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
  int8_t v, i;
  uint16_t slot, tmp,tmp2,sync;
  nrk_sig_mask_t event;

  do {
    nrk_wait_until_next_period ();
    102e:	0e 94 9b 21 	call	0x4336	; 0x4336 <nrk_wait_until_next_period>

}

int8_t tdma_started ()
{
  return tdma_running;
    1032:	80 91 d0 03 	lds	r24, 0x03D0
  uint16_t slot, tmp,tmp2,sync;
  nrk_sig_mask_t event;

  do {
    nrk_wait_until_next_period ();
  } while (!tdma_started ());
    1036:	88 23       	and	r24, r24
    1038:	d1 f3       	breq	.-12     	; 0x102e <tdma_nw_task+0xa>

//register the signal after bmac_init has been called
  v = nrk_signal_register (tdma_enable_signal);
    103a:	80 91 e8 09 	lds	r24, 0x09E8
    103e:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <nrk_signal_register>
    1042:	8a 83       	std	Y+2, r24	; 0x02
  if (v == NRK_ERROR)
    1044:	8f 3f       	cpi	r24, 0xFF	; 255
    1046:	21 f4       	brne	.+8      	; 0x1050 <tdma_nw_task+0x2c>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    1048:	84 eb       	ldi	r24, 0xB4	; 180
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
      slot++;
	// For the last slot, we wakeup a bit late to make sure all other nodes have woken up in time to
	// receive the beacon message.  
      if (slot > tdma_slots_per_cycle ){
        nrk_wait_until_ticks(TDMA_WAKEUP_GAURD_TIME_MS);
	slot = 0;
    1050:	61 2c       	mov	r6, r1
    1052:	71 2c       	mov	r7, r1

      // Transmit on slot
      if (tx_data_ready == 1) {
        tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = slot & 0xff;    // slot
        tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = slot >> 8;
        tdma_rfTxInfo.destAddr = 0xffff;
    1054:	22 24       	eor	r2, r2
    1056:	2a 94       	dec	r2
    1058:	32 2c       	mov	r3, r2
//rf_set_rx (&tdma_rfRxInfo, tdma_chan);



  while (1) {
    if (tdma_mode == TDMA_HOST) {
    105a:	80 91 da 03 	lds	r24, 0x03DA
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	09 f0       	breq	.+2      	; 0x1064 <tdma_nw_task+0x40>
    1062:	e3 c0       	rjmp	.+454    	; 0x122a <tdma_nw_task+0x206>
	    sync_status=1; // HOST is always synced
    1064:	80 93 a9 03 	sts	0x03A9, r24
      // This is the downstream transmit slot
      if (slot == 0) {
    1068:	61 14       	cp	r6, r1
    106a:	71 04       	cpc	r7, r1
    106c:	09 f0       	breq	.+2      	; 0x1070 <tdma_nw_task+0x4c>
    106e:	88 c0       	rjmp	.+272    	; 0x1180 <tdma_nw_task+0x15c>

        //  for(i=0; i<100; i++ ) tdma_rfTxInfo.pPayload[i] = 0;  
        //rf_rx_off();
        // If there is no pending packet, lets make an empty one
        if (tx_data_ready == 0) {
    1070:	80 91 d8 03 	lds	r24, 0x03D8
    1074:	81 11       	cpse	r24, r1
    1076:	16 c0       	rjmp	.+44     	; 0x10a4 <tdma_nw_task+0x80>
          tdma_rfTxInfo.pPayload = tdma_tx_buf;
    1078:	26 e5       	ldi	r18, 0x56	; 86
    107a:	34 e0       	ldi	r19, 0x04	; 4
    107c:	30 93 04 07 	sts	0x0704, r19
    1080:	20 93 03 07 	sts	0x0703, r18
          // Setup the header data
          tdma_rfTxInfo.pPayload[TDMA_DST_LOW] = 0xff;  // dst
    1084:	3f ef       	ldi	r19, 0xFF	; 255
    1086:	30 93 58 04 	sts	0x0458, r19
          tdma_rfTxInfo.pPayload[TDMA_DST_HIGH] = 0xff;
    108a:	30 93 59 04 	sts	0x0459, r19
          tdma_rfTxInfo.pPayload[TDMA_SRC_LOW] = 0x00;  // src
    108e:	10 92 5a 04 	sts	0x045A, r1
          tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = 0x00;
    1092:	10 92 5b 04 	sts	0x045B, r1
          tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_LOW] = 0x00;      // seq num
    1096:	10 92 5c 04 	sts	0x045C, r1
          tdma_rfTxInfo.pPayload[TDMA_SEQ_NUM_HIGH] = 0x00;
    109a:	10 92 5d 04 	sts	0x045D, r1
          tdma_rfTxInfo.length = TDMA_PCF_HEADER;
    109e:	8c e0       	ldi	r24, 0x0C	; 12
    10a0:	80 93 02 07 	sts	0x0702, r24
        }
        tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_LOW] = tdma_slots_per_cycle & 0xff;      // cycle size 
    10a4:	e0 91 03 07 	lds	r30, 0x0703
    10a8:	f0 91 04 07 	lds	r31, 0x0704
    10ac:	90 91 d4 03 	lds	r25, 0x03D4
    10b0:	80 91 d5 03 	lds	r24, 0x03D5
    10b4:	90 87       	std	Z+8, r25	; 0x08
        tdma_rfTxInfo.pPayload[TDMA_CYCLE_SIZE_HIGH] =
    10b6:	81 87       	std	Z+9, r24	; 0x09
          tdma_slots_per_cycle >> 8;
        tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = 0;      // slot
    10b8:	10 82       	st	Z, r1
        tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = 0;
    10ba:	e0 91 03 07 	lds	r30, 0x0703
    10be:	f0 91 04 07 	lds	r31, 0x0704
    10c2:	11 82       	std	Z+1, r1	; 0x01
        tdma_rfTxInfo.pPayload[TDMA_TTL] = tdma_ttl<<4 | (tdma_ttl);
    10c4:	e0 91 03 07 	lds	r30, 0x0703
    10c8:	f0 91 04 07 	lds	r31, 0x0704
    10cc:	20 91 d9 03 	lds	r18, 0x03D9
    10d0:	30 e1       	ldi	r19, 0x10	; 16
    10d2:	23 9f       	mul	r18, r19
    10d4:	c0 01       	movw	r24, r0
    10d6:	11 24       	eor	r1, r1
    10d8:	82 2b       	or	r24, r18
    10da:	82 87       	std	Z+10, r24	; 0x0a
        tdma_rfTxInfo.pPayload[TDMA_SLOT_SIZE] = tdma_slot_len_ms;
    10dc:	80 91 d6 03 	lds	r24, 0x03D6
    10e0:	83 87       	std	Z+11, r24	; 0x0b
        nrk_time_get (&_tdma_next_wakeup);
    10e2:	8d ea       	ldi	r24, 0xAD	; 173
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	0e 94 4a 23 	call	0x4694	; 0x4694 <nrk_time_get>
        tdma_rfTxInfo.destAddr = 0xffff;
    10ea:	30 92 01 07 	sts	0x0701, r3
    10ee:	20 92 00 07 	sts	0x0700, r2
        tdma_rfTxInfo.ackRequest = 0;
    10f2:	10 92 06 07 	sts	0x0706, r1
        tdma_rfTxInfo.cca = 0;
    10f6:	10 92 05 07 	sts	0x0705, r1
        _tdma_tx ();
    10fa:	0e 94 93 07 	call	0xf26	; 0xf26 <_tdma_tx>
        rf_rx_on ();
    10fe:	0e 94 2c 0c 	call	0x1858	; 0x1858 <rf_rx_on>
	if(tdma_wakeup_flag==1)
    1102:	80 91 e9 05 	lds	r24, 0x05E9
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	09 f0       	breq	.+2      	; 0x110c <tdma_nw_task+0xe8>
    110a:	45 c0       	rjmp	.+138    	; 0x1196 <tdma_nw_task+0x172>
    110c:	41 2c       	mov	r4, r1
    110e:	51 2c       	mov	r5, r1
		{
		for(slot=0; slot<1000; slot++ )
			{
				if((slot%5)==0)nrk_led_toggle(BLUE_LED);
    1110:	c2 01       	movw	r24, r4
    1112:	65 e0       	ldi	r22, 0x05	; 5
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	0e 94 7d 30 	call	0x60fa	; 0x60fa <__udivmodhi4>
    111a:	89 2b       	or	r24, r25
    111c:	21 f4       	brne	.+8      	; 0x1126 <tdma_nw_task+0x102>
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 9e 13 	call	0x273c	; 0x273c <nrk_led_toggle>
        			tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = 0xff;      // slot
    1126:	e0 91 03 07 	lds	r30, 0x0703
    112a:	f0 91 04 07 	lds	r31, 0x0704
    112e:	8f ef       	ldi	r24, 0xFF	; 255
    1130:	80 83       	st	Z, r24
        			tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = 0xff;
    1132:	e0 91 03 07 	lds	r30, 0x0703
    1136:	f0 91 04 07 	lds	r31, 0x0704
    113a:	81 83       	std	Z+1, r24	; 0x01
          			tdma_rfTxInfo.pPayload[TDMA_SRC_LOW] = 0x0;  // src
    113c:	e0 91 03 07 	lds	r30, 0x0703
    1140:	f0 91 04 07 	lds	r31, 0x0704
    1144:	14 82       	std	Z+4, r1	; 0x04
          			tdma_rfTxInfo.pPayload[TDMA_SRC_HIGH] = 0x0;
    1146:	e0 91 03 07 	lds	r30, 0x0703
    114a:	f0 91 04 07 	lds	r31, 0x0704
    114e:	15 82       	std	Z+5, r1	; 0x05
          			tdma_rfTxInfo.length = TDMA_PCF_HEADER;
    1150:	9c e0       	ldi	r25, 0x0C	; 12
    1152:	90 93 02 07 	sts	0x0702, r25
        			_tdma_tx ();
    1156:	0e 94 93 07 	call	0xf26	; 0xf26 <_tdma_tx>
        			//rf_rx_on ();
				nrk_wait_until_ticks(10);
    115a:	8a e0       	ldi	r24, 0x0A	; 10
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 42 22 	call	0x4484	; 0x4484 <nrk_wait_until_ticks>
        tdma_rfTxInfo.cca = 0;
        _tdma_tx ();
        rf_rx_on ();
	if(tdma_wakeup_flag==1)
		{
		for(slot=0; slot<1000; slot++ )
    1162:	ef ef       	ldi	r30, 0xFF	; 255
    1164:	4e 1a       	sub	r4, r30
    1166:	5e 0a       	sbc	r5, r30
    1168:	f8 ee       	ldi	r31, 0xE8	; 232
    116a:	4f 16       	cp	r4, r31
    116c:	f3 e0       	ldi	r31, 0x03	; 3
    116e:	5f 06       	cpc	r5, r31
    1170:	79 f6       	brne	.-98     	; 0x1110 <tdma_nw_task+0xec>
          			tdma_rfTxInfo.length = TDMA_PCF_HEADER;
        			_tdma_tx ();
        			//rf_rx_on ();
				nrk_wait_until_ticks(10);
			}
		nrk_led_clr(BLUE_LED);
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 b5 13 	call	0x276a	; 0x276a <nrk_led_clr>
		slot=0;
		tdma_wakeup_flag=0;
    117a:	10 92 e9 05 	sts	0x05E9, r1
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <tdma_nw_task+0x172>
      else {
        // Upstream data slot
        // This configures the packet receive interrupt to call the _tdma_rx_master function
        // The _tdma_rx_master function triggers a signal to the tdma_rx function.
        //rf_rx_on();
	rx_end_callback(&_tdma_rx_master);
    1180:	86 e6       	ldi	r24, 0x66	; 102
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	0e 94 bb 0b 	call	0x1776	; 0x1776 <rx_end_callback>
        if (v == 1)
    1188:	2a 81       	ldd	r18, Y+2	; 0x02
    118a:	21 30       	cpi	r18, 0x01	; 1
    118c:	21 f4       	brne	.+8      	; 0x1196 <tdma_nw_task+0x172>
          tdma_last_tx_slot = slot;
    118e:	70 92 d3 03 	sts	0x03D3, r7
    1192:	60 92 d2 03 	sts	0x03D2, r6
      }
      slot++;
    1196:	3f ef       	ldi	r19, 0xFF	; 255
    1198:	63 1a       	sub	r6, r19
    119a:	73 0a       	sbc	r7, r19
	// For the last slot, we wakeup a bit late to make sure all other nodes have woken up in time to
	// receive the beacon message.  
      if (slot > tdma_slots_per_cycle ){
    119c:	80 91 d4 03 	lds	r24, 0x03D4
    11a0:	90 91 d5 03 	lds	r25, 0x03D5
    11a4:	86 15       	cp	r24, r6
    11a6:	97 05       	cpc	r25, r7
    11a8:	28 f4       	brcc	.+10     	; 0x11b4 <tdma_nw_task+0x190>
        nrk_wait_until_ticks(TDMA_WAKEUP_GAURD_TIME_MS);
    11aa:	8a e0       	ldi	r24, 0x0A	; 10
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 42 22 	call	0x4484	; 0x4484 <nrk_wait_until_ticks>
    11b2:	ec c1       	rjmp	.+984    	; 0x158c <tdma_nw_task+0x568>
	slot = 0;
	}
      else {
      nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
    11b4:	80 90 b5 03 	lds	r8, 0x03B5
    11b8:	90 90 b6 03 	lds	r9, 0x03B6
    11bc:	a0 90 b7 03 	lds	r10, 0x03B7
    11c0:	b0 90 b8 03 	lds	r11, 0x03B8
    11c4:	c0 90 b9 03 	lds	r12, 0x03B9
    11c8:	d0 90 ba 03 	lds	r13, 0x03BA
    11cc:	e0 90 bb 03 	lds	r14, 0x03BB
    11d0:	f0 90 bc 03 	lds	r15, 0x03BC
    11d4:	00 91 ad 03 	lds	r16, 0x03AD
    11d8:	10 91 ae 03 	lds	r17, 0x03AE
    11dc:	20 91 af 03 	lds	r18, 0x03AF
    11e0:	30 91 b0 03 	lds	r19, 0x03B0
    11e4:	40 91 b1 03 	lds	r20, 0x03B1
    11e8:	50 91 b2 03 	lds	r21, 0x03B2
    11ec:	60 91 b3 03 	lds	r22, 0x03B3
    11f0:	70 91 b4 03 	lds	r23, 0x03B4
    11f4:	8d ea       	ldi	r24, 0xAD	; 173
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	0e 94 54 24 	call	0x48a8	; 0x48a8 <nrk_time_add>
      nrk_time_compact_nanos (&_tdma_next_wakeup);
    11fc:	8d ea       	ldi	r24, 0xAD	; 173
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	0e 94 33 24 	call	0x4866	; 0x4866 <nrk_time_compact_nanos>
      nrk_wait_until (_tdma_next_wakeup);
    1204:	20 91 ad 03 	lds	r18, 0x03AD
    1208:	30 91 ae 03 	lds	r19, 0x03AE
    120c:	40 91 af 03 	lds	r20, 0x03AF
    1210:	50 91 b0 03 	lds	r21, 0x03B0
    1214:	60 91 b1 03 	lds	r22, 0x03B1
    1218:	70 91 b2 03 	lds	r23, 0x03B2
    121c:	80 91 b3 03 	lds	r24, 0x03B3
    1220:	90 91 b4 03 	lds	r25, 0x03B4
    1224:	0e 94 ee 22 	call	0x45dc	; 0x45dc <nrk_wait_until>
    1228:	18 cf       	rjmp	.-464    	; 0x105a <tdma_nw_task+0x36>
	
      }
    }
    // TDMA slave node
    else {
      if (slot == 0) {
    122a:	67 28       	or	r6, r7
    122c:	09 f0       	breq	.+2      	; 0x1230 <tdma_nw_task+0x20c>
    122e:	57 c0       	rjmp	.+174    	; 0x12de <tdma_nw_task+0x2ba>

	//rf_rx_off ();
	//rf_power_down();
	      	
	sync=0;
	rf_power_up();
    1230:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <rf_power_up>
	rf_rx_on ();
    1234:	0e 94 2c 0c 	call	0x1858	; 0x1858 <rf_rx_on>
      if (slot == 0) {

	//rf_rx_off ();
	//rf_power_down();
	      	
	sync=0;
    1238:	61 2c       	mov	r6, r1
    123a:	71 2c       	mov	r7, r1
	rf_power_up();
	rf_rx_on ();
        do {
          v = _tdma_rx ();
    123c:	0e 94 48 07 	call	0xe90	; 0xe90 <_tdma_rx>
    1240:	8a 83       	std	Y+2, r24	; 0x02
          nrk_time_get (&_tdma_next_wakeup);
    1242:	8d ea       	ldi	r24, 0xAD	; 173
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	0e 94 4a 23 	call	0x4694	; 0x4694 <nrk_time_get>
          if (v == NRK_OK) {
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	09 f5       	brne	.+66     	; 0x1292 <tdma_nw_task+0x26e>

	    // See if its part of a wakeup packet stream
            tmp =
              (tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    1250:	e0 91 f7 05 	lds	r30, 0x05F7
    1254:	f0 91 f8 05 	lds	r31, 0x05F8
              pPayload[TDMA_SRC_LOW];
	    // Check if its slot 0 packet
            tmp2 =
              (tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
    1258:	81 81       	ldd	r24, Z+1	; 0x01
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	98 2f       	mov	r25, r24
    125e:	88 27       	eor	r24, r24
    1260:	20 81       	ld	r18, Z
    1262:	82 2b       	or	r24, r18
          nrk_time_get (&_tdma_next_wakeup);
          if (v == NRK_OK) {

	    // See if its part of a wakeup packet stream
            tmp =
              (tdma_rfRxInfo.pPayload[TDMA_SRC_HIGH] << 8) | tdma_rfRxInfo.
    1264:	25 81       	ldd	r18, Z+5	; 0x05
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	32 2f       	mov	r19, r18
    126a:	22 27       	eor	r18, r18
    126c:	44 81       	ldd	r20, Z+4	; 0x04
    126e:	24 2b       	or	r18, r20
	    // Check if its slot 0 packet
            tmp2 =
              (tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
              pPayload[TDMA_SLOT_LOW];

	    if(tmp==0x0 && tmp2==0xffff) sync=0;
    1270:	23 2b       	or	r18, r19
    1272:	21 f4       	brne	.+8      	; 0x127c <tdma_nw_task+0x258>
    1274:	8f 3f       	cpi	r24, 0xFF	; 255
    1276:	2f ef       	ldi	r18, 0xFF	; 255
    1278:	92 07       	cpc	r25, r18
    127a:	21 f0       	breq	.+8      	; 0x1284 <tdma_nw_task+0x260>

            if (tmp2 != 0) {
    127c:	89 2b       	or	r24, r25
    127e:	09 f4       	brne	.+2      	; 0x1282 <tdma_nw_task+0x25e>
    1280:	88 c1       	rjmp	.+784    	; 0x1592 <tdma_nw_task+0x56e>
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <tdma_nw_task+0x264>
	    // Check if its slot 0 packet
            tmp2 =
              (tdma_rfRxInfo.pPayload[TDMA_SLOT_HIGH] << 8) | tdma_rfRxInfo.
              pPayload[TDMA_SLOT_LOW];

	    if(tmp==0x0 && tmp2==0xffff) sync=0;
    1284:	61 2c       	mov	r6, r1
    1286:	71 2c       	mov	r7, r1

            if (tmp2 != 0) {
              v = NRK_ERROR;
          	tdma_rx_buf_empty = 1;
    1288:	31 e0       	ldi	r19, 0x01	; 1
    128a:	30 93 d1 03 	sts	0x03D1, r19
    128e:	8f ef       	ldi	r24, 0xFF	; 255
    1290:	8a 83       	std	Y+2, r24	; 0x02
            _tdma_slot_time.nano_secs = tdma_slot_len_ms * NANOS_PER_MS;
            _tdma_slot_time.secs = 0;
	    }
          }
	  // Make this time based so that it doesn't get shorter with non sync packets
	  if(sync>=100) { 
    1292:	94 e6       	ldi	r25, 0x64	; 100
    1294:	69 16       	cp	r6, r25
    1296:	71 04       	cpc	r7, r1
    1298:	c0 f0       	brcs	.+48     	; 0x12ca <tdma_nw_task+0x2a6>
		  		sync_status=0; /*nrk_led_set(RED_LED);*/ 
    129a:	10 92 a9 03 	sts	0x03A9, r1
				//sync=30000; 
				if(tdma_error_callback!=NULL ) i=tdma_error_callback(sync-100);
    129e:	e0 91 a7 03 	lds	r30, 0x03A7
    12a2:	f0 91 a8 03 	lds	r31, 0x03A8
    12a6:	30 97       	sbiw	r30, 0x00	; 0
    12a8:	29 f0       	breq	.+10     	; 0x12b4 <tdma_nw_task+0x290>
    12aa:	c3 01       	movw	r24, r6
    12ac:	84 56       	subi	r24, 0x64	; 100
    12ae:	91 09       	sbc	r25, r1
    12b0:	09 95       	icall
    12b2:	89 83       	std	Y+1, r24	; 0x01
		if(i==NRK_OK) { tdma_rx_buf_empty=1; /*nrk_kprintf( PSTR("sync=0\r\n"));*/ sync=0; }
    12b4:	e9 81       	ldd	r30, Y+1	; 0x01
    12b6:	e1 30       	cpi	r30, 0x01	; 1
    12b8:	19 f4       	brne	.+6      	; 0x12c0 <tdma_nw_task+0x29c>
    12ba:	61 2c       	mov	r6, r1
    12bc:	71 2c       	mov	r7, r1
    12be:	05 c0       	rjmp	.+10     	; 0x12ca <tdma_nw_task+0x2a6>
	  } 
	  if(sync<30000 ) sync++;
    12c0:	f0 e3       	ldi	r31, 0x30	; 48
    12c2:	6f 16       	cp	r6, r31
    12c4:	f5 e7       	ldi	r31, 0x75	; 117
    12c6:	7f 06       	cpc	r7, r31
    12c8:	18 f4       	brcc	.+6      	; 0x12d0 <tdma_nw_task+0x2ac>
    12ca:	2f ef       	ldi	r18, 0xFF	; 255
    12cc:	62 1a       	sub	r6, r18
    12ce:	72 0a       	sbc	r7, r18
}


int8_t tdma_rx_pkt_release(void)
{
    tdma_rx_buf_empty=1;
    12d0:	31 e0       	ldi	r19, 0x01	; 1
    12d2:	30 93 d1 03 	sts	0x03D1, r19
				if(tdma_error_callback!=NULL ) i=tdma_error_callback(sync-100);
		if(i==NRK_OK) { tdma_rx_buf_empty=1; /*nrk_kprintf( PSTR("sync=0\r\n"));*/ sync=0; }
	  } 
	  if(sync<30000 ) sync++;
	tdma_rx_pkt_release();
        } while (v != NRK_OK);
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	09 f0       	breq	.+2      	; 0x12de <tdma_nw_task+0x2ba>
    12dc:	af cf       	rjmp	.-162    	; 0x123c <tdma_nw_task+0x218>
      //if(sync==30000)  sync_status=1; /*nrk_led_clr(RED_LED);*/ 
      }

      // Compute TTL offset
      ttl_delay=(tdma_rfRxInfo.pPayload[TDMA_TTL]>>4)-(tdma_rfRxInfo.pPayload[TDMA_TTL]&0xf);
    12de:	e0 91 f7 05 	lds	r30, 0x05F7
    12e2:	f0 91 f8 05 	lds	r31, 0x05F8
    12e6:	92 85       	ldd	r25, Z+10	; 0x0a
    12e8:	89 2f       	mov	r24, r25
    12ea:	82 95       	swap	r24
    12ec:	8f 70       	andi	r24, 0x0F	; 15
    12ee:	9f 70       	andi	r25, 0x0F	; 15
    12f0:	89 1b       	sub	r24, r25
      if(ttl_delay>16) ttl_delay=0;
    12f2:	81 31       	cpi	r24, 0x11	; 17
    12f4:	18 f4       	brcc	.+6      	; 0x12fc <tdma_nw_task+0x2d8>
        } while (v != NRK_OK);
      //if(sync==30000)  sync_status=1; /*nrk_led_clr(RED_LED);*/ 
      }

      // Compute TTL offset
      ttl_delay=(tdma_rfRxInfo.pPayload[TDMA_TTL]>>4)-(tdma_rfRxInfo.pPayload[TDMA_TTL]&0xf);
    12f6:	80 93 cd 03 	sts	0x03CD, r24
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <tdma_nw_task+0x2dc>
      if(ttl_delay>16) ttl_delay=0;
    12fc:	10 92 cd 03 	sts	0x03CD, r1
      _ttl_delay_total.secs=0;
    1300:	10 92 c5 03 	sts	0x03C5, r1
    1304:	10 92 c6 03 	sts	0x03C6, r1
    1308:	10 92 c7 03 	sts	0x03C7, r1
    130c:	10 92 c8 03 	sts	0x03C8, r1
      _ttl_delay_total.nano_secs=0;
    1310:	10 92 c9 03 	sts	0x03C9, r1
    1314:	10 92 ca 03 	sts	0x03CA, r1
    1318:	10 92 cb 03 	sts	0x03CB, r1
    131c:	10 92 cc 03 	sts	0x03CC, r1
      _ttl_delay_per_tx.secs=0;
    1320:	10 92 bd 03 	sts	0x03BD, r1
    1324:	10 92 be 03 	sts	0x03BE, r1
    1328:	10 92 bf 03 	sts	0x03BF, r1
    132c:	10 92 c0 03 	sts	0x03C0, r1
      _ttl_delay_per_tx.nano_secs=0;

      _ttl_delay_per_tx.secs=0;
      _ttl_delay_per_tx.nano_secs=((uint32_t)tdma_rfRxInfo.length+(uint32_t)17)*32000;   // (payload_bytes + header) * 32 us
    1330:	a0 91 f5 05 	lds	r26, 0x05F5
    1334:	bb 27       	eor	r27, r27
    1336:	a7 fd       	sbrc	r26, 7
    1338:	b0 95       	com	r27
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	3d e7       	ldi	r19, 0x7D	; 125
    133e:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__usmulhisi3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	93 5b       	subi	r25, 0xB3	; 179
    1348:	a7 4f       	sbci	r26, 0xF7	; 247
    134a:	bf 4f       	sbci	r27, 0xFF	; 255
    134c:	80 93 c1 03 	sts	0x03C1, r24
    1350:	90 93 c2 03 	sts	0x03C2, r25
    1354:	a0 93 c3 03 	sts	0x03C3, r26
    1358:	b0 93 c4 03 	sts	0x03C4, r27

      for (tmp = 0; tmp < ttl_delay; tmp++)
    135c:	61 2c       	mov	r6, r1
    135e:	71 2c       	mov	r7, r1
    1360:	80 91 cd 03 	lds	r24, 0x03CD
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	68 16       	cp	r6, r24
    1368:	79 06       	cpc	r7, r25
    136a:	40 f5       	brcc	.+80     	; 0x13bc <tdma_nw_task+0x398>
        nrk_time_add (&_ttl_delay_total, _ttl_delay_total, _ttl_delay_per_tx);
    136c:	80 90 bd 03 	lds	r8, 0x03BD
    1370:	90 90 be 03 	lds	r9, 0x03BE
    1374:	a0 90 bf 03 	lds	r10, 0x03BF
    1378:	b0 90 c0 03 	lds	r11, 0x03C0
    137c:	c0 90 c1 03 	lds	r12, 0x03C1
    1380:	d0 90 c2 03 	lds	r13, 0x03C2
    1384:	e0 90 c3 03 	lds	r14, 0x03C3
    1388:	f0 90 c4 03 	lds	r15, 0x03C4
    138c:	00 91 c5 03 	lds	r16, 0x03C5
    1390:	10 91 c6 03 	lds	r17, 0x03C6
    1394:	20 91 c7 03 	lds	r18, 0x03C7
    1398:	30 91 c8 03 	lds	r19, 0x03C8
    139c:	40 91 c9 03 	lds	r20, 0x03C9
    13a0:	50 91 ca 03 	lds	r21, 0x03CA
    13a4:	60 91 cb 03 	lds	r22, 0x03CB
    13a8:	70 91 cc 03 	lds	r23, 0x03CC
    13ac:	85 ec       	ldi	r24, 0xC5	; 197
    13ae:	93 e0       	ldi	r25, 0x03	; 3
    13b0:	0e 94 54 24 	call	0x48a8	; 0x48a8 <nrk_time_add>
      _ttl_delay_per_tx.nano_secs=0;

      _ttl_delay_per_tx.secs=0;
      _ttl_delay_per_tx.nano_secs=((uint32_t)tdma_rfRxInfo.length+(uint32_t)17)*32000;   // (payload_bytes + header) * 32 us

      for (tmp = 0; tmp < ttl_delay; tmp++)
    13b4:	9f ef       	ldi	r25, 0xFF	; 255
    13b6:	69 1a       	sub	r6, r25
    13b8:	79 0a       	sbc	r7, r25
    13ba:	d2 cf       	rjmp	.-92     	; 0x1360 <tdma_nw_task+0x33c>
        nrk_time_add (&_ttl_delay_total, _ttl_delay_total, _ttl_delay_per_tx);


      sync_status=1;
    13bc:	e1 e0       	ldi	r30, 0x01	; 1
    13be:	e0 93 a9 03 	sts	0x03A9, r30
	rf_rx_off ();
    13c2:	0e 94 32 0c 	call	0x1864	; 0x1864 <rf_rx_off>
	rf_power_down();
    13c6:	0e 94 42 0b 	call	0x1684	; 0x1684 <rf_power_down>

      // Find next slot
      slot = tdma_tx_sched[0];
    13ca:	80 91 de 03 	lds	r24, 0x03DE
    13ce:	90 91 df 03 	lds	r25, 0x03DF
      if (slot > tdma_slots_per_cycle)
    13d2:	60 90 d4 03 	lds	r6, 0x03D4
    13d6:	70 90 d5 03 	lds	r7, 0x03D5
    13da:	86 15       	cp	r24, r6
    13dc:	97 05       	cpc	r25, r7
    13de:	08 f4       	brcc	.+2      	; 0x13e2 <tdma_nw_task+0x3be>
    13e0:	3c 01       	movw	r6, r24
        slot = tdma_slots_per_cycle;
 //         nrk_time_get (&tmp_time);
//      printf( "tt=%lu %lu\r\n",tmp_time.secs,tmp_time.nano_secs/NANOS_PER_MS);
//      printf( "nw=%lu %lu\r\n",_tdma_next_wakeup.secs,_tdma_next_wakeup.nano_secs/NANOS_PER_MS);
      for (tmp = 0; tmp < slot; tmp++)
    13e2:	41 2c       	mov	r4, r1
    13e4:	51 2c       	mov	r5, r1
    13e6:	46 14       	cp	r4, r6
    13e8:	57 04       	cpc	r5, r7
    13ea:	41 f1       	breq	.+80     	; 0x143c <tdma_nw_task+0x418>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
    13ec:	80 90 b5 03 	lds	r8, 0x03B5
    13f0:	90 90 b6 03 	lds	r9, 0x03B6
    13f4:	a0 90 b7 03 	lds	r10, 0x03B7
    13f8:	b0 90 b8 03 	lds	r11, 0x03B8
    13fc:	c0 90 b9 03 	lds	r12, 0x03B9
    1400:	d0 90 ba 03 	lds	r13, 0x03BA
    1404:	e0 90 bb 03 	lds	r14, 0x03BB
    1408:	f0 90 bc 03 	lds	r15, 0x03BC
    140c:	00 91 ad 03 	lds	r16, 0x03AD
    1410:	10 91 ae 03 	lds	r17, 0x03AE
    1414:	20 91 af 03 	lds	r18, 0x03AF
    1418:	30 91 b0 03 	lds	r19, 0x03B0
    141c:	40 91 b1 03 	lds	r20, 0x03B1
    1420:	50 91 b2 03 	lds	r21, 0x03B2
    1424:	60 91 b3 03 	lds	r22, 0x03B3
    1428:	70 91 b4 03 	lds	r23, 0x03B4
    142c:	8d ea       	ldi	r24, 0xAD	; 173
    142e:	93 e0       	ldi	r25, 0x03	; 3
    1430:	0e 94 54 24 	call	0x48a8	; 0x48a8 <nrk_time_add>
      if (slot > tdma_slots_per_cycle)
        slot = tdma_slots_per_cycle;
 //         nrk_time_get (&tmp_time);
//      printf( "tt=%lu %lu\r\n",tmp_time.secs,tmp_time.nano_secs/NANOS_PER_MS);
//      printf( "nw=%lu %lu\r\n",_tdma_next_wakeup.secs,_tdma_next_wakeup.nano_secs/NANOS_PER_MS);
      for (tmp = 0; tmp < slot; tmp++)
    1434:	ff ef       	ldi	r31, 0xFF	; 255
    1436:	4f 1a       	sub	r4, r31
    1438:	5f 0a       	sbc	r5, r31
    143a:	d5 cf       	rjmp	.-86     	; 0x13e6 <tdma_nw_task+0x3c2>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
      // Subtract TTL delay time
      nrk_time_sub(&_tdma_next_wakeup, _tdma_next_wakeup, _ttl_delay_total);
    143c:	80 90 c5 03 	lds	r8, 0x03C5
    1440:	90 90 c6 03 	lds	r9, 0x03C6
    1444:	a0 90 c7 03 	lds	r10, 0x03C7
    1448:	b0 90 c8 03 	lds	r11, 0x03C8
    144c:	c0 90 c9 03 	lds	r12, 0x03C9
    1450:	d0 90 ca 03 	lds	r13, 0x03CA
    1454:	e0 90 cb 03 	lds	r14, 0x03CB
    1458:	f0 90 cc 03 	lds	r15, 0x03CC
    145c:	00 91 ad 03 	lds	r16, 0x03AD
    1460:	10 91 ae 03 	lds	r17, 0x03AE
    1464:	20 91 af 03 	lds	r18, 0x03AF
    1468:	30 91 b0 03 	lds	r19, 0x03B0
    146c:	40 91 b1 03 	lds	r20, 0x03B1
    1470:	50 91 b2 03 	lds	r21, 0x03B2
    1474:	60 91 b3 03 	lds	r22, 0x03B3
    1478:	70 91 b4 03 	lds	r23, 0x03B4
    147c:	8d ea       	ldi	r24, 0xAD	; 173
    147e:	93 e0       	ldi	r25, 0x03	; 3
    1480:	0e 94 a7 23 	call	0x474e	; 0x474e <nrk_time_sub>

      nrk_time_compact_nanos (&_tdma_next_wakeup);
    1484:	8d ea       	ldi	r24, 0xAD	; 173
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	0e 94 33 24 	call	0x4866	; 0x4866 <nrk_time_compact_nanos>

  //    printf( "nw2=%lu %lu\r\n",_tdma_next_wakeup.secs,_tdma_next_wakeup.nano_secs/NANOS_PER_MS);
      nrk_wait_until (_tdma_next_wakeup);
    148c:	20 91 ad 03 	lds	r18, 0x03AD
    1490:	30 91 ae 03 	lds	r19, 0x03AE
    1494:	40 91 af 03 	lds	r20, 0x03AF
    1498:	50 91 b0 03 	lds	r21, 0x03B0
    149c:	60 91 b1 03 	lds	r22, 0x03B1
    14a0:	70 91 b2 03 	lds	r23, 0x03B2
    14a4:	80 91 b3 03 	lds	r24, 0x03B3
    14a8:	90 91 b4 03 	lds	r25, 0x03B4
    14ac:	0e 94 ee 22 	call	0x45dc	; 0x45dc <nrk_wait_until>

      // Transmit on slot
      if (tx_data_ready == 1) {
    14b0:	80 91 d8 03 	lds	r24, 0x03D8
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	b1 f4       	brne	.+44     	; 0x14e4 <tdma_nw_task+0x4c0>
        tdma_rfTxInfo.pPayload[TDMA_SLOT_LOW] = slot & 0xff;    // slot
    14b8:	e0 91 03 07 	lds	r30, 0x0703
    14bc:	f0 91 04 07 	lds	r31, 0x0704
    14c0:	60 82       	st	Z, r6
        tdma_rfTxInfo.pPayload[TDMA_SLOT_HIGH] = slot >> 8;
    14c2:	e0 91 03 07 	lds	r30, 0x0703
    14c6:	f0 91 04 07 	lds	r31, 0x0704
    14ca:	71 82       	std	Z+1, r7	; 0x01
        tdma_rfTxInfo.destAddr = 0xffff;
    14cc:	30 92 01 07 	sts	0x0701, r3
    14d0:	20 92 00 07 	sts	0x0700, r2
        tdma_rfTxInfo.ackRequest = 0;
    14d4:	10 92 06 07 	sts	0x0706, r1
        tdma_rfTxInfo.cca = 0;
    14d8:	10 92 05 07 	sts	0x0705, r1
	rf_power_up();
    14dc:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <rf_power_up>
        _tdma_tx ();
    14e0:	0e 94 93 07 	call	0xf26	; 0xf26 <_tdma_tx>
      }

      // Sleep until end of cycle 
	rf_rx_off ();
    14e4:	0e 94 32 0c 	call	0x1864	; 0x1864 <rf_rx_off>
	rf_power_down();
    14e8:	0e 94 42 0b 	call	0x1684	; 0x1684 <rf_power_down>
      for (tmp = 0; tmp < ((uint16_t)tdma_slots_per_cycle - (uint16_t)slot); tmp++)
    14ec:	41 2c       	mov	r4, r1
    14ee:	51 2c       	mov	r5, r1
    14f0:	80 91 d4 03 	lds	r24, 0x03D4
    14f4:	90 91 d5 03 	lds	r25, 0x03D5
    14f8:	86 19       	sub	r24, r6
    14fa:	97 09       	sbc	r25, r7
    14fc:	48 16       	cp	r4, r24
    14fe:	59 06       	cpc	r5, r25
    1500:	40 f5       	brcc	.+80     	; 0x1552 <tdma_nw_task+0x52e>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
    1502:	80 90 b5 03 	lds	r8, 0x03B5
    1506:	90 90 b6 03 	lds	r9, 0x03B6
    150a:	a0 90 b7 03 	lds	r10, 0x03B7
    150e:	b0 90 b8 03 	lds	r11, 0x03B8
    1512:	c0 90 b9 03 	lds	r12, 0x03B9
    1516:	d0 90 ba 03 	lds	r13, 0x03BA
    151a:	e0 90 bb 03 	lds	r14, 0x03BB
    151e:	f0 90 bc 03 	lds	r15, 0x03BC
    1522:	00 91 ad 03 	lds	r16, 0x03AD
    1526:	10 91 ae 03 	lds	r17, 0x03AE
    152a:	20 91 af 03 	lds	r18, 0x03AF
    152e:	30 91 b0 03 	lds	r19, 0x03B0
    1532:	40 91 b1 03 	lds	r20, 0x03B1
    1536:	50 91 b2 03 	lds	r21, 0x03B2
    153a:	60 91 b3 03 	lds	r22, 0x03B3
    153e:	70 91 b4 03 	lds	r23, 0x03B4
    1542:	8d ea       	ldi	r24, 0xAD	; 173
    1544:	93 e0       	ldi	r25, 0x03	; 3
    1546:	0e 94 54 24 	call	0x48a8	; 0x48a8 <nrk_time_add>
      }

      // Sleep until end of cycle 
	rf_rx_off ();
	rf_power_down();
      for (tmp = 0; tmp < ((uint16_t)tdma_slots_per_cycle - (uint16_t)slot); tmp++)
    154a:	2f ef       	ldi	r18, 0xFF	; 255
    154c:	42 1a       	sub	r4, r18
    154e:	52 0a       	sbc	r5, r18
    1550:	cf cf       	rjmp	.-98     	; 0x14f0 <tdma_nw_task+0x4cc>
        nrk_time_add (&_tdma_next_wakeup, _tdma_next_wakeup, _tdma_slot_time);
      nrk_time_compact_nanos (&_tdma_next_wakeup);
    1552:	8d ea       	ldi	r24, 0xAD	; 173
    1554:	93 e0       	ldi	r25, 0x03	; 3
    1556:	0e 94 33 24 	call	0x4866	; 0x4866 <nrk_time_compact_nanos>
      nrk_wait_until (_tdma_next_wakeup);
    155a:	20 91 ad 03 	lds	r18, 0x03AD
    155e:	30 91 ae 03 	lds	r19, 0x03AE
    1562:	40 91 af 03 	lds	r20, 0x03AF
    1566:	50 91 b0 03 	lds	r21, 0x03B0
    156a:	60 91 b1 03 	lds	r22, 0x03B1
    156e:	70 91 b2 03 	lds	r23, 0x03B2
    1572:	80 91 b3 03 	lds	r24, 0x03B3
    1576:	90 91 b4 03 	lds	r25, 0x03B4
    157a:	0e 94 ee 22 	call	0x45dc	; 0x45dc <nrk_wait_until>
      slot = 0;
      while(!tdma_is_enabled) nrk_wait_until_next_period();
    157e:	80 91 ce 03 	lds	r24, 0x03CE
    1582:	81 11       	cpse	r24, r1
    1584:	03 c0       	rjmp	.+6      	; 0x158c <tdma_nw_task+0x568>
    1586:	0e 94 9b 21 	call	0x4336	; 0x4336 <nrk_wait_until_next_period>
    158a:	f9 cf       	rjmp	.-14     	; 0x157e <tdma_nw_task+0x55a>
		
      slot=0;
    158c:	61 2c       	mov	r6, r1
    158e:	71 2c       	mov	r7, r1
    1590:	64 cd       	rjmp	.-1336   	; 0x105a <tdma_nw_task+0x36>
	      	//rf_rx_on();
	    }
	    if(v!=NRK_ERROR)
	    {
	    // set TTL to TTL_MAX from gateway
	    tdma_ttl = tdma_rfRxInfo.pPayload[TDMA_TTL]>>4;
    1592:	82 85       	ldd	r24, Z+10	; 0x0a
    1594:	82 95       	swap	r24
    1596:	8f 70       	andi	r24, 0x0F	; 15
    1598:	80 93 d9 03 	sts	0x03D9, r24
            tdma_slots_per_cycle =
              (tdma_rfRxInfo.
               pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
    159c:	81 85       	ldd	r24, Z+9	; 0x09
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	98 2f       	mov	r25, r24
    15a2:	88 27       	eor	r24, r24
    15a4:	20 85       	ldd	r18, Z+8	; 0x08
    15a6:	82 2b       	or	r24, r18
	    }
	    if(v!=NRK_ERROR)
	    {
	    // set TTL to TTL_MAX from gateway
	    tdma_ttl = tdma_rfRxInfo.pPayload[TDMA_TTL]>>4;
            tdma_slots_per_cycle =
    15a8:	90 93 d5 03 	sts	0x03D5, r25
    15ac:	80 93 d4 03 	sts	0x03D4, r24
              (tdma_rfRxInfo.
               pPayload[TDMA_CYCLE_SIZE_HIGH] << 8) | tdma_rfRxInfo.
              pPayload[TDMA_CYCLE_SIZE_LOW];
            tdma_slot_len_ms = tdma_rfRxInfo.pPayload[TDMA_SLOT_SIZE];
    15b0:	a3 85       	ldd	r26, Z+11	; 0x0b
    15b2:	8a 2f       	mov	r24, r26
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	90 93 d7 03 	sts	0x03D7, r25
    15ba:	80 93 d6 03 	sts	0x03D6, r24
            _tdma_slot_time.nano_secs = tdma_slot_len_ms * NANOS_PER_MS;
    15be:	dc 01       	movw	r26, r24
    15c0:	20 e4       	ldi	r18, 0x40	; 64
    15c2:	32 e4       	ldi	r19, 0x42	; 66
    15c4:	4f e0       	ldi	r20, 0x0F	; 15
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__muluhisi3>
    15cc:	60 93 b9 03 	sts	0x03B9, r22
    15d0:	70 93 ba 03 	sts	0x03BA, r23
    15d4:	80 93 bb 03 	sts	0x03BB, r24
    15d8:	90 93 bc 03 	sts	0x03BC, r25
            _tdma_slot_time.secs = 0;
    15dc:	10 92 b5 03 	sts	0x03B5, r1
    15e0:	10 92 b6 03 	sts	0x03B6, r1
    15e4:	10 92 b7 03 	sts	0x03B7, r1
    15e8:	10 92 b8 03 	sts	0x03B8, r1
    15ec:	52 ce       	rjmp	.-860    	; 0x1292 <tdma_nw_task+0x26e>

000015ee <tdma_task_config>:
}


void tdma_task_config ()
{
  nrk_task_set_entry_function (&tdma_task, tdma_nw_task);
    15ee:	62 e1       	ldi	r22, 0x12	; 18
    15f0:	78 e0       	ldi	r23, 0x08	; 8
    15f2:	86 ec       	ldi	r24, 0xC6	; 198
    15f4:	95 e0       	ldi	r25, 0x05	; 5
    15f6:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <nrk_task_set_entry_function>
  nrk_task_set_stk (&tdma_task, tdma_task_stack, TDMA_STACKSIZE);
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	51 e0       	ldi	r21, 0x01	; 1
    15fe:	66 ec       	ldi	r22, 0xC6	; 198
    1600:	74 e0       	ldi	r23, 0x04	; 4
    1602:	86 ec       	ldi	r24, 0xC6	; 198
    1604:	95 e0       	ldi	r25, 0x05	; 5
    1606:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <nrk_task_set_stk>
  tdma_task.prio = TDMA_TASK_PRIORITY;
    160a:	e6 ec       	ldi	r30, 0xC6	; 198
    160c:	f5 e0       	ldi	r31, 0x05	; 5
    160e:	84 e1       	ldi	r24, 0x14	; 20
    1610:	80 87       	std	Z+8, r24	; 0x08
  tdma_task.FirstActivation = TRUE;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	87 83       	std	Z+7, r24	; 0x07
  tdma_task.Type = BASIC_TASK;
    1616:	81 87       	std	Z+9, r24	; 0x09
  tdma_task.SchType = PREEMPTIVE;
    1618:	82 87       	std	Z+10, r24	; 0x0a
  tdma_task.period.secs = 1;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a0 e0       	ldi	r26, 0x00	; 0
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	83 87       	std	Z+11, r24	; 0x0b
    1624:	94 87       	std	Z+12, r25	; 0x0c
    1626:	a5 87       	std	Z+13, r26	; 0x0d
    1628:	b6 87       	std	Z+14, r27	; 0x0e
  tdma_task.period.nano_secs = 0; // 20 * NANOS_PER_MS;
    162a:	17 86       	std	Z+15, r1	; 0x0f
    162c:	10 8a       	std	Z+16, r1	; 0x10
    162e:	11 8a       	std	Z+17, r1	; 0x11
    1630:	12 8a       	std	Z+18, r1	; 0x12
  tdma_task.cpu_reserve.secs = PCF_TDMA_TIMEOUT;       // bmac reserve , 0 to disable
    1632:	87 e0       	ldi	r24, 0x07	; 7
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e0       	ldi	r26, 0x00	; 0
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	83 8b       	std	Z+19, r24	; 0x13
    163c:	94 8b       	std	Z+20, r25	; 0x14
    163e:	a5 8b       	std	Z+21, r26	; 0x15
    1640:	b6 8b       	std	Z+22, r27	; 0x16
  tdma_task.cpu_reserve.nano_secs = 0;
    1642:	17 8a       	std	Z+23, r1	; 0x17
    1644:	10 8e       	std	Z+24, r1	; 0x18
    1646:	11 8e       	std	Z+25, r1	; 0x19
    1648:	12 8e       	std	Z+26, r1	; 0x1a
  tdma_task.offset.secs = 0;
    164a:	13 8e       	std	Z+27, r1	; 0x1b
    164c:	14 8e       	std	Z+28, r1	; 0x1c
    164e:	15 8e       	std	Z+29, r1	; 0x1d
    1650:	16 8e       	std	Z+30, r1	; 0x1e
  tdma_task.offset.nano_secs = 0;
    1652:	17 8e       	std	Z+31, r1	; 0x1f
    1654:	10 a2       	std	Z+32, r1	; 0x20
    1656:	11 a2       	std	Z+33, r1	; 0x21
    1658:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&tdma_task);
    165a:	cf 01       	movw	r24, r30
    165c:	0c 94 09 21 	jmp	0x4212	; 0x4212 <nrk_activate_task>

00001660 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1660:	90 91 41 01 	lds	r25, 0x0141
    1664:	9f 71       	andi	r25, 0x1F	; 31
    1666:	9f 31       	cpi	r25, 0x1F	; 31
    1668:	d9 f3       	breq	.-10     	; 0x1660 <rf_cmd>
		continue;
	TRX_STATE = cmd;
    166a:	80 93 42 01 	sts	0x0142, r24
    166e:	08 95       	ret

00001670 <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
    1670:	80 93 ea 05 	sts	0x05EA, r24
    1674:	08 95       	ret

00001676 <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	80 93 81 0a 	sts	0x0A81, r24
    167c:	08 95       	ret

0000167e <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    167e:	10 92 81 0a 	sts	0x0A81, r1
    1682:	08 95       	ret

00001684 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1684:	80 91 41 01 	lds	r24, 0x0141
    1688:	8f 71       	andi	r24, 0x1F	; 31
    168a:	8f 31       	cpi	r24, 0x1F	; 31
    168c:	d9 f3       	breq	.-10     	; 0x1684 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    168e:	80 91 41 01 	lds	r24, 0x0141
    1692:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    1694:	e1 f0       	breq	.+56     	; 0x16ce <rf_power_down+0x4a>
    1696:	8f 30       	cpi	r24, 0x0F	; 15
    1698:	d1 f0       	breq	.+52     	; 0x16ce <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    169a:	80 91 41 01 	lds	r24, 0x0141
    169e:	8f 71       	andi	r24, 0x1F	; 31
    16a0:	88 30       	cpi	r24, 0x08	; 8
    16a2:	31 f4       	brne	.+12     	; 0x16b0 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    16a4:	80 91 39 01 	lds	r24, 0x0139
    16a8:	82 60       	ori	r24, 0x02	; 2
    16aa:	80 93 39 01 	sts	0x0139, r24
    16ae:	0b c0       	rjmp	.+22     	; 0x16c6 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    16b0:	88 e0       	ldi	r24, 0x08	; 8
    16b2:	0e 94 30 0b 	call	0x1660	; 0x1660 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    16b6:	80 91 41 01 	lds	r24, 0x0141
    16ba:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    16bc:	88 30       	cpi	r24, 0x08	; 8
    16be:	d9 f7       	brne	.-10     	; 0x16b6 <rf_power_down+0x32>
    16c0:	f1 cf       	rjmp	.-30     	; 0x16a4 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    16c2:	8f 30       	cpi	r24, 0x0F	; 15
    16c4:	21 f0       	breq	.+8      	; 0x16ce <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    16c6:	80 91 41 01 	lds	r24, 0x0141
    16ca:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    16cc:	d1 f7       	brne	.-12     	; 0x16c2 <rf_power_down+0x3e>
    16ce:	08 95       	ret

000016d0 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    16d0:	80 91 41 01 	lds	r24, 0x0141
    16d4:	8f 71       	andi	r24, 0x1F	; 31
    16d6:	8f 31       	cpi	r24, 0x1F	; 31
    16d8:	d9 f3       	breq	.-10     	; 0x16d0 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    16da:	80 91 41 01 	lds	r24, 0x0141
    16de:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    16e0:	11 f0       	breq	.+4      	; 0x16e6 <rf_power_up+0x16>
    16e2:	8f 30       	cpi	r24, 0x0F	; 15
    16e4:	51 f4       	brne	.+20     	; 0x16fa <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    16e6:	80 91 39 01 	lds	r24, 0x0139
    16ea:	8d 7f       	andi	r24, 0xFD	; 253
    16ec:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    16f0:	80 91 41 01 	lds	r24, 0x0141
    16f4:	8f 71       	andi	r24, 0x1F	; 31
    16f6:	88 30       	cpi	r24, 0x08	; 8
    16f8:	d9 f7       	brne	.-10     	; 0x16f0 <rf_power_up+0x20>
    16fa:	08 95       	ret

000016fc <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    16fc:	e5 e4       	ldi	r30, 0x45	; 69
    16fe:	f1 e0       	ldi	r31, 0x01	; 1
    1700:	90 81       	ld	r25, Z
    1702:	90 7f       	andi	r25, 0xF0	; 240
    1704:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    1706:	90 81       	ld	r25, Z
    1708:	8f 70       	andi	r24, 0x0F	; 15
    170a:	98 2b       	or	r25, r24
    170c:	90 83       	st	Z, r25
    170e:	08 95       	ret

00001710 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    1710:	e7 e5       	ldi	r30, 0x57	; 87
    1712:	f1 e0       	ldi	r31, 0x01	; 1
    1714:	80 81       	ld	r24, Z
    1716:	8d 7f       	andi	r24, 0xFD	; 253
    1718:	80 83       	st	Z, r24
    171a:	08 95       	ret

0000171c <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    171c:	e7 e5       	ldi	r30, 0x57	; 87
    171e:	f1 e0       	ldi	r31, 0x01	; 1
    1720:	80 81       	ld	r24, Z
    1722:	82 60       	ori	r24, 0x02	; 2
    1724:	80 83       	st	Z, r24
    1726:	08 95       	ret

00001728 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    1728:	ee e6       	ldi	r30, 0x6E	; 110
    172a:	f1 e0       	ldi	r31, 0x01	; 1
    172c:	80 81       	ld	r24, Z
    172e:	8f 7e       	andi	r24, 0xEF	; 239
    1730:	80 83       	st	Z, r24
    1732:	08 95       	ret

00001734 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1734:	ee e6       	ldi	r30, 0x6E	; 110
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	80 81       	ld	r24, Z
    173a:	80 61       	ori	r24, 0x10	; 16
    173c:	80 83       	st	Z, r24
    173e:	08 95       	ret

00001740 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    1740:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1744:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    1748:	90 93 8b 0a 	sts	0x0A8B, r25
    174c:	80 93 8a 0a 	sts	0x0A8A, r24
    1750:	08 95       	ret

00001752 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1752:	90 93 85 0a 	sts	0x0A85, r25
    1756:	80 93 84 0a 	sts	0x0A84, r24
	PHY_CC_CCA &= ~(0x1F);
    175a:	e8 e4       	ldi	r30, 0x48	; 72
    175c:	f1 e0       	ldi	r31, 0x01	; 1
    175e:	80 81       	ld	r24, Z
    1760:	80 7e       	andi	r24, 0xE0	; 224
    1762:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1764:	80 81       	ld	r24, Z
    1766:	68 2b       	or	r22, r24
    1768:	60 83       	st	Z, r22
    176a:	08 95       	ret

0000176c <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    176c:	90 93 ee 05 	sts	0x05EE, r25
    1770:	80 93 ed 05 	sts	0x05ED, r24
    1774:	08 95       	ret

00001776 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    1776:	90 93 ec 05 	sts	0x05EC, r25
    177a:	80 93 eb 05 	sts	0x05EB, r24
    177e:	08 95       	ret

00001780 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	fc 01       	movw	r30, r24
    178a:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    1792:	80 ec       	ldi	r24, 0xC0	; 192
    1794:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    1798:	60 62       	ori	r22, 0x20	; 32
    179a:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    179e:	85 ec       	ldi	r24, 0xC5	; 197
    17a0:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    17a4:	87 ea       	ldi	r24, 0xA7	; 167
    17a6:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    17aa:	80 e8       	ldi	r24, 0x80	; 128
    17ac:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    17b0:	20 93 60 01 	sts	0x0160, r18
    17b4:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    17b8:	40 93 62 01 	sts	0x0162, r20
    17bc:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    17c0:	c6 e4       	ldi	r28, 0x46	; 70
    17c2:	d1 e0       	ldi	r29, 0x01	; 1
    17c4:	08 81       	ld	r16, Y
    17c6:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    17c8:	98 81       	ld	r25, Y
    17ca:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    17cc:	30 2f       	mov	r19, r16
    17ce:	32 95       	swap	r19
    17d0:	36 95       	lsr	r19
    17d2:	37 70       	andi	r19, 0x07	; 7
    17d4:	60 e4       	ldi	r22, 0x40	; 64
    17d6:	36 9f       	mul	r19, r22
    17d8:	80 01       	movw	r16, r0
    17da:	11 24       	eor	r1, r1
    17dc:	22 95       	swap	r18
    17de:	26 95       	lsr	r18
    17e0:	23 70       	andi	r18, 0x03	; 3
    17e2:	62 2f       	mov	r22, r18
    17e4:	60 2b       	or	r22, r16
    17e6:	82 95       	swap	r24
    17e8:	86 95       	lsr	r24
    17ea:	83 70       	andi	r24, 0x03	; 3
    17ec:	70 e1       	ldi	r23, 0x10	; 16
    17ee:	87 9f       	mul	r24, r23
    17f0:	90 01       	movw	r18, r0
    17f2:	11 24       	eor	r1, r1
    17f4:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    17f6:	92 95       	swap	r25
    17f8:	96 95       	lsr	r25
    17fa:	93 70       	andi	r25, 0x03	; 3
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	98 9f       	mul	r25, r24
    1800:	b0 01       	movw	r22, r0
    1802:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1804:	62 2b       	or	r22, r18
    1806:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    180a:	88 81       	ld	r24, Y
    180c:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    180e:	92 95       	swap	r25
    1810:	96 95       	lsr	r25
    1812:	93 70       	andi	r25, 0x03	; 3
    1814:	39 2f       	mov	r19, r25
    1816:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1818:	98 2f       	mov	r25, r24
    181a:	92 95       	swap	r25
    181c:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    181e:	93 2b       	or	r25, r19
    1820:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    1824:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Interrupts disabled by default, basic_rf does not rely on them */
	/* IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN); */
	IRQ_MASK = (1 << RX_START_EN);
    1828:	84 e0       	ldi	r24, 0x04	; 4
    182a:	80 93 4e 01 	sts	0x014E, r24

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    182e:	c4 e8       	ldi	r28, 0x84	; 132
    1830:	da e0       	ldi	r29, 0x0A	; 10
    1832:	f9 83       	std	Y+1, r31	; 0x01
    1834:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    1836:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    1838:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    183a:	5d 83       	std	Y+5, r21	; 0x05
    183c:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    183e:	bf 83       	std	Y+7, r27	; 0x07
    1840:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    1842:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	80 93 a5 0a 	sts	0x0AA5, r24

	use_glossy = 0;
    184a:	10 92 81 0a 	sts	0x0A81, r1

} // rf_init() 
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	08 95       	ret

00001858 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    1858:	86 e1       	ldi	r24, 0x16	; 22
    185a:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <rf_cmd>

0000185e <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    185e:	86 e1       	ldi	r24, 0x16	; 22
    1860:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <rf_cmd>

00001864 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    1864:	88 e0       	ldi	r24, 0x08	; 8
    1866:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <rf_cmd>

0000186a <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	fc 01       	movw	r30, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    1874:	80 91 a5 0a 	lds	r24, 0x0AA5
    1878:	81 11       	cpse	r24, r1
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <rf_tx_packet+0x16>
		return NRK_ERROR;
    187c:	8f ef       	ldi	r24, 0xFF	; 255
    187e:	ac c0       	rjmp	.+344    	; 0x19d8 <rf_tx_packet+0x16e>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    1880:	26 81       	ldd	r18, Z+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    1882:	80 91 86 0a 	lds	r24, 0x0A86
    1886:	8f 5f       	subi	r24, 0xFF	; 255
    1888:	80 93 86 0a 	sts	0x0A86, r24
	machead->fcf = fcf;
    188c:	90 91 81 01 	lds	r25, 0x0181
    1890:	90 7e       	andi	r25, 0xE0	; 224
    1892:	91 60       	ori	r25, 0x01	; 1
    1894:	20 fb       	bst	r18, 0
    1896:	95 f9       	bld	r25, 5
    1898:	9f 73       	andi	r25, 0x3F	; 63
    189a:	90 64       	ori	r25, 0x40	; 64
    189c:	90 93 81 01 	sts	0x0181, r25
    18a0:	88 e8       	ldi	r24, 0x88	; 136
    18a2:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    18a6:	80 91 81 0a 	lds	r24, 0x0A81
    18aa:	88 23       	and	r24, r24
    18ac:	61 f0       	breq	.+24     	; 0x18c6 <rf_tx_packet+0x5c>
		machead->seq_num = 0xFF;
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    18b4:	8a ea       	ldi	r24, 0xAA	; 170
    18b6:	9a ea       	ldi	r25, 0xAA	; 170
    18b8:	90 93 89 01 	sts	0x0189, r25
    18bc:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	9f ef       	ldi	r25, 0xFF	; 255
    18c4:	10 c0       	rjmp	.+32     	; 0x18e6 <rf_tx_packet+0x7c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    18c6:	80 91 86 0a 	lds	r24, 0x0A86
    18ca:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    18ce:	20 91 61 01 	lds	r18, 0x0161
    18d2:	80 91 60 01 	lds	r24, 0x0160
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	92 2b       	or	r25, r18
    18da:	90 93 89 01 	sts	0x0189, r25
    18de:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	90 93 87 01 	sts	0x0187, r25
    18ea:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    18ee:	20 91 63 01 	lds	r18, 0x0163
    18f2:	80 91 62 01 	lds	r24, 0x0162
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	92 2b       	or	r25, r18
    18fa:	90 93 85 01 	sts	0x0185, r25
    18fe:	80 93 84 01 	sts	0x0184, r24
    1902:	8f 01       	movw	r16, r30
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    1904:	42 81       	ldd	r20, Z+2	; 0x02
    1906:	55 27       	eor	r21, r21
    1908:	47 fd       	sbrc	r20, 7
    190a:	50 95       	com	r21
    190c:	63 81       	ldd	r22, Z+3	; 0x03
    190e:	74 81       	ldd	r23, Z+4	; 0x04
    1910:	8a e8       	ldi	r24, 0x8A	; 138
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	0e 94 32 31 	call	0x6264	; 0x6264 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    1918:	f8 01       	movw	r30, r16
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	85 5f       	subi	r24, 0xF5	; 245
    191e:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1922:	80 91 41 01 	lds	r24, 0x0141
    1926:	d8 2f       	mov	r29, r24
    1928:	df 71       	andi	r29, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    192a:	9f ef       	ldi	r25, 0xFF	; 255
    192c:	9d 0f       	add	r25, r29
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    192e:	92 30       	cpi	r25, 0x02	; 2
    1930:	c0 f3       	brcs	.-16     	; 0x1922 <rf_tx_packet+0xb8>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1932:	d1 31       	cpi	r29, 0x11	; 17
    1934:	b1 f3       	breq	.-20     	; 0x1922 <rf_tx_packet+0xb8>
    1936:	d2 31       	cpi	r29, 0x12	; 18
    1938:	a1 f3       	breq	.-24     	; 0x1922 <rf_tx_packet+0xb8>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    193a:	df 31       	cpi	r29, 0x1F	; 31
    193c:	91 f3       	breq	.-28     	; 0x1922 <rf_tx_packet+0xb8>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    193e:	98 ef       	ldi	r25, 0xF8	; 248
    1940:	9d 0f       	add	r25, r29
    1942:	92 30       	cpi	r25, 0x02	; 2
    1944:	20 f0       	brcs	.+8      	; 0x194e <rf_tx_packet+0xe4>
    1946:	8f 70       	andi	r24, 0x0F	; 15
    1948:	86 30       	cpi	r24, 0x06	; 6
    194a:	09 f0       	breq	.+2      	; 0x194e <rf_tx_packet+0xe4>
    194c:	97 cf       	rjmp	.-210    	; 0x187c <rf_tx_packet+0x12>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    194e:	86 e1       	ldi	r24, 0x16	; 22
    1950:	0e 94 30 0b 	call	0x1660	; 0x1660 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1954:	f8 01       	movw	r30, r16
    1956:	85 81       	ldd	r24, Z+5	; 0x05
    1958:	81 11       	cpse	r24, r1
    195a:	0b c0       	rjmp	.+22     	; 0x1972 <rf_tx_packet+0x108>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    195c:	89 e0       	ldi	r24, 0x09	; 9
    195e:	0e 94 30 0b 	call	0x1660	; 0x1660 <rf_cmd>
	if(pRTI->ackRequest)
    1962:	f8 01       	movw	r30, r16
    1964:	86 81       	ldd	r24, Z+6	; 0x06
    1966:	88 23       	and	r24, r24
    1968:	91 f0       	breq	.+36     	; 0x198e <rf_tx_packet+0x124>
		rf_cmd(TX_ARET_ON);
    196a:	89 e1       	ldi	r24, 0x19	; 25
    196c:	0e 94 30 0b 	call	0x1660	; 0x1660 <rf_cmd>
    1970:	0e c0       	rjmp	.+28     	; 0x198e <rf_tx_packet+0x124>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    1972:	80 91 48 01 	lds	r24, 0x0148
    1976:	80 68       	ori	r24, 0x80	; 128
    1978:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    197c:	80 91 41 01 	lds	r24, 0x0141
    1980:	87 ff       	sbrs	r24, 7
    1982:	fc cf       	rjmp	.-8      	; 0x197c <rf_tx_packet+0x112>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    1984:	80 91 41 01 	lds	r24, 0x0141
    1988:	86 ff       	sbrs	r24, 6
    198a:	78 cf       	rjmp	.-272    	; 0x187c <rf_tx_packet+0x12>
    198c:	e7 cf       	rjmp	.-50     	; 0x195c <rf_tx_packet+0xf2>
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	0e 94 30 0b 	call	0x1660	; 0x1660 <rf_cmd>
   for(i=0; i<65000; i++){
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
      if(IRQ_STATUS & (1 << TX_END)){
    1998:	20 91 4f 01 	lds	r18, 0x014F
    199c:	26 fd       	sbrc	r18, 6
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <rf_tx_packet+0x140>
		rf_cc2591_tx_on();
#endif

   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; i<65000; i++){
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	88 3e       	cpi	r24, 0xE8	; 232
    19a4:	fd ef       	ldi	r31, 0xFD	; 253
    19a6:	9f 07       	cpc	r25, r31
    19a8:	b9 f7       	brne	.-18     	; 0x1998 <rf_tx_packet+0x12e>
      if(IRQ_STATUS & (1 << TX_END)){
         break;
      }
   }
   IRQ_STATUS = 1 << TX_END;
    19aa:	20 e4       	ldi	r18, 0x40	; 64
    19ac:	20 93 4f 01 	sts	0x014F, r18

	trx_error = ((pRTI->ackRequest && 
    19b0:	f8 01       	movw	r30, r16
    19b2:	26 81       	ldd	r18, Z+6	; 0x06
    19b4:	22 23       	and	r18, r18
    19b6:	31 f0       	breq	.+12     	; 0x19c4 <rf_tx_packet+0x15a>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    19b8:	20 91 42 01 	lds	r18, 0x0142
    19bc:	22 95       	swap	r18
    19be:	26 95       	lsr	r18
    19c0:	27 70       	andi	r18, 0x07	; 7
         break;
      }
   }
   IRQ_STATUS = 1 << TX_END;

	trx_error = ((pRTI->ackRequest && 
    19c2:	29 f4       	brne	.+10     	; 0x19ce <rf_tx_packet+0x164>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    19c4:	88 3e       	cpi	r24, 0xE8	; 232
    19c6:	9d 4f       	sbci	r25, 0xFD	; 253
    19c8:	11 f0       	breq	.+4      	; 0x19ce <rf_tx_packet+0x164>
         break;
      }
   }
   IRQ_STATUS = 1 << TX_END;

	trx_error = ((pRTI->ackRequest && 
    19ca:	c1 e0       	ldi	r28, 0x01	; 1
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <rf_tx_packet+0x166>
    19ce:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    19d0:	8d 2f       	mov	r24, r29
    19d2:	0e 94 30 0b 	call	0x1660	; 0x1660 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    19d6:	8c 2f       	mov	r24, r28
}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	08 95       	ret

000019e2 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    19e6:	80 91 a5 0a 	lds	r24, 0x0AA5
    19ea:	88 23       	and	r24, r24
    19ec:	41 f1       	breq	.+80     	; 0x1a3e <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    19ee:	80 91 41 01 	lds	r24, 0x0141
    19f2:	c8 2f       	mov	r28, r24
    19f4:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    19f6:	9f ef       	ldi	r25, 0xFF	; 255
    19f8:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    19fa:	92 30       	cpi	r25, 0x02	; 2
    19fc:	c0 f3       	brcs	.-16     	; 0x19ee <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    19fe:	c1 31       	cpi	r28, 0x11	; 17
    1a00:	b1 f3       	breq	.-20     	; 0x19ee <rf_cca_check+0xc>
    1a02:	c2 31       	cpi	r28, 0x12	; 18
    1a04:	a1 f3       	breq	.-24     	; 0x19ee <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1a06:	cf 31       	cpi	r28, 0x1F	; 31
    1a08:	91 f3       	breq	.-28     	; 0x19ee <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1a0a:	c8 30       	cpi	r28, 0x08	; 8
    1a0c:	19 f0       	breq	.+6      	; 0x1a14 <rf_cca_check+0x32>
    1a0e:	8f 70       	andi	r24, 0x0F	; 15
    1a10:	86 30       	cpi	r24, 0x06	; 6
    1a12:	a9 f4       	brne	.+42     	; 0x1a3e <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    1a14:	86 e1       	ldi	r24, 0x16	; 22
    1a16:	0e 94 30 0b 	call	0x1660	; 0x1660 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    1a1a:	80 91 48 01 	lds	r24, 0x0148
    1a1e:	80 68       	ori	r24, 0x80	; 128
    1a20:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    1a24:	80 91 41 01 	lds	r24, 0x0141
    1a28:	87 ff       	sbrs	r24, 7
    1a2a:	fc cf       	rjmp	.-8      	; 0x1a24 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1a2c:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    1a30:	8c 2f       	mov	r24, r28
    1a32:	0e 94 30 0b 	call	0x1660	; 0x1660 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1a36:	d6 fb       	bst	r29, 6
    1a38:	88 27       	eor	r24, r24
    1a3a:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    1a46:	80 91 a5 0a 	lds	r24, 0x0AA5
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <rf_rx_packet_nonblock+0xa>
    1a4e:	e5 c0       	rjmp	.+458    	; 0x1c1a <rf_rx_packet_nonblock+0x1d4>
		return NRK_ERROR;

   if(!(IRQ_STATUS & (1 << RX_END))){
    1a50:	80 91 4f 01 	lds	r24, 0x014F
    1a54:	83 ff       	sbrs	r24, 3
    1a56:	df c0       	rjmp	.+446    	; 0x1c16 <rf_rx_packet_nonblock+0x1d0>
      return 0;
   }
   if(!(PHY_RSSI & (1 << RX_CRC_VALID))){
    1a58:	80 91 46 01 	lds	r24, 0x0146
    1a5c:	87 ff       	sbrs	r24, 7
    1a5e:	db c0       	rjmp	.+438    	; 0x1c16 <rf_rx_packet_nonblock+0x1d0>
      return 0;
   }
   if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    1a60:	80 91 7b 01 	lds	r24, 0x017B
    1a64:	e0 91 84 0a 	lds	r30, 0x0A84
    1a68:	f0 91 85 0a 	lds	r31, 0x0A85
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 97       	sbiw	r24, 0x02	; 2
    1a70:	24 81       	ldd	r18, Z+4	; 0x04
    1a72:	33 27       	eor	r19, r19
    1a74:	27 fd       	sbrc	r18, 7
    1a76:	30 95       	com	r19
    1a78:	28 17       	cp	r18, r24
    1a7a:	39 07       	cpc	r19, r25
    1a7c:	0c f4       	brge	.+2      	; 0x1a80 <rf_rx_packet_nonblock+0x3a>
    1a7e:	cd c0       	rjmp	.+410    	; 0x1c1a <rf_rx_packet_nonblock+0x1d4>
		return NRK_ERROR;

   IRQ_STATUS = (1 << RX_END);
    1a80:	88 e0       	ldi	r24, 0x08	; 8
    1a82:	80 93 4f 01 	sts	0x014F, r24

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    1a86:	e0 91 84 0a 	lds	r30, 0x0A84
    1a8a:	f0 91 85 0a 	lds	r31, 0x0A85
    1a8e:	80 91 82 01 	lds	r24, 0x0182
    1a92:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    1a94:	e0 91 84 0a 	lds	r30, 0x0A84
    1a98:	f0 91 85 0a 	lds	r31, 0x0A85
    1a9c:	80 91 87 01 	lds	r24, 0x0187
    1aa0:	90 91 88 01 	lds	r25, 0x0188
    1aa4:	92 83       	std	Z+2, r25	; 0x02
    1aa6:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    1aa8:	e0 91 84 0a 	lds	r30, 0x0A84
    1aac:	f0 91 85 0a 	lds	r31, 0x0A85
    1ab0:	80 91 7b 01 	lds	r24, 0x017B
    1ab4:	8b 50       	subi	r24, 0x0B	; 11
    1ab6:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    1ab8:	a0 91 84 0a 	lds	r26, 0x0A84
    1abc:	b0 91 85 0a 	lds	r27, 0x0A85
    1ac0:	e0 91 84 0a 	lds	r30, 0x0A84
    1ac4:	f0 91 85 0a 	lds	r31, 0x0A85
    1ac8:	13 96       	adiw	r26, 0x03	; 3
    1aca:	9c 91       	ld	r25, X
    1acc:	84 81       	ldd	r24, Z+4	; 0x04
    1ace:	89 17       	cp	r24, r25
    1ad0:	3c f0       	brlt	.+14     	; 0x1ae0 <rf_rx_packet_nonblock+0x9a>
			|| (rfSettings.pRxInfo->length < 0)){
    1ad2:	e0 91 84 0a 	lds	r30, 0x0A84
    1ad6:	f0 91 85 0a 	lds	r31, 0x0A85
    1ada:	83 81       	ldd	r24, Z+3	; 0x03
    1adc:	87 ff       	sbrs	r24, 7
    1ade:	0b c0       	rjmp	.+22     	; 0x1af6 <rf_rx_packet_nonblock+0xb0>
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1ae0:	80 91 4c 01 	lds	r24, 0x014C
    1ae4:	8f 77       	andi	r24, 0x7F	; 127
    1ae6:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1aea:	80 91 4c 01 	lds	r24, 0x014C
    1aee:	80 68       	ori	r24, 0x80	; 128
    1af0:	80 93 4c 01 	sts	0x014C, r24
    1af4:	92 c0       	rjmp	.+292    	; 0x1c1a <rf_rx_packet_nonblock+0x1d4>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    1af6:	a0 91 84 0a 	lds	r26, 0x0A84
    1afa:	b0 91 85 0a 	lds	r27, 0x0A85
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1afe:	e0 91 84 0a 	lds	r30, 0x0A84
    1b02:	f0 91 85 0a 	lds	r31, 0x0A85
    1b06:	13 96       	adiw	r26, 0x03	; 3
    1b08:	4c 91       	ld	r20, X
    1b0a:	55 27       	eor	r21, r21
    1b0c:	47 fd       	sbrc	r20, 7
    1b0e:	50 95       	com	r21
    1b10:	69 e8       	ldi	r22, 0x89	; 137
    1b12:	71 e0       	ldi	r23, 0x01	; 1
    1b14:	85 81       	ldd	r24, Z+5	; 0x05
    1b16:	96 81       	ldd	r25, Z+6	; 0x06
    1b18:	0e 94 32 31 	call	0x6264	; 0x6264 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
    1b1c:	80 91 ea 05 	lds	r24, 0x05EA
    1b20:	88 23       	and	r24, r24
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <rf_rx_packet_nonblock+0xe0>
    1b24:	3e c0       	rjmp	.+124    	; 0x1ba2 <rf_rx_packet_nonblock+0x15c>
    1b26:	e0 91 84 0a 	lds	r30, 0x0A84
    1b2a:	f0 91 85 0a 	lds	r31, 0x0A85
    1b2e:	83 81       	ldd	r24, Z+3	; 0x03
    1b30:	80 31       	cpi	r24, 0x10	; 16
    1b32:	b9 f5       	brne	.+110    	; 0x1ba2 <rf_rx_packet_nonblock+0x15c>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
    1b34:	e0 91 84 0a 	lds	r30, 0x0A84
    1b38:	f0 91 85 0a 	lds	r31, 0x0A85
    1b3c:	65 81       	ldd	r22, Z+5	; 0x05
    1b3e:	76 81       	ldd	r23, Z+6	; 0x06
    1b40:	44 e0       	ldi	r20, 0x04	; 4
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	92 e0       	ldi	r25, 0x02	; 2
    1b48:	0e 94 3b 31 	call	0x6276	; 0x6276 <strncmp>
    1b4c:	89 2b       	or	r24, r25
    1b4e:	49 f5       	brne	.+82     	; 0x1ba2 <rf_rx_packet_nonblock+0x15c>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
    1b50:	e0 91 84 0a 	lds	r30, 0x0A84
    1b54:	f0 91 85 0a 	lds	r31, 0x0A85
    1b58:	65 81       	ldd	r22, Z+5	; 0x05
    1b5a:	76 81       	ldd	r23, Z+6	; 0x06
    1b5c:	40 e1       	ldi	r20, 0x10	; 16
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	92 e0       	ldi	r25, 0x02	; 2
    1b64:	0e 94 3b 31 	call	0x6276	; 0x6276 <strncmp>
    1b68:	89 2b       	or	r24, r25
    1b6a:	d9 f4       	brne	.+54     	; 0x1ba2 <rf_rx_packet_nonblock+0x15c>
            wdt_enable(WDTO_500MS);
    1b6c:	9d e0       	ldi	r25, 0x0D	; 13
    1b6e:	88 e1       	ldi	r24, 0x18	; 24
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	a8 95       	wdr
    1b76:	80 93 60 00 	sts	0x0060, r24
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 cc 13 	call	0x2798	; 0x2798 <nrk_led_set>
            nrk_led_set(1);
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 cc 13 	call	0x2798	; 0x2798 <nrk_led_set>
            nrk_led_set(2);
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 cc 13 	call	0x2798	; 0x2798 <nrk_led_set>
            nrk_led_set(3);
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 cc 13 	call	0x2798	; 0x2798 <nrk_led_set>
    1ba0:	ff cf       	rjmp	.-2      	; 0x1ba0 <rf_rx_packet_nonblock+0x15a>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    1ba2:	e0 91 84 0a 	lds	r30, 0x0A84
    1ba6:	f0 91 85 0a 	lds	r31, 0x0A85
    1baa:	80 91 80 01 	lds	r24, 0x0180
    1bae:	85 fb       	bst	r24, 5
    1bb0:	88 27       	eor	r24, r24
    1bb2:	80 f9       	bld	r24, 0
    1bb4:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    1bb6:	e0 91 84 0a 	lds	r30, 0x0A84
    1bba:	f0 91 85 0a 	lds	r31, 0x0A85
    1bbe:	80 91 47 01 	lds	r24, 0x0147
    1bc2:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    1bc4:	e0 91 84 0a 	lds	r30, 0x0A84
    1bc8:	f0 91 85 0a 	lds	r31, 0x0A85
    1bcc:	80 91 46 01 	lds	r24, 0x0146
    1bd0:	86 95       	lsr	r24
    1bd2:	86 95       	lsr	r24
    1bd4:	86 95       	lsr	r24
    1bd6:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    1bd8:	e0 91 84 0a 	lds	r30, 0x0A84
    1bdc:	f0 91 85 0a 	lds	r31, 0x0A85
    1be0:	80 91 47 01 	lds	r24, 0x0147
    1be4:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    1be6:	a0 91 84 0a 	lds	r26, 0x0A84
    1bea:	b0 91 85 0a 	lds	r27, 0x0A85
    1bee:	e0 91 7b 01 	lds	r30, 0x017B
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	e0 58       	subi	r30, 0x80	; 128
    1bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf8:	80 81       	ld	r24, Z
    1bfa:	1b 96       	adiw	r26, 0x0b	; 11
    1bfc:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1bfe:	80 91 4c 01 	lds	r24, 0x014C
    1c02:	8f 77       	andi	r24, 0x7F	; 127
    1c04:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1c08:	80 91 4c 01 	lds	r24, 0x014C
    1c0c:	80 68       	ori	r24, 0x80	; 128
    1c0e:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

   if(!(IRQ_STATUS & (1 << RX_END))){
      return 0;
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
	/* Reset frame buffer protection */
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1c1c:	08 95       	ret

00001c1e <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1c1e:	1f 92       	push	r1
    1c20:	0f 92       	push	r0
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	0f 92       	push	r0
    1c26:	11 24       	eor	r1, r1
    1c28:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1c2a:	80 e8       	ldi	r24, 0x80	; 128
    1c2c:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1c30:	8f 91       	pop	r24
    1c32:	0f 90       	pop	r0
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	0f 90       	pop	r0
    1c38:	1f 90       	pop	r1
    1c3a:	18 95       	reti

00001c3c <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1c3c:	1f 92       	push	r1
    1c3e:	0f 92       	push	r0
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	0f 92       	push	r0
    1c44:	11 24       	eor	r1, r1
    1c46:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	IRQ_STATUS = (1 << TX_END);
    1c48:	80 e4       	ldi	r24, 0x40	; 64
    1c4a:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    1c4e:	8f 91       	pop	r24
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	0f 90       	pop	r0
    1c56:	1f 90       	pop	r1
    1c58:	18 95       	reti

00001c5a <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    1c5a:	1f 92       	push	r1
    1c5c:	0f 92       	push	r0
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	0f 92       	push	r0
    1c62:	11 24       	eor	r1, r1
    1c64:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    1c66:	80 e2       	ldi	r24, 0x20	; 32
    1c68:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1c6c:	8f 91       	pop	r24
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	0f 90       	pop	r0
    1c74:	1f 90       	pop	r1
    1c76:	18 95       	reti

00001c78 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    1c78:	1f 92       	push	r1
    1c7a:	0f 92       	push	r0
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	0f 92       	push	r0
    1c80:	11 24       	eor	r1, r1
    1c82:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    1c84:	80 e1       	ldi	r24, 0x10	; 16
    1c86:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1c8a:	8f 91       	pop	r24
    1c8c:	0f 90       	pop	r0
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	0f 90       	pop	r0
    1c92:	1f 90       	pop	r1
    1c94:	18 95       	reti

00001c96 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    1c96:	1f 92       	push	r1
    1c98:	0f 92       	push	r0
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	0f 92       	push	r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	0b b6       	in	r0, 0x3b	; 59
    1ca2:	0f 92       	push	r0
    1ca4:	2f 93       	push	r18
    1ca6:	3f 93       	push	r19
    1ca8:	4f 93       	push	r20
    1caa:	5f 93       	push	r21
    1cac:	6f 93       	push	r22
    1cae:	7f 93       	push	r23
    1cb0:	8f 93       	push	r24
    1cb2:	9f 93       	push	r25
    1cb4:	af 93       	push	r26
    1cb6:	bf 93       	push	r27
    1cb8:	ef 93       	push	r30
    1cba:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    1cbc:	84 e0       	ldi	r24, 0x04	; 4
    1cbe:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    1cc2:	e0 91 ed 05 	lds	r30, 0x05ED
    1cc6:	f0 91 ee 05 	lds	r31, 0x05EE
    1cca:	30 97       	sbiw	r30, 0x00	; 0
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <__vector_59+0x3a>
		rx_start_func();
    1cce:	09 95       	icall

	return;
}
    1cd0:	ff 91       	pop	r31
    1cd2:	ef 91       	pop	r30
    1cd4:	bf 91       	pop	r27
    1cd6:	af 91       	pop	r26
    1cd8:	9f 91       	pop	r25
    1cda:	8f 91       	pop	r24
    1cdc:	7f 91       	pop	r23
    1cde:	6f 91       	pop	r22
    1ce0:	5f 91       	pop	r21
    1ce2:	4f 91       	pop	r20
    1ce4:	3f 91       	pop	r19
    1ce6:	2f 91       	pop	r18
    1ce8:	0f 90       	pop	r0
    1cea:	0b be       	out	0x3b, r0	; 59
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	0f 90       	pop	r0
    1cf2:	1f 90       	pop	r1
    1cf4:	18 95       	reti

00001cf6 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1cf6:	1f 92       	push	r1
    1cf8:	0f 92       	push	r0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	0f 92       	push	r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1d08:	8f 91       	pop	r24
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	0f 90       	pop	r0
    1d10:	1f 90       	pop	r1
    1d12:	18 95       	reti

00001d14 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1d26:	8f 91       	pop	r24
    1d28:	0f 90       	pop	r0
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	0f 90       	pop	r0
    1d2e:	1f 90       	pop	r1
    1d30:	18 95       	reti

00001d32 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    1d32:	e9 e4       	ldi	r30, 0x49	; 73
    1d34:	f1 e0       	ldi	r31, 0x01	; 1
    1d36:	90 81       	ld	r25, Z
    1d38:	90 7f       	andi	r25, 0xF0	; 240
    1d3a:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    1d3c:	90 81       	ld	r25, Z
    1d3e:	8f 70       	andi	r24, 0x0F	; 15
    1d40:	98 2b       	or	r25, r24
    1d42:	90 83       	st	Z, r25
    1d44:	08 95       	ret

00001d46 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	08 95       	ret

00001d4a <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    1d4a:	08 95       	ret

00001d4c <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    1d4c:	08 95       	ret

00001d4e <rf_security_disable>:
}



void rf_security_disable()
{
    1d4e:	08 95       	ret

00001d50 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	08 95       	ret

00001d54 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1d54:	80 91 7f 0a 	lds	r24, 0x0A7F
    1d58:	90 91 80 0a 	lds	r25, 0x0A80
    1d5c:	08 95       	ret

00001d5e <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
    1d5e:	08 95       	ret

00001d60 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	08 95       	ret

00001d64 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	08 95       	ret

00001d68 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	08 95       	ret

00001d6c <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    1d6c:	08 95       	ret

00001d6e <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    1d6e:	08 95       	ret

00001d70 <rf_test_mode>:
}



void rf_test_mode()
{
    1d70:	08 95       	ret

00001d72 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    1d72:	08 95       	ret

00001d74 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    1d74:	08 95       	ret

00001d76 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    1d76:	08 95       	ret

00001d78 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    1d78:	08 95       	ret

00001d7a <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    1d7a:	08 95       	ret

00001d7c <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
    1d7c:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
    1d7e:	8d b1       	in	r24, 0x0d	; 13
    1d80:	80 6e       	ori	r24, 0xE0	; 224
    1d82:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
    1d84:	8e b1       	in	r24, 0x0e	; 14
    1d86:	80 6a       	ori	r24, 0xA0	; 160
    1d88:	8e b9       	out	0x0e, r24	; 14
    1d8a:	08 95       	ret

00001d8c <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
    1d8c:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
    1d8e:	8d b1       	in	r24, 0x0d	; 13
    1d90:	80 6e       	ori	r24, 0xE0	; 224
    1d92:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
    1d94:	8e b1       	in	r24, 0x0e	; 14
    1d96:	80 66       	ori	r24, 0x60	; 96
    1d98:	8e b9       	out	0x0e, r24	; 14
    1d9a:	08 95       	ret

00001d9c <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	27 97       	sbiw	r28, 0x07	; 7
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    1dbc:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    1dc0:	e0 91 84 0a 	lds	r30, 0x0A84
    1dc4:	f0 91 85 0a 	lds	r31, 0x0A85
    1dc8:	c0 80       	ld	r12, Z
    1dca:	d3 80       	ldd	r13, Z+3	; 0x03
    1dcc:	e5 80       	ldd	r14, Z+5	; 0x05
    1dce:	f6 80       	ldd	r15, Z+6	; 0x06
    1dd0:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    1dd2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <rf_rx_packet_nonblock>
	if (err < 1) {
    1dd6:	18 16       	cp	r1, r24
    1dd8:	1c f0       	brlt	.+6      	; 0x1de0 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    1dda:	81 ed       	ldi	r24, 0xD1	; 209
    1ddc:	92 e0       	ldi	r25, 0x02	; 2
    1dde:	06 c0       	rjmp	.+12     	; 0x1dec <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    1de0:	f7 01       	movw	r30, r14
    1de2:	10 81       	ld	r17, Z
	if (ttl == 0) {
    1de4:	11 11       	cpse	r17, r1
    1de6:	07 c0       	rjmp	.+14     	; 0x1df6 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    1de8:	80 ef       	ldi	r24, 0xF0	; 240
    1dea:	92 e0       	ldi	r25, 0x02	; 2
    1dec:	0e 94 e6 31 	call	0x63cc	; 0x63cc <puts>
#endif
		nrk_int_enable();
    1df0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>
		return;
    1df4:	31 c0       	rjmp	.+98     	; 0x1e58 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    1df6:	15 30       	cpi	r17, 0x05	; 5
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    1dfa:	8a e0       	ldi	r24, 0x0A	; 10
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    1e02:	c7 01       	movw	r24, r14
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	9f 93       	push	r25
    1e08:	8f 93       	push	r24
    1e0a:	80 2f       	mov	r24, r16
    1e0c:	99 27       	eor	r25, r25
    1e0e:	87 fd       	sbrc	r24, 7
    1e10:	90 95       	com	r25
    1e12:	9f 93       	push	r25
    1e14:	0f 93       	push	r16
    1e16:	1f 92       	push	r1
    1e18:	1f 93       	push	r17
    1e1a:	1f 92       	push	r1
    1e1c:	cf 92       	push	r12
    1e1e:	82 e1       	ldi	r24, 0x12	; 18
    1e20:	93 e0       	ldi	r25, 0x03	; 3
    1e22:	9f 93       	push	r25
    1e24:	8f 93       	push	r24
    1e26:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    1e2a:	fd 82       	std	Y+5, r15	; 0x05
    1e2c:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    1e2e:	11 50       	subi	r17, 0x01	; 1
    1e30:	f7 01       	movw	r30, r14
    1e32:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    1e34:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    1e36:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    1e38:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	9f ef       	ldi	r25, 0xFF	; 255
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    1e42:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    1e46:	ce 01       	movw	r24, r28
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	0e 94 35 0c 	call	0x186a	; 0x186a <rf_tx_packet>
#endif
	return;
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
}
    1e58:	27 96       	adiw	r28, 0x07	; 7
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	df 90       	pop	r13
    1e72:	cf 90       	pop	r12
    1e74:	08 95       	ret

00001e76 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    1e76:	1f 92       	push	r1
    1e78:	0f 92       	push	r0
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	0f 92       	push	r0
    1e7e:	11 24       	eor	r1, r1
    1e80:	0b b6       	in	r0, 0x3b	; 59
    1e82:	0f 92       	push	r0
    1e84:	2f 93       	push	r18
    1e86:	3f 93       	push	r19
    1e88:	4f 93       	push	r20
    1e8a:	5f 93       	push	r21
    1e8c:	6f 93       	push	r22
    1e8e:	7f 93       	push	r23
    1e90:	8f 93       	push	r24
    1e92:	9f 93       	push	r25
    1e94:	af 93       	push	r26
    1e96:	bf 93       	push	r27
    1e98:	ef 93       	push	r30
    1e9a:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 91 7b 01 	lds	r25, 0x017B
    1ea2:	89 17       	cp	r24, r25
    1ea4:	10 f4       	brcc	.+4      	; 0x1eaa <__vector_60+0x34>
    1ea6:	8f 5f       	subi	r24, 0xFF	; 255
    1ea8:	fa cf       	rjmp	.-12     	; 0x1e9e <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");
	
   IRQ_STATUS = (1 << RX_END);
    1eaa:	88 e0       	ldi	r24, 0x08	; 8
    1eac:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1eb0:	80 91 46 01 	lds	r24, 0x0146
    1eb4:	87 ff       	sbrs	r24, 7
    1eb6:	05 c0       	rjmp	.+10     	; 0x1ec2 <__vector_60+0x4c>
		if (use_glossy) rf_glossy_interrupt();
    1eb8:	80 91 81 0a 	lds	r24, 0x0A81
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1ec2:	e0 91 eb 05 	lds	r30, 0x05EB
    1ec6:	f0 91 ec 05 	lds	r31, 0x05EC
    1eca:	30 97       	sbiw	r30, 0x00	; 0
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <__vector_60+0x5a>
		rx_end_func();
    1ece:	09 95       	icall

	return;
}
    1ed0:	ff 91       	pop	r31
    1ed2:	ef 91       	pop	r30
    1ed4:	bf 91       	pop	r27
    1ed6:	af 91       	pop	r26
    1ed8:	9f 91       	pop	r25
    1eda:	8f 91       	pop	r24
    1edc:	7f 91       	pop	r23
    1ede:	6f 91       	pop	r22
    1ee0:	5f 91       	pop	r21
    1ee2:	4f 91       	pop	r20
    1ee4:	3f 91       	pop	r19
    1ee6:	2f 91       	pop	r18
    1ee8:	0f 90       	pop	r0
    1eea:	0b be       	out	0x3b, r0	; 59
    1eec:	0f 90       	pop	r0
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	0f 90       	pop	r0
    1ef2:	1f 90       	pop	r1
    1ef4:	18 95       	reti

00001ef6 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    1ef6:	a5 e9       	ldi	r26, 0x95	; 149
    1ef8:	ba e0       	ldi	r27, 0x0A	; 10
    1efa:	fc 01       	movw	r30, r24
    1efc:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    1efe:	20 81       	ld	r18, Z
    1f00:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    1f02:	21 91       	ld	r18, Z+
    1f04:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1f08:	e8 17       	cp	r30, r24
    1f0a:	f9 07       	cpc	r31, r25
    1f0c:	c1 f7       	brne	.-16     	; 0x1efe <aes_setkey+0x8>
    1f0e:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1f10:	10 92 3e 01 	sts	0x013E, r1
    1f14:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    1f18:	80 e8       	ldi	r24, 0x80	; 128
    1f1a:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    1f1e:	80 91 3d 01 	lds	r24, 0x013D
    1f22:	80 ff       	sbrs	r24, 0
    1f24:	fc cf       	rjmp	.-8      	; 0x1f1e <aes_setkey+0x28>
    1f26:	ee ea       	ldi	r30, 0xAE	; 174
    1f28:	fa e0       	ldi	r31, 0x0A	; 10
    1f2a:	80 e1       	ldi	r24, 0x10	; 16
    1f2c:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    1f2e:	90 91 3f 01 	lds	r25, 0x013F
    1f32:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    1f34:	8e 13       	cpse	r24, r30
    1f36:	fb cf       	rjmp	.-10     	; 0x1f2e <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    1f38:	08 95       	ret

00001f3a <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1f40:	66 23       	and	r22, r22
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <aes_encrypt+0xc>
    1f44:	45 c0       	rjmp	.+138    	; 0x1fd0 <aes_encrypt+0x96>
    1f46:	86 2f       	mov	r24, r22
    1f48:	8f 70       	andi	r24, 0x0F	; 15
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <aes_encrypt+0x14>
    1f4c:	41 c0       	rjmp	.+130    	; 0x1fd0 <aes_encrypt+0x96>
    1f4e:	e5 e9       	ldi	r30, 0x95	; 149
    1f50:	fa e0       	ldi	r31, 0x0A	; 10
    1f52:	90 e1       	ldi	r25, 0x10	; 16
    1f54:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    1f56:	21 91       	ld	r18, Z+
    1f58:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1f5c:	9e 13       	cpse	r25, r30
    1f5e:	fb cf       	rjmp	.-10     	; 0x1f56 <aes_encrypt+0x1c>
    1f60:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1f62:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1f64:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1f66:	40 e1       	ldi	r20, 0x10	; 16
    1f68:	94 9f       	mul	r25, r20
    1f6a:	90 01       	movw	r18, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	26 17       	cp	r18, r22
    1f70:	37 07       	cpc	r19, r23
    1f72:	7c f5       	brge	.+94     	; 0x1fd2 <aes_encrypt+0x98>
      if(i==0)
    1f74:	91 11       	cpse	r25, r1
    1f76:	03 c0       	rjmp	.+6      	; 0x1f7e <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    1f78:	10 92 3c 01 	sts	0x013C, r1
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1f7e:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	2a 0f       	add	r18, r26
    1f88:	3b 1f       	adc	r19, r27
    1f8a:	e9 01       	movw	r28, r18
    1f8c:	c4 0f       	add	r28, r20
    1f8e:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1f90:	f8 81       	ld	r31, Y
    1f92:	f0 93 3e 01 	sts	0x013E, r31
    1f96:	4f 5f       	subi	r20, 0xFF	; 255
    1f98:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    1f9a:	40 31       	cpi	r20, 0x10	; 16
    1f9c:	51 05       	cpc	r21, r1
    1f9e:	a9 f7       	brne	.-22     	; 0x1f8a <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1fa0:	40 91 3c 01 	lds	r20, 0x013C
    1fa4:	40 68       	ori	r20, 0x80	; 128
    1fa6:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    1faa:	40 91 3d 01 	lds	r20, 0x013D
    1fae:	40 ff       	sbrs	r20, 0
    1fb0:	fc cf       	rjmp	.-8      	; 0x1faa <aes_encrypt+0x70>
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    1fb6:	f0 91 3e 01 	lds	r31, 0x013E
    1fba:	e9 01       	movw	r28, r18
    1fbc:	c4 0f       	add	r28, r20
    1fbe:	d5 1f       	adc	r29, r21
    1fc0:	f8 83       	st	Y, r31
    1fc2:	4f 5f       	subi	r20, 0xFF	; 255
    1fc4:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    1fc6:	40 31       	cpi	r20, 0x10	; 16
    1fc8:	51 05       	cpc	r21, r1
    1fca:	a9 f7       	brne	.-22     	; 0x1fb6 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1fcc:	9f 5f       	subi	r25, 0xFF	; 255
    1fce:	cb cf       	rjmp	.-106    	; 0x1f66 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	08 95       	ret

00001fd8 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1fe2:	61 30       	cpi	r22, 0x01	; 1
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <aes_decrypt+0x10>
    1fe6:	58 c0       	rjmp	.+176    	; 0x2098 <aes_decrypt+0xc0>
    1fe8:	86 2f       	mov	r24, r22
    1fea:	8f 70       	andi	r24, 0x0F	; 15
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <aes_decrypt+0x18>
    1fee:	54 c0       	rjmp	.+168    	; 0x2098 <aes_decrypt+0xc0>
    1ff0:	ee ea       	ldi	r30, 0xAE	; 174
    1ff2:	fa e0       	ldi	r31, 0x0A	; 10
    1ff4:	90 e1       	ldi	r25, 0x10	; 16
    1ff6:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    1ff8:	21 91       	ld	r18, Z+
    1ffa:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1ffe:	9e 13       	cpse	r25, r30
    2000:	fb cf       	rjmp	.-10     	; 0x1ff8 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    2002:	62 95       	swap	r22
    2004:	6f 70       	andi	r22, 0x0F	; 15
    2006:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    2008:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    200a:	6f 3f       	cpi	r22, 0xFF	; 255
    200c:	09 f4       	brne	.+2      	; 0x2010 <aes_decrypt+0x38>
    200e:	45 c0       	rjmp	.+138    	; 0x209a <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    2010:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    2014:	46 2f       	mov	r20, r22
    2016:	55 27       	eor	r21, r21
    2018:	47 fd       	sbrc	r20, 7
    201a:	50 95       	com	r21
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	ed 01       	movw	r28, r26
    2022:	90 e1       	ldi	r25, 0x10	; 16
    2024:	69 02       	muls	r22, r25
    2026:	c0 0d       	add	r28, r0
    2028:	d1 1d       	adc	r29, r1
    202a:	11 24       	eor	r1, r1
    202c:	fe 01       	movw	r30, r28
    202e:	e2 0f       	add	r30, r18
    2030:	f3 1f       	adc	r31, r19
    2032:	90 81       	ld	r25, Z
    2034:	90 93 3e 01 	sts	0x013E, r25
    2038:	2f 5f       	subi	r18, 0xFF	; 255
    203a:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    203c:	20 31       	cpi	r18, 0x10	; 16
    203e:	31 05       	cpc	r19, r1
    2040:	a9 f7       	brne	.-22     	; 0x202c <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    2042:	90 91 3c 01 	lds	r25, 0x013C
    2046:	90 68       	ori	r25, 0x80	; 128
    2048:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    204c:	90 91 3d 01 	lds	r25, 0x013D
    2050:	90 ff       	sbrs	r25, 0
    2052:	fc cf       	rjmp	.-8      	; 0x204c <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    2054:	41 50       	subi	r20, 0x01	; 1
    2056:	51 09       	sbc	r21, r1
    2058:	94 e0       	ldi	r25, 0x04	; 4
    205a:	44 0f       	add	r20, r20
    205c:	55 1f       	adc	r21, r21
    205e:	9a 95       	dec	r25
    2060:	e1 f7       	brne	.-8      	; 0x205a <aes_decrypt+0x82>
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    2066:	90 91 3e 01 	lds	r25, 0x013E
    206a:	8e 01       	movw	r16, r28
    206c:	02 0f       	add	r16, r18
    206e:	13 1f       	adc	r17, r19
    2070:	f8 01       	movw	r30, r16
    2072:	90 83       	st	Z, r25
         if(i!=0)
    2074:	66 23       	and	r22, r22
    2076:	49 f0       	breq	.+18     	; 0x208a <aes_decrypt+0xb2>
    2078:	f9 01       	movw	r30, r18
    207a:	e4 0f       	add	r30, r20
    207c:	f5 1f       	adc	r31, r21
    207e:	ea 0f       	add	r30, r26
    2080:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    2082:	e0 81       	ld	r30, Z
    2084:	9e 27       	eor	r25, r30
    2086:	f8 01       	movw	r30, r16
    2088:	90 83       	st	Z, r25
    208a:	2f 5f       	subi	r18, 0xFF	; 255
    208c:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    208e:	20 31       	cpi	r18, 0x10	; 16
    2090:	31 05       	cpc	r19, r1
    2092:	49 f7       	brne	.-46     	; 0x2066 <aes_decrypt+0x8e>
    2094:	61 50       	subi	r22, 0x01	; 1
    2096:	b9 cf       	rjmp	.-142    	; 0x200a <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	08 95       	ret

000020a4 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    20a4:	80 91 c0 00 	lds	r24, 0x00C0
    20a8:	87 ff       	sbrs	r24, 7
    20aa:	fc cf       	rjmp	.-8      	; 0x20a4 <getc0>
    20ac:	80 91 c0 00 	lds	r24, 0x00C0
    20b0:	8f 77       	andi	r24, 0x7F	; 127
    20b2:	80 93 c0 00 	sts	0x00C0, r24
    20b6:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    20ba:	08 95       	ret

000020bc <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    20bc:	90 91 c0 00 	lds	r25, 0x00C0
    20c0:	95 ff       	sbrs	r25, 5
    20c2:	fc cf       	rjmp	.-8      	; 0x20bc <putc0>
    20c4:	90 91 c0 00 	lds	r25, 0x00C0
    20c8:	9f 7d       	andi	r25, 0xDF	; 223
    20ca:	90 93 c0 00 	sts	0x00C0, r25
    20ce:	80 93 c6 00 	sts	0x00C6, r24
    20d2:	08 95       	ret

000020d4 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    20d4:	8f ef       	ldi	r24, 0xFF	; 255
    20d6:	08 95       	ret

000020d8 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	19 f4       	brne	.+6      	; 0x20e2 <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    20dc:	80 91 c8 00 	lds	r24, 0x00C8
    20e0:	04 c0       	rjmp	.+8      	; 0x20ea <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
    20e2:	81 11       	cpse	r24, r1
    20e4:	06 c0       	rjmp	.+12     	; 0x20f2 <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    20e6:	80 91 c0 00 	lds	r24, 0x00C0
    20ea:	88 1f       	adc	r24, r24
    20ec:	88 27       	eor	r24, r24
    20ee:	88 1f       	adc	r24, r24
    20f0:	08 95       	ret
        }
return 0;
    20f2:	80 e0       	ldi	r24, 0x00	; 0
}
    20f4:	08 95       	ret

000020f6 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    20fa:	fc 01       	movw	r30, r24
    20fc:	24 91       	lpm	r18, Z
    20fe:	ec 01       	movw	r28, r24
    2100:	21 96       	adiw	r28, 0x01	; 1
    2102:	22 23       	and	r18, r18
    2104:	51 f0       	breq	.+20     	; 0x211a <nrk_kprintf+0x24>
        putchar(c);
    2106:	60 91 20 0c 	lds	r22, 0x0C20
    210a:	70 91 21 0c 	lds	r23, 0x0C21
    210e:	82 2f       	mov	r24, r18
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 94 31 	call	0x6328	; 0x6328 <fputc>
    2116:	ce 01       	movw	r24, r28
    2118:	f0 cf       	rjmp	.-32     	; 0x20fa <nrk_kprintf+0x4>
}
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	08 95       	ret

00002120 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    2120:	86 e0       	ldi	r24, 0x06	; 6
    2122:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    2124:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    2126:	88 ef       	ldi	r24, 0xF8	; 248
    2128:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    212a:	80 ef       	ldi	r24, 0xF0	; 240
    212c:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	8d b9       	out	0x0d, r24	; 13
    2132:	08 95       	ret

00002134 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    2134:	0c 94 90 10 	jmp	0x2120	; 0x2120 <PORT_INIT>

00002138 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2138:	8f 3f       	cpi	r24, 0xFF	; 255
    213a:	09 f4       	brne	.+2      	; 0x213e <nrk_gpio_set+0x6>
    213c:	6c c0       	rjmp	.+216    	; 0x2216 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    213e:	e8 2f       	mov	r30, r24
    2140:	e7 70       	andi	r30, 0x07	; 7
    2142:	4e 2f       	mov	r20, r30
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	47 30       	cpi	r20, 0x07	; 7
    2148:	51 05       	cpc	r21, r1
    214a:	08 f0       	brcs	.+2      	; 0x214e <nrk_gpio_set+0x16>
    214c:	64 c0       	rjmp	.+200    	; 0x2216 <nrk_gpio_set+0xde>
    214e:	fa 01       	movw	r30, r20
    2150:	e0 57       	subi	r30, 0x70	; 112
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	86 95       	lsr	r24
    2156:	86 95       	lsr	r24
    2158:	86 95       	lsr	r24
    215a:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    215e:	42 b1       	in	r20, 0x02	; 2
    2160:	21 e0       	ldi	r18, 0x01	; 1
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	b9 01       	movw	r22, r18
    2166:	02 c0       	rjmp	.+4      	; 0x216c <nrk_gpio_set+0x34>
    2168:	66 0f       	add	r22, r22
    216a:	77 1f       	adc	r23, r23
    216c:	8a 95       	dec	r24
    216e:	e2 f7       	brpl	.-8      	; 0x2168 <nrk_gpio_set+0x30>
    2170:	cb 01       	movw	r24, r22
    2172:	84 2b       	or	r24, r20
    2174:	82 b9       	out	0x02, r24	; 2
    2176:	4d c0       	rjmp	.+154    	; 0x2212 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2178:	45 b1       	in	r20, 0x05	; 5
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	b9 01       	movw	r22, r18
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <nrk_gpio_set+0x4e>
    2182:	66 0f       	add	r22, r22
    2184:	77 1f       	adc	r23, r23
    2186:	8a 95       	dec	r24
    2188:	e2 f7       	brpl	.-8      	; 0x2182 <nrk_gpio_set+0x4a>
    218a:	cb 01       	movw	r24, r22
    218c:	84 2b       	or	r24, r20
    218e:	85 b9       	out	0x05, r24	; 5
    2190:	40 c0       	rjmp	.+128    	; 0x2212 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2192:	48 b1       	in	r20, 0x08	; 8
    2194:	21 e0       	ldi	r18, 0x01	; 1
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	b9 01       	movw	r22, r18
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <nrk_gpio_set+0x68>
    219c:	66 0f       	add	r22, r22
    219e:	77 1f       	adc	r23, r23
    21a0:	8a 95       	dec	r24
    21a2:	e2 f7       	brpl	.-8      	; 0x219c <nrk_gpio_set+0x64>
    21a4:	cb 01       	movw	r24, r22
    21a6:	84 2b       	or	r24, r20
    21a8:	88 b9       	out	0x08, r24	; 8
    21aa:	33 c0       	rjmp	.+102    	; 0x2212 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    21ac:	4b b1       	in	r20, 0x0b	; 11
    21ae:	21 e0       	ldi	r18, 0x01	; 1
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	b9 01       	movw	r22, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <nrk_gpio_set+0x82>
    21b6:	66 0f       	add	r22, r22
    21b8:	77 1f       	adc	r23, r23
    21ba:	8a 95       	dec	r24
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <nrk_gpio_set+0x7e>
    21be:	cb 01       	movw	r24, r22
    21c0:	84 2b       	or	r24, r20
    21c2:	8b b9       	out	0x0b, r24	; 11
    21c4:	26 c0       	rjmp	.+76     	; 0x2212 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    21c6:	4e b1       	in	r20, 0x0e	; 14
    21c8:	21 e0       	ldi	r18, 0x01	; 1
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	b9 01       	movw	r22, r18
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <nrk_gpio_set+0x9c>
    21d0:	66 0f       	add	r22, r22
    21d2:	77 1f       	adc	r23, r23
    21d4:	8a 95       	dec	r24
    21d6:	e2 f7       	brpl	.-8      	; 0x21d0 <nrk_gpio_set+0x98>
    21d8:	cb 01       	movw	r24, r22
    21da:	84 2b       	or	r24, r20
    21dc:	8e b9       	out	0x0e, r24	; 14
    21de:	19 c0       	rjmp	.+50     	; 0x2212 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    21e0:	41 b3       	in	r20, 0x11	; 17
    21e2:	21 e0       	ldi	r18, 0x01	; 1
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	b9 01       	movw	r22, r18
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <nrk_gpio_set+0xb6>
    21ea:	66 0f       	add	r22, r22
    21ec:	77 1f       	adc	r23, r23
    21ee:	8a 95       	dec	r24
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <nrk_gpio_set+0xb2>
    21f2:	cb 01       	movw	r24, r22
    21f4:	84 2b       	or	r24, r20
    21f6:	81 bb       	out	0x11, r24	; 17
    21f8:	0c c0       	rjmp	.+24     	; 0x2212 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    21fa:	44 b3       	in	r20, 0x14	; 20
    21fc:	21 e0       	ldi	r18, 0x01	; 1
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	b9 01       	movw	r22, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <nrk_gpio_set+0xd0>
    2204:	66 0f       	add	r22, r22
    2206:	77 1f       	adc	r23, r23
    2208:	8a 95       	dec	r24
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <nrk_gpio_set+0xcc>
    220c:	cb 01       	movw	r24, r22
    220e:	84 2b       	or	r24, r20
    2210:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    2212:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2214:	08 95       	ret
                default: return -1;
    2216:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2218:	08 95       	ret

0000221a <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    221a:	8f 3f       	cpi	r24, 0xFF	; 255
    221c:	09 f4       	brne	.+2      	; 0x2220 <nrk_gpio_clr+0x6>
    221e:	73 c0       	rjmp	.+230    	; 0x2306 <nrk_gpio_clr+0xec>
        switch (pin & 0x07) {
    2220:	e8 2f       	mov	r30, r24
    2222:	e7 70       	andi	r30, 0x07	; 7
    2224:	4e 2f       	mov	r20, r30
    2226:	50 e0       	ldi	r21, 0x00	; 0
    2228:	47 30       	cpi	r20, 0x07	; 7
    222a:	51 05       	cpc	r21, r1
    222c:	08 f0       	brcs	.+2      	; 0x2230 <nrk_gpio_clr+0x16>
    222e:	6b c0       	rjmp	.+214    	; 0x2306 <nrk_gpio_clr+0xec>
    2230:	fa 01       	movw	r30, r20
    2232:	e9 56       	subi	r30, 0x69	; 105
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	86 95       	lsr	r24
    2238:	86 95       	lsr	r24
    223a:	86 95       	lsr	r24
    223c:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2240:	42 b1       	in	r20, 0x02	; 2
    2242:	21 e0       	ldi	r18, 0x01	; 1
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	b9 01       	movw	r22, r18
    2248:	02 c0       	rjmp	.+4      	; 0x224e <nrk_gpio_clr+0x34>
    224a:	66 0f       	add	r22, r22
    224c:	77 1f       	adc	r23, r23
    224e:	8a 95       	dec	r24
    2250:	e2 f7       	brpl	.-8      	; 0x224a <nrk_gpio_clr+0x30>
    2252:	cb 01       	movw	r24, r22
    2254:	80 95       	com	r24
    2256:	84 23       	and	r24, r20
    2258:	82 b9       	out	0x02, r24	; 2
    225a:	53 c0       	rjmp	.+166    	; 0x2302 <nrk_gpio_clr+0xe8>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    225c:	45 b1       	in	r20, 0x05	; 5
    225e:	21 e0       	ldi	r18, 0x01	; 1
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	b9 01       	movw	r22, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <nrk_gpio_clr+0x50>
    2266:	66 0f       	add	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	8a 95       	dec	r24
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <nrk_gpio_clr+0x4c>
    226e:	cb 01       	movw	r24, r22
    2270:	80 95       	com	r24
    2272:	84 23       	and	r24, r20
    2274:	85 b9       	out	0x05, r24	; 5
    2276:	45 c0       	rjmp	.+138    	; 0x2302 <nrk_gpio_clr+0xe8>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2278:	48 b1       	in	r20, 0x08	; 8
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	b9 01       	movw	r22, r18
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <nrk_gpio_clr+0x6c>
    2282:	66 0f       	add	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	8a 95       	dec	r24
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <nrk_gpio_clr+0x68>
    228a:	cb 01       	movw	r24, r22
    228c:	80 95       	com	r24
    228e:	84 23       	and	r24, r20
    2290:	88 b9       	out	0x08, r24	; 8
    2292:	37 c0       	rjmp	.+110    	; 0x2302 <nrk_gpio_clr+0xe8>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2294:	4b b1       	in	r20, 0x0b	; 11
    2296:	21 e0       	ldi	r18, 0x01	; 1
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	b9 01       	movw	r22, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <nrk_gpio_clr+0x88>
    229e:	66 0f       	add	r22, r22
    22a0:	77 1f       	adc	r23, r23
    22a2:	8a 95       	dec	r24
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <nrk_gpio_clr+0x84>
    22a6:	cb 01       	movw	r24, r22
    22a8:	80 95       	com	r24
    22aa:	84 23       	and	r24, r20
    22ac:	8b b9       	out	0x0b, r24	; 11
    22ae:	29 c0       	rjmp	.+82     	; 0x2302 <nrk_gpio_clr+0xe8>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    22b0:	4e b1       	in	r20, 0x0e	; 14
    22b2:	21 e0       	ldi	r18, 0x01	; 1
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	b9 01       	movw	r22, r18
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <nrk_gpio_clr+0xa4>
    22ba:	66 0f       	add	r22, r22
    22bc:	77 1f       	adc	r23, r23
    22be:	8a 95       	dec	r24
    22c0:	e2 f7       	brpl	.-8      	; 0x22ba <nrk_gpio_clr+0xa0>
    22c2:	cb 01       	movw	r24, r22
    22c4:	80 95       	com	r24
    22c6:	84 23       	and	r24, r20
    22c8:	8e b9       	out	0x0e, r24	; 14
    22ca:	1b c0       	rjmp	.+54     	; 0x2302 <nrk_gpio_clr+0xe8>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    22cc:	41 b3       	in	r20, 0x11	; 17
    22ce:	21 e0       	ldi	r18, 0x01	; 1
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	b9 01       	movw	r22, r18
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <nrk_gpio_clr+0xc0>
    22d6:	66 0f       	add	r22, r22
    22d8:	77 1f       	adc	r23, r23
    22da:	8a 95       	dec	r24
    22dc:	e2 f7       	brpl	.-8      	; 0x22d6 <nrk_gpio_clr+0xbc>
    22de:	cb 01       	movw	r24, r22
    22e0:	80 95       	com	r24
    22e2:	84 23       	and	r24, r20
    22e4:	81 bb       	out	0x11, r24	; 17
    22e6:	0d c0       	rjmp	.+26     	; 0x2302 <nrk_gpio_clr+0xe8>
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    22e8:	44 b3       	in	r20, 0x14	; 20
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	b9 01       	movw	r22, r18
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <nrk_gpio_clr+0xdc>
    22f2:	66 0f       	add	r22, r22
    22f4:	77 1f       	adc	r23, r23
    22f6:	8a 95       	dec	r24
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <nrk_gpio_clr+0xd8>
    22fa:	cb 01       	movw	r24, r22
    22fc:	80 95       	com	r24
    22fe:	84 23       	and	r24, r20
    2300:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2304:	08 95       	ret
                default: return -1;
    2306:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2308:	08 95       	ret

0000230a <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    230a:	8f 3f       	cpi	r24, 0xFF	; 255
    230c:	31 f1       	breq	.+76     	; 0x235a <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    230e:	e8 2f       	mov	r30, r24
    2310:	e7 70       	andi	r30, 0x07	; 7
    2312:	4e 2f       	mov	r20, r30
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	47 30       	cpi	r20, 0x07	; 7
    2318:	51 05       	cpc	r21, r1
    231a:	f8 f4       	brcc	.+62     	; 0x235a <nrk_gpio_get+0x50>
    231c:	fa 01       	movw	r30, r20
    231e:	e2 56       	subi	r30, 0x62	; 98
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	28 2f       	mov	r18, r24
    2324:	26 95       	lsr	r18
    2326:	26 95       	lsr	r18
    2328:	26 95       	lsr	r18
    232a:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    232e:	90 b1       	in	r25, 0x00	; 0
    2330:	0b c0       	rjmp	.+22     	; 0x2348 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2332:	93 b1       	in	r25, 0x03	; 3
    2334:	09 c0       	rjmp	.+18     	; 0x2348 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2336:	96 b1       	in	r25, 0x06	; 6
    2338:	07 c0       	rjmp	.+14     	; 0x2348 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    233a:	99 b1       	in	r25, 0x09	; 9
    233c:	05 c0       	rjmp	.+10     	; 0x2348 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    233e:	9c b1       	in	r25, 0x0c	; 12
    2340:	03 c0       	rjmp	.+6      	; 0x2348 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2342:	9f b1       	in	r25, 0x0f	; 15
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    2346:	92 b3       	in	r25, 0x12	; 18
    2348:	89 2f       	mov	r24, r25
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <nrk_gpio_get+0x48>
    234e:	95 95       	asr	r25
    2350:	87 95       	ror	r24
    2352:	2a 95       	dec	r18
    2354:	e2 f7       	brpl	.-8      	; 0x234e <nrk_gpio_get+0x44>
    2356:	81 70       	andi	r24, 0x01	; 1
    2358:	08 95       	ret
                default: return -1;
    235a:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    235c:	08 95       	ret

0000235e <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    235e:	8f 3f       	cpi	r24, 0xFF	; 255
    2360:	09 f4       	brne	.+2      	; 0x2364 <nrk_gpio_toggle+0x6>
    2362:	06 c1       	rjmp	.+524    	; 0x2570 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    2364:	e8 2f       	mov	r30, r24
    2366:	e7 70       	andi	r30, 0x07	; 7
    2368:	4e 2f       	mov	r20, r30
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	47 30       	cpi	r20, 0x07	; 7
    236e:	51 05       	cpc	r21, r1
    2370:	08 f0       	brcs	.+2      	; 0x2374 <nrk_gpio_toggle+0x16>
    2372:	fe c0       	rjmp	.+508    	; 0x2570 <nrk_gpio_toggle+0x212>
    2374:	fa 01       	movw	r30, r20
    2376:	eb 55       	subi	r30, 0x5B	; 91
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	86 95       	lsr	r24
    237c:	86 95       	lsr	r24
    237e:	86 95       	lsr	r24
    2380:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2384:	20 b1       	in	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	08 2e       	mov	r0, r24
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <nrk_gpio_toggle+0x32>
    238c:	35 95       	asr	r19
    238e:	27 95       	ror	r18
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2394:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2396:	20 fd       	sbrc	r18, 0
    2398:	0b c0       	rjmp	.+22     	; 0x23b0 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    239a:	21 e0       	ldi	r18, 0x01	; 1
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	b9 01       	movw	r22, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <nrk_gpio_toggle+0x48>
    23a2:	66 0f       	add	r22, r22
    23a4:	77 1f       	adc	r23, r23
    23a6:	8a 95       	dec	r24
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <nrk_gpio_toggle+0x44>
    23aa:	cb 01       	movw	r24, r22
    23ac:	84 2b       	or	r24, r20
    23ae:	0b c0       	rjmp	.+22     	; 0x23c6 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    23b0:	21 e0       	ldi	r18, 0x01	; 1
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	b9 01       	movw	r22, r18
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <nrk_gpio_toggle+0x5e>
    23b8:	66 0f       	add	r22, r22
    23ba:	77 1f       	adc	r23, r23
    23bc:	8a 95       	dec	r24
    23be:	e2 f7       	brpl	.-8      	; 0x23b8 <nrk_gpio_toggle+0x5a>
    23c0:	cb 01       	movw	r24, r22
    23c2:	80 95       	com	r24
    23c4:	84 23       	and	r24, r20
    23c6:	82 b9       	out	0x02, r24	; 2
    23c8:	16 c0       	rjmp	.+44     	; 0x23f6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    23ca:	23 b1       	in	r18, 0x03	; 3
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	08 2e       	mov	r0, r24
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <nrk_gpio_toggle+0x78>
    23d2:	35 95       	asr	r19
    23d4:	27 95       	ror	r18
    23d6:	0a 94       	dec	r0
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    23da:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    23dc:	20 fd       	sbrc	r18, 0
    23de:	0d c0       	rjmp	.+26     	; 0x23fa <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    23e0:	21 e0       	ldi	r18, 0x01	; 1
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	b9 01       	movw	r22, r18
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <nrk_gpio_toggle+0x8e>
    23e8:	66 0f       	add	r22, r22
    23ea:	77 1f       	adc	r23, r23
    23ec:	8a 95       	dec	r24
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <nrk_gpio_toggle+0x8a>
    23f0:	cb 01       	movw	r24, r22
    23f2:	84 2b       	or	r24, r20
    23f4:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    23fa:	21 e0       	ldi	r18, 0x01	; 1
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	b9 01       	movw	r22, r18
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <nrk_gpio_toggle+0xa8>
    2402:	66 0f       	add	r22, r22
    2404:	77 1f       	adc	r23, r23
    2406:	8a 95       	dec	r24
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <nrk_gpio_toggle+0xa4>
    240a:	cb 01       	movw	r24, r22
    240c:	80 95       	com	r24
    240e:	84 23       	and	r24, r20
    2410:	f1 cf       	rjmp	.-30     	; 0x23f4 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2412:	26 b1       	in	r18, 0x06	; 6
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	08 2e       	mov	r0, r24
    2418:	02 c0       	rjmp	.+4      	; 0x241e <nrk_gpio_toggle+0xc0>
    241a:	35 95       	asr	r19
    241c:	27 95       	ror	r18
    241e:	0a 94       	dec	r0
    2420:	e2 f7       	brpl	.-8      	; 0x241a <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2422:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2424:	20 fd       	sbrc	r18, 0
    2426:	0b c0       	rjmp	.+22     	; 0x243e <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2428:	21 e0       	ldi	r18, 0x01	; 1
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	b9 01       	movw	r22, r18
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <nrk_gpio_toggle+0xd6>
    2430:	66 0f       	add	r22, r22
    2432:	77 1f       	adc	r23, r23
    2434:	8a 95       	dec	r24
    2436:	e2 f7       	brpl	.-8      	; 0x2430 <nrk_gpio_toggle+0xd2>
    2438:	cb 01       	movw	r24, r22
    243a:	84 2b       	or	r24, r20
    243c:	0b c0       	rjmp	.+22     	; 0x2454 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    243e:	21 e0       	ldi	r18, 0x01	; 1
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	b9 01       	movw	r22, r18
    2444:	02 c0       	rjmp	.+4      	; 0x244a <nrk_gpio_toggle+0xec>
    2446:	66 0f       	add	r22, r22
    2448:	77 1f       	adc	r23, r23
    244a:	8a 95       	dec	r24
    244c:	e2 f7       	brpl	.-8      	; 0x2446 <nrk_gpio_toggle+0xe8>
    244e:	cb 01       	movw	r24, r22
    2450:	80 95       	com	r24
    2452:	84 23       	and	r24, r20
    2454:	88 b9       	out	0x08, r24	; 8
    2456:	cf cf       	rjmp	.-98     	; 0x23f6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2458:	29 b1       	in	r18, 0x09	; 9
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	08 2e       	mov	r0, r24
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <nrk_gpio_toggle+0x106>
    2460:	35 95       	asr	r19
    2462:	27 95       	ror	r18
    2464:	0a 94       	dec	r0
    2466:	e2 f7       	brpl	.-8      	; 0x2460 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2468:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    246a:	20 fd       	sbrc	r18, 0
    246c:	0b c0       	rjmp	.+22     	; 0x2484 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    246e:	21 e0       	ldi	r18, 0x01	; 1
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	b9 01       	movw	r22, r18
    2474:	02 c0       	rjmp	.+4      	; 0x247a <nrk_gpio_toggle+0x11c>
    2476:	66 0f       	add	r22, r22
    2478:	77 1f       	adc	r23, r23
    247a:	8a 95       	dec	r24
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <nrk_gpio_toggle+0x118>
    247e:	cb 01       	movw	r24, r22
    2480:	84 2b       	or	r24, r20
    2482:	0b c0       	rjmp	.+22     	; 0x249a <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    2484:	21 e0       	ldi	r18, 0x01	; 1
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	b9 01       	movw	r22, r18
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <nrk_gpio_toggle+0x132>
    248c:	66 0f       	add	r22, r22
    248e:	77 1f       	adc	r23, r23
    2490:	8a 95       	dec	r24
    2492:	e2 f7       	brpl	.-8      	; 0x248c <nrk_gpio_toggle+0x12e>
    2494:	cb 01       	movw	r24, r22
    2496:	80 95       	com	r24
    2498:	84 23       	and	r24, r20
    249a:	8b b9       	out	0x0b, r24	; 11
    249c:	ac cf       	rjmp	.-168    	; 0x23f6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    249e:	2c b1       	in	r18, 0x0c	; 12
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	08 2e       	mov	r0, r24
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <nrk_gpio_toggle+0x14c>
    24a6:	35 95       	asr	r19
    24a8:	27 95       	ror	r18
    24aa:	0a 94       	dec	r0
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    24ae:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    24b0:	20 fd       	sbrc	r18, 0
    24b2:	0b c0       	rjmp	.+22     	; 0x24ca <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    24b4:	21 e0       	ldi	r18, 0x01	; 1
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	b9 01       	movw	r22, r18
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <nrk_gpio_toggle+0x162>
    24bc:	66 0f       	add	r22, r22
    24be:	77 1f       	adc	r23, r23
    24c0:	8a 95       	dec	r24
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <nrk_gpio_toggle+0x15e>
    24c4:	cb 01       	movw	r24, r22
    24c6:	84 2b       	or	r24, r20
    24c8:	0b c0       	rjmp	.+22     	; 0x24e0 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    24ca:	21 e0       	ldi	r18, 0x01	; 1
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	b9 01       	movw	r22, r18
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <nrk_gpio_toggle+0x178>
    24d2:	66 0f       	add	r22, r22
    24d4:	77 1f       	adc	r23, r23
    24d6:	8a 95       	dec	r24
    24d8:	e2 f7       	brpl	.-8      	; 0x24d2 <nrk_gpio_toggle+0x174>
    24da:	cb 01       	movw	r24, r22
    24dc:	80 95       	com	r24
    24de:	84 23       	and	r24, r20
    24e0:	8e b9       	out	0x0e, r24	; 14
    24e2:	89 cf       	rjmp	.-238    	; 0x23f6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    24e4:	2f b1       	in	r18, 0x0f	; 15
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	08 2e       	mov	r0, r24
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <nrk_gpio_toggle+0x192>
    24ec:	35 95       	asr	r19
    24ee:	27 95       	ror	r18
    24f0:	0a 94       	dec	r0
    24f2:	e2 f7       	brpl	.-8      	; 0x24ec <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    24f4:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    24f6:	20 fd       	sbrc	r18, 0
    24f8:	0b c0       	rjmp	.+22     	; 0x2510 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    24fa:	21 e0       	ldi	r18, 0x01	; 1
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	b9 01       	movw	r22, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <nrk_gpio_toggle+0x1a8>
    2502:	66 0f       	add	r22, r22
    2504:	77 1f       	adc	r23, r23
    2506:	8a 95       	dec	r24
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <nrk_gpio_toggle+0x1a4>
    250a:	cb 01       	movw	r24, r22
    250c:	84 2b       	or	r24, r20
    250e:	0b c0       	rjmp	.+22     	; 0x2526 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2510:	21 e0       	ldi	r18, 0x01	; 1
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	b9 01       	movw	r22, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <nrk_gpio_toggle+0x1be>
    2518:	66 0f       	add	r22, r22
    251a:	77 1f       	adc	r23, r23
    251c:	8a 95       	dec	r24
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <nrk_gpio_toggle+0x1ba>
    2520:	cb 01       	movw	r24, r22
    2522:	80 95       	com	r24
    2524:	84 23       	and	r24, r20
    2526:	81 bb       	out	0x11, r24	; 17
    2528:	66 cf       	rjmp	.-308    	; 0x23f6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    252a:	22 b3       	in	r18, 0x12	; 18
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	08 2e       	mov	r0, r24
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <nrk_gpio_toggle+0x1d8>
    2532:	35 95       	asr	r19
    2534:	27 95       	ror	r18
    2536:	0a 94       	dec	r0
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    253a:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    253c:	20 fd       	sbrc	r18, 0
    253e:	0b c0       	rjmp	.+22     	; 0x2556 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2540:	21 e0       	ldi	r18, 0x01	; 1
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	b9 01       	movw	r22, r18
    2546:	02 c0       	rjmp	.+4      	; 0x254c <nrk_gpio_toggle+0x1ee>
    2548:	66 0f       	add	r22, r22
    254a:	77 1f       	adc	r23, r23
    254c:	8a 95       	dec	r24
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <nrk_gpio_toggle+0x1ea>
    2550:	cb 01       	movw	r24, r22
    2552:	84 2b       	or	r24, r20
    2554:	0b c0       	rjmp	.+22     	; 0x256c <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    2556:	21 e0       	ldi	r18, 0x01	; 1
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	b9 01       	movw	r22, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <nrk_gpio_toggle+0x204>
    255e:	66 0f       	add	r22, r22
    2560:	77 1f       	adc	r23, r23
    2562:	8a 95       	dec	r24
    2564:	e2 f7       	brpl	.-8      	; 0x255e <nrk_gpio_toggle+0x200>
    2566:	cb 01       	movw	r24, r22
    2568:	80 95       	com	r24
    256a:	84 23       	and	r24, r20
    256c:	84 bb       	out	0x14, r24	; 20
    256e:	43 cf       	rjmp	.-378    	; 0x23f6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    2570:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2572:	08 95       	ret

00002574 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2574:	8f 3f       	cpi	r24, 0xFF	; 255
    2576:	09 f4       	brne	.+2      	; 0x257a <nrk_gpio_direction+0x6>
    2578:	d5 c0       	rjmp	.+426    	; 0x2724 <nrk_gpio_direction+0x1b0>
    257a:	e8 2f       	mov	r30, r24
    257c:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    257e:	4e 2f       	mov	r20, r30
    2580:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    2582:	61 11       	cpse	r22, r1
    2584:	67 c0       	rjmp	.+206    	; 0x2654 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    2586:	47 30       	cpi	r20, 0x07	; 7
    2588:	51 05       	cpc	r21, r1
    258a:	08 f0       	brcs	.+2      	; 0x258e <nrk_gpio_direction+0x1a>
    258c:	cb c0       	rjmp	.+406    	; 0x2724 <nrk_gpio_direction+0x1b0>
    258e:	fa 01       	movw	r30, r20
    2590:	e4 55       	subi	r30, 0x54	; 84
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	86 95       	lsr	r24
    2596:	86 95       	lsr	r24
    2598:	86 95       	lsr	r24
    259a:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    259e:	41 b1       	in	r20, 0x01	; 1
    25a0:	21 e0       	ldi	r18, 0x01	; 1
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	b9 01       	movw	r22, r18
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <nrk_gpio_direction+0x38>
    25a8:	66 0f       	add	r22, r22
    25aa:	77 1f       	adc	r23, r23
    25ac:	8a 95       	dec	r24
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <nrk_gpio_direction+0x34>
    25b0:	cb 01       	movw	r24, r22
    25b2:	80 95       	com	r24
    25b4:	84 23       	and	r24, r20
    25b6:	65 c0       	rjmp	.+202    	; 0x2682 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    25b8:	44 b1       	in	r20, 0x04	; 4
    25ba:	21 e0       	ldi	r18, 0x01	; 1
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	b9 01       	movw	r22, r18
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <nrk_gpio_direction+0x52>
    25c2:	66 0f       	add	r22, r22
    25c4:	77 1f       	adc	r23, r23
    25c6:	8a 95       	dec	r24
    25c8:	e2 f7       	brpl	.-8      	; 0x25c2 <nrk_gpio_direction+0x4e>
    25ca:	cb 01       	movw	r24, r22
    25cc:	80 95       	com	r24
    25ce:	84 23       	and	r24, r20
    25d0:	65 c0       	rjmp	.+202    	; 0x269c <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    25d2:	47 b1       	in	r20, 0x07	; 7
    25d4:	21 e0       	ldi	r18, 0x01	; 1
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	b9 01       	movw	r22, r18
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <nrk_gpio_direction+0x6c>
    25dc:	66 0f       	add	r22, r22
    25de:	77 1f       	adc	r23, r23
    25e0:	8a 95       	dec	r24
    25e2:	e2 f7       	brpl	.-8      	; 0x25dc <nrk_gpio_direction+0x68>
    25e4:	cb 01       	movw	r24, r22
    25e6:	80 95       	com	r24
    25e8:	84 23       	and	r24, r20
    25ea:	65 c0       	rjmp	.+202    	; 0x26b6 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    25ec:	4a b1       	in	r20, 0x0a	; 10
    25ee:	21 e0       	ldi	r18, 0x01	; 1
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	b9 01       	movw	r22, r18
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <nrk_gpio_direction+0x86>
    25f6:	66 0f       	add	r22, r22
    25f8:	77 1f       	adc	r23, r23
    25fa:	8a 95       	dec	r24
    25fc:	e2 f7       	brpl	.-8      	; 0x25f6 <nrk_gpio_direction+0x82>
    25fe:	cb 01       	movw	r24, r22
    2600:	80 95       	com	r24
    2602:	84 23       	and	r24, r20
    2604:	65 c0       	rjmp	.+202    	; 0x26d0 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2606:	4d b1       	in	r20, 0x0d	; 13
    2608:	21 e0       	ldi	r18, 0x01	; 1
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	b9 01       	movw	r22, r18
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <nrk_gpio_direction+0xa0>
    2610:	66 0f       	add	r22, r22
    2612:	77 1f       	adc	r23, r23
    2614:	8a 95       	dec	r24
    2616:	e2 f7       	brpl	.-8      	; 0x2610 <nrk_gpio_direction+0x9c>
    2618:	cb 01       	movw	r24, r22
    261a:	80 95       	com	r24
    261c:	84 23       	and	r24, r20
    261e:	65 c0       	rjmp	.+202    	; 0x26ea <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    2620:	40 b3       	in	r20, 0x10	; 16
    2622:	21 e0       	ldi	r18, 0x01	; 1
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	b9 01       	movw	r22, r18
    2628:	02 c0       	rjmp	.+4      	; 0x262e <nrk_gpio_direction+0xba>
    262a:	66 0f       	add	r22, r22
    262c:	77 1f       	adc	r23, r23
    262e:	8a 95       	dec	r24
    2630:	e2 f7       	brpl	.-8      	; 0x262a <nrk_gpio_direction+0xb6>
    2632:	cb 01       	movw	r24, r22
    2634:	80 95       	com	r24
    2636:	84 23       	and	r24, r20
    2638:	65 c0       	rjmp	.+202    	; 0x2704 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    263a:	43 b3       	in	r20, 0x13	; 19
    263c:	21 e0       	ldi	r18, 0x01	; 1
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	b9 01       	movw	r22, r18
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <nrk_gpio_direction+0xd4>
    2644:	66 0f       	add	r22, r22
    2646:	77 1f       	adc	r23, r23
    2648:	8a 95       	dec	r24
    264a:	e2 f7       	brpl	.-8      	; 0x2644 <nrk_gpio_direction+0xd0>
    264c:	cb 01       	movw	r24, r22
    264e:	80 95       	com	r24
    2650:	84 23       	and	r24, r20
    2652:	65 c0       	rjmp	.+202    	; 0x271e <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    2654:	47 30       	cpi	r20, 0x07	; 7
    2656:	51 05       	cpc	r21, r1
    2658:	08 f0       	brcs	.+2      	; 0x265c <nrk_gpio_direction+0xe8>
    265a:	64 c0       	rjmp	.+200    	; 0x2724 <nrk_gpio_direction+0x1b0>
    265c:	fa 01       	movw	r30, r20
    265e:	ed 54       	subi	r30, 0x4D	; 77
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	86 95       	lsr	r24
    2664:	86 95       	lsr	r24
    2666:	86 95       	lsr	r24
    2668:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    266c:	41 b1       	in	r20, 0x01	; 1
    266e:	21 e0       	ldi	r18, 0x01	; 1
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	b9 01       	movw	r22, r18
    2674:	02 c0       	rjmp	.+4      	; 0x267a <nrk_gpio_direction+0x106>
    2676:	66 0f       	add	r22, r22
    2678:	77 1f       	adc	r23, r23
    267a:	8a 95       	dec	r24
    267c:	e2 f7       	brpl	.-8      	; 0x2676 <nrk_gpio_direction+0x102>
    267e:	cb 01       	movw	r24, r22
    2680:	84 2b       	or	r24, r20
    2682:	81 b9       	out	0x01, r24	; 1
    2684:	4d c0       	rjmp	.+154    	; 0x2720 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    2686:	44 b1       	in	r20, 0x04	; 4
    2688:	21 e0       	ldi	r18, 0x01	; 1
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	b9 01       	movw	r22, r18
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <nrk_gpio_direction+0x120>
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	8a 95       	dec	r24
    2696:	e2 f7       	brpl	.-8      	; 0x2690 <nrk_gpio_direction+0x11c>
    2698:	cb 01       	movw	r24, r22
    269a:	84 2b       	or	r24, r20
    269c:	84 b9       	out	0x04, r24	; 4
    269e:	40 c0       	rjmp	.+128    	; 0x2720 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    26a0:	47 b1       	in	r20, 0x07	; 7
    26a2:	21 e0       	ldi	r18, 0x01	; 1
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	b9 01       	movw	r22, r18
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <nrk_gpio_direction+0x13a>
    26aa:	66 0f       	add	r22, r22
    26ac:	77 1f       	adc	r23, r23
    26ae:	8a 95       	dec	r24
    26b0:	e2 f7       	brpl	.-8      	; 0x26aa <nrk_gpio_direction+0x136>
    26b2:	cb 01       	movw	r24, r22
    26b4:	84 2b       	or	r24, r20
    26b6:	87 b9       	out	0x07, r24	; 7
    26b8:	33 c0       	rjmp	.+102    	; 0x2720 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    26ba:	4a b1       	in	r20, 0x0a	; 10
    26bc:	21 e0       	ldi	r18, 0x01	; 1
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	b9 01       	movw	r22, r18
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <nrk_gpio_direction+0x154>
    26c4:	66 0f       	add	r22, r22
    26c6:	77 1f       	adc	r23, r23
    26c8:	8a 95       	dec	r24
    26ca:	e2 f7       	brpl	.-8      	; 0x26c4 <nrk_gpio_direction+0x150>
    26cc:	cb 01       	movw	r24, r22
    26ce:	84 2b       	or	r24, r20
    26d0:	8a b9       	out	0x0a, r24	; 10
    26d2:	26 c0       	rjmp	.+76     	; 0x2720 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    26d4:	4d b1       	in	r20, 0x0d	; 13
    26d6:	21 e0       	ldi	r18, 0x01	; 1
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	b9 01       	movw	r22, r18
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <nrk_gpio_direction+0x16e>
    26de:	66 0f       	add	r22, r22
    26e0:	77 1f       	adc	r23, r23
    26e2:	8a 95       	dec	r24
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <nrk_gpio_direction+0x16a>
    26e6:	cb 01       	movw	r24, r22
    26e8:	84 2b       	or	r24, r20
    26ea:	8d b9       	out	0x0d, r24	; 13
    26ec:	19 c0       	rjmp	.+50     	; 0x2720 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    26ee:	40 b3       	in	r20, 0x10	; 16
    26f0:	21 e0       	ldi	r18, 0x01	; 1
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	b9 01       	movw	r22, r18
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <nrk_gpio_direction+0x188>
    26f8:	66 0f       	add	r22, r22
    26fa:	77 1f       	adc	r23, r23
    26fc:	8a 95       	dec	r24
    26fe:	e2 f7       	brpl	.-8      	; 0x26f8 <nrk_gpio_direction+0x184>
    2700:	cb 01       	movw	r24, r22
    2702:	84 2b       	or	r24, r20
    2704:	80 bb       	out	0x10, r24	; 16
    2706:	0c c0       	rjmp	.+24     	; 0x2720 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2708:	43 b3       	in	r20, 0x13	; 19
    270a:	21 e0       	ldi	r18, 0x01	; 1
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	b9 01       	movw	r22, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <nrk_gpio_direction+0x1a2>
    2712:	66 0f       	add	r22, r22
    2714:	77 1f       	adc	r23, r23
    2716:	8a 95       	dec	r24
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <nrk_gpio_direction+0x19e>
    271a:	cb 01       	movw	r24, r22
    271c:	84 2b       	or	r24, r20
    271e:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2722:	08 95       	ret
                        default: return -1;
    2724:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    2726:	08 95       	ret

00002728 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2728:	81 11       	cpse	r24, r1
    272a:	06 c0       	rjmp	.+12     	; 0x2738 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    272c:	80 b1       	in	r24, 0x00	; 0
    272e:	86 95       	lsr	r24
    2730:	81 70       	andi	r24, 0x01	; 1
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	89 27       	eor	r24, r25
    2736:	08 95       	ret
	} 
return -1;
    2738:	8f ef       	ldi	r24, 0xFF	; 255
}
    273a:	08 95       	ret

0000273c <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	11 f4       	brne	.+4      	; 0x2744 <nrk_led_toggle+0x8>
    2740:	83 e2       	ldi	r24, 0x23	; 35
    2742:	0d c0       	rjmp	.+26     	; 0x275e <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	91 05       	cpc	r25, r1
    2748:	11 f4       	brne	.+4      	; 0x274e <nrk_led_toggle+0x12>
    274a:	8b e2       	ldi	r24, 0x2B	; 43
    274c:	08 c0       	rjmp	.+16     	; 0x275e <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    274e:	82 30       	cpi	r24, 0x02	; 2
    2750:	91 05       	cpc	r25, r1
    2752:	11 f4       	brne	.+4      	; 0x2758 <nrk_led_toggle+0x1c>
    2754:	83 e3       	ldi	r24, 0x33	; 51
    2756:	03 c0       	rjmp	.+6      	; 0x275e <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2758:	03 97       	sbiw	r24, 0x03	; 3
    275a:	29 f4       	brne	.+10     	; 0x2766 <nrk_led_toggle+0x2a>
    275c:	8b e3       	ldi	r24, 0x3B	; 59
    275e:	0e 94 af 11 	call	0x235e	; 0x235e <nrk_gpio_toggle>
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	08 95       	ret
return -1;
    2766:	8f ef       	ldi	r24, 0xFF	; 255
}
    2768:	08 95       	ret

0000276a <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	11 f4       	brne	.+4      	; 0x2772 <nrk_led_clr+0x8>
    276e:	83 e2       	ldi	r24, 0x23	; 35
    2770:	0d c0       	rjmp	.+26     	; 0x278c <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    2772:	81 30       	cpi	r24, 0x01	; 1
    2774:	91 05       	cpc	r25, r1
    2776:	11 f4       	brne	.+4      	; 0x277c <nrk_led_clr+0x12>
    2778:	8b e2       	ldi	r24, 0x2B	; 43
    277a:	08 c0       	rjmp	.+16     	; 0x278c <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    277c:	82 30       	cpi	r24, 0x02	; 2
    277e:	91 05       	cpc	r25, r1
    2780:	11 f4       	brne	.+4      	; 0x2786 <nrk_led_clr+0x1c>
    2782:	83 e3       	ldi	r24, 0x33	; 51
    2784:	03 c0       	rjmp	.+6      	; 0x278c <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    2786:	03 97       	sbiw	r24, 0x03	; 3
    2788:	29 f4       	brne	.+10     	; 0x2794 <nrk_led_clr+0x2a>
    278a:	8b e3       	ldi	r24, 0x3B	; 59
    278c:	0e 94 9c 10 	call	0x2138	; 0x2138 <nrk_gpio_set>
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	08 95       	ret
return -1;
    2794:	8f ef       	ldi	r24, 0xFF	; 255
}
    2796:	08 95       	ret

00002798 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	11 f4       	brne	.+4      	; 0x27a0 <nrk_led_set+0x8>
    279c:	83 e2       	ldi	r24, 0x23	; 35
    279e:	0d c0       	rjmp	.+26     	; 0x27ba <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	91 05       	cpc	r25, r1
    27a4:	11 f4       	brne	.+4      	; 0x27aa <nrk_led_set+0x12>
    27a6:	8b e2       	ldi	r24, 0x2B	; 43
    27a8:	08 c0       	rjmp	.+16     	; 0x27ba <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    27aa:	82 30       	cpi	r24, 0x02	; 2
    27ac:	91 05       	cpc	r25, r1
    27ae:	11 f4       	brne	.+4      	; 0x27b4 <nrk_led_set+0x1c>
    27b0:	83 e3       	ldi	r24, 0x33	; 51
    27b2:	03 c0       	rjmp	.+6      	; 0x27ba <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    27b4:	03 97       	sbiw	r24, 0x03	; 3
    27b6:	29 f4       	brne	.+10     	; 0x27c2 <nrk_led_set+0x2a>
    27b8:	8b e3       	ldi	r24, 0x3B	; 59
    27ba:	0e 94 0d 11 	call	0x221a	; 0x221a <nrk_gpio_clr>
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	08 95       	ret
return -1;
    27c2:	8f ef       	ldi	r24, 0xFF	; 255
}
    27c4:	08 95       	ret

000027c6 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    27c6:	88 23       	and	r24, r24
    27c8:	19 f0       	breq	.+6      	; 0x27d0 <nrk_gpio_pullups+0xa>
    27ca:	85 b7       	in	r24, 0x35	; 53
    27cc:	8f 7e       	andi	r24, 0xEF	; 239
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    27d0:	85 b7       	in	r24, 0x35	; 53
    27d2:	80 61       	ori	r24, 0x10	; 16
    27d4:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	08 95       	ret

000027da <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    27da:	90 91 c8 00 	lds	r25, 0x00C8
    27de:	95 ff       	sbrs	r25, 5
    27e0:	fc cf       	rjmp	.-8      	; 0x27da <putc1>
    27e2:	80 93 ce 00 	sts	0x00CE, r24
    27e6:	08 95       	ret

000027e8 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    27e8:	90 93 c5 00 	sts	0x00C5, r25
    27ec:	80 93 c4 00 	sts	0x00C4, r24
    27f0:	86 e0       	ldi	r24, 0x06	; 6
    27f2:	80 93 c2 00 	sts	0x00C2, r24
    27f6:	e1 ec       	ldi	r30, 0xC1	; 193
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	8b 7f       	andi	r24, 0xFB	; 251
    27fe:	80 83       	st	Z, r24
    2800:	a0 ec       	ldi	r26, 0xC0	; 192
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	8c 91       	ld	r24, X
    2806:	82 60       	ori	r24, 0x02	; 2
    2808:	8c 93       	st	X, r24
ENABLE_UART0();
    280a:	80 81       	ld	r24, Z
    280c:	88 61       	ori	r24, 0x18	; 24
    280e:	80 83       	st	Z, r24
    2810:	08 95       	ret

00002812 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2812:	90 93 cd 00 	sts	0x00CD, r25
    2816:	80 93 cc 00 	sts	0x00CC, r24
    281a:	86 e0       	ldi	r24, 0x06	; 6
    281c:	80 93 ca 00 	sts	0x00CA, r24
    2820:	e9 ec       	ldi	r30, 0xC9	; 201
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	8b 7f       	andi	r24, 0xFB	; 251
    2828:	80 83       	st	Z, r24
    282a:	a8 ec       	ldi	r26, 0xC8	; 200
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	8c 91       	ld	r24, X
    2830:	82 60       	ori	r24, 0x02	; 2
    2832:	8c 93       	st	X, r24
ENABLE_UART1();
    2834:	80 81       	ld	r24, Z
    2836:	88 61       	ori	r24, 0x18	; 24
    2838:	80 83       	st	Z, r24
    283a:	08 95       	ret

0000283c <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2840:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    2844:	62 e5       	ldi	r22, 0x52	; 82
    2846:	70 e1       	ldi	r23, 0x10	; 16
    2848:	8e e5       	ldi	r24, 0x5E	; 94
    284a:	90 e1       	ldi	r25, 0x10	; 16
    284c:	0e 94 49 31 	call	0x6292	; 0x6292 <fdevopen>
    2850:	ce e1       	ldi	r28, 0x1E	; 30
    2852:	dc e0       	ldi	r29, 0x0C	; 12
    2854:	9b 83       	std	Y+3, r25	; 0x03
    2856:	8a 83       	std	Y+2, r24	; 0x02
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    2858:	62 e5       	ldi	r22, 0x52	; 82
    285a:	70 e1       	ldi	r23, 0x10	; 16
    285c:	8e e5       	ldi	r24, 0x5E	; 94
    285e:	90 e1       	ldi	r25, 0x10	; 16
    2860:	0e 94 49 31 	call	0x6292	; 0x6292 <fdevopen>
    2864:	99 83       	std	Y+1, r25	; 0x01
    2866:	88 83       	st	Y, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	08 95       	ret

0000286e <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    286e:	80 91 c8 00 	lds	r24, 0x00C8
    2872:	87 ff       	sbrs	r24, 7
    2874:	fc cf       	rjmp	.-8      	; 0x286e <getc1>
    2876:	80 91 c8 00 	lds	r24, 0x00C8
    287a:	8f 77       	andi	r24, 0x7F	; 127
    287c:	80 93 c8 00 	sts	0x00C8, r24
    2880:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    2884:	08 95       	ret

00002886 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	d1 f7       	brne	.-12     	; 0x2886 <halWait>

} // halWait
    2892:	08 95       	ret

00002894 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    2894:	0c 94 a4 32 	jmp	0x6548	; 0x6548 <__eerd_byte_m128rfa1>

00002898 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2898:	0e 94 ac 32 	call	0x6558	; 0x6558 <__eewr_byte_m128rfa1>
}
    289c:	08 95       	ret

0000289e <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    289e:	ef 92       	push	r14
    28a0:	ff 92       	push	r15
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	0e 94 a4 32 	call	0x6548	; 0x6548 <__eerd_byte_m128rfa1>
    28b4:	18 2f       	mov	r17, r24
    28b6:	f7 01       	movw	r30, r14
    28b8:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 94 a4 32 	call	0x6548	; 0x6548 <__eerd_byte_m128rfa1>
    28c2:	08 2f       	mov	r16, r24
    28c4:	f7 01       	movw	r30, r14
    28c6:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0e 94 a4 32 	call	0x6548	; 0x6548 <__eerd_byte_m128rfa1>
    28d0:	d8 2f       	mov	r29, r24
    28d2:	f7 01       	movw	r30, r14
    28d4:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    28d6:	83 e0       	ldi	r24, 0x03	; 3
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 a4 32 	call	0x6548	; 0x6548 <__eerd_byte_m128rfa1>
    28de:	c8 2f       	mov	r28, r24
    28e0:	f7 01       	movw	r30, r14
    28e2:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    28e4:	84 e0       	ldi	r24, 0x04	; 4
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 a4 32 	call	0x6548	; 0x6548 <__eerd_byte_m128rfa1>
    28ec:	10 0f       	add	r17, r16
    28ee:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    28f0:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    28f2:	8c 17       	cp	r24, r28
    28f4:	11 f0       	breq	.+4      	; 0x28fa <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    28f6:	8f ef       	ldi	r24, 0xFF	; 255
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    28fa:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	ff 90       	pop	r15
    2906:	ef 90       	pop	r14
    2908:	08 95       	ret

0000290a <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    2910:	85 e0       	ldi	r24, 0x05	; 5
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	0e 94 a4 32 	call	0x6548	; 0x6548 <__eerd_byte_m128rfa1>
    2918:	88 83       	st	Y, r24
return NRK_OK;
}
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

00002922 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2922:	fc 01       	movw	r30, r24
    2924:	60 81       	ld	r22, Z
    2926:	86 e0       	ldi	r24, 0x06	; 6
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	0e 94 ac 32 	call	0x6558	; 0x6558 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	08 95       	ret

00002932 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2938:	86 e0       	ldi	r24, 0x06	; 6
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 a4 32 	call	0x6548	; 0x6548 <__eerd_byte_m128rfa1>
    2940:	88 83       	st	Y, r24
  return NRK_OK;
}
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	df 91       	pop	r29
    2946:	cf 91       	pop	r28
    2948:	08 95       	ret

0000294a <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	8c 01       	movw	r16, r24
    2954:	c0 e0       	ldi	r28, 0x00	; 0
    2956:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2958:	ce 01       	movw	r24, r28
    295a:	08 96       	adiw	r24, 0x08	; 8
    295c:	0e 94 a4 32 	call	0x6548	; 0x6548 <__eerd_byte_m128rfa1>
    2960:	f8 01       	movw	r30, r16
    2962:	81 93       	st	Z+, r24
    2964:	8f 01       	movw	r16, r30
    2966:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2968:	c0 31       	cpi	r28, 0x10	; 16
    296a:	d1 05       	cpc	r29, r1
    296c:	a9 f7       	brne	.-22     	; 0x2958 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	08 95       	ret

0000297a <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	8c 01       	movw	r16, r24
    2984:	c0 e0       	ldi	r28, 0x00	; 0
    2986:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    2988:	f8 01       	movw	r30, r16
    298a:	61 91       	ld	r22, Z+
    298c:	8f 01       	movw	r16, r30
    298e:	ce 01       	movw	r24, r28
    2990:	08 96       	adiw	r24, 0x08	; 8
    2992:	0e 94 ac 32 	call	0x6558	; 0x6558 <__eewr_byte_m128rfa1>
    2996:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2998:	c0 31       	cpi	r28, 0x10	; 16
    299a:	d1 05       	cpc	r29, r1
    299c:	a9 f7       	brne	.-22     	; 0x2988 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    29b0:	87 e0       	ldi	r24, 0x07	; 7
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	0e 94 a4 32 	call	0x6548	; 0x6548 <__eerd_byte_m128rfa1>
    29b8:	88 83       	st	Y, r24
  return NRK_OK;
}
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	08 95       	ret

000029c2 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    29c2:	fc 01       	movw	r30, r24
    29c4:	60 81       	ld	r22, Z
    29c6:	87 e0       	ldi	r24, 0x07	; 7
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	0e 94 ac 32 	call	0x6558	; 0x6558 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	08 95       	ret

000029d2 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    29d2:	f8 94       	cli
    29d4:	08 95       	ret

000029d6 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    29d6:	78 94       	sei
    29d8:	08 95       	ret

000029da <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    29da:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
while(1);
    29de:	ff cf       	rjmp	.-2      	; 0x29de <nrk_halt+0x4>

000029e0 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	a3 97       	sbiw	r28, 0x23	; 35
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    29f4:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <nrk_signal_create>
    29f8:	80 93 ab 0b 	sts	0x0BAB, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    29fc:	8f 3f       	cpi	r24, 0xFF	; 255
    29fe:	21 f4       	brne	.+8      	; 0x2a08 <nrk_init+0x28>
    2a00:	60 e0       	ldi	r22, 0x00	; 0
    2a02:	8e e0       	ldi	r24, 0x0E	; 14
    2a04:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    2a08:	0e 94 10 2c 	call	0x5820	; 0x5820 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    2a0c:	80 ff       	sbrs	r24, 0
    2a0e:	04 c0       	rjmp	.+8      	; 0x2a18 <nrk_init+0x38>
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	86 e0       	ldi	r24, 0x06	; 6
    2a14:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
	   }
   #endif
   #endif

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
    2a18:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <nrk_watchdog_check>
    2a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a1e:	31 f4       	brne	.+12     	; 0x2a2c <nrk_init+0x4c>
	{
    	nrk_watchdog_disable();
    2a20:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <nrk_watchdog_disable>
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    2a24:	60 e0       	ldi	r22, 0x00	; 0
    2a26:	80 e1       	ldi	r24, 0x10	; 16
    2a28:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
	}
    nrk_watchdog_enable();
    2a2c:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <nrk_watchdog_enable>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2a30:	10 92 ae 0b 	sts	0x0BAE, r1
    nrk_cur_task_TCB = NULL;
    2a34:	10 92 bc 0b 	sts	0x0BBC, r1
    2a38:	10 92 bb 0b 	sts	0x0BBB, r1
    
    nrk_high_ready_TCB = NULL;
    2a3c:	10 92 ad 0b 	sts	0x0BAD, r1
    2a40:	10 92 ac 0b 	sts	0x0BAC, r1
    nrk_high_ready_prio = 0; 
    2a44:	10 92 bd 0b 	sts	0x0BBD, r1

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
    2a48:	0e 94 93 16 	call	0x2d26	; 0x2d26 <nrk_stats_reset>
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2a4c:	10 92 ba 0b 	sts	0x0BBA, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2a50:	8f ef       	ldi	r24, 0xFF	; 255
    2a52:	80 93 a7 0b 	sts	0x0BA7, r24
    nrk_sem_list[i].value=-1;
    2a56:	80 93 a9 0b 	sts	0x0BA9, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2a5a:	80 93 a8 0b 	sts	0x0BA8, r24
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2a62:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    2a64:	2f ef       	ldi	r18, 0xFF	; 255
    2a66:	fc 01       	movw	r30, r24
    2a68:	e2 53       	subi	r30, 0x32	; 50
    2a6a:	f5 4f       	sbci	r31, 0xF5	; 245
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2a6c:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    2a6e:	20 87       	std	Z+8, r18	; 0x08
    2a70:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    2a72:	87 3d       	cpi	r24, 0xD7	; 215
    2a74:	91 05       	cpc	r25, r1
    2a76:	b9 f7       	brne	.-18     	; 0x2a66 <nrk_init+0x86>
    2a78:	e7 ef       	ldi	r30, 0xF7	; 247
    2a7a:	fb e0       	ldi	r31, 0x0B	; 11
    2a7c:	cf 01       	movw	r24, r30
    2a7e:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2a80:	94 83       	std	Z+4, r25	; 0x04
    2a82:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2a84:	f7 83       	std	Z+7, r31	; 0x07
    2a86:	e6 83       	std	Z+6, r30	; 0x06
    2a88:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    2a8a:	8c e0       	ldi	r24, 0x0C	; 12
    2a8c:	e0 31       	cpi	r30, 0x10	; 16
    2a8e:	f8 07       	cpc	r31, r24
    2a90:	a9 f7       	brne	.-22     	; 0x2a7c <nrk_init+0x9c>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2a92:	10 92 f9 0b 	sts	0x0BF9, r1
    2a96:	10 92 f8 0b 	sts	0x0BF8, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2a9a:	10 92 14 0c 	sts	0x0C14, r1
    2a9e:	10 92 13 0c 	sts	0x0C13, r1
	_head_node = NULL;
    2aa2:	10 92 b1 0b 	sts	0x0BB1, r1
    2aa6:	10 92 b0 0b 	sts	0x0BB0, r1
	_free_node = &_nrk_readyQ[0];
    2aaa:	87 ef       	ldi	r24, 0xF7	; 247
    2aac:	9b e0       	ldi	r25, 0x0B	; 11
    2aae:	90 93 cd 0a 	sts	0x0ACD, r25
    2ab2:	80 93 cc 0a 	sts	0x0ACC, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2ab6:	64 ed       	ldi	r22, 0xD4	; 212
    2ab8:	75 e2       	ldi	r23, 0x25	; 37
    2aba:	ce 01       	movw	r24, r28
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	6b ef       	ldi	r22, 0xFB	; 251
    2ac8:	79 e0       	ldi	r23, 0x09	; 9
    2aca:	ce 01       	movw	r24, r28
    2acc:	01 96       	adiw	r24, 0x01	; 1
    2ace:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2ad2:	85 e5       	ldi	r24, 0x55	; 85
    2ad4:	80 93 fb 09 	sts	0x09FB, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2ad8:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    2ada:	1c 86       	std	Y+12, r1	; 0x0c
    2adc:	1d 86       	std	Y+13, r1	; 0x0d
    2ade:	1e 86       	std	Y+14, r1	; 0x0e
    2ae0:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    2ae2:	18 8a       	std	Y+16, r1	; 0x10
    2ae4:	19 8a       	std	Y+17, r1	; 0x11
    2ae6:	1a 8a       	std	Y+18, r1	; 0x12
    2ae8:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2aea:	1c 8a       	std	Y+20, r1	; 0x14
    2aec:	1d 8a       	std	Y+21, r1	; 0x15
    2aee:	1e 8a       	std	Y+22, r1	; 0x16
    2af0:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    2af2:	18 8e       	std	Y+24, r1	; 0x18
    2af4:	19 8e       	std	Y+25, r1	; 0x19
    2af6:	1a 8e       	std	Y+26, r1	; 0x1a
    2af8:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2afa:	1c 8e       	std	Y+28, r1	; 0x1c
    2afc:	1d 8e       	std	Y+29, r1	; 0x1d
    2afe:	1e 8e       	std	Y+30, r1	; 0x1e
    2b00:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2b02:	18 a2       	std	Y+32, r1	; 0x20
    2b04:	19 a2       	std	Y+33, r1	; 0x21
    2b06:	1a a2       	std	Y+34, r1	; 0x22
    2b08:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2b0e:	92 e0       	ldi	r25, 0x02	; 2
    2b10:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2b12:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2b14:	ce 01       	movw	r24, r28
    2b16:	01 96       	adiw	r24, 0x01	; 1
    2b18:	0e 94 09 21 	call	0x4212	; 0x4212 <nrk_activate_task>
	
}
    2b1c:	a3 96       	adiw	r28, 0x23	; 35
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	df 91       	pop	r29
    2b2a:	cf 91       	pop	r28
    2b2c:	08 95       	ret

00002b2e <nrk_start>:




void nrk_start (void)
{
    2b2e:	06 ed       	ldi	r16, 0xD6	; 214
    2b30:	1a e0       	ldi	r17, 0x0A	; 10
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2b32:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2b34:	f8 01       	movw	r30, r16
    2b36:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    2b38:	ff ef       	ldi	r31, 0xFF	; 255
    2b3a:	df 12       	cpse	r13, r31
    2b3c:	22 c0       	rjmp	.+68     	; 0x2b82 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2b3e:	cf 5f       	subi	r28, 0xFF	; 255
    2b40:	05 5d       	subi	r16, 0xD5	; 213
    2b42:	1f 4f       	sbci	r17, 0xFF	; 255
    2b44:	c5 30       	cpi	r28, 0x05	; 5
    2b46:	b1 f7       	brne	.-20     	; 0x2b34 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2b48:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2b4c:	2b e2       	ldi	r18, 0x2B	; 43
    2b4e:	82 02       	muls	r24, r18
    2b50:	c0 01       	movw	r24, r0
    2b52:	11 24       	eor	r1, r1
    2b54:	fc 01       	movw	r30, r24
    2b56:	e2 53       	subi	r30, 0x32	; 50
    2b58:	f5 4f       	sbci	r31, 0xF5	; 245
    2b5a:	82 85       	ldd	r24, Z+10	; 0x0a
    2b5c:	80 93 bd 0b 	sts	0x0BBD, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2b60:	f0 93 bc 0b 	sts	0x0BBC, r31
    2b64:	e0 93 bb 0b 	sts	0x0BBB, r30
    2b68:	f0 93 ad 0b 	sts	0x0BAD, r31
    2b6c:	e0 93 ac 0b 	sts	0x0BAC, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2b70:	80 93 ae 0b 	sts	0x0BAE, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2b74:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <nrk_target_start>
    nrk_stack_pointer_init(); 
    2b78:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2b7c:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <nrk_start_high_ready_task>
    2b80:	16 c0       	rjmp	.+44     	; 0x2bae <nrk_start+0x80>
    2b82:	86 ed       	ldi	r24, 0xD6	; 214
    2b84:	e8 2e       	mov	r14, r24
    2b86:	8a e0       	ldi	r24, 0x0A	; 10
    2b88:	f8 2e       	mov	r15, r24
    2b8a:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2b8c:	cd 17       	cp	r28, r29
    2b8e:	41 f0       	breq	.+16     	; 0x2ba0 <nrk_start+0x72>
    2b90:	f7 01       	movw	r30, r14
    2b92:	80 81       	ld	r24, Z
    2b94:	d8 12       	cpse	r13, r24
    2b96:	04 c0       	rjmp	.+8      	; 0x2ba0 <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2b98:	6d 2d       	mov	r22, r13
    2b9a:	85 e0       	ldi	r24, 0x05	; 5
    2b9c:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    2ba0:	df 5f       	subi	r29, 0xFF	; 255
    2ba2:	fb e2       	ldi	r31, 0x2B	; 43
    2ba4:	ef 0e       	add	r14, r31
    2ba6:	f1 1c       	adc	r15, r1
    2ba8:	d5 30       	cpi	r29, 0x05	; 5
    2baa:	81 f7       	brne	.-32     	; 0x2b8c <nrk_start+0x5e>
    2bac:	c8 cf       	rjmp	.-112    	; 0x2b3e <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    2bae:	ff cf       	rjmp	.-2      	; 0x2bae <nrk_start+0x80>

00002bb0 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2bb0:	cf 92       	push	r12
    2bb2:	df 92       	push	r13
    2bb4:	ef 92       	push	r14
    2bb6:	ff 92       	push	r15
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	ec 01       	movw	r28, r24
    2bc2:	8b 01       	movw	r16, r22
    2bc4:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2bc6:	89 85       	ldd	r24, Y+9	; 0x09
    2bc8:	82 30       	cpi	r24, 0x02	; 2
    2bca:	21 f0       	breq	.+8      	; 0x2bd4 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2bcc:	80 91 aa 0b 	lds	r24, 0x0BAA
    2bd0:	88 83       	st	Y, r24
    2bd2:	01 c0       	rjmp	.+2      	; 0x2bd6 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2bd4:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2bd6:	80 91 aa 0b 	lds	r24, 0x0BAA
    2bda:	85 30       	cpi	r24, 0x05	; 5
    2bdc:	20 f0       	brcs	.+8      	; 0x2be6 <nrk_TCB_init+0x36>
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	87 e0       	ldi	r24, 0x07	; 7
    2be2:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2be6:	89 85       	ldd	r24, Y+9	; 0x09
    2be8:	82 30       	cpi	r24, 0x02	; 2
    2bea:	29 f0       	breq	.+10     	; 0x2bf6 <nrk_TCB_init+0x46>
    2bec:	80 91 aa 0b 	lds	r24, 0x0BAA
    2bf0:	8f 5f       	subi	r24, 0xFF	; 255
    2bf2:	80 93 aa 0b 	sts	0x0BAA, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2bf6:	80 91 aa 0b 	lds	r24, 0x0BAA
    2bfa:	81 11       	cpse	r24, r1
    2bfc:	03 c0       	rjmp	.+6      	; 0x2c04 <nrk_TCB_init+0x54>
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	80 93 aa 0b 	sts	0x0BAA, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2c04:	38 81       	ld	r19, Y
    2c06:	2b e2       	ldi	r18, 0x2B	; 43
    2c08:	32 03       	mulsu	r19, r18
    2c0a:	f0 01       	movw	r30, r0
    2c0c:	11 24       	eor	r1, r1
    2c0e:	e2 53       	subi	r30, 0x32	; 50
    2c10:	f5 4f       	sbci	r31, 0xF5	; 245
    2c12:	11 83       	std	Z+1, r17	; 0x01
    2c14:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2c16:	88 85       	ldd	r24, Y+8	; 0x08
    2c18:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2c1a:	38 81       	ld	r19, Y
    2c1c:	32 03       	mulsu	r19, r18
    2c1e:	f0 01       	movw	r30, r0
    2c20:	11 24       	eor	r1, r1
    2c22:	e2 53       	subi	r30, 0x32	; 50
    2c24:	f5 4f       	sbci	r31, 0xF5	; 245
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2c2a:	38 81       	ld	r19, Y
    2c2c:	32 03       	mulsu	r19, r18
    2c2e:	f0 01       	movw	r30, r0
    2c30:	11 24       	eor	r1, r1
    2c32:	e2 53       	subi	r30, 0x32	; 50
    2c34:	f5 4f       	sbci	r31, 0xF5	; 245
    2c36:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2c38:	08 81       	ld	r16, Y
    2c3a:	02 03       	mulsu	r16, r18
    2c3c:	80 01       	movw	r16, r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	02 53       	subi	r16, 0x32	; 50
    2c42:	15 4f       	sbci	r17, 0xF5	; 245
    2c44:	f8 01       	movw	r30, r16
    2c46:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    2c48:	ce 01       	movw	r24, r28
    2c4a:	0b 96       	adiw	r24, 0x0b	; 11
    2c4c:	0e 94 66 25 	call	0x4acc	; 0x4acc <_nrk_time_to_ticks_long>
    2c50:	f8 01       	movw	r30, r16
    2c52:	61 a3       	std	Z+33, r22	; 0x21
    2c54:	72 a3       	std	Z+34, r23	; 0x22
    2c56:	83 a3       	std	Z+35, r24	; 0x23
    2c58:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    2c5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c5e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2c60:	be 85       	ldd	r27, Y+14	; 0x0e
    2c62:	88 33       	cpi	r24, 0x38	; 56
    2c64:	99 48       	sbci	r25, 0x89	; 137
    2c66:	a1 44       	sbci	r26, 0x41	; 65
    2c68:	b1 05       	cpc	r27, r1
    2c6a:	20 f0       	brcs	.+8      	; 0x2c74 <nrk_TCB_init+0xc4>
    2c6c:	68 81       	ld	r22, Y
    2c6e:	86 e1       	ldi	r24, 0x16	; 22
    2c70:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2c74:	c8 80       	ld	r12, Y
    2c76:	dd 24       	eor	r13, r13
    2c78:	c7 fc       	sbrc	r12, 7
    2c7a:	d0 94       	com	r13
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	4b 96       	adiw	r24, 0x1b	; 27
    2c80:	0e 94 66 25 	call	0x4acc	; 0x4acc <_nrk_time_to_ticks_long>
    2c84:	1b e2       	ldi	r17, 0x2B	; 43
    2c86:	1c 9d       	mul	r17, r12
    2c88:	f0 01       	movw	r30, r0
    2c8a:	1d 9d       	mul	r17, r13
    2c8c:	f0 0d       	add	r31, r0
    2c8e:	11 24       	eor	r1, r1
    2c90:	e2 53       	subi	r30, 0x32	; 50
    2c92:	f5 4f       	sbci	r31, 0xF5	; 245
    2c94:	65 8b       	std	Z+21, r22	; 0x15
    2c96:	76 8b       	std	Z+22, r23	; 0x16
    2c98:	87 8b       	std	Z+23, r24	; 0x17
    2c9a:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    2c9c:	28 81       	ld	r18, Y
    2c9e:	21 03       	mulsu	r18, r17
    2ca0:	c0 01       	movw	r24, r0
    2ca2:	11 24       	eor	r1, r1
    2ca4:	9c 01       	movw	r18, r24
    2ca6:	22 53       	subi	r18, 0x32	; 50
    2ca8:	35 4f       	sbci	r19, 0xF5	; 245
    2caa:	69 01       	movw	r12, r18
    2cac:	f9 01       	movw	r30, r18
    2cae:	45 89       	ldd	r20, Z+21	; 0x15
    2cb0:	56 89       	ldd	r21, Z+22	; 0x16
    2cb2:	67 89       	ldd	r22, Z+23	; 0x17
    2cb4:	70 8d       	ldd	r23, Z+24	; 0x18
    2cb6:	81 a1       	ldd	r24, Z+33	; 0x21
    2cb8:	92 a1       	ldd	r25, Z+34	; 0x22
    2cba:	a3 a1       	ldd	r26, Z+35	; 0x23
    2cbc:	b4 a1       	ldd	r27, Z+36	; 0x24
    2cbe:	84 0f       	add	r24, r20
    2cc0:	95 1f       	adc	r25, r21
    2cc2:	a6 1f       	adc	r26, r22
    2cc4:	b7 1f       	adc	r27, r23
    2cc6:	81 8f       	std	Z+25, r24	; 0x19
    2cc8:	92 8f       	std	Z+26, r25	; 0x1a
    2cca:	a3 8f       	std	Z+27, r26	; 0x1b
    2ccc:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    2cce:	ce 01       	movw	r24, r28
    2cd0:	43 96       	adiw	r24, 0x13	; 19
    2cd2:	0e 94 66 25 	call	0x4acc	; 0x4acc <_nrk_time_to_ticks_long>
    2cd6:	f6 01       	movw	r30, r12
    2cd8:	65 a3       	std	Z+37, r22	; 0x25
    2cda:	76 a3       	std	Z+38, r23	; 0x26
    2cdc:	87 a3       	std	Z+39, r24	; 0x27
    2cde:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    2ce0:	28 81       	ld	r18, Y
    2ce2:	21 03       	mulsu	r18, r17
    2ce4:	f0 01       	movw	r30, r0
    2ce6:	11 24       	eor	r1, r1
    2ce8:	e2 53       	subi	r30, 0x32	; 50
    2cea:	f5 4f       	sbci	r31, 0xF5	; 245
    2cec:	85 a1       	ldd	r24, Z+37	; 0x25
    2cee:	96 a1       	ldd	r25, Z+38	; 0x26
    2cf0:	a7 a1       	ldd	r26, Z+39	; 0x27
    2cf2:	b0 a5       	ldd	r27, Z+40	; 0x28
    2cf4:	85 8f       	std	Z+29, r24	; 0x1d
    2cf6:	96 8f       	std	Z+30, r25	; 0x1e
    2cf8:	a7 8f       	std	Z+31, r26	; 0x1f
    2cfa:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	92 a7       	std	Z+42, r25	; 0x2a
    2d02:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    2d04:	f3 82       	std	Z+3, r15	; 0x03
    2d06:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2d08:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	ff 90       	pop	r15
    2d14:	ef 90       	pop	r14
    2d16:	df 90       	pop	r13
    2d18:	cf 90       	pop	r12
    2d1a:	08 95       	ret

00002d1c <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2d1c:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <_nrk_scheduler>

00002d20 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    2d20:	85 e6       	ldi	r24, 0x65	; 101
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	08 95       	ret

00002d26 <nrk_stats_reset>:
#ifdef NRK_STATS_TRACKER
void nrk_stats_reset()
{
    uint8_t i;

    _nrk_stats_sleep_time.secs=0;
    2d26:	10 92 07 07 	sts	0x0707, r1
    2d2a:	10 92 08 07 	sts	0x0708, r1
    2d2e:	10 92 09 07 	sts	0x0709, r1
    2d32:	10 92 0a 07 	sts	0x070A, r1
    _nrk_stats_sleep_time.nano_secs=0;
    2d36:	10 92 0b 07 	sts	0x070B, r1
    2d3a:	10 92 0c 07 	sts	0x070C, r1
    2d3e:	10 92 0d 07 	sts	0x070D, r1
    2d42:	10 92 0e 07 	sts	0x070E, r1
    2d46:	e1 e5       	ldi	r30, 0x51	; 81
    2d48:	f9 e0       	ldi	r31, 0x09	; 9
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        cur_task_stats[i].total_ticks=0;
    2d4e:	10 82       	st	Z, r1
    2d50:	11 82       	std	Z+1, r1	; 0x01
    2d52:	12 82       	std	Z+2, r1	; 0x02
    2d54:	13 82       	std	Z+3, r1	; 0x03
        cur_task_stats[i].max_exec_ticks=0;
    2d56:	10 86       	std	Z+8, r1	; 0x08
    2d58:	11 86       	std	Z+9, r1	; 0x09
    2d5a:	12 86       	std	Z+10, r1	; 0x0a
    2d5c:	13 86       	std	Z+11, r1	; 0x0b
        cur_task_stats[i].min_exec_ticks=0;
    2d5e:	14 82       	std	Z+4, r1	; 0x04
    2d60:	15 82       	std	Z+5, r1	; 0x05
    2d62:	16 82       	std	Z+6, r1	; 0x06
    2d64:	17 82       	std	Z+7, r1	; 0x07
        cur_task_stats[i].last_exec_ticks=0;
    2d66:	14 86       	std	Z+12, r1	; 0x0c
    2d68:	15 86       	std	Z+13, r1	; 0x0d
    2d6a:	16 86       	std	Z+14, r1	; 0x0e
    2d6c:	17 86       	std	Z+15, r1	; 0x0f
        cur_task_stats[i].swapped_in=0;
    2d6e:	10 8a       	std	Z+16, r1	; 0x10
    2d70:	11 8a       	std	Z+17, r1	; 0x11
    2d72:	12 8a       	std	Z+18, r1	; 0x12
    2d74:	13 8a       	std	Z+19, r1	; 0x13
        cur_task_stats[i].preempted=0;
    2d76:	10 8e       	std	Z+24, r1	; 0x18
    2d78:	11 8e       	std	Z+25, r1	; 0x19
    2d7a:	12 8e       	std	Z+26, r1	; 0x1a
    2d7c:	13 8e       	std	Z+27, r1	; 0x1b
    2d7e:	dc 01       	movw	r26, r24
    2d80:	af 5a       	subi	r26, 0xAF	; 175
    2d82:	b6 4f       	sbci	r27, 0xF6	; 246
        cur_task_stats[i].violations=0;
    2d84:	5c 96       	adiw	r26, 0x1c	; 28
    2d86:	1c 92       	st	X, r1
    2d88:	5c 97       	sbiw	r26, 0x1c	; 28
        cur_task_stats[i].overflow=0;
    2d8a:	5d 96       	adiw	r26, 0x1d	; 29
    2d8c:	1c 92       	st	X, r1
    2d8e:	7e 96       	adiw	r30, 0x1e	; 30
    2d90:	4e 96       	adiw	r24, 0x1e	; 30
{
    uint8_t i;

    _nrk_stats_sleep_time.secs=0;
    _nrk_stats_sleep_time.nano_secs=0;
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2d92:	86 39       	cpi	r24, 0x96	; 150
    2d94:	91 05       	cpc	r25, r1
    2d96:	d9 f6       	brne	.-74     	; 0x2d4e <nrk_stats_reset+0x28>
        cur_task_stats[i].preempted=0;
        cur_task_stats[i].violations=0;
        cur_task_stats[i].overflow=0;
    }

}
    2d98:	08 95       	ret

00002d9a <_nrk_stats_sleep>:


void _nrk_stats_sleep(uint8_t t)
{
    2d9a:	0f 93       	push	r16
    2d9c:	1f 93       	push	r17
//_nrk_stats_sleep_time+=t;
    _nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
    2d9e:	e7 e0       	ldi	r30, 0x07	; 7
    2da0:	f7 e0       	ldi	r31, 0x07	; 7
    2da2:	a8 2f       	mov	r26, r24
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	23 eb       	ldi	r18, 0xB3	; 179
    2da8:	36 ee       	ldi	r19, 0xE6	; 230
    2daa:	4e e0       	ldi	r20, 0x0E	; 14
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__muluhisi3>
    2db2:	04 81       	ldd	r16, Z+4	; 0x04
    2db4:	15 81       	ldd	r17, Z+5	; 0x05
    2db6:	26 81       	ldd	r18, Z+6	; 0x06
    2db8:	37 81       	ldd	r19, Z+7	; 0x07
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	80 0f       	add	r24, r16
    2dc0:	91 1f       	adc	r25, r17
    2dc2:	a2 1f       	adc	r26, r18
    2dc4:	b3 1f       	adc	r27, r19
    2dc6:	84 83       	std	Z+4, r24	; 0x04
    2dc8:	95 83       	std	Z+5, r25	; 0x05
    2dca:	a6 83       	std	Z+6, r26	; 0x06
    2dcc:	b7 83       	std	Z+7, r27	; 0x07
    nrk_time_compact_nanos(&_nrk_stats_sleep_time);
    2dce:	cf 01       	movw	r24, r30
}
    2dd0:	1f 91       	pop	r17
    2dd2:	0f 91       	pop	r16

void _nrk_stats_sleep(uint8_t t)
{
//_nrk_stats_sleep_time+=t;
    _nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
    nrk_time_compact_nanos(&_nrk_stats_sleep_time);
    2dd4:	0c 94 33 24 	jmp	0x4866	; 0x4866 <nrk_time_compact_nanos>

00002dd8 <nrk_stats_get_deep_sleep>:
}

void nrk_stats_get_deep_sleep(nrk_time_t *t)
{
    t->secs=_nrk_stats_sleep_time.secs;
    2dd8:	e7 e0       	ldi	r30, 0x07	; 7
    2dda:	f7 e0       	ldi	r31, 0x07	; 7
    2ddc:	40 81       	ld	r20, Z
    2dde:	51 81       	ldd	r21, Z+1	; 0x01
    2de0:	62 81       	ldd	r22, Z+2	; 0x02
    2de2:	73 81       	ldd	r23, Z+3	; 0x03
    2de4:	dc 01       	movw	r26, r24
    2de6:	4d 93       	st	X+, r20
    2de8:	5d 93       	st	X+, r21
    2dea:	6d 93       	st	X+, r22
    2dec:	7c 93       	st	X, r23
    2dee:	13 97       	sbiw	r26, 0x03	; 3
    t->nano_secs=_nrk_stats_sleep_time.nano_secs;
    2df0:	44 81       	ldd	r20, Z+4	; 0x04
    2df2:	55 81       	ldd	r21, Z+5	; 0x05
    2df4:	66 81       	ldd	r22, Z+6	; 0x06
    2df6:	77 81       	ldd	r23, Z+7	; 0x07
    2df8:	fc 01       	movw	r30, r24
    2dfa:	44 83       	std	Z+4, r20	; 0x04
    2dfc:	55 83       	std	Z+5, r21	; 0x05
    2dfe:	66 83       	std	Z+6, r22	; 0x06
    2e00:	77 83       	std	Z+7, r23	; 0x07
    2e02:	08 95       	ret

00002e04 <_nrk_stats_add_violation>:
}

void _nrk_stats_add_violation(uint8_t task_id)
{
    if( cur_task_stats[task_id].overflow==1) return;
    2e04:	2e e1       	ldi	r18, 0x1E	; 30
    2e06:	82 9f       	mul	r24, r18
    2e08:	c0 01       	movw	r24, r0
    2e0a:	11 24       	eor	r1, r1
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	ef 5a       	subi	r30, 0xAF	; 175
    2e10:	f6 4f       	sbci	r31, 0xF6	; 246
    2e12:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e14:	81 30       	cpi	r24, 0x01	; 1
    2e16:	39 f0       	breq	.+14     	; 0x2e26 <_nrk_stats_add_violation+0x22>
    cur_task_stats[task_id].violations++;
    2e18:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e1a:	8f 5f       	subi	r24, 0xFF	; 255
    2e1c:	84 8f       	std	Z+28, r24	; 0x1c
    if(cur_task_stats[task_id].violations==255) cur_task_stats[task_id].overflow=1;
    2e1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e20:	11 f4       	brne	.+4      	; 0x2e26 <_nrk_stats_add_violation+0x22>
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	85 8f       	std	Z+29, r24	; 0x1d
    2e26:	08 95       	ret

00002e28 <_nrk_stats_task_start>:


// task_id is the PID of the task in question
void _nrk_stats_task_start(uint8_t task_id)
{
    if( cur_task_stats[task_id].overflow==1) return;
    2e28:	2e e1       	ldi	r18, 0x1E	; 30
    2e2a:	82 9f       	mul	r24, r18
    2e2c:	c0 01       	movw	r24, r0
    2e2e:	11 24       	eor	r1, r1
    2e30:	fc 01       	movw	r30, r24
    2e32:	ef 5a       	subi	r30, 0xAF	; 175
    2e34:	f6 4f       	sbci	r31, 0xF6	; 246
    2e36:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	b1 f0       	breq	.+44     	; 0x2e68 <_nrk_stats_task_start+0x40>
    cur_task_stats[task_id].cur_ticks=0;
    2e3c:	14 8a       	std	Z+20, r1	; 0x14
    2e3e:	15 8a       	std	Z+21, r1	; 0x15
    2e40:	16 8a       	std	Z+22, r1	; 0x16
    2e42:	17 8a       	std	Z+23, r1	; 0x17
    cur_task_stats[task_id].swapped_in++;
    2e44:	80 89       	ldd	r24, Z+16	; 0x10
    2e46:	91 89       	ldd	r25, Z+17	; 0x11
    2e48:	a2 89       	ldd	r26, Z+18	; 0x12
    2e4a:	b3 89       	ldd	r27, Z+19	; 0x13
    2e4c:	01 96       	adiw	r24, 0x01	; 1
    2e4e:	a1 1d       	adc	r26, r1
    2e50:	b1 1d       	adc	r27, r1
    2e52:	80 8b       	std	Z+16, r24	; 0x10
    2e54:	91 8b       	std	Z+17, r25	; 0x11
    2e56:	a2 8b       	std	Z+18, r26	; 0x12
    2e58:	b3 8b       	std	Z+19, r27	; 0x13
    if(cur_task_stats[task_id].swapped_in==(UINT32_MAX-1)) cur_task_stats[task_id].overflow=1;
    2e5a:	8e 3f       	cpi	r24, 0xFE	; 254
    2e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e5e:	af 4f       	sbci	r26, 0xFF	; 255
    2e60:	bf 4f       	sbci	r27, 0xFF	; 255
    2e62:	11 f4       	brne	.+4      	; 0x2e68 <_nrk_stats_task_start+0x40>
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	85 8f       	std	Z+29, r24	; 0x1d
    2e68:	08 95       	ret

00002e6a <_nrk_stats_task_preempted>:
}


void _nrk_stats_task_preempted(uint8_t task_id, uint8_t ticks)
{
    2e6a:	0f 93       	push	r16
    2e6c:	1f 93       	push	r17
    if( cur_task_stats[task_id].overflow==1) return;
    2e6e:	2e e1       	ldi	r18, 0x1E	; 30
    2e70:	82 9f       	mul	r24, r18
    2e72:	c0 01       	movw	r24, r0
    2e74:	11 24       	eor	r1, r1
    2e76:	fc 01       	movw	r30, r24
    2e78:	ef 5a       	subi	r30, 0xAF	; 175
    2e7a:	f6 4f       	sbci	r31, 0xF6	; 246
    2e7c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e7e:	81 30       	cpi	r24, 0x01	; 1
    2e80:	71 f1       	breq	.+92     	; 0x2ede <_nrk_stats_task_preempted+0x74>
    cur_task_stats[task_id].preempted++;
    2e82:	80 8d       	ldd	r24, Z+24	; 0x18
    2e84:	91 8d       	ldd	r25, Z+25	; 0x19
    2e86:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2e88:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	a1 1d       	adc	r26, r1
    2e8e:	b1 1d       	adc	r27, r1
    2e90:	80 8f       	std	Z+24, r24	; 0x18
    2e92:	91 8f       	std	Z+25, r25	; 0x19
    2e94:	a2 8f       	std	Z+26, r26	; 0x1a
    2e96:	b3 8f       	std	Z+27, r27	; 0x1b
    cur_task_stats[task_id].cur_ticks+=ticks;
    2e98:	46 2f       	mov	r20, r22
    2e9a:	50 e0       	ldi	r21, 0x00	; 0
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	70 e0       	ldi	r23, 0x00	; 0
    2ea0:	04 89       	ldd	r16, Z+20	; 0x14
    2ea2:	15 89       	ldd	r17, Z+21	; 0x15
    2ea4:	26 89       	ldd	r18, Z+22	; 0x16
    2ea6:	37 89       	ldd	r19, Z+23	; 0x17
    2ea8:	04 0f       	add	r16, r20
    2eaa:	15 1f       	adc	r17, r21
    2eac:	26 1f       	adc	r18, r22
    2eae:	37 1f       	adc	r19, r23
    2eb0:	04 8b       	std	Z+20, r16	; 0x14
    2eb2:	15 8b       	std	Z+21, r17	; 0x15
    2eb4:	26 8b       	std	Z+22, r18	; 0x16
    2eb6:	37 8b       	std	Z+23, r19	; 0x17
    cur_task_stats[task_id].total_ticks+=ticks;
    2eb8:	00 81       	ld	r16, Z
    2eba:	11 81       	ldd	r17, Z+1	; 0x01
    2ebc:	22 81       	ldd	r18, Z+2	; 0x02
    2ebe:	33 81       	ldd	r19, Z+3	; 0x03
    2ec0:	40 0f       	add	r20, r16
    2ec2:	51 1f       	adc	r21, r17
    2ec4:	62 1f       	adc	r22, r18
    2ec6:	73 1f       	adc	r23, r19
    2ec8:	40 83       	st	Z, r20
    2eca:	51 83       	std	Z+1, r21	; 0x01
    2ecc:	62 83       	std	Z+2, r22	; 0x02
    2ece:	73 83       	std	Z+3, r23	; 0x03
    if(cur_task_stats[task_id].preempted==(UINT32_MAX-1)) cur_task_stats[task_id].overflow=1;
    2ed0:	8e 3f       	cpi	r24, 0xFE	; 254
    2ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed4:	af 4f       	sbci	r26, 0xFF	; 255
    2ed6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed8:	11 f4       	brne	.+4      	; 0x2ede <_nrk_stats_task_preempted+0x74>
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	85 8f       	std	Z+29, r24	; 0x1d
}
    2ede:	1f 91       	pop	r17
    2ee0:	0f 91       	pop	r16
    2ee2:	08 95       	ret

00002ee4 <_nrk_stats_task_suspend>:

void _nrk_stats_task_suspend(uint8_t task_id, uint8_t ticks)
{
    2ee4:	cf 92       	push	r12
    2ee6:	df 92       	push	r13
    2ee8:	ef 92       	push	r14
    2eea:	ff 92       	push	r15
    if( cur_task_stats[task_id].overflow==1) return;
    2eec:	28 2f       	mov	r18, r24
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	9e e1       	ldi	r25, 0x1E	; 30
    2ef2:	89 9f       	mul	r24, r25
    2ef4:	f0 01       	movw	r30, r0
    2ef6:	11 24       	eor	r1, r1
    2ef8:	ef 5a       	subi	r30, 0xAF	; 175
    2efa:	f6 4f       	sbci	r31, 0xF6	; 246
    2efc:	85 8d       	ldd	r24, Z+29	; 0x1d
    2efe:	81 30       	cpi	r24, 0x01	; 1
    2f00:	09 f4       	brne	.+2      	; 0x2f04 <_nrk_stats_task_suspend+0x20>
    2f02:	4b c0       	rjmp	.+150    	; 0x2f9a <_nrk_stats_task_suspend+0xb6>
    cur_task_stats[task_id].last_exec_ticks = cur_task_stats[task_id].cur_ticks+ticks;
    2f04:	46 2f       	mov	r20, r22
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	70 e0       	ldi	r23, 0x00	; 0
    2f0c:	84 89       	ldd	r24, Z+20	; 0x14
    2f0e:	95 89       	ldd	r25, Z+21	; 0x15
    2f10:	a6 89       	ldd	r26, Z+22	; 0x16
    2f12:	b7 89       	ldd	r27, Z+23	; 0x17
    2f14:	84 0f       	add	r24, r20
    2f16:	95 1f       	adc	r25, r21
    2f18:	a6 1f       	adc	r26, r22
    2f1a:	b7 1f       	adc	r27, r23
    2f1c:	84 87       	std	Z+12, r24	; 0x0c
    2f1e:	95 87       	std	Z+13, r25	; 0x0d
    2f20:	a6 87       	std	Z+14, r26	; 0x0e
    2f22:	b7 87       	std	Z+15, r27	; 0x0f
    cur_task_stats[task_id].total_ticks+=ticks;
    2f24:	c0 80       	ld	r12, Z
    2f26:	d1 80       	ldd	r13, Z+1	; 0x01
    2f28:	e2 80       	ldd	r14, Z+2	; 0x02
    2f2a:	f3 80       	ldd	r15, Z+3	; 0x03
    2f2c:	4c 0d       	add	r20, r12
    2f2e:	5d 1d       	adc	r21, r13
    2f30:	6e 1d       	adc	r22, r14
    2f32:	7f 1d       	adc	r23, r15
    2f34:	40 83       	st	Z, r20
    2f36:	51 83       	std	Z+1, r21	; 0x01
    2f38:	62 83       	std	Z+2, r22	; 0x02
    2f3a:	73 83       	std	Z+3, r23	; 0x03

    if(cur_task_stats[task_id].min_exec_ticks==0 || cur_task_stats[task_id].last_exec_ticks<cur_task_stats[task_id].min_exec_ticks)
    2f3c:	44 81       	ldd	r20, Z+4	; 0x04
    2f3e:	55 81       	ldd	r21, Z+5	; 0x05
    2f40:	66 81       	ldd	r22, Z+6	; 0x06
    2f42:	77 81       	ldd	r23, Z+7	; 0x07
    2f44:	41 15       	cp	r20, r1
    2f46:	51 05       	cpc	r21, r1
    2f48:	61 05       	cpc	r22, r1
    2f4a:	71 05       	cpc	r23, r1
    2f4c:	29 f0       	breq	.+10     	; 0x2f58 <_nrk_stats_task_suspend+0x74>
    2f4e:	84 17       	cp	r24, r20
    2f50:	95 07       	cpc	r25, r21
    2f52:	a6 07       	cpc	r26, r22
    2f54:	b7 07       	cpc	r27, r23
    2f56:	60 f4       	brcc	.+24     	; 0x2f70 <_nrk_stats_task_suspend+0x8c>
        cur_task_stats[task_id].min_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    2f58:	4e e1       	ldi	r20, 0x1E	; 30
    2f5a:	42 9f       	mul	r20, r18
    2f5c:	f0 01       	movw	r30, r0
    2f5e:	43 9f       	mul	r20, r19
    2f60:	f0 0d       	add	r31, r0
    2f62:	11 24       	eor	r1, r1
    2f64:	ef 5a       	subi	r30, 0xAF	; 175
    2f66:	f6 4f       	sbci	r31, 0xF6	; 246
    2f68:	84 83       	std	Z+4, r24	; 0x04
    2f6a:	95 83       	std	Z+5, r25	; 0x05
    2f6c:	a6 83       	std	Z+6, r26	; 0x06
    2f6e:	b7 83       	std	Z+7, r27	; 0x07

    if(cur_task_stats[task_id].last_exec_ticks>cur_task_stats[task_id].max_exec_ticks)
    2f70:	4e e1       	ldi	r20, 0x1E	; 30
    2f72:	42 9f       	mul	r20, r18
    2f74:	f0 01       	movw	r30, r0
    2f76:	43 9f       	mul	r20, r19
    2f78:	f0 0d       	add	r31, r0
    2f7a:	11 24       	eor	r1, r1
    2f7c:	ef 5a       	subi	r30, 0xAF	; 175
    2f7e:	f6 4f       	sbci	r31, 0xF6	; 246
    2f80:	40 85       	ldd	r20, Z+8	; 0x08
    2f82:	51 85       	ldd	r21, Z+9	; 0x09
    2f84:	62 85       	ldd	r22, Z+10	; 0x0a
    2f86:	73 85       	ldd	r23, Z+11	; 0x0b
    2f88:	48 17       	cp	r20, r24
    2f8a:	59 07       	cpc	r21, r25
    2f8c:	6a 07       	cpc	r22, r26
    2f8e:	7b 07       	cpc	r23, r27
    2f90:	20 f4       	brcc	.+8      	; 0x2f9a <_nrk_stats_task_suspend+0xb6>
        cur_task_stats[task_id].max_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    2f92:	80 87       	std	Z+8, r24	; 0x08
    2f94:	91 87       	std	Z+9, r25	; 0x09
    2f96:	a2 87       	std	Z+10, r26	; 0x0a
    2f98:	b3 87       	std	Z+11, r27	; 0x0b

}
    2f9a:	ff 90       	pop	r15
    2f9c:	ef 90       	pop	r14
    2f9e:	df 90       	pop	r13
    2fa0:	cf 90       	pop	r12
    2fa2:	08 95       	ret

00002fa4 <nrk_stats_display_pid>:



void nrk_stats_display_pid(uint8_t pid)
{
    2fa4:	8f 92       	push	r8
    2fa6:	9f 92       	push	r9
    2fa8:	af 92       	push	r10
    2faa:	bf 92       	push	r11
    2fac:	cf 92       	push	r12
    2fae:	df 92       	push	r13
    2fb0:	ef 92       	push	r14
    2fb2:	ff 92       	push	r15
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	28 97       	sbiw	r28, 0x08	; 8
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	18 2f       	mov	r17, r24
    nrk_time_t t;

    nrk_kprintf( PSTR( " Task ID: "));
    2fce:	84 e7       	ldi	r24, 0x74	; 116
    2fd0:	93 e0       	ldi	r25, 0x03	; 3
    2fd2:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    printf( "%d",pid );
    2fd6:	a1 2e       	mov	r10, r17
    2fd8:	b1 2c       	mov	r11, r1
    2fda:	1f 92       	push	r1
    2fdc:	1f 93       	push	r17
    2fde:	86 e9       	ldi	r24, 0x96	; 150
    2fe0:	92 e0       	ldi	r25, 0x02	; 2
    2fe2:	9f 93       	push	r25
    2fe4:	8f 93       	push	r24
    2fe6:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    if(pid==NRK_IDLE_TASK_ID)
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	11 11       	cpse	r17, r1
    2ff4:	52 c0       	rjmp	.+164    	; 0x309a <nrk_stats_display_pid+0xf6>
    {
        nrk_kprintf( PSTR( "\r\n   Total System Uptime: "));
    2ff6:	89 e5       	ldi	r24, 0x59	; 89
    2ff8:	93 e0       	ldi	r25, 0x03	; 3
    2ffa:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
        nrk_time_get(&t);
    2ffe:	ce 01       	movw	r24, r28
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	0e 94 4a 23 	call	0x4694	; 0x4694 <nrk_time_get>
        printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    3006:	6d 81       	ldd	r22, Y+5	; 0x05
    3008:	7e 81       	ldd	r23, Y+6	; 0x06
    300a:	8f 81       	ldd	r24, Y+7	; 0x07
    300c:	98 85       	ldd	r25, Y+8	; 0x08
    300e:	e0 e4       	ldi	r30, 0x40	; 64
    3010:	ce 2e       	mov	r12, r30
    3012:	e2 e4       	ldi	r30, 0x42	; 66
    3014:	de 2e       	mov	r13, r30
    3016:	ef e0       	ldi	r30, 0x0F	; 15
    3018:	ee 2e       	mov	r14, r30
    301a:	f1 2c       	mov	r15, r1
    301c:	a7 01       	movw	r20, r14
    301e:	96 01       	movw	r18, r12
    3020:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    3024:	5f 93       	push	r21
    3026:	4f 93       	push	r20
    3028:	3f 93       	push	r19
    302a:	2f 93       	push	r18
    302c:	8c 81       	ldd	r24, Y+4	; 0x04
    302e:	8f 93       	push	r24
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	8f 93       	push	r24
    3034:	8a 81       	ldd	r24, Y+2	; 0x02
    3036:	8f 93       	push	r24
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	8f 93       	push	r24
    303c:	0b e3       	ldi	r16, 0x3B	; 59
    303e:	13 e0       	ldi	r17, 0x03	; 3
    3040:	1f 93       	push	r17
    3042:	0f 93       	push	r16
    3044:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
        nrk_kprintf( PSTR( "\r\n   Idle Task Deep Sleep Time: "));
    3048:	88 e3       	ldi	r24, 0x38	; 56
    304a:	93 e0       	ldi	r25, 0x03	; 3
    304c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
        //t=_nrk_ticks_to_time(_nrk_stats_sleep_time);
        //printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
        printf( "%lu secs %lu ms", _nrk_stats_sleep_time.secs, _nrk_stats_sleep_time.nano_secs/NANOS_PER_MS);
    3050:	60 91 0b 07 	lds	r22, 0x070B
    3054:	70 91 0c 07 	lds	r23, 0x070C
    3058:	80 91 0d 07 	lds	r24, 0x070D
    305c:	90 91 0e 07 	lds	r25, 0x070E
    3060:	a7 01       	movw	r20, r14
    3062:	96 01       	movw	r18, r12
    3064:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    3068:	5f 93       	push	r21
    306a:	4f 93       	push	r20
    306c:	3f 93       	push	r19
    306e:	2f 93       	push	r18
    3070:	80 91 0a 07 	lds	r24, 0x070A
    3074:	8f 93       	push	r24
    3076:	80 91 09 07 	lds	r24, 0x0709
    307a:	8f 93       	push	r24
    307c:	80 91 08 07 	lds	r24, 0x0708
    3080:	8f 93       	push	r24
    3082:	80 91 07 07 	lds	r24, 0x0707
    3086:	8f 93       	push	r24
    3088:	1f 93       	push	r17
    308a:	0f 93       	push	r16
    308c:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
    }
    nrk_kprintf( PSTR( "\r\n   Total CPU: "));
    309a:	87 e2       	ldi	r24, 0x27	; 39
    309c:	93 e0       	ldi	r25, 0x03	; 3
    309e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].total_ticks);
    30a2:	8e e1       	ldi	r24, 0x1E	; 30
    30a4:	8a 9d       	mul	r24, r10
    30a6:	80 01       	movw	r16, r0
    30a8:	8b 9d       	mul	r24, r11
    30aa:	10 0d       	add	r17, r0
    30ac:	11 24       	eor	r1, r1
    30ae:	0f 5a       	subi	r16, 0xAF	; 175
    30b0:	16 4f       	sbci	r17, 0xF6	; 246
    30b2:	f8 01       	movw	r30, r16
    30b4:	60 81       	ld	r22, Z
    30b6:	71 81       	ldd	r23, Z+1	; 0x01
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	93 81       	ldd	r25, Z+3	; 0x03
    30bc:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_ticks_to_time>
    30c0:	29 83       	std	Y+1, r18	; 0x01
    30c2:	3a 83       	std	Y+2, r19	; 0x02
    30c4:	4b 83       	std	Y+3, r20	; 0x03
    30c6:	5c 83       	std	Y+4, r21	; 0x04
    30c8:	6d 83       	std	Y+5, r22	; 0x05
    30ca:	7e 83       	std	Y+6, r23	; 0x06
    30cc:	8f 83       	std	Y+7, r24	; 0x07
    30ce:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    30d0:	6d 81       	ldd	r22, Y+5	; 0x05
    30d2:	7e 81       	ldd	r23, Y+6	; 0x06
    30d4:	8f 81       	ldd	r24, Y+7	; 0x07
    30d6:	98 85       	ldd	r25, Y+8	; 0x08
    30d8:	20 e4       	ldi	r18, 0x40	; 64
    30da:	82 2e       	mov	r8, r18
    30dc:	22 e4       	ldi	r18, 0x42	; 66
    30de:	92 2e       	mov	r9, r18
    30e0:	2f e0       	ldi	r18, 0x0F	; 15
    30e2:	a2 2e       	mov	r10, r18
    30e4:	b1 2c       	mov	r11, r1
    30e6:	a5 01       	movw	r20, r10
    30e8:	94 01       	movw	r18, r8
    30ea:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    30ee:	5f 93       	push	r21
    30f0:	4f 93       	push	r20
    30f2:	3f 93       	push	r19
    30f4:	2f 93       	push	r18
    30f6:	8c 81       	ldd	r24, Y+4	; 0x04
    30f8:	8f 93       	push	r24
    30fa:	8b 81       	ldd	r24, Y+3	; 0x03
    30fc:	8f 93       	push	r24
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	8f 93       	push	r24
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	8f 93       	push	r24
    3106:	3b e3       	ldi	r19, 0x3B	; 59
    3108:	e3 2e       	mov	r14, r19
    310a:	33 e0       	ldi	r19, 0x03	; 3
    310c:	f3 2e       	mov	r15, r19
    310e:	ff 92       	push	r15
    3110:	ef 92       	push	r14
    3112:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    nrk_kprintf( PSTR( "\r\n   Time [Min,Last,Max]: "));
    3116:	8c e0       	ldi	r24, 0x0C	; 12
    3118:	93 e0       	ldi	r25, 0x03	; 3
    311a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].min_exec_ticks);
    311e:	f8 01       	movw	r30, r16
    3120:	64 81       	ldd	r22, Z+4	; 0x04
    3122:	75 81       	ldd	r23, Z+5	; 0x05
    3124:	86 81       	ldd	r24, Z+6	; 0x06
    3126:	97 81       	ldd	r25, Z+7	; 0x07
    3128:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_ticks_to_time>
    312c:	29 83       	std	Y+1, r18	; 0x01
    312e:	3a 83       	std	Y+2, r19	; 0x02
    3130:	4b 83       	std	Y+3, r20	; 0x03
    3132:	5c 83       	std	Y+4, r21	; 0x04
    3134:	6d 83       	std	Y+5, r22	; 0x05
    3136:	7e 83       	std	Y+6, r23	; 0x06
    3138:	8f 83       	std	Y+7, r24	; 0x07
    313a:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    313c:	6d 81       	ldd	r22, Y+5	; 0x05
    313e:	7e 81       	ldd	r23, Y+6	; 0x06
    3140:	8f 81       	ldd	r24, Y+7	; 0x07
    3142:	98 85       	ldd	r25, Y+8	; 0x08
    3144:	a5 01       	movw	r20, r10
    3146:	94 01       	movw	r18, r8
    3148:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    314c:	5f 93       	push	r21
    314e:	4f 93       	push	r20
    3150:	3f 93       	push	r19
    3152:	2f 93       	push	r18
    3154:	8c 81       	ldd	r24, Y+4	; 0x04
    3156:	8f 93       	push	r24
    3158:	8b 81       	ldd	r24, Y+3	; 0x03
    315a:	8f 93       	push	r24
    315c:	8a 81       	ldd	r24, Y+2	; 0x02
    315e:	8f 93       	push	r24
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	8f 93       	push	r24
    3164:	4b e4       	ldi	r20, 0x4B	; 75
    3166:	c4 2e       	mov	r12, r20
    3168:	43 e0       	ldi	r20, 0x03	; 3
    316a:	d4 2e       	mov	r13, r20
    316c:	df 92       	push	r13
    316e:	cf 92       	push	r12
    3170:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].last_exec_ticks);
    3174:	f8 01       	movw	r30, r16
    3176:	64 85       	ldd	r22, Z+12	; 0x0c
    3178:	75 85       	ldd	r23, Z+13	; 0x0d
    317a:	86 85       	ldd	r24, Z+14	; 0x0e
    317c:	97 85       	ldd	r25, Z+15	; 0x0f
    317e:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_ticks_to_time>
    3182:	29 83       	std	Y+1, r18	; 0x01
    3184:	3a 83       	std	Y+2, r19	; 0x02
    3186:	4b 83       	std	Y+3, r20	; 0x03
    3188:	5c 83       	std	Y+4, r21	; 0x04
    318a:	6d 83       	std	Y+5, r22	; 0x05
    318c:	7e 83       	std	Y+6, r23	; 0x06
    318e:	8f 83       	std	Y+7, r24	; 0x07
    3190:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    3192:	6d 81       	ldd	r22, Y+5	; 0x05
    3194:	7e 81       	ldd	r23, Y+6	; 0x06
    3196:	8f 81       	ldd	r24, Y+7	; 0x07
    3198:	98 85       	ldd	r25, Y+8	; 0x08
    319a:	a5 01       	movw	r20, r10
    319c:	94 01       	movw	r18, r8
    319e:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    31a2:	5f 93       	push	r21
    31a4:	4f 93       	push	r20
    31a6:	3f 93       	push	r19
    31a8:	2f 93       	push	r18
    31aa:	8c 81       	ldd	r24, Y+4	; 0x04
    31ac:	8f 93       	push	r24
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	8f 93       	push	r24
    31b2:	8a 81       	ldd	r24, Y+2	; 0x02
    31b4:	8f 93       	push	r24
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	8f 93       	push	r24
    31ba:	df 92       	push	r13
    31bc:	cf 92       	push	r12
    31be:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].max_exec_ticks);
    31c2:	f8 01       	movw	r30, r16
    31c4:	60 85       	ldd	r22, Z+8	; 0x08
    31c6:	71 85       	ldd	r23, Z+9	; 0x09
    31c8:	82 85       	ldd	r24, Z+10	; 0x0a
    31ca:	93 85       	ldd	r25, Z+11	; 0x0b
    31cc:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_ticks_to_time>
    31d0:	29 83       	std	Y+1, r18	; 0x01
    31d2:	3a 83       	std	Y+2, r19	; 0x02
    31d4:	4b 83       	std	Y+3, r20	; 0x03
    31d6:	5c 83       	std	Y+4, r21	; 0x04
    31d8:	6d 83       	std	Y+5, r22	; 0x05
    31da:	7e 83       	std	Y+6, r23	; 0x06
    31dc:	8f 83       	std	Y+7, r24	; 0x07
    31de:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    31e0:	6d 81       	ldd	r22, Y+5	; 0x05
    31e2:	7e 81       	ldd	r23, Y+6	; 0x06
    31e4:	8f 81       	ldd	r24, Y+7	; 0x07
    31e6:	98 85       	ldd	r25, Y+8	; 0x08
    31e8:	a5 01       	movw	r20, r10
    31ea:	94 01       	movw	r18, r8
    31ec:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    31f0:	5f 93       	push	r21
    31f2:	4f 93       	push	r20
    31f4:	3f 93       	push	r19
    31f6:	2f 93       	push	r18
    31f8:	8c 81       	ldd	r24, Y+4	; 0x04
    31fa:	8f 93       	push	r24
    31fc:	8b 81       	ldd	r24, Y+3	; 0x03
    31fe:	8f 93       	push	r24
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	8f 93       	push	r24
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	8f 93       	push	r24
    3208:	ff 92       	push	r15
    320a:	ef 92       	push	r14
    320c:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    nrk_kprintf( PSTR( "\r\n   Swap-ins: "));
    3210:	0f b6       	in	r0, 0x3f	; 63
    3212:	f8 94       	cli
    3214:	de bf       	out	0x3e, r29	; 62
    3216:	0f be       	out	0x3f, r0	; 63
    3218:	cd bf       	out	0x3d, r28	; 61
    321a:	8c ef       	ldi	r24, 0xFC	; 252
    321c:	92 e0       	ldi	r25, 0x02	; 2
    321e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    printf( "%lu",cur_task_stats[pid].swapped_in );
    3222:	f8 01       	movw	r30, r16
    3224:	70 96       	adiw	r30, 0x10	; 16
    3226:	83 81       	ldd	r24, Z+3	; 0x03
    3228:	8f 93       	push	r24
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	8f 93       	push	r24
    322e:	81 81       	ldd	r24, Z+1	; 0x01
    3230:	8f 93       	push	r24
    3232:	f8 01       	movw	r30, r16
    3234:	80 89       	ldd	r24, Z+16	; 0x10
    3236:	8f 93       	push	r24
    3238:	5d e5       	ldi	r21, 0x5D	; 93
    323a:	e5 2e       	mov	r14, r21
    323c:	53 e0       	ldi	r21, 0x03	; 3
    323e:	f5 2e       	mov	r15, r21
    3240:	ff 92       	push	r15
    3242:	ef 92       	push	r14
    3244:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    nrk_kprintf( PSTR( "\r\n   Preemptions: "));
    3248:	89 ee       	ldi	r24, 0xE9	; 233
    324a:	92 e0       	ldi	r25, 0x02	; 2
    324c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    printf( "%lu",cur_task_stats[pid].preempted);
    3250:	f8 01       	movw	r30, r16
    3252:	78 96       	adiw	r30, 0x18	; 24
    3254:	83 81       	ldd	r24, Z+3	; 0x03
    3256:	8f 93       	push	r24
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	8f 93       	push	r24
    325c:	81 81       	ldd	r24, Z+1	; 0x01
    325e:	8f 93       	push	r24
    3260:	f8 01       	movw	r30, r16
    3262:	80 8d       	ldd	r24, Z+24	; 0x18
    3264:	8f 93       	push	r24
    3266:	ff 92       	push	r15
    3268:	ef 92       	push	r14
    326a:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    nrk_kprintf( PSTR( "\r\n   Kernel Violations: "));
    326e:	80 ed       	ldi	r24, 0xD0	; 208
    3270:	92 e0       	ldi	r25, 0x02	; 2
    3272:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    printf( "%u",cur_task_stats[pid].violations);
    3276:	f8 01       	movw	r30, r16
    3278:	84 8d       	ldd	r24, Z+28	; 0x1c
    327a:	1f 92       	push	r1
    327c:	8f 93       	push	r24
    327e:	61 e6       	ldi	r22, 0x61	; 97
    3280:	e6 2e       	mov	r14, r22
    3282:	63 e0       	ldi	r22, 0x03	; 3
    3284:	f6 2e       	mov	r15, r22
    3286:	ff 92       	push	r15
    3288:	ef 92       	push	r14
    328a:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    nrk_kprintf( PSTR( "\r\n   Overflow Error Status: "));
    328e:	83 eb       	ldi	r24, 0xB3	; 179
    3290:	92 e0       	ldi	r25, 0x02	; 2
    3292:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    printf( "%u",cur_task_stats[pid].overflow);
    3296:	f8 01       	movw	r30, r16
    3298:	85 8d       	ldd	r24, Z+29	; 0x1d
    329a:	1f 92       	push	r1
    329c:	8f 93       	push	r24
    329e:	ff 92       	push	r15
    32a0:	ef 92       	push	r14
    32a2:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    nrk_kprintf( PSTR("\r\n") );
    32a6:	80 eb       	ldi	r24, 0xB0	; 176
    32a8:	92 e0       	ldi	r25, 0x02	; 2
    32aa:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	de bf       	out	0x3e, r29	; 62
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	cd bf       	out	0x3d, r28	; 61

}
    32b8:	28 96       	adiw	r28, 0x08	; 8
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	ff 90       	pop	r15
    32ce:	ef 90       	pop	r14
    32d0:	df 90       	pop	r13
    32d2:	cf 90       	pop	r12
    32d4:	bf 90       	pop	r11
    32d6:	af 90       	pop	r10
    32d8:	9f 90       	pop	r9
    32da:	8f 90       	pop	r8
    32dc:	08 95       	ret

000032de <nrk_stats_display_all>:


void nrk_stats_display_all()
{
    32de:	cf 93       	push	r28
    uint8_t i;
    nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));
    32e0:	83 e9       	ldi	r24, 0x93	; 147
    32e2:	92 e0       	ldi	r25, 0x02	; 2
    32e4:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>

    for(i=0; i<NRK_MAX_TASKS; i++ )
    32e8:	c0 e0       	ldi	r28, 0x00	; 0
        nrk_stats_display_pid(i);
    32ea:	8c 2f       	mov	r24, r28
    32ec:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <nrk_stats_display_pid>
void nrk_stats_display_all()
{
    uint8_t i;
    nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));

    for(i=0; i<NRK_MAX_TASKS; i++ )
    32f0:	cf 5f       	subi	r28, 0xFF	; 255
    32f2:	c5 30       	cpi	r28, 0x05	; 5
    32f4:	d1 f7       	brne	.-12     	; 0x32ea <nrk_stats_display_all+0xc>
        nrk_stats_display_pid(i);
}
    32f6:	cf 91       	pop	r28
    32f8:	08 95       	ret

000032fa <nrk_stats_get>:


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    32fa:	db 01       	movw	r26, r22
    if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    32fc:	85 30       	cpi	r24, 0x05	; 5
    32fe:	08 f0       	brcs	.+2      	; 0x3302 <nrk_stats_get+0x8>
    3300:	54 c0       	rjmp	.+168    	; 0x33aa <nrk_stats_get+0xb0>

    t->total_ticks=cur_task_stats[pid].total_ticks;
    3302:	9e e1       	ldi	r25, 0x1E	; 30
    3304:	89 9f       	mul	r24, r25
    3306:	f0 01       	movw	r30, r0
    3308:	11 24       	eor	r1, r1
    330a:	ef 5a       	subi	r30, 0xAF	; 175
    330c:	f6 4f       	sbci	r31, 0xF6	; 246
    330e:	40 81       	ld	r20, Z
    3310:	51 81       	ldd	r21, Z+1	; 0x01
    3312:	62 81       	ldd	r22, Z+2	; 0x02
    3314:	73 81       	ldd	r23, Z+3	; 0x03
    3316:	4d 93       	st	X+, r20
    3318:	5d 93       	st	X+, r21
    331a:	6d 93       	st	X+, r22
    331c:	7c 93       	st	X, r23
    331e:	13 97       	sbiw	r26, 0x03	; 3
    t->min_exec_ticks=cur_task_stats[pid].min_exec_ticks;
    3320:	44 81       	ldd	r20, Z+4	; 0x04
    3322:	55 81       	ldd	r21, Z+5	; 0x05
    3324:	66 81       	ldd	r22, Z+6	; 0x06
    3326:	77 81       	ldd	r23, Z+7	; 0x07
    3328:	14 96       	adiw	r26, 0x04	; 4
    332a:	4d 93       	st	X+, r20
    332c:	5d 93       	st	X+, r21
    332e:	6d 93       	st	X+, r22
    3330:	7c 93       	st	X, r23
    3332:	17 97       	sbiw	r26, 0x07	; 7
    t->max_exec_ticks=cur_task_stats[pid].max_exec_ticks;
    3334:	40 85       	ldd	r20, Z+8	; 0x08
    3336:	51 85       	ldd	r21, Z+9	; 0x09
    3338:	62 85       	ldd	r22, Z+10	; 0x0a
    333a:	73 85       	ldd	r23, Z+11	; 0x0b
    333c:	18 96       	adiw	r26, 0x08	; 8
    333e:	4d 93       	st	X+, r20
    3340:	5d 93       	st	X+, r21
    3342:	6d 93       	st	X+, r22
    3344:	7c 93       	st	X, r23
    3346:	1b 97       	sbiw	r26, 0x0b	; 11
    t->last_exec_ticks=cur_task_stats[pid].last_exec_ticks;
    3348:	44 85       	ldd	r20, Z+12	; 0x0c
    334a:	55 85       	ldd	r21, Z+13	; 0x0d
    334c:	66 85       	ldd	r22, Z+14	; 0x0e
    334e:	77 85       	ldd	r23, Z+15	; 0x0f
    3350:	1c 96       	adiw	r26, 0x0c	; 12
    3352:	4d 93       	st	X+, r20
    3354:	5d 93       	st	X+, r21
    3356:	6d 93       	st	X+, r22
    3358:	7c 93       	st	X, r23
    335a:	1f 97       	sbiw	r26, 0x0f	; 15
    t->swapped_in=cur_task_stats[pid].swapped_in;
    335c:	40 89       	ldd	r20, Z+16	; 0x10
    335e:	51 89       	ldd	r21, Z+17	; 0x11
    3360:	62 89       	ldd	r22, Z+18	; 0x12
    3362:	73 89       	ldd	r23, Z+19	; 0x13
    3364:	50 96       	adiw	r26, 0x10	; 16
    3366:	4d 93       	st	X+, r20
    3368:	5d 93       	st	X+, r21
    336a:	6d 93       	st	X+, r22
    336c:	7c 93       	st	X, r23
    336e:	53 97       	sbiw	r26, 0x13	; 19
    t->cur_ticks=cur_task_stats[pid].cur_ticks;
    3370:	44 89       	ldd	r20, Z+20	; 0x14
    3372:	55 89       	ldd	r21, Z+21	; 0x15
    3374:	66 89       	ldd	r22, Z+22	; 0x16
    3376:	77 89       	ldd	r23, Z+23	; 0x17
    3378:	54 96       	adiw	r26, 0x14	; 20
    337a:	4d 93       	st	X+, r20
    337c:	5d 93       	st	X+, r21
    337e:	6d 93       	st	X+, r22
    3380:	7c 93       	st	X, r23
    3382:	57 97       	sbiw	r26, 0x17	; 23
    t->preempted=cur_task_stats[pid].preempted;
    3384:	40 8d       	ldd	r20, Z+24	; 0x18
    3386:	51 8d       	ldd	r21, Z+25	; 0x19
    3388:	62 8d       	ldd	r22, Z+26	; 0x1a
    338a:	73 8d       	ldd	r23, Z+27	; 0x1b
    338c:	58 96       	adiw	r26, 0x18	; 24
    338e:	4d 93       	st	X+, r20
    3390:	5d 93       	st	X+, r21
    3392:	6d 93       	st	X+, r22
    3394:	7c 93       	st	X, r23
    3396:	5b 97       	sbiw	r26, 0x1b	; 27
    t->violations=cur_task_stats[pid].violations;
    3398:	84 8d       	ldd	r24, Z+28	; 0x1c
    339a:	5c 96       	adiw	r26, 0x1c	; 28
    339c:	8c 93       	st	X, r24
    339e:	5c 97       	sbiw	r26, 0x1c	; 28
    t->overflow=cur_task_stats[pid].overflow;
    33a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    33a2:	5d 96       	adiw	r26, 0x1d	; 29
    33a4:	8c 93       	st	X, r24

    return NRK_OK;
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	08 95       	ret
}


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    33aa:	8f ef       	ldi	r24, 0xFF	; 255
    t->preempted=cur_task_stats[pid].preempted;
    t->violations=cur_task_stats[pid].violations;
    t->overflow=cur_task_stats[pid].overflow;

    return NRK_OK;
}
    33ac:	08 95       	ret

000033ae <_nrk_errno_set>:
inline void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    33ae:	e0 91 bb 0b 	lds	r30, 0x0BBB
    33b2:	f0 91 bc 0b 	lds	r31, 0x0BBC
    33b6:	84 87       	std	Z+12, r24	; 0x0c
    33b8:	08 95       	ret

000033ba <nrk_errno_get>:
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    33ba:	e0 91 bb 0b 	lds	r30, 0x0BBB
    33be:	f0 91 bc 0b 	lds	r31, 0x0BBC
}
    33c2:	84 85       	ldd	r24, Z+12	; 0x0c
    33c4:	08 95       	ret

000033c6 <_nrk_log_error>:

#ifdef NRK_LOG_ERRORS
void _nrk_log_error(uint8_t error_num, uint8_t error_task)
{
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	d8 2f       	mov	r29, r24
    33cc:	c6 2f       	mov	r28, r22

    // 1) Load error cnt and add 1
    error_cnt=nrk_eeprom_read_byte(NRK_ERROR_EEPROM_INDEX);
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	92 e0       	ldi	r25, 0x02	; 2
    33d2:	0e 94 4a 14 	call	0x2894	; 0x2894 <nrk_eeprom_read_byte>
    error_cnt++;
    33d6:	8f 5f       	subi	r24, 0xFF	; 255
    if(error_cnt==255) error_cnt=0;
    33d8:	8f 3f       	cpi	r24, 0xFF	; 255
    33da:	19 f0       	breq	.+6      	; 0x33e2 <_nrk_log_error+0x1c>
void _nrk_log_error(uint8_t error_num, uint8_t error_task)
{

    // 1) Load error cnt and add 1
    error_cnt=nrk_eeprom_read_byte(NRK_ERROR_EEPROM_INDEX);
    error_cnt++;
    33dc:	80 93 ef 05 	sts	0x05EF, r24
    33e0:	02 c0       	rjmp	.+4      	; 0x33e6 <_nrk_log_error+0x20>
    if(error_cnt==255) error_cnt=0;
    33e2:	10 92 ef 05 	sts	0x05EF, r1
    // 2) write error
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6),error_num);
    33e6:	20 91 ef 05 	lds	r18, 0x05EF
    33ea:	36 e0       	ldi	r19, 0x06	; 6
    33ec:	23 9f       	mul	r18, r19
    33ee:	c0 01       	movw	r24, r0
    33f0:	11 24       	eor	r1, r1
    33f2:	6d 2f       	mov	r22, r29
    33f4:	8f 5f       	subi	r24, 0xFF	; 255
    33f6:	9d 4f       	sbci	r25, 0xFD	; 253
    33f8:	0e 94 4c 14 	call	0x2898	; 0x2898 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+1),error_task);
    33fc:	80 91 ef 05 	lds	r24, 0x05EF
    3400:	46 e0       	ldi	r20, 0x06	; 6
    3402:	84 9f       	mul	r24, r20
    3404:	c0 01       	movw	r24, r0
    3406:	11 24       	eor	r1, r1
    3408:	6c 2f       	mov	r22, r28
    340a:	8e 5f       	subi	r24, 0xFE	; 254
    340c:	9d 4f       	sbci	r25, 0xFD	; 253
    340e:	0e 94 4c 14 	call	0x2898	; 0x2898 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+2),(nrk_system_time.secs>>24)&0xff);
    3412:	20 91 ef 05 	lds	r18, 0x05EF
    3416:	40 91 b2 0b 	lds	r20, 0x0BB2
    341a:	50 91 b3 0b 	lds	r21, 0x0BB3
    341e:	60 91 b4 0b 	lds	r22, 0x0BB4
    3422:	70 91 b5 0b 	lds	r23, 0x0BB5
    3426:	67 2f       	mov	r22, r23
    3428:	77 27       	eor	r23, r23
    342a:	88 27       	eor	r24, r24
    342c:	99 27       	eor	r25, r25
    342e:	46 e0       	ldi	r20, 0x06	; 6
    3430:	24 9f       	mul	r18, r20
    3432:	90 01       	movw	r18, r0
    3434:	11 24       	eor	r1, r1
    3436:	c9 01       	movw	r24, r18
    3438:	8d 5f       	subi	r24, 0xFD	; 253
    343a:	9d 4f       	sbci	r25, 0xFD	; 253
    343c:	0e 94 4c 14 	call	0x2898	; 0x2898 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+3),(nrk_system_time.secs>>16)&0xff);
    3440:	20 91 ef 05 	lds	r18, 0x05EF
    3444:	40 91 b2 0b 	lds	r20, 0x0BB2
    3448:	50 91 b3 0b 	lds	r21, 0x0BB3
    344c:	60 91 b4 0b 	lds	r22, 0x0BB4
    3450:	70 91 b5 0b 	lds	r23, 0x0BB5
    3454:	88 27       	eor	r24, r24
    3456:	99 27       	eor	r25, r25
    3458:	46 e0       	ldi	r20, 0x06	; 6
    345a:	24 9f       	mul	r18, r20
    345c:	90 01       	movw	r18, r0
    345e:	11 24       	eor	r1, r1
    3460:	c9 01       	movw	r24, r18
    3462:	8c 5f       	subi	r24, 0xFC	; 252
    3464:	9d 4f       	sbci	r25, 0xFD	; 253
    3466:	0e 94 4c 14 	call	0x2898	; 0x2898 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+4),(nrk_system_time.secs>>8)&0xff);
    346a:	20 91 ef 05 	lds	r18, 0x05EF
    346e:	40 91 b2 0b 	lds	r20, 0x0BB2
    3472:	50 91 b3 0b 	lds	r21, 0x0BB3
    3476:	60 91 b4 0b 	lds	r22, 0x0BB4
    347a:	70 91 b5 0b 	lds	r23, 0x0BB5
    347e:	99 27       	eor	r25, r25
    3480:	87 2f       	mov	r24, r23
    3482:	76 2f       	mov	r23, r22
    3484:	65 2f       	mov	r22, r21
    3486:	46 e0       	ldi	r20, 0x06	; 6
    3488:	24 9f       	mul	r18, r20
    348a:	90 01       	movw	r18, r0
    348c:	11 24       	eor	r1, r1
    348e:	c9 01       	movw	r24, r18
    3490:	8b 5f       	subi	r24, 0xFB	; 251
    3492:	9d 4f       	sbci	r25, 0xFD	; 253
    3494:	0e 94 4c 14 	call	0x2898	; 0x2898 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+5),(nrk_system_time.secs)&0xff);
    3498:	80 91 ef 05 	lds	r24, 0x05EF
    349c:	26 e0       	ldi	r18, 0x06	; 6
    349e:	82 9f       	mul	r24, r18
    34a0:	c0 01       	movw	r24, r0
    34a2:	11 24       	eor	r1, r1
    34a4:	60 91 b2 0b 	lds	r22, 0x0BB2
    34a8:	8a 5f       	subi	r24, 0xFA	; 250
    34aa:	9d 4f       	sbci	r25, 0xFD	; 253
    34ac:	0e 94 4c 14 	call	0x2898	; 0x2898 <nrk_eeprom_write_byte>
    // 3) write error cnt back
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX,error_cnt);
    34b0:	60 91 ef 05 	lds	r22, 0x05EF
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	92 e0       	ldi	r25, 0x02	; 2
}
    34b8:	df 91       	pop	r29
    34ba:	cf 91       	pop	r28
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+2),(nrk_system_time.secs>>24)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+3),(nrk_system_time.secs>>16)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+4),(nrk_system_time.secs>>8)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+5),(nrk_system_time.secs)&0xff);
    // 3) write error cnt back
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX,error_cnt);
    34bc:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <nrk_eeprom_write_byte>

000034c0 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    34c0:	fc 01       	movw	r30, r24
    if (error_num == 0)
    34c2:	80 91 e7 09 	lds	r24, 0x09E7
    34c6:	88 23       	and	r24, r24
    34c8:	31 f0       	breq	.+12     	; 0x34d6 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    34ca:	db 01       	movw	r26, r22
    34cc:	8c 93       	st	X, r24
    *task_id = error_task;
    34ce:	80 91 fe 06 	lds	r24, 0x06FE
    34d2:	80 83       	st	Z, r24
    return 1;
    34d4:	81 e0       	ldi	r24, 0x01	; 1
}
    34d6:	08 95       	ret

000034d8 <nrk_error_print>:
uint8_t i,t;




    if (error_num == 0)
    34d8:	80 91 e7 09 	lds	r24, 0x09E7
    34dc:	88 23       	and	r24, r24
    34de:	09 f4       	brne	.+2      	; 0x34e2 <nrk_error_print+0xa>
    34e0:	83 c0       	rjmp	.+262    	; 0x35e8 <nrk_error_print+0x110>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    34e2:	8b ea       	ldi	r24, 0xAB	; 171
    34e4:	95 e0       	ldi	r25, 0x05	; 5
    34e6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
        printf ("%d", error_task);
    34ea:	80 91 fe 06 	lds	r24, 0x06FE
    34ee:	1f 92       	push	r1
    34f0:	8f 93       	push	r24
    34f2:	86 e9       	ldi	r24, 0x96	; 150
    34f4:	92 e0       	ldi	r25, 0x02	; 2
    34f6:	9f 93       	push	r25
    34f8:	8f 93       	push	r24
    34fa:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
        nrk_kprintf (PSTR ("): "));
    34fe:	87 ea       	ldi	r24, 0xA7	; 167
    3500:	95 e0       	ldi	r25, 0x05	; 5
    3502:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	80 91 e7 09 	lds	r24, 0x09E7
    3512:	88 31       	cpi	r24, 0x18	; 24
    3514:	10 f0       	brcs	.+4      	; 0x351a <nrk_error_print+0x42>
            error_num = NRK_UNKOWN;
    3516:	10 92 e7 09 	sts	0x09E7, r1
        switch (error_num)
    351a:	e0 91 e7 09 	lds	r30, 0x09E7
    351e:	8e 2f       	mov	r24, r30
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	fc 01       	movw	r30, r24
    3524:	31 97       	sbiw	r30, 0x01	; 1
    3526:	e6 31       	cpi	r30, 0x16	; 22
    3528:	f1 05       	cpc	r31, r1
    352a:	08 f0       	brcs	.+2      	; 0x352e <nrk_error_print+0x56>
    352c:	46 c0       	rjmp	.+140    	; 0x35ba <nrk_error_print+0xe2>
    352e:	e6 54       	subi	r30, 0x46	; 70
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    3536:	8b e6       	ldi	r24, 0x6B	; 107
    3538:	95 e0       	ldi	r25, 0x05	; 5
    353a:	41 c0       	rjmp	.+130    	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    353c:	84 e4       	ldi	r24, 0x44	; 68
    353e:	95 e0       	ldi	r25, 0x05	; 5
    3540:	3e c0       	rjmp	.+124    	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    3542:	80 e3       	ldi	r24, 0x30	; 48
    3544:	95 e0       	ldi	r25, 0x05	; 5
    3546:	3b c0       	rjmp	.+118    	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    3548:	8a e1       	ldi	r24, 0x1A	; 26
    354a:	95 e0       	ldi	r25, 0x05	; 5
    354c:	38 c0       	rjmp	.+112    	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    354e:	8f ef       	ldi	r24, 0xFF	; 255
    3550:	94 e0       	ldi	r25, 0x04	; 4
    3552:	35 c0       	rjmp	.+106    	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    3554:	89 ee       	ldi	r24, 0xE9	; 233
    3556:	94 e0       	ldi	r25, 0x04	; 4
    3558:	32 c0       	rjmp	.+100    	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    355a:	81 ed       	ldi	r24, 0xD1	; 209
    355c:	94 e0       	ldi	r25, 0x04	; 4
    355e:	2f c0       	rjmp	.+94     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    3560:	8e eb       	ldi	r24, 0xBE	; 190
    3562:	94 e0       	ldi	r25, 0x04	; 4
    3564:	2c c0       	rjmp	.+88     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    3566:	8b ea       	ldi	r24, 0xAB	; 171
    3568:	94 e0       	ldi	r25, 0x04	; 4
    356a:	29 c0       	rjmp	.+82     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    356c:	8d e8       	ldi	r24, 0x8D	; 141
    356e:	94 e0       	ldi	r25, 0x04	; 4
    3570:	26 c0       	rjmp	.+76     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    3572:	88 e6       	ldi	r24, 0x68	; 104
    3574:	94 e0       	ldi	r25, 0x04	; 4
    3576:	23 c0       	rjmp	.+70     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    3578:	8c e5       	ldi	r24, 0x5C	; 92
    357a:	94 e0       	ldi	r25, 0x04	; 4
    357c:	20 c0       	rjmp	.+64     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    357e:	81 e4       	ldi	r24, 0x41	; 65
    3580:	94 e0       	ldi	r25, 0x04	; 4
    3582:	1d c0       	rjmp	.+58     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    3584:	82 e3       	ldi	r24, 0x32	; 50
    3586:	94 e0       	ldi	r25, 0x04	; 4
    3588:	1a c0       	rjmp	.+52     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    358a:	8e e1       	ldi	r24, 0x1E	; 30
    358c:	94 e0       	ldi	r25, 0x04	; 4
    358e:	17 c0       	rjmp	.+46     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    3590:	8d e0       	ldi	r24, 0x0D	; 13
    3592:	94 e0       	ldi	r25, 0x04	; 4
    3594:	14 c0       	rjmp	.+40     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    3596:	89 ef       	ldi	r24, 0xF9	; 249
    3598:	93 e0       	ldi	r25, 0x03	; 3
    359a:	11 c0       	rjmp	.+34     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    359c:	89 ed       	ldi	r24, 0xD9	; 217
    359e:	93 e0       	ldi	r25, 0x03	; 3
    35a0:	0e c0       	rjmp	.+28     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    35a2:	81 ec       	ldi	r24, 0xC1	; 193
    35a4:	93 e0       	ldi	r25, 0x03	; 3
    35a6:	0b c0       	rjmp	.+22     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    35a8:	86 ea       	ldi	r24, 0xA6	; 166
    35aa:	93 e0       	ldi	r25, 0x03	; 3
    35ac:	08 c0       	rjmp	.+16     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    35ae:	85 e9       	ldi	r24, 0x95	; 149
    35b0:	93 e0       	ldi	r25, 0x03	; 3
    35b2:	05 c0       	rjmp	.+10     	; 0x35be <nrk_error_print+0xe6>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    35b4:	86 e8       	ldi	r24, 0x86	; 134
    35b6:	93 e0       	ldi	r25, 0x03	; 3
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <nrk_error_print+0xe6>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    35ba:	8f e7       	ldi	r24, 0x7F	; 127
    35bc:	93 e0       	ldi	r25, 0x03	; 3
    35be:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
        }
        putchar ('\r');
    35c2:	60 91 20 0c 	lds	r22, 0x0C20
    35c6:	70 91 21 0c 	lds	r23, 0x0C21
    35ca:	8d e0       	ldi	r24, 0x0D	; 13
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	0e 94 94 31 	call	0x6328	; 0x6328 <fputc>
        putchar ('\n');
    35d2:	60 91 20 0c 	lds	r22, 0x0C20
    35d6:	70 91 21 0c 	lds	r23, 0x0C21
    35da:	8a e0       	ldi	r24, 0x0A	; 10
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	0e 94 94 31 	call	0x6328	; 0x6328 <fputc>
}


#endif

    return error_num;
    35e2:	80 91 e7 09 	lds	r24, 0x09E7
    35e6:	08 95       	ret




    if (error_num == 0)
        return 0;
    35e8:	80 e0       	ldi	r24, 0x00	; 0


#endif

    return error_num;
}
    35ea:	08 95       	ret

000035ec <clear_regs>:

inline void clear_regs()
{

        GTCCR=0;
    35ec:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    35ee:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    35f2:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    35f4:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    35f6:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    35f8:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    35fa:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    35fc:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    35fe:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    3600:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    3602:	10 92 9b 00 	sts	0x009B, r1
    3606:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    360a:	10 92 99 00 	sts	0x0099, r1
    360e:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    3612:	10 92 95 00 	sts	0x0095, r1
    3616:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    361a:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    361e:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    3622:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    3624:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    3628:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    362c:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    3630:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    3634:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    3638:	e0 eb       	ldi	r30, 0xB0	; 176
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	10 82       	st	Z, r1
        TCCR2A=0;
    363e:	10 82       	st	Z, r1
        TIFR2=0;
    3640:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    3642:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    3646:	8f ef       	ldi	r24, 0xFF	; 255
    3648:	84 bf       	out	0x34, r24	; 52
    364a:	08 95       	ret

0000364c <nrk_error_handle>:
    		nrk_watchdog_disable();
	#endif
#endif

#ifdef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    364c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    nrk_watchdog_disable();
    3650:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <nrk_watchdog_disable>
                        ::);
#endif

#ifdef NRK_REBOOT_ON_ERROR
        // wait for watchdog to kick in
        if(error_num!=NRK_WATCHDOG_ERROR && error_num!=NRK_BOD_ERROR && error_num!=NRK_EXT_RST_ERROR)
    3654:	80 91 e7 09 	lds	r24, 0x09E7
    3658:	80 31       	cpi	r24, 0x10	; 16
    365a:	71 f0       	breq	.+28     	; 0x3678 <nrk_error_handle+0x2c>
    365c:	83 51       	subi	r24, 0x13	; 19
    365e:	82 30       	cpi	r24, 0x02	; 2
    3660:	58 f0       	brcs	.+22     	; 0x3678 <nrk_error_handle+0x2c>
        {
	    clear_regs();
    3662:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <clear_regs>
	    #ifdef NRK_REPORT_ERRORS
	    nrk_kprintf(PSTR("NRK Reboot...\r\n" ));
    3666:	87 eb       	ldi	r24, 0xB7	; 183
    3668:	95 e0       	ldi	r25, 0x05	; 5
    366a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>
	    #endif NRK_REPORT_ERRORS
            nrk_watchdog_enable();
    366e:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <nrk_watchdog_enable>
            nrk_int_disable();
    3672:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    3676:	ff cf       	rjmp	.-2      	; 0x3676 <nrk_error_handle+0x2a>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    3678:	10 92 e7 09 	sts	0x09E7, r1
    367c:	08 95       	ret

0000367e <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    367e:	80 93 e7 09 	sts	0x09E7, r24
    error_task = nrk_cur_task_TCB->task_ID;
    3682:	e0 91 bb 0b 	lds	r30, 0x0BBB
    3686:	f0 91 bc 0b 	lds	r31, 0x0BBC
    368a:	60 85       	ldd	r22, Z+8	; 0x08
    368c:	60 93 fe 06 	sts	0x06FE, r22

#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
    3690:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <_nrk_log_error>
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    3694:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <nrk_error_print>
#endif 

nrk_error_handle();
    3698:	0c 94 26 1b 	jmp	0x364c	; 0x364c <nrk_error_handle>

0000369c <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    369c:	80 93 e7 09 	sts	0x09E7, r24
    error_task = task;
    36a0:	60 93 fe 06 	sts	0x06FE, r22

#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
    36a4:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <_nrk_log_error>
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    36a8:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <nrk_error_print>
#endif 

nrk_error_handle();
    36ac:	0c 94 26 1b 	jmp	0x364c	; 0x364c <nrk_error_handle>

000036b0 <pause>:
    }

}

void pause()
{
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29
    36b4:	1f 92       	push	r1
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    36ba:	19 82       	std	Y+1, r1	; 0x01
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	84 36       	cpi	r24, 0x64	; 100
    36c0:	40 f4       	brcc	.+16     	; 0x36d2 <pause+0x22>
        nrk_spin_wait_us (2000);
    36c2:	80 ed       	ldi	r24, 0xD0	; 208
    36c4:	97 e0       	ldi	r25, 0x07	; 7
    36c6:	0e 94 46 2a 	call	0x548c	; 0x548c <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	8f 5f       	subi	r24, 0xFF	; 255
    36ce:	89 83       	std	Y+1, r24	; 0x01
    36d0:	f5 cf       	rjmp	.-22     	; 0x36bc <pause+0xc>
        nrk_spin_wait_us (2000);
}
    36d2:	0f 90       	pop	r0
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	08 95       	ret

000036da <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 cc 13 	call	0x2798	; 0x2798 <nrk_led_set>
    pause();
    36e2:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <pause>
    pause();
    36e6:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <pause>
    pause();
    36ea:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <pause>
    nrk_led_clr(GREEN_LED);
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	0e 94 b5 13 	call	0x276a	; 0x276a <nrk_led_clr>
    pause();
    36f6:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <pause>

000036fa <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	0e 94 cc 13 	call	0x2798	; 0x2798 <nrk_led_set>
    pause();
    3702:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <pause>
    nrk_led_clr(GREEN_LED);
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	0e 94 b5 13 	call	0x276a	; 0x276a <nrk_led_clr>
    pause();
    370e:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <pause>

00003712 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    3712:	ff 92       	push	r15
    3714:	0f 93       	push	r16
    3716:	1f 93       	push	r17
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	00 d0       	rcall	.+0      	; 0x371e <blink_morse_code_error+0xc>
    371e:	1f 92       	push	r1
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    3724:	1f 92       	push	r1
    3726:	8f 93       	push	r24
    3728:	86 e9       	ldi	r24, 0x96	; 150
    372a:	92 e0       	ldi	r25, 0x02	; 2
    372c:	9f 93       	push	r25
    372e:	8f 93       	push	r24
    3730:	8e 01       	movw	r16, r28
    3732:	0f 5f       	subi	r16, 0xFF	; 255
    3734:	1f 4f       	sbci	r17, 0xFF	; 255
    3736:	1f 93       	push	r17
    3738:	0f 93       	push	r16
    373a:	0e 94 16 32 	call	0x642c	; 0x642c <sprintf>

    for(i=0; i<strlen(str); i++ )
    373e:	0f 90       	pop	r0
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	f1 2c       	mov	r15, r1
    374c:	f8 01       	movw	r30, r16
    374e:	01 90       	ld	r0, Z+
    3750:	00 20       	and	r0, r0
    3752:	e9 f7       	brne	.-6      	; 0x374e <blink_morse_code_error+0x3c>
    3754:	31 97       	sbiw	r30, 0x01	; 1
    3756:	e0 1b       	sub	r30, r16
    3758:	f1 0b       	sbc	r31, r17
    375a:	8f 2d       	mov	r24, r15
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	8e 17       	cp	r24, r30
    3760:	9f 07       	cpc	r25, r31
    3762:	08 f0       	brcs	.+2      	; 0x3766 <blink_morse_code_error+0x54>
    3764:	5d c0       	rjmp	.+186    	; 0x3820 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    3766:	f8 01       	movw	r30, r16
    3768:	e8 0f       	add	r30, r24
    376a:	f9 1f       	adc	r31, r25
    376c:	e0 81       	ld	r30, Z
    376e:	8e 2f       	mov	r24, r30
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	fc 01       	movw	r30, r24
    3774:	f0 97       	sbiw	r30, 0x30	; 48
    3776:	ea 30       	cpi	r30, 0x0A	; 10
    3778:	f1 05       	cpc	r31, r1
    377a:	08 f0       	brcs	.+2      	; 0x377e <blink_morse_code_error+0x6c>
    377c:	49 c0       	rjmp	.+146    	; 0x3810 <blink_morse_code_error+0xfe>
    377e:	e0 53       	subi	r30, 0x30	; 48
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__tablejump2__>
        {
        case '0':
            blink_dash();
    3786:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
    378a:	02 c0       	rjmp	.+4      	; 0x3790 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    378c:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
            blink_dash();
    3790:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dash();
    3794:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dash();
    3798:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dash();
    379c:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            break;
    37a0:	37 c0       	rjmp	.+110    	; 0x3810 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    37a2:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
            blink_dot();
    37a6:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
    37aa:	f4 cf       	rjmp	.-24     	; 0x3794 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    37ac:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
            blink_dot();
    37b0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
            blink_dot();
    37b4:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
    37b8:	ef cf       	rjmp	.-34     	; 0x3798 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    37ba:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
            blink_dot();
    37be:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
            blink_dot();
    37c2:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
            blink_dot();
    37c6:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
    37ca:	e8 cf       	rjmp	.-48     	; 0x379c <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    37cc:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
    37d0:	02 c0       	rjmp	.+4      	; 0x37d6 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    37d2:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dot();
    37d6:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
    37da:	04 c0       	rjmp	.+8      	; 0x37e4 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    37dc:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dash();
    37e0:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dot();
    37e4:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
    37e8:	06 c0       	rjmp	.+12     	; 0x37f6 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    37ea:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dash();
    37ee:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dash();
    37f2:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dot();
    37f6:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
    37fa:	08 c0       	rjmp	.+16     	; 0x380c <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    37fc:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dash();
    3800:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dash();
    3804:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dash();
    3808:	0e 94 6d 1b 	call	0x36da	; 0x36da <blink_dash>
            blink_dot();
    380c:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <blink_dot>
            break;
        }
        pause();
    3810:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <pause>
        pause();
    3814:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <pause>
        pause();
    3818:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    381c:	f3 94       	inc	r15
    381e:	96 cf       	rjmp	.-212    	; 0x374c <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	df 91       	pop	r29
    3828:	cf 91       	pop	r28
    382a:	1f 91       	pop	r17
    382c:	0f 91       	pop	r16
    382e:	ff 90       	pop	r15
    3830:	08 95       	ret

00003832 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    3832:	6f 92       	push	r6
    3834:	7f 92       	push	r7
    3836:	8f 92       	push	r8
    3838:	9f 92       	push	r9
    383a:	af 92       	push	r10
    383c:	bf 92       	push	r11
    383e:	cf 92       	push	r12
    3840:	df 92       	push	r13
    3842:	ef 92       	push	r14
    3844:	ff 92       	push	r15
    3846:	0f 93       	push	r16
    3848:	1f 93       	push	r17
    384a:	cf 93       	push	r28
    384c:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    384e:	87 ec       	ldi	r24, 0xC7	; 199
    3850:	95 e0       	ldi	r25, 0x05	; 5
    3852:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    3856:	e0 91 bb 0b 	lds	r30, 0x0BBB
    385a:	f0 91 bc 0b 	lds	r31, 0x0BBC
    385e:	80 85       	ldd	r24, Z+8	; 0x08
    3860:	28 2f       	mov	r18, r24
    3862:	33 27       	eor	r19, r19
    3864:	27 fd       	sbrc	r18, 7
    3866:	30 95       	com	r19
    3868:	3f 93       	push	r19
    386a:	8f 93       	push	r24
    386c:	84 e6       	ldi	r24, 0x64	; 100
    386e:	93 e0       	ldi	r25, 0x03	; 3
    3870:	9f 93       	push	r25
    3872:	8f 93       	push	r24
    3874:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    3878:	e0 91 bb 0b 	lds	r30, 0x0BBB
    387c:	f0 91 bc 0b 	lds	r31, 0x0BBC
    3880:	c2 81       	ldd	r28, Z+2	; 0x02
    3882:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	88 e9       	ldi	r24, 0x98	; 152
    388a:	93 e0       	ldi	r25, 0x03	; 3
    388c:	9f 93       	push	r25
    388e:	8f 93       	push	r24
    3890:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    printf( "canary = %x ",*stkc );
    3894:	88 81       	ld	r24, Y
    3896:	1f 92       	push	r1
    3898:	8f 93       	push	r24
    389a:	8d e6       	ldi	r24, 0x6D	; 109
    389c:	93 e0       	ldi	r25, 0x03	; 3
    389e:	9f 93       	push	r25
    38a0:	8f 93       	push	r24
    38a2:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    38a6:	e0 91 bb 0b 	lds	r30, 0x0BBB
    38aa:	f0 91 bc 0b 	lds	r31, 0x0BBC
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    38ae:	81 81       	ldd	r24, Z+1	; 0x01
    38b0:	8f 93       	push	r24
    38b2:	80 81       	ld	r24, Z
    38b4:	8f 93       	push	r24
    38b6:	8a e7       	ldi	r24, 0x7A	; 122
    38b8:	93 e0       	ldi	r25, 0x03	; 3
    38ba:	9f 93       	push	r25
    38bc:	8f 93       	push	r24
    38be:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    38c2:	80 91 bc 0b 	lds	r24, 0x0BBC
    38c6:	8f 93       	push	r24
    38c8:	80 91 bb 0b 	lds	r24, 0x0BBB
    38cc:	8f 93       	push	r24
    38ce:	84 e8       	ldi	r24, 0x84	; 132
    38d0:	93 e0       	ldi	r25, 0x03	; 3
    38d2:	9f 93       	push	r25
    38d4:	8f 93       	push	r24
    38d6:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    38da:	ce ec       	ldi	r28, 0xCE	; 206
    38dc:	da e0       	ldi	r29, 0x0A	; 10
    38de:	ed b7       	in	r30, 0x3d	; 61
    38e0:	fe b7       	in	r31, 0x3e	; 62
    38e2:	74 96       	adiw	r30, 0x14	; 20
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	fe bf       	out	0x3e, r31	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	ed bf       	out	0x3d, r30	; 61
    38ee:	00 e0       	ldi	r16, 0x00	; 0
    38f0:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    38f2:	84 e9       	ldi	r24, 0x94	; 148
    38f4:	68 2e       	mov	r6, r24
    38f6:	83 e0       	ldi	r24, 0x03	; 3
    38f8:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    38fa:	9d e6       	ldi	r25, 0x6D	; 109
    38fc:	89 2e       	mov	r8, r25
    38fe:	93 e0       	ldi	r25, 0x03	; 3
    3900:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3902:	2a e7       	ldi	r18, 0x7A	; 122
    3904:	a2 2e       	mov	r10, r18
    3906:	23 e0       	ldi	r18, 0x03	; 3
    3908:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    390a:	34 e8       	ldi	r19, 0x84	; 132
    390c:	c3 2e       	mov	r12, r19
    390e:	33 e0       	ldi	r19, 0x03	; 3
    3910:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    3912:	ea 80       	ldd	r14, Y+2	; 0x02
    3914:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3916:	ff 92       	push	r15
    3918:	ef 92       	push	r14
    391a:	1f 93       	push	r17
    391c:	0f 93       	push	r16
    391e:	7f 92       	push	r7
    3920:	6f 92       	push	r6
    3922:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
        printf( "canary = %x ",*stkc );
    3926:	f7 01       	movw	r30, r14
    3928:	80 81       	ld	r24, Z
    392a:	1f 92       	push	r1
    392c:	8f 93       	push	r24
    392e:	9f 92       	push	r9
    3930:	8f 92       	push	r8
    3932:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3936:	89 81       	ldd	r24, Y+1	; 0x01
    3938:	8f 93       	push	r24
    393a:	88 81       	ld	r24, Y
    393c:	8f 93       	push	r24
    393e:	bf 92       	push	r11
    3940:	af 92       	push	r10
    3942:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	df 92       	push	r13
    394c:	cf 92       	push	r12
    394e:	0e 94 cc 31 	call	0x6398	; 0x6398 <printf>
    3952:	0f 5f       	subi	r16, 0xFF	; 255
    3954:	1f 4f       	sbci	r17, 0xFF	; 255
    3956:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    3958:	ed b7       	in	r30, 0x3d	; 61
    395a:	fe b7       	in	r31, 0x3e	; 62
    395c:	72 96       	adiw	r30, 0x12	; 18
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	fe bf       	out	0x3e, r31	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	ed bf       	out	0x3d, r30	; 61
    3968:	05 30       	cpi	r16, 0x05	; 5
    396a:	11 05       	cpc	r17, r1
    396c:	91 f6       	brne	.-92     	; 0x3912 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	1f 91       	pop	r17
    3974:	0f 91       	pop	r16
    3976:	ff 90       	pop	r15
    3978:	ef 90       	pop	r14
    397a:	df 90       	pop	r13
    397c:	cf 90       	pop	r12
    397e:	bf 90       	pop	r11
    3980:	af 90       	pop	r10
    3982:	9f 90       	pop	r9
    3984:	8f 90       	pop	r8
    3986:	7f 90       	pop	r7
    3988:	6f 90       	pop	r6
    398a:	08 95       	ret

0000398c <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    398c:	cf 93       	push	r28
    398e:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    3990:	e0 91 bb 0b 	lds	r30, 0x0BBB
    3994:	f0 91 bc 0b 	lds	r31, 0x0BBC
    3998:	c2 81       	ldd	r28, Z+2	; 0x02
    399a:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    399c:	88 81       	ld	r24, Y
    399e:	85 35       	cpi	r24, 0x55	; 85
    39a0:	39 f0       	breq	.+14     	; 0x39b0 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    39a2:	0e 94 19 1c 	call	0x3832	; 0x3832 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    39ac:	85 e5       	ldi	r24, 0x55	; 85
    39ae:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    39b0:	e0 91 bb 0b 	lds	r30, 0x0BBB
    39b4:	f0 91 bc 0b 	lds	r31, 0x0BBC
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    39b8:	80 81       	ld	r24, Z
    39ba:	91 81       	ldd	r25, Z+1	; 0x01
    39bc:	81 15       	cp	r24, r1
    39be:	92 44       	sbci	r25, 0x42	; 66
    39c0:	38 f0       	brcs	.+14     	; 0x39d0 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    39c2:	0e 94 19 1c 	call	0x3832	; 0x3832 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    39c6:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    39cc:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <nrk_error_add>




#endif
}
    39d0:	df 91       	pop	r29
    39d2:	cf 91       	pop	r28
    39d4:	08 95       	ret

000039d6 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    39d6:	2b e2       	ldi	r18, 0x2B	; 43
    39d8:	82 02       	muls	r24, r18
    39da:	c0 01       	movw	r24, r0
    39dc:	11 24       	eor	r1, r1
    39de:	fc 01       	movw	r30, r24
    39e0:	e2 53       	subi	r30, 0x32	; 50
    39e2:	f5 4f       	sbci	r31, 0xF5	; 245
    39e4:	a2 81       	ldd	r26, Z+2	; 0x02
    39e6:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    39e8:	8c 91       	ld	r24, X
    39ea:	85 35       	cpi	r24, 0x55	; 85
    39ec:	19 f0       	breq	.+6      	; 0x39f4 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    39ee:	85 e5       	ldi	r24, 0x55	; 85
    39f0:	8c 93       	st	X, r24
    39f2:	08 c0       	rjmp	.+16     	; 0x3a04 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    39f4:	80 81       	ld	r24, Z
    39f6:	91 81       	ldd	r25, Z+1	; 0x01
    39f8:	81 15       	cp	r24, r1
    39fa:	92 44       	sbci	r25, 0x42	; 66
    39fc:	28 f0       	brcs	.+10     	; 0x3a08 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    39fe:	82 e1       	ldi	r24, 0x12	; 18
    3a00:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_error_add>
        return NRK_ERROR;
    3a04:	8f ef       	ldi	r24, 0xFF	; 255
    3a06:	08 95       	ret
    }
#endif
    return NRK_OK;
    3a08:	81 e0       	ldi	r24, 0x01	; 1
}
    3a0a:	08 95       	ret

00003a0c <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3a10:	40 91 0f 08 	lds	r20, 0x080F
    3a14:	50 91 10 08 	lds	r21, 0x0810
    3a18:	60 91 11 08 	lds	r22, 0x0811
    3a1c:	70 91 12 08 	lds	r23, 0x0812
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	8a 01       	movw	r16, r20
    3a26:	9b 01       	movw	r18, r22
    3a28:	08 2e       	mov	r0, r24
    3a2a:	04 c0       	rjmp	.+8      	; 0x3a34 <nrk_signal_create+0x28>
    3a2c:	36 95       	lsr	r19
    3a2e:	27 95       	ror	r18
    3a30:	17 95       	ror	r17
    3a32:	07 95       	ror	r16
    3a34:	0a 94       	dec	r0
    3a36:	d2 f7       	brpl	.-12     	; 0x3a2c <nrk_signal_create+0x20>
    3a38:	00 fd       	sbrc	r16, 0
    3a3a:	19 c0       	rjmp	.+50     	; 0x3a6e <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    3a3c:	01 e0       	ldi	r16, 0x01	; 1
    3a3e:	10 e0       	ldi	r17, 0x00	; 0
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	08 2e       	mov	r0, r24
    3a46:	04 c0       	rjmp	.+8      	; 0x3a50 <nrk_signal_create+0x44>
    3a48:	00 0f       	add	r16, r16
    3a4a:	11 1f       	adc	r17, r17
    3a4c:	22 1f       	adc	r18, r18
    3a4e:	33 1f       	adc	r19, r19
    3a50:	0a 94       	dec	r0
    3a52:	d2 f7       	brpl	.-12     	; 0x3a48 <nrk_signal_create+0x3c>
    3a54:	40 2b       	or	r20, r16
    3a56:	51 2b       	or	r21, r17
    3a58:	62 2b       	or	r22, r18
    3a5a:	73 2b       	or	r23, r19
    3a5c:	40 93 0f 08 	sts	0x080F, r20
    3a60:	50 93 10 08 	sts	0x0810, r21
    3a64:	60 93 11 08 	sts	0x0811, r22
    3a68:	70 93 12 08 	sts	0x0812, r23
			return i;
    3a6c:	05 c0       	rjmp	.+10     	; 0x3a78 <nrk_signal_create+0x6c>
    3a6e:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    3a70:	80 32       	cpi	r24, 0x20	; 32
    3a72:	91 05       	cpc	r25, r1
    3a74:	b9 f6       	brne	.-82     	; 0x3a24 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    3a76:	8f ef       	ldi	r24, 0xFF	; 255


}
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	08 95       	ret

00003a7e <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    3a7e:	e0 91 bb 0b 	lds	r30, 0x0BBB
    3a82:	f0 91 bc 0b 	lds	r31, 0x0BBC
    3a86:	65 85       	ldd	r22, Z+13	; 0x0d
    3a88:	76 85       	ldd	r23, Z+14	; 0x0e
    3a8a:	87 85       	ldd	r24, Z+15	; 0x0f
    3a8c:	90 89       	ldd	r25, Z+16	; 0x10
}
    3a8e:	08 95       	ret

00003a90 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3a90:	cf 92       	push	r12
    3a92:	df 92       	push	r13
    3a94:	ef 92       	push	r14
    3a96:	ff 92       	push	r15
    3a98:	0f 93       	push	r16
    3a9a:	1f 93       	push	r17
    3a9c:	cf 93       	push	r28
    3a9e:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3aa0:	c1 2c       	mov	r12, r1
    3aa2:	d1 2c       	mov	r13, r1
    3aa4:	76 01       	movw	r14, r12
    3aa6:	c3 94       	inc	r12
    3aa8:	08 2e       	mov	r0, r24
    3aaa:	04 c0       	rjmp	.+8      	; 0x3ab4 <nrk_signal_delete+0x24>
    3aac:	cc 0c       	add	r12, r12
    3aae:	dd 1c       	adc	r13, r13
    3ab0:	ee 1c       	adc	r14, r14
    3ab2:	ff 1c       	adc	r15, r15
    3ab4:	0a 94       	dec	r0
    3ab6:	d2 f7       	brpl	.-12     	; 0x3aac <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3ab8:	40 91 0f 08 	lds	r20, 0x080F
    3abc:	50 91 10 08 	lds	r21, 0x0810
    3ac0:	60 91 11 08 	lds	r22, 0x0811
    3ac4:	70 91 12 08 	lds	r23, 0x0812
    3ac8:	4c 21       	and	r20, r12
    3aca:	5d 21       	and	r21, r13
    3acc:	6e 21       	and	r22, r14
    3ace:	7f 21       	and	r23, r15
    3ad0:	45 2b       	or	r20, r21
    3ad2:	46 2b       	or	r20, r22
    3ad4:	47 2b       	or	r20, r23
    3ad6:	09 f4       	brne	.+2      	; 0x3ada <nrk_signal_delete+0x4a>
    3ad8:	60 c0       	rjmp	.+192    	; 0x3b9a <nrk_signal_delete+0x10a>
    3ada:	08 2f       	mov	r16, r24

	nrk_int_disable();
    3adc:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    3ae0:	e7 ed       	ldi	r30, 0xD7	; 215
    3ae2:	fa e0       	ldi	r31, 0x0A	; 10
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3ae4:	b7 01       	movw	r22, r14
    3ae6:	a6 01       	movw	r20, r12
    3ae8:	40 95       	com	r20
    3aea:	50 95       	com	r21
    3aec:	60 95       	com	r22
    3aee:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3af0:	13 e0       	ldi	r17, 0x03	; 3
    3af2:	df 01       	movw	r26, r30
    3af4:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3af6:	8c 91       	ld	r24, X
    3af8:	8f 3f       	cpi	r24, 0xFF	; 255
    3afa:	39 f1       	breq	.+78     	; 0x3b4a <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    3afc:	84 81       	ldd	r24, Z+4	; 0x04
    3afe:	95 81       	ldd	r25, Z+5	; 0x05
    3b00:	a6 81       	ldd	r26, Z+6	; 0x06
    3b02:	b7 81       	ldd	r27, Z+7	; 0x07
    3b04:	8c 15       	cp	r24, r12
    3b06:	9d 05       	cpc	r25, r13
    3b08:	ae 05       	cpc	r26, r14
    3b0a:	bf 05       	cpc	r27, r15
    3b0c:	51 f4       	brne	.+20     	; 0x3b22 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3b0e:	10 86       	std	Z+8, r1	; 0x08
    3b10:	11 86       	std	Z+9, r1	; 0x09
    3b12:	12 86       	std	Z+10, r1	; 0x0a
    3b14:	13 86       	std	Z+11, r1	; 0x0b
    3b16:	9f 01       	movw	r18, r30
    3b18:	22 50       	subi	r18, 0x02	; 2
    3b1a:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    3b1c:	e9 01       	movw	r28, r18
    3b1e:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3b20:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3b22:	84 23       	and	r24, r20
    3b24:	95 23       	and	r25, r21
    3b26:	a6 23       	and	r26, r22
    3b28:	b7 23       	and	r27, r23
    3b2a:	84 83       	std	Z+4, r24	; 0x04
    3b2c:	95 83       	std	Z+5, r25	; 0x05
    3b2e:	a6 83       	std	Z+6, r26	; 0x06
    3b30:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3b32:	80 85       	ldd	r24, Z+8	; 0x08
    3b34:	91 85       	ldd	r25, Z+9	; 0x09
    3b36:	a2 85       	ldd	r26, Z+10	; 0x0a
    3b38:	b3 85       	ldd	r27, Z+11	; 0x0b
    3b3a:	84 23       	and	r24, r20
    3b3c:	95 23       	and	r25, r21
    3b3e:	a6 23       	and	r26, r22
    3b40:	b7 23       	and	r27, r23
    3b42:	80 87       	std	Z+8, r24	; 0x08
    3b44:	91 87       	std	Z+9, r25	; 0x09
    3b46:	a2 87       	std	Z+10, r26	; 0x0a
    3b48:	b3 87       	std	Z+11, r27	; 0x0b
    3b4a:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3b4c:	db e0       	ldi	r29, 0x0B	; 11
    3b4e:	ee 3a       	cpi	r30, 0xAE	; 174
    3b50:	fd 07       	cpc	r31, r29
    3b52:	79 f6       	brne	.-98     	; 0x3af2 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    3b54:	8e ef       	ldi	r24, 0xFE	; 254
    3b56:	9f ef       	ldi	r25, 0xFF	; 255
    3b58:	af ef       	ldi	r26, 0xFF	; 255
    3b5a:	bf ef       	ldi	r27, 0xFF	; 255
    3b5c:	04 c0       	rjmp	.+8      	; 0x3b66 <nrk_signal_delete+0xd6>
    3b5e:	88 0f       	add	r24, r24
    3b60:	99 1f       	adc	r25, r25
    3b62:	aa 1f       	adc	r26, r26
    3b64:	bb 1f       	adc	r27, r27
    3b66:	0a 95       	dec	r16
    3b68:	d2 f7       	brpl	.-12     	; 0x3b5e <nrk_signal_delete+0xce>
    3b6a:	40 91 0f 08 	lds	r20, 0x080F
    3b6e:	50 91 10 08 	lds	r21, 0x0810
    3b72:	60 91 11 08 	lds	r22, 0x0811
    3b76:	70 91 12 08 	lds	r23, 0x0812
    3b7a:	84 23       	and	r24, r20
    3b7c:	95 23       	and	r25, r21
    3b7e:	a6 23       	and	r26, r22
    3b80:	b7 23       	and	r27, r23
    3b82:	80 93 0f 08 	sts	0x080F, r24
    3b86:	90 93 10 08 	sts	0x0810, r25
    3b8a:	a0 93 11 08 	sts	0x0811, r26
    3b8e:	b0 93 12 08 	sts	0x0812, r27
	nrk_int_enable();
    3b92:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>

	return NRK_OK;
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	01 c0       	rjmp	.+2      	; 0x3b9c <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3b9a:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    3b9c:	df 91       	pop	r29
    3b9e:	cf 91       	pop	r28
    3ba0:	1f 91       	pop	r17
    3ba2:	0f 91       	pop	r16
    3ba4:	ff 90       	pop	r15
    3ba6:	ef 90       	pop	r14
    3ba8:	df 90       	pop	r13
    3baa:	cf 90       	pop	r12
    3bac:	08 95       	ret

00003bae <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3bae:	0f 93       	push	r16
    3bb0:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3bb2:	41 e0       	ldi	r20, 0x01	; 1
    3bb4:	50 e0       	ldi	r21, 0x00	; 0
    3bb6:	60 e0       	ldi	r22, 0x00	; 0
    3bb8:	70 e0       	ldi	r23, 0x00	; 0
    3bba:	8a 01       	movw	r16, r20
    3bbc:	9b 01       	movw	r18, r22
    3bbe:	04 c0       	rjmp	.+8      	; 0x3bc8 <nrk_signal_unregister+0x1a>
    3bc0:	00 0f       	add	r16, r16
    3bc2:	11 1f       	adc	r17, r17
    3bc4:	22 1f       	adc	r18, r18
    3bc6:	33 1f       	adc	r19, r19
    3bc8:	8a 95       	dec	r24
    3bca:	d2 f7       	brpl	.-12     	; 0x3bc0 <nrk_signal_unregister+0x12>
    3bcc:	d9 01       	movw	r26, r18
    3bce:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3bd0:	e0 91 bb 0b 	lds	r30, 0x0BBB
    3bd4:	f0 91 bc 0b 	lds	r31, 0x0BBC
    3bd8:	45 85       	ldd	r20, Z+13	; 0x0d
    3bda:	56 85       	ldd	r21, Z+14	; 0x0e
    3bdc:	67 85       	ldd	r22, Z+15	; 0x0f
    3bde:	70 89       	ldd	r23, Z+16	; 0x10
    3be0:	04 23       	and	r16, r20
    3be2:	15 23       	and	r17, r21
    3be4:	26 23       	and	r18, r22
    3be6:	37 23       	and	r19, r23
    3be8:	01 2b       	or	r16, r17
    3bea:	02 2b       	or	r16, r18
    3bec:	03 2b       	or	r16, r19
    3bee:	d1 f0       	breq	.+52     	; 0x3c24 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3bf0:	80 95       	com	r24
    3bf2:	90 95       	com	r25
    3bf4:	a0 95       	com	r26
    3bf6:	b0 95       	com	r27
    3bf8:	48 23       	and	r20, r24
    3bfa:	59 23       	and	r21, r25
    3bfc:	6a 23       	and	r22, r26
    3bfe:	7b 23       	and	r23, r27
    3c00:	45 87       	std	Z+13, r20	; 0x0d
    3c02:	56 87       	std	Z+14, r21	; 0x0e
    3c04:	67 87       	std	Z+15, r22	; 0x0f
    3c06:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3c08:	41 89       	ldd	r20, Z+17	; 0x11
    3c0a:	52 89       	ldd	r21, Z+18	; 0x12
    3c0c:	63 89       	ldd	r22, Z+19	; 0x13
    3c0e:	74 89       	ldd	r23, Z+20	; 0x14
    3c10:	84 23       	and	r24, r20
    3c12:	95 23       	and	r25, r21
    3c14:	a6 23       	and	r26, r22
    3c16:	b7 23       	and	r27, r23
    3c18:	81 8b       	std	Z+17, r24	; 0x11
    3c1a:	92 8b       	std	Z+18, r25	; 0x12
    3c1c:	a3 8b       	std	Z+19, r26	; 0x13
    3c1e:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	01 c0       	rjmp	.+2      	; 0x3c26 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    3c24:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    3c26:	1f 91       	pop	r17
    3c28:	0f 91       	pop	r16
    3c2a:	08 95       	ret

00003c2c <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    3c2c:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3c2e:	40 91 0f 08 	lds	r20, 0x080F
    3c32:	50 91 10 08 	lds	r21, 0x0810
    3c36:	60 91 11 08 	lds	r22, 0x0811
    3c3a:	70 91 12 08 	lds	r23, 0x0812
    3c3e:	08 2e       	mov	r0, r24
    3c40:	04 c0       	rjmp	.+8      	; 0x3c4a <nrk_signal_register+0x1e>
    3c42:	76 95       	lsr	r23
    3c44:	67 95       	ror	r22
    3c46:	57 95       	ror	r21
    3c48:	47 95       	ror	r20
    3c4a:	0a 94       	dec	r0
    3c4c:	d2 f7       	brpl	.-12     	; 0x3c42 <nrk_signal_register+0x16>
    3c4e:	40 ff       	sbrs	r20, 0
    3c50:	1d c0       	rjmp	.+58     	; 0x3c8c <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3c52:	e0 91 bb 0b 	lds	r30, 0x0BBB
    3c56:	f0 91 bc 0b 	lds	r31, 0x0BBC
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	a0 e0       	ldi	r26, 0x00	; 0
    3c60:	b0 e0       	ldi	r27, 0x00	; 0
    3c62:	04 c0       	rjmp	.+8      	; 0x3c6c <nrk_signal_register+0x40>
    3c64:	88 0f       	add	r24, r24
    3c66:	99 1f       	adc	r25, r25
    3c68:	aa 1f       	adc	r26, r26
    3c6a:	bb 1f       	adc	r27, r27
    3c6c:	2a 95       	dec	r18
    3c6e:	d2 f7       	brpl	.-12     	; 0x3c64 <nrk_signal_register+0x38>
    3c70:	45 85       	ldd	r20, Z+13	; 0x0d
    3c72:	56 85       	ldd	r21, Z+14	; 0x0e
    3c74:	67 85       	ldd	r22, Z+15	; 0x0f
    3c76:	70 89       	ldd	r23, Z+16	; 0x10
    3c78:	84 2b       	or	r24, r20
    3c7a:	95 2b       	or	r25, r21
    3c7c:	a6 2b       	or	r26, r22
    3c7e:	b7 2b       	or	r27, r23
    3c80:	85 87       	std	Z+13, r24	; 0x0d
    3c82:	96 87       	std	Z+14, r25	; 0x0e
    3c84:	a7 87       	std	Z+15, r26	; 0x0f
    3c86:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	08 95       	ret
	}
            
	return NRK_ERROR;
    3c8c:	8f ef       	ldi	r24, 0xFF	; 255
}
    3c8e:	08 95       	ret

00003c90 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    3c90:	cf 92       	push	r12
    3c92:	df 92       	push	r13
    3c94:	ef 92       	push	r14
    3c96:	ff 92       	push	r15
    3c98:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    3c9a:	c1 2c       	mov	r12, r1
    3c9c:	d1 2c       	mov	r13, r1
    3c9e:	76 01       	movw	r14, r12
    3ca0:	c3 94       	inc	r12
    3ca2:	04 c0       	rjmp	.+8      	; 0x3cac <nrk_event_signal+0x1c>
    3ca4:	cc 0c       	add	r12, r12
    3ca6:	dd 1c       	adc	r13, r13
    3ca8:	ee 1c       	adc	r14, r14
    3caa:	ff 1c       	adc	r15, r15
    3cac:	8a 95       	dec	r24
    3cae:	d2 f7       	brpl	.-12     	; 0x3ca4 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3cb0:	80 91 0f 08 	lds	r24, 0x080F
    3cb4:	90 91 10 08 	lds	r25, 0x0810
    3cb8:	a0 91 11 08 	lds	r26, 0x0811
    3cbc:	b0 91 12 08 	lds	r27, 0x0812
    3cc0:	8c 21       	and	r24, r12
    3cc2:	9d 21       	and	r25, r13
    3cc4:	ae 21       	and	r26, r14
    3cc6:	bf 21       	and	r27, r15
    3cc8:	89 2b       	or	r24, r25
    3cca:	8a 2b       	or	r24, r26
    3ccc:	8b 2b       	or	r24, r27
    3cce:	11 f4       	brne	.+4      	; 0x3cd4 <nrk_event_signal+0x44>
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	44 c0       	rjmp	.+136    	; 0x3d5c <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    3cd4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    3cd8:	e5 ed       	ldi	r30, 0xD5	; 213
    3cda:	fa e0       	ldi	r31, 0x0A	; 10
    3cdc:	a7 ed       	ldi	r26, 0xD7	; 215
    3cde:	ba e0       	ldi	r27, 0x0A	; 10

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3ce0:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3ce2:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    3ce4:	90 81       	ld	r25, Z
    3ce6:	91 30       	cpi	r25, 0x01	; 1
    3ce8:	b9 f4       	brne	.+46     	; 0x3d18 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    3cea:	42 85       	ldd	r20, Z+10	; 0x0a
    3cec:	53 85       	ldd	r21, Z+11	; 0x0b
    3cee:	64 85       	ldd	r22, Z+12	; 0x0c
    3cf0:	75 85       	ldd	r23, Z+13	; 0x0d
    3cf2:	4c 21       	and	r20, r12
    3cf4:	5d 21       	and	r21, r13
    3cf6:	6e 21       	and	r22, r14
    3cf8:	7f 21       	and	r23, r15
    3cfa:	45 2b       	or	r20, r21
    3cfc:	46 2b       	or	r20, r22
    3cfe:	47 2b       	or	r20, r23
    3d00:	59 f0       	breq	.+22     	; 0x3d18 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3d02:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3d04:	16 86       	std	Z+14, r1	; 0x0e
    3d06:	17 86       	std	Z+15, r1	; 0x0f
    3d08:	10 8a       	std	Z+16, r1	; 0x10
    3d0a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3d0c:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3d0e:	c2 86       	std	Z+10, r12	; 0x0a
    3d10:	d3 86       	std	Z+11, r13	; 0x0b
    3d12:	e4 86       	std	Z+12, r14	; 0x0c
    3d14:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    3d16:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3d18:	90 81       	ld	r25, Z
    3d1a:	92 30       	cpi	r25, 0x02	; 2
    3d1c:	a1 f4       	brne	.+40     	; 0x3d46 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3d1e:	42 85       	ldd	r20, Z+10	; 0x0a
    3d20:	53 85       	ldd	r21, Z+11	; 0x0b
    3d22:	64 85       	ldd	r22, Z+12	; 0x0c
    3d24:	75 85       	ldd	r23, Z+13	; 0x0d
    3d26:	4c 15       	cp	r20, r12
    3d28:	5d 05       	cpc	r21, r13
    3d2a:	6e 05       	cpc	r22, r14
    3d2c:	7f 05       	cpc	r23, r15
    3d2e:	59 f4       	brne	.+22     	; 0x3d46 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3d30:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3d32:	16 86       	std	Z+14, r1	; 0x0e
    3d34:	17 86       	std	Z+15, r1	; 0x0f
    3d36:	10 8a       	std	Z+16, r1	; 0x10
    3d38:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3d3a:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3d3c:	12 86       	std	Z+10, r1	; 0x0a
    3d3e:	13 86       	std	Z+11, r1	; 0x0b
    3d40:	14 86       	std	Z+12, r1	; 0x0c
    3d42:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    3d44:	c1 e0       	ldi	r28, 0x01	; 1
    3d46:	bb 96       	adiw	r30, 0x2b	; 43
    3d48:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3d4a:	9b e0       	ldi	r25, 0x0B	; 11
    3d4c:	ec 3a       	cpi	r30, 0xAC	; 172
    3d4e:	f9 07       	cpc	r31, r25
    3d50:	49 f6       	brne	.-110    	; 0x3ce4 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3d52:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>
	if(event_occured)
    3d56:	c1 11       	cpse	r28, r1
    3d58:	05 c0       	rjmp	.+10     	; 0x3d64 <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    3d5a:	82 e0       	ldi	r24, 0x02	; 2
    3d5c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <_nrk_errno_set>
	return NRK_ERROR;
    3d60:	8f ef       	ldi	r24, 0xFF	; 255
    3d62:	01 c0       	rjmp	.+2      	; 0x3d66 <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    3d66:	cf 91       	pop	r28
    3d68:	ff 90       	pop	r15
    3d6a:	ef 90       	pop	r14
    3d6c:	df 90       	pop	r13
    3d6e:	cf 90       	pop	r12
    3d70:	08 95       	ret

00003d72 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    3d72:	0f 93       	push	r16
    3d74:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    3d76:	e0 91 bb 0b 	lds	r30, 0x0BBB
    3d7a:	f0 91 bc 0b 	lds	r31, 0x0BBC
    3d7e:	05 85       	ldd	r16, Z+13	; 0x0d
    3d80:	16 85       	ldd	r17, Z+14	; 0x0e
    3d82:	27 85       	ldd	r18, Z+15	; 0x0f
    3d84:	30 89       	ldd	r19, Z+16	; 0x10
    3d86:	06 23       	and	r16, r22
    3d88:	17 23       	and	r17, r23
    3d8a:	28 23       	and	r18, r24
    3d8c:	39 23       	and	r19, r25
    3d8e:	01 15       	cp	r16, r1
    3d90:	11 05       	cpc	r17, r1
    3d92:	21 05       	cpc	r18, r1
    3d94:	31 05       	cpc	r19, r1
    3d96:	11 f1       	breq	.+68     	; 0x3ddc <nrk_event_wait+0x6a>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    3d9c:	81 8b       	std	Z+17, r24	; 0x11
    3d9e:	92 8b       	std	Z+18, r25	; 0x12
    3da0:	a3 8b       	std	Z+19, r26	; 0x13
    3da2:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3da4:	21 e0       	ldi	r18, 0x01	; 1
    3da6:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    3da8:	00 90 ab 0b 	lds	r0, 0x0BAB
    3dac:	04 c0       	rjmp	.+8      	; 0x3db6 <nrk_event_wait+0x44>
    3dae:	b6 95       	lsr	r27
    3db0:	a7 95       	ror	r26
    3db2:	97 95       	ror	r25
    3db4:	87 95       	ror	r24
    3db6:	0a 94       	dec	r0
    3db8:	d2 f7       	brpl	.-12     	; 0x3dae <nrk_event_wait+0x3c>
    3dba:	80 ff       	sbrs	r24, 0
    3dbc:	03 c0       	rjmp	.+6      	; 0x3dc4 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    3dbe:	0e 94 71 22 	call	0x44e2	; 0x44e2 <nrk_wait_until_nw>
    3dc2:	04 c0       	rjmp	.+8      	; 0x3dcc <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	0e 94 42 22 	call	0x4484	; 0x4484 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    3dcc:	e0 91 bb 0b 	lds	r30, 0x0BBB
    3dd0:	f0 91 bc 0b 	lds	r31, 0x0BBC
    3dd4:	01 89       	ldd	r16, Z+17	; 0x11
    3dd6:	12 89       	ldd	r17, Z+18	; 0x12
    3dd8:	23 89       	ldd	r18, Z+19	; 0x13
    3dda:	34 89       	ldd	r19, Z+20	; 0x14
}
    3ddc:	c9 01       	movw	r24, r18
    3dde:	b8 01       	movw	r22, r16
    3de0:	1f 91       	pop	r17
    3de2:	0f 91       	pop	r16
    3de4:	08 95       	ret

00003de6 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	08 95       	ret

00003dec <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    3dec:	21 e0       	ldi	r18, 0x01	; 1
    3dee:	87 5a       	subi	r24, 0xA7	; 167
    3df0:	9b 40       	sbci	r25, 0x0B	; 11
    3df2:	09 f4       	brne	.+2      	; 0x3df6 <nrk_get_resource_index+0xa>
    3df4:	20 e0       	ldi	r18, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    3df6:	82 2f       	mov	r24, r18
    3df8:	81 95       	neg	r24
    3dfa:	08 95       	ret

00003dfc <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3dfc:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3e00:	8f 3f       	cpi	r24, 0xFF	; 255
    3e02:	11 f4       	brne	.+4      	; 0x3e08 <nrk_sem_query+0xc>
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	03 c0       	rjmp	.+6      	; 0x3e0e <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3e08:	81 30       	cpi	r24, 0x01	; 1
    3e0a:	29 f4       	brne	.+10     	; 0x3e16 <nrk_sem_query+0x1a>
    3e0c:	82 e0       	ldi	r24, 0x02	; 2
    3e0e:	0e 94 d7 19 	call	0x33ae	; 0x33ae <_nrk_errno_set>
    3e12:	8f ef       	ldi	r24, 0xFF	; 255
    3e14:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    3e16:	99 27       	eor	r25, r25
    3e18:	87 fd       	sbrc	r24, 7
    3e1a:	90 95       	com	r25
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	ee 0f       	add	r30, r30
    3e20:	ff 1f       	adc	r31, r31
    3e22:	8e 0f       	add	r24, r30
    3e24:	9f 1f       	adc	r25, r31
    3e26:	fc 01       	movw	r30, r24
    3e28:	e9 55       	subi	r30, 0x59	; 89
    3e2a:	f4 4f       	sbci	r31, 0xF4	; 244
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
}
    3e2e:	08 95       	ret

00003e30 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    3e30:	ef 92       	push	r14
    3e32:	ff 92       	push	r15
    3e34:	0f 93       	push	r16
    3e36:	1f 93       	push	r17
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	1f 92       	push	r1
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3e42:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3e46:	8f 3f       	cpi	r24, 0xFF	; 255
    3e48:	11 f4       	brne	.+4      	; 0x3e4e <nrk_sem_pend+0x1e>
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	03 c0       	rjmp	.+6      	; 0x3e54 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3e4e:	81 30       	cpi	r24, 0x01	; 1
    3e50:	29 f4       	brne	.+10     	; 0x3e5c <nrk_sem_pend+0x2c>
    3e52:	82 e0       	ldi	r24, 0x02	; 2
    3e54:	0e 94 d7 19 	call	0x33ae	; 0x33ae <_nrk_errno_set>
    3e58:	8f ef       	ldi	r24, 0xFF	; 255
    3e5a:	41 c0       	rjmp	.+130    	; 0x3ede <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    3e5c:	89 83       	std	Y+1, r24	; 0x01
    3e5e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	e8 2e       	mov	r14, r24
    3e66:	ff 24       	eor	r15, r15
    3e68:	e7 fc       	sbrc	r14, 7
    3e6a:	f0 94       	com	r15
    3e6c:	87 01       	movw	r16, r14
    3e6e:	00 0f       	add	r16, r16
    3e70:	11 1f       	adc	r17, r17
    3e72:	f8 01       	movw	r30, r16
    3e74:	ee 0d       	add	r30, r14
    3e76:	ff 1d       	adc	r31, r15
    3e78:	e9 55       	subi	r30, 0x59	; 89
    3e7a:	f4 4f       	sbci	r31, 0xF4	; 244
    3e7c:	92 81       	ldd	r25, Z+2	; 0x02
    3e7e:	91 11       	cpse	r25, r1
    3e80:	16 c0       	rjmp	.+44     	; 0x3eae <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    3e82:	e0 91 bb 0b 	lds	r30, 0x0BBB
    3e86:	f0 91 bc 0b 	lds	r31, 0x0BBC
    3e8a:	97 81       	ldd	r25, Z+7	; 0x07
    3e8c:	92 60       	ori	r25, 0x02	; 2
    3e8e:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    3e90:	99 27       	eor	r25, r25
    3e92:	87 fd       	sbrc	r24, 7
    3e94:	90 95       	com	r25
    3e96:	a9 2f       	mov	r26, r25
    3e98:	b9 2f       	mov	r27, r25
    3e9a:	81 8b       	std	Z+17, r24	; 0x11
    3e9c:	92 8b       	std	Z+18, r25	; 0x12
    3e9e:	a3 8b       	std	Z+19, r26	; 0x13
    3ea0:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    3ea2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	0e 94 42 22 	call	0x4484	; 0x4484 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3eae:	0e 0d       	add	r16, r14
    3eb0:	1f 1d       	adc	r17, r15
    3eb2:	d8 01       	movw	r26, r16
    3eb4:	a9 55       	subi	r26, 0x59	; 89
    3eb6:	b4 4f       	sbci	r27, 0xF4	; 244
    3eb8:	12 96       	adiw	r26, 0x02	; 2
    3eba:	8c 91       	ld	r24, X
    3ebc:	12 97       	sbiw	r26, 0x02	; 2
    3ebe:	81 50       	subi	r24, 0x01	; 1
    3ec0:	12 96       	adiw	r26, 0x02	; 2
    3ec2:	8c 93       	st	X, r24
    3ec4:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    3ec6:	e0 91 bb 0b 	lds	r30, 0x0BBB
    3eca:	f0 91 bc 0b 	lds	r31, 0x0BBC
    3ece:	11 96       	adiw	r26, 0x01	; 1
    3ed0:	8c 91       	ld	r24, X
    3ed2:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    3ed8:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>

	return NRK_OK;
    3edc:	81 e0       	ldi	r24, 0x01	; 1
}
    3ede:	0f 90       	pop	r0
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	1f 91       	pop	r17
    3ee6:	0f 91       	pop	r16
    3ee8:	ff 90       	pop	r15
    3eea:	ef 90       	pop	r14
    3eec:	08 95       	ret

00003eee <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
    3ef2:	cf 93       	push	r28
    3ef4:	df 93       	push	r29
    3ef6:	1f 92       	push	r1
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    3efc:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3f00:	8f 3f       	cpi	r24, 0xFF	; 255
    3f02:	11 f4       	brne	.+4      	; 0x3f08 <nrk_sem_post+0x1a>
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	03 c0       	rjmp	.+6      	; 0x3f0e <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3f08:	81 30       	cpi	r24, 0x01	; 1
    3f0a:	29 f4       	brne	.+10     	; 0x3f16 <nrk_sem_post+0x28>
    3f0c:	82 e0       	ldi	r24, 0x02	; 2
    3f0e:	0e 94 d7 19 	call	0x33ae	; 0x33ae <_nrk_errno_set>
    3f12:	8f ef       	ldi	r24, 0xFF	; 255
    3f14:	44 c0       	rjmp	.+136    	; 0x3f9e <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    3f16:	48 2f       	mov	r20, r24
    3f18:	55 27       	eor	r21, r21
    3f1a:	47 fd       	sbrc	r20, 7
    3f1c:	50 95       	com	r21
    3f1e:	9a 01       	movw	r18, r20
    3f20:	22 0f       	add	r18, r18
    3f22:	33 1f       	adc	r19, r19
    3f24:	24 0f       	add	r18, r20
    3f26:	35 1f       	adc	r19, r21
    3f28:	89 01       	movw	r16, r18
    3f2a:	09 55       	subi	r16, 0x59	; 89
    3f2c:	14 4f       	sbci	r17, 0xF4	; 244
    3f2e:	f8 01       	movw	r30, r16
    3f30:	22 81       	ldd	r18, Z+2	; 0x02
    3f32:	90 81       	ld	r25, Z
    3f34:	29 17       	cp	r18, r25
    3f36:	94 f5       	brge	.+100    	; 0x3f9c <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    3f38:	89 83       	std	Y+1, r24	; 0x01
    3f3a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>

		nrk_sem_list[id].value++;
    3f3e:	f8 01       	movw	r30, r16
    3f40:	92 81       	ldd	r25, Z+2	; 0x02
    3f42:	9f 5f       	subi	r25, 0xFF	; 255
    3f44:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    3f46:	e0 91 bb 0b 	lds	r30, 0x0BBB
    3f4a:	f0 91 bc 0b 	lds	r31, 0x0BBC
    3f4e:	14 82       	std	Z+4, r1	; 0x04
    3f50:	e5 ed       	ldi	r30, 0xD5	; 213
    3f52:	fa e0       	ldi	r31, 0x0A	; 10

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3f54:	89 81       	ldd	r24, Y+1	; 0x01
    3f56:	99 27       	eor	r25, r25
    3f58:	87 fd       	sbrc	r24, 7
    3f5a:	90 95       	com	r25
    3f5c:	a9 2f       	mov	r26, r25
    3f5e:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3f60:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3f62:	30 81       	ld	r19, Z
    3f64:	32 30       	cpi	r19, 0x02	; 2
    3f66:	99 f4       	brne	.+38     	; 0x3f8e <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3f68:	42 85       	ldd	r20, Z+10	; 0x0a
    3f6a:	53 85       	ldd	r21, Z+11	; 0x0b
    3f6c:	64 85       	ldd	r22, Z+12	; 0x0c
    3f6e:	75 85       	ldd	r23, Z+13	; 0x0d
    3f70:	48 17       	cp	r20, r24
    3f72:	59 07       	cpc	r21, r25
    3f74:	6a 07       	cpc	r22, r26
    3f76:	7b 07       	cpc	r23, r27
    3f78:	51 f4       	brne	.+20     	; 0x3f8e <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3f7a:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3f7c:	16 86       	std	Z+14, r1	; 0x0e
    3f7e:	17 86       	std	Z+15, r1	; 0x0f
    3f80:	10 8a       	std	Z+16, r1	; 0x10
    3f82:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3f84:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3f86:	12 86       	std	Z+10, r1	; 0x0a
    3f88:	13 86       	std	Z+11, r1	; 0x0b
    3f8a:	14 86       	std	Z+12, r1	; 0x0c
    3f8c:	15 86       	std	Z+13, r1	; 0x0d
    3f8e:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3f90:	3b e0       	ldi	r19, 0x0B	; 11
    3f92:	ec 3a       	cpi	r30, 0xAC	; 172
    3f94:	f3 07       	cpc	r31, r19
    3f96:	29 f7       	brne	.-54     	; 0x3f62 <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    3f98:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>
	}
		
return NRK_OK;
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
}
    3f9e:	0f 90       	pop	r0
    3fa0:	df 91       	pop	r29
    3fa2:	cf 91       	pop	r28
    3fa4:	1f 91       	pop	r17
    3fa6:	0f 91       	pop	r16
    3fa8:	08 95       	ret

00003faa <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    3faa:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3fae:	8f 3f       	cpi	r24, 0xFF	; 255
    3fb0:	11 f4       	brne	.+4      	; 0x3fb6 <nrk_sem_delete+0xc>
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	03 c0       	rjmp	.+6      	; 0x3fbc <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3fb6:	81 30       	cpi	r24, 0x01	; 1
    3fb8:	29 f4       	brne	.+10     	; 0x3fc4 <nrk_sem_delete+0x1a>
    3fba:	82 e0       	ldi	r24, 0x02	; 2
    3fbc:	0e 94 d7 19 	call	0x33ae	; 0x33ae <_nrk_errno_set>
    3fc0:	8f ef       	ldi	r24, 0xFF	; 255
    3fc2:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3fc4:	99 27       	eor	r25, r25
    3fc6:	87 fd       	sbrc	r24, 7
    3fc8:	90 95       	com	r25
    3fca:	fc 01       	movw	r30, r24
    3fcc:	ee 0f       	add	r30, r30
    3fce:	ff 1f       	adc	r31, r31
    3fd0:	8e 0f       	add	r24, r30
    3fd2:	9f 1f       	adc	r25, r31
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	e9 55       	subi	r30, 0x59	; 89
    3fd8:	f4 4f       	sbci	r31, 0xF4	; 244
    3fda:	8f ef       	ldi	r24, 0xFF	; 255
    3fdc:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3fde:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    3fe0:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    3fe2:	80 91 ba 0b 	lds	r24, 0x0BBA
    3fe6:	81 50       	subi	r24, 0x01	; 1
    3fe8:	80 93 ba 0b 	sts	0x0BBA, r24
return NRK_OK;
    3fec:	81 e0       	ldi	r24, 0x01	; 1
}
    3fee:	08 95       	ret

00003ff0 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3ff0:	e0 91 b0 0b 	lds	r30, 0x0BB0
    3ff4:	f0 91 b1 0b 	lds	r31, 0x0BB1
}
    3ff8:	80 81       	ld	r24, Z
    3ffa:	08 95       	ret

00003ffc <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    3ffc:	e0 91 b0 0b 	lds	r30, 0x0BB0
    4000:	f0 91 b1 0b 	lds	r31, 0x0BB1
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    4004:	30 97       	sbiw	r30, 0x00	; 0
    4006:	21 f0       	breq	.+8      	; 0x4010 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    4008:	03 80       	ldd	r0, Z+3	; 0x03
    400a:	f4 81       	ldd	r31, Z+4	; 0x04
    400c:	e0 2d       	mov	r30, r0
    400e:	fa cf       	rjmp	.-12     	; 0x4004 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    4010:	08 95       	ret

00004012 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    4012:	af 92       	push	r10
    4014:	bf 92       	push	r11
    4016:	cf 92       	push	r12
    4018:	df 92       	push	r13
    401a:	ef 92       	push	r14
    401c:	ff 92       	push	r15
    401e:	0f 93       	push	r16
    4020:	1f 93       	push	r17
    4022:	cf 93       	push	r28
    4024:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    4026:	e0 91 cc 0a 	lds	r30, 0x0ACC
    402a:	f0 91 cd 0a 	lds	r31, 0x0ACD
    402e:	30 97       	sbiw	r30, 0x00	; 0
    4030:	09 f4       	brne	.+2      	; 0x4034 <nrk_add_to_readyQ+0x22>
    4032:	94 c0       	rjmp	.+296    	; 0x415c <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    4034:	00 91 b0 0b 	lds	r16, 0x0BB0
    4038:	10 91 b1 0b 	lds	r17, 0x0BB1
    CurNode = _free_node;

    if (_head_node != NULL)
    403c:	01 15       	cp	r16, r1
    403e:	11 05       	cpc	r17, r1
    4040:	09 f4       	brne	.+2      	; 0x4044 <nrk_add_to_readyQ+0x32>
    4042:	4c c0       	rjmp	.+152    	; 0x40dc <nrk_add_to_readyQ+0xca>
    4044:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    4046:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    4048:	58 2f       	mov	r21, r24
    404a:	54 03       	mulsu	r21, r20
    404c:	90 01       	movw	r18, r0
    404e:	11 24       	eor	r1, r1
    4050:	22 53       	subi	r18, 0x32	; 50
    4052:	35 4f       	sbci	r19, 0xF5	; 245
    4054:	79 01       	movw	r14, r18
    4056:	9a e0       	ldi	r25, 0x0A	; 10
    4058:	e9 0e       	add	r14, r25
    405a:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    405c:	69 01       	movw	r12, r18
    405e:	c4 e0       	ldi	r28, 0x04	; 4
    4060:	cc 0e       	add	r12, r28
    4062:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    4064:	59 01       	movw	r10, r18
    4066:	db e0       	ldi	r29, 0x0B	; 11
    4068:	ad 0e       	add	r10, r29
    406a:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    406c:	2c 91       	ld	r18, X
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	42 9f       	mul	r20, r18
    4072:	b0 01       	movw	r22, r0
    4074:	43 9f       	mul	r20, r19
    4076:	70 0d       	add	r23, r0
    4078:	11 24       	eor	r1, r1
    407a:	62 53       	subi	r22, 0x32	; 50
    407c:	75 4f       	sbci	r23, 0xF5	; 245
    407e:	eb 01       	movw	r28, r22
    4080:	9c 81       	ldd	r25, Y+4	; 0x04
    4082:	99 23       	and	r25, r25
    4084:	29 f0       	breq	.+10     	; 0x4090 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    4086:	5b 85       	ldd	r21, Y+11	; 0x0b
    4088:	e7 01       	movw	r28, r14
    408a:	98 81       	ld	r25, Y
    408c:	59 17       	cp	r21, r25
    408e:	40 f1       	brcs	.+80     	; 0x40e0 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    4090:	e6 01       	movw	r28, r12
    4092:	98 81       	ld	r25, Y
    4094:	99 23       	and	r25, r25
    4096:	69 f0       	breq	.+26     	; 0x40b2 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    4098:	42 9f       	mul	r20, r18
    409a:	b0 01       	movw	r22, r0
    409c:	43 9f       	mul	r20, r19
    409e:	70 0d       	add	r23, r0
    40a0:	11 24       	eor	r1, r1
    40a2:	62 53       	subi	r22, 0x32	; 50
    40a4:	75 4f       	sbci	r23, 0xF5	; 245
    40a6:	eb 01       	movw	r28, r22
    40a8:	5a 85       	ldd	r21, Y+10	; 0x0a
    40aa:	e5 01       	movw	r28, r10
    40ac:	98 81       	ld	r25, Y
    40ae:	59 17       	cp	r21, r25
    40b0:	b8 f0       	brcs	.+46     	; 0x40e0 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    40b2:	42 9f       	mul	r20, r18
    40b4:	b0 01       	movw	r22, r0
    40b6:	43 9f       	mul	r20, r19
    40b8:	70 0d       	add	r23, r0
    40ba:	11 24       	eor	r1, r1
    40bc:	9b 01       	movw	r18, r22
    40be:	22 53       	subi	r18, 0x32	; 50
    40c0:	35 4f       	sbci	r19, 0xF5	; 245
    40c2:	e9 01       	movw	r28, r18
    40c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    40c6:	e7 01       	movw	r28, r14
    40c8:	98 81       	ld	r25, Y
    40ca:	29 17       	cp	r18, r25
    40cc:	48 f0       	brcs	.+18     	; 0x40e0 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    40ce:	13 96       	adiw	r26, 0x03	; 3
    40d0:	0d 90       	ld	r0, X+
    40d2:	bc 91       	ld	r27, X
    40d4:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    40d6:	10 97       	sbiw	r26, 0x00	; 0
    40d8:	49 f6       	brne	.-110    	; 0x406c <nrk_add_to_readyQ+0x5a>
    40da:	02 c0       	rjmp	.+4      	; 0x40e0 <nrk_add_to_readyQ+0xce>
    40dc:	a0 e0       	ldi	r26, 0x00	; 0
    40de:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    40e0:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    40e2:	c3 81       	ldd	r28, Z+3	; 0x03
    40e4:	d4 81       	ldd	r29, Z+4	; 0x04
    40e6:	d0 93 cd 0a 	sts	0x0ACD, r29
    40ea:	c0 93 cc 0a 	sts	0x0ACC, r28

    if (NextNode == _head_node)
    40ee:	a0 17       	cp	r26, r16
    40f0:	b1 07       	cpc	r27, r17
    40f2:	b1 f4       	brne	.+44     	; 0x4120 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    40f4:	10 97       	sbiw	r26, 0x00	; 0
    40f6:	49 f0       	breq	.+18     	; 0x410a <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    40f8:	b4 83       	std	Z+4, r27	; 0x04
    40fa:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    40fc:	12 82       	std	Z+2, r1	; 0x02
    40fe:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    4100:	12 96       	adiw	r26, 0x02	; 2
    4102:	fc 93       	st	X, r31
    4104:	ee 93       	st	-X, r30
    4106:	11 97       	sbiw	r26, 0x01	; 1
    4108:	06 c0       	rjmp	.+12     	; 0x4116 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    410a:	14 82       	std	Z+4, r1	; 0x04
    410c:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    410e:	12 82       	std	Z+2, r1	; 0x02
    4110:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    4112:	fa 83       	std	Y+2, r31	; 0x02
    4114:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    4116:	f0 93 b1 0b 	sts	0x0BB1, r31
    411a:	e0 93 b0 0b 	sts	0x0BB0, r30
    411e:	1e c0       	rjmp	.+60     	; 0x415c <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    4120:	ac 17       	cp	r26, r28
    4122:	bd 07       	cpc	r27, r29
    4124:	79 f0       	breq	.+30     	; 0x4144 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    4126:	11 96       	adiw	r26, 0x01	; 1
    4128:	8d 91       	ld	r24, X+
    412a:	9c 91       	ld	r25, X
    412c:	12 97       	sbiw	r26, 0x02	; 2
    412e:	92 83       	std	Z+2, r25	; 0x02
    4130:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    4132:	b4 83       	std	Z+4, r27	; 0x04
    4134:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    4136:	11 96       	adiw	r26, 0x01	; 1
    4138:	cd 91       	ld	r28, X+
    413a:	dc 91       	ld	r29, X
    413c:	12 97       	sbiw	r26, 0x02	; 2
    413e:	fc 83       	std	Y+4, r31	; 0x04
    4140:	eb 83       	std	Y+3, r30	; 0x03
    4142:	08 c0       	rjmp	.+16     	; 0x4154 <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    4144:	14 82       	std	Z+4, r1	; 0x04
    4146:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    4148:	11 96       	adiw	r26, 0x01	; 1
    414a:	8d 91       	ld	r24, X+
    414c:	9c 91       	ld	r25, X
    414e:	12 97       	sbiw	r26, 0x02	; 2
    4150:	92 83       	std	Z+2, r25	; 0x02
    4152:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    4154:	12 96       	adiw	r26, 0x02	; 2
    4156:	fc 93       	st	X, r31
    4158:	ee 93       	st	-X, r30
    415a:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    415c:	df 91       	pop	r29
    415e:	cf 91       	pop	r28
    4160:	1f 91       	pop	r17
    4162:	0f 91       	pop	r16
    4164:	ff 90       	pop	r15
    4166:	ef 90       	pop	r14
    4168:	df 90       	pop	r13
    416a:	cf 90       	pop	r12
    416c:	bf 90       	pop	r11
    416e:	af 90       	pop	r10
    4170:	08 95       	ret

00004172 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    4172:	cf 93       	push	r28
    4174:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    4176:	e0 91 b0 0b 	lds	r30, 0x0BB0
    417a:	f0 91 b1 0b 	lds	r31, 0x0BB1
    417e:	30 97       	sbiw	r30, 0x00	; 0
    4180:	09 f4       	brne	.+2      	; 0x4184 <nrk_rem_from_readyQ+0x12>
    4182:	44 c0       	rjmp	.+136    	; 0x420c <__stack+0xd>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    4184:	99 27       	eor	r25, r25
    4186:	87 fd       	sbrc	r24, 7
    4188:	90 95       	com	r25
    418a:	20 81       	ld	r18, Z
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	28 17       	cp	r18, r24
    4190:	39 07       	cpc	r19, r25
    4192:	81 f4       	brne	.+32     	; 0x41b4 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    4194:	a3 81       	ldd	r26, Z+3	; 0x03
    4196:	b4 81       	ldd	r27, Z+4	; 0x04
    4198:	b0 93 b1 0b 	sts	0x0BB1, r27
    419c:	a0 93 b0 0b 	sts	0x0BB0, r26
        _head_node->Prev = NULL;
    41a0:	12 96       	adiw	r26, 0x02	; 2
    41a2:	1c 92       	st	X, r1
    41a4:	1e 92       	st	-X, r1
    41a6:	11 97       	sbiw	r26, 0x01	; 1
    41a8:	18 c0       	rjmp	.+48     	; 0x41da <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    41aa:	03 80       	ldd	r0, Z+3	; 0x03
    41ac:	f4 81       	ldd	r31, Z+4	; 0x04
    41ae:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    41b0:	30 97       	sbiw	r30, 0x00	; 0
    41b2:	61 f1       	breq	.+88     	; 0x420c <__stack+0xd>
    41b4:	20 81       	ld	r18, Z
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	28 17       	cp	r18, r24
    41ba:	39 07       	cpc	r19, r25
    41bc:	b1 f7       	brne	.-20     	; 0x41aa <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    41be:	c1 81       	ldd	r28, Z+1	; 0x01
    41c0:	d2 81       	ldd	r29, Z+2	; 0x02
    41c2:	83 81       	ldd	r24, Z+3	; 0x03
    41c4:	94 81       	ldd	r25, Z+4	; 0x04
    41c6:	9c 83       	std	Y+4, r25	; 0x04
    41c8:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    41ca:	a3 81       	ldd	r26, Z+3	; 0x03
    41cc:	b4 81       	ldd	r27, Z+4	; 0x04
    41ce:	10 97       	sbiw	r26, 0x00	; 0
    41d0:	21 f0       	breq	.+8      	; 0x41da <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    41d2:	12 96       	adiw	r26, 0x02	; 2
    41d4:	dc 93       	st	X, r29
    41d6:	ce 93       	st	-X, r28
    41d8:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    41da:	a0 91 cc 0a 	lds	r26, 0x0ACC
    41de:	b0 91 cd 0a 	lds	r27, 0x0ACD
    41e2:	10 97       	sbiw	r26, 0x00	; 0
    41e4:	39 f4       	brne	.+14     	; 0x41f4 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    41e6:	f0 93 cd 0a 	sts	0x0ACD, r31
    41ea:	e0 93 cc 0a 	sts	0x0ACC, r30
        _free_node->Next = NULL;
    41ee:	14 82       	std	Z+4, r1	; 0x04
    41f0:	13 82       	std	Z+3, r1	; 0x03
    41f2:	0a c0       	rjmp	.+20     	; 0x4208 <__stack+0x9>
    }
    else
    {
        CurNode->Next = _free_node;
    41f4:	b4 83       	std	Z+4, r27	; 0x04
    41f6:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    41f8:	12 96       	adiw	r26, 0x02	; 2
    41fa:	fc 93       	st	X, r31
    41fc:	ee 93       	st	-X, r30
    41fe:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    4200:	f0 93 cd 0a 	sts	0x0ACD, r31
    4204:	e0 93 cc 0a 	sts	0x0ACC, r30
    }
    _free_node->Prev = NULL;
    4208:	12 82       	std	Z+2, r1	; 0x02
    420a:	11 82       	std	Z+1, r1	; 0x01
}
    420c:	df 91       	pop	r29
    420e:	cf 91       	pop	r28
    4210:	08 95       	ret

00004212 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    4212:	ef 92       	push	r14
    4214:	ff 92       	push	r15
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
    421a:	cf 93       	push	r28
    421c:	df 93       	push	r29
    421e:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    4220:	4b 81       	ldd	r20, Y+3	; 0x03
    4222:	5c 81       	ldd	r21, Y+4	; 0x04
    4224:	69 81       	ldd	r22, Y+1	; 0x01
    4226:	7a 81       	ldd	r23, Y+2	; 0x02
    4228:	8d 81       	ldd	r24, Y+5	; 0x05
    422a:	9e 81       	ldd	r25, Y+6	; 0x06
    422c:	0e 94 6a 2e 	call	0x5cd4	; 0x5cd4 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    4230:	2f 81       	ldd	r18, Y+7	; 0x07
    4232:	22 23       	and	r18, r18
    4234:	71 f0       	breq	.+28     	; 0x4252 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    4236:	4b 81       	ldd	r20, Y+3	; 0x03
    4238:	5c 81       	ldd	r21, Y+4	; 0x04
    423a:	e1 2c       	mov	r14, r1
    423c:	f1 2c       	mov	r15, r1
    423e:	00 e0       	ldi	r16, 0x00	; 0
    4240:	10 e0       	ldi	r17, 0x00	; 0
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	bc 01       	movw	r22, r24
    4248:	ce 01       	movw	r24, r28
    424a:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    424e:	1f 82       	std	Y+7, r1	; 0x07
    4250:	0c c0       	rjmp	.+24     	; 0x426a <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    4252:	e8 81       	ld	r30, Y
    4254:	2b e2       	ldi	r18, 0x2B	; 43
    4256:	e2 02       	muls	r30, r18
    4258:	f0 01       	movw	r30, r0
    425a:	11 24       	eor	r1, r1
    425c:	e2 53       	subi	r30, 0x32	; 50
    425e:	f5 4f       	sbci	r31, 0xF5	; 245
    4260:	21 85       	ldd	r18, Z+9	; 0x09
    4262:	23 30       	cpi	r18, 0x03	; 3
    4264:	b9 f4       	brne	.+46     	; 0x4294 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    4266:	91 83       	std	Z+1, r25	; 0x01
    4268:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    426a:	e8 81       	ld	r30, Y
    426c:	8b e2       	ldi	r24, 0x2B	; 43
    426e:	e8 02       	muls	r30, r24
    4270:	f0 01       	movw	r30, r0
    4272:	11 24       	eor	r1, r1
    4274:	e2 53       	subi	r30, 0x32	; 50
    4276:	f5 4f       	sbci	r31, 0xF5	; 245
    4278:	85 89       	ldd	r24, Z+21	; 0x15
    427a:	96 89       	ldd	r25, Z+22	; 0x16
    427c:	a7 89       	ldd	r26, Z+23	; 0x17
    427e:	b0 8d       	ldd	r27, Z+24	; 0x18
    4280:	89 2b       	or	r24, r25
    4282:	8a 2b       	or	r24, r26
    4284:	8b 2b       	or	r24, r27
    4286:	41 f4       	brne	.+16     	; 0x4298 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    4288:	82 e0       	ldi	r24, 0x02	; 2
    428a:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    428c:	88 81       	ld	r24, Y
    428e:	0e 94 09 20 	call	0x4012	; 0x4012 <nrk_add_to_readyQ>
    4292:	02 c0       	rjmp	.+4      	; 0x4298 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    4294:	8f ef       	ldi	r24, 0xFF	; 255
    4296:	01 c0       	rjmp	.+2      	; 0x429a <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    4298:	81 e0       	ldi	r24, 0x01	; 1
}
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	1f 91       	pop	r17
    42a0:	0f 91       	pop	r16
    42a2:	ff 90       	pop	r15
    42a4:	ef 90       	pop	r14
    42a6:	08 95       	ret

000042a8 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
    42b2:	28 97       	sbiw	r28, 0x08	; 8
    42b4:	0f b6       	in	r0, 0x3f	; 63
    42b6:	f8 94       	cli
    42b8:	de bf       	out	0x3e, r29	; 62
    42ba:	0f be       	out	0x3f, r0	; 63
    42bc:	cd bf       	out	0x3d, r28	; 61
    42be:	29 83       	std	Y+1, r18	; 0x01
    42c0:	3a 83       	std	Y+2, r19	; 0x02
    42c2:	4b 83       	std	Y+3, r20	; 0x03
    42c4:	5c 83       	std	Y+4, r21	; 0x04
    42c6:	6d 83       	std	Y+5, r22	; 0x05
    42c8:	7e 83       	std	Y+6, r23	; 0x06
    42ca:	8f 83       	std	Y+7, r24	; 0x07
    42cc:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    42ce:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    42d2:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_os_timer_get>
    42d6:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    42d8:	ce 01       	movw	r24, r28
    42da:	01 96       	adiw	r24, 0x01	; 1
    42dc:	0e 94 66 25 	call	0x4acc	; 0x4acc <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    42e0:	63 30       	cpi	r22, 0x03	; 3
    42e2:	71 05       	cpc	r23, r1
    42e4:	98 f0       	brcs	.+38     	; 0x430c <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    42e6:	e0 91 bb 0b 	lds	r30, 0x0BBB
    42ea:	f0 91 bc 0b 	lds	r31, 0x0BBC
    42ee:	21 2f       	mov	r18, r17
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	62 0f       	add	r22, r18
    42f4:	73 1f       	adc	r23, r19
    42f6:	cb 01       	movw	r24, r22
    42f8:	a0 e0       	ldi	r26, 0x00	; 0
    42fa:	b0 e0       	ldi	r27, 0x00	; 0
    42fc:	85 8b       	std	Z+21, r24	; 0x15
    42fe:	96 8b       	std	Z+22, r25	; 0x16
    4300:	a7 8b       	std	Z+23, r26	; 0x17
    4302:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    4304:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>

    return NRK_OK;
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	01 c0       	rjmp	.+2      	; 0x430e <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    430c:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    430e:	28 96       	adiw	r28, 0x08	; 8
    4310:	0f b6       	in	r0, 0x3f	; 63
    4312:	f8 94       	cli
    4314:	de bf       	out	0x3e, r29	; 62
    4316:	0f be       	out	0x3f, r0	; 63
    4318:	cd bf       	out	0x3d, r28	; 61
    431a:	df 91       	pop	r29
    431c:	cf 91       	pop	r28
    431e:	1f 91       	pop	r17
    4320:	08 95       	ret

00004322 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    4322:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    4326:	e0 91 bb 0b 	lds	r30, 0x0BBB
    432a:	f0 91 bc 0b 	lds	r31, 0x0BBC
    432e:	85 81       	ldd	r24, Z+5	; 0x05
    4330:	81 11       	cpse	r24, r1
    4332:	f7 cf       	rjmp	.-18     	; 0x4322 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    4334:	08 95       	ret

00004336 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    4336:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    4338:	0e 94 c6 1c 	call	0x398c	; 0x398c <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    433c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    4340:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4344:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	92 a7       	std	Z+42, r25	; 0x2a
    434e:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    4350:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    4352:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_os_timer_get>
    4356:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    4358:	88 3f       	cpi	r24, 0xF8	; 248
    435a:	80 f4       	brcc	.+32     	; 0x437c <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    435c:	0e 94 2e 2b 	call	0x565c	; 0x565c <_nrk_get_next_wakeup>
    4360:	2c 2f       	mov	r18, r28
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	2f 5f       	subi	r18, 0xFF	; 255
    4366:	3f 4f       	sbci	r19, 0xFF	; 255
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	28 17       	cp	r18, r24
    436c:	39 07       	cpc	r19, r25
    436e:	34 f4       	brge	.+12     	; 0x437c <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    4370:	82 e0       	ldi	r24, 0x02	; 2
    4372:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    4374:	80 93 50 09 	sts	0x0950, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    4378:	0e 94 32 2b 	call	0x5664	; 0x5664 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    437c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    4380:	0e 94 91 21 	call	0x4322	; 0x4322 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	cf 91       	pop	r28
    4388:	08 95       	ret

0000438a <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    438a:	e0 91 bb 0b 	lds	r30, 0x0BBB
    438e:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4392:	80 85       	ldd	r24, Z+8	; 0x08
    4394:	0e 94 b9 20 	call	0x4172	; 0x4172 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    4398:	e0 91 bb 0b 	lds	r30, 0x0BBB
    439c:	f0 91 bc 0b 	lds	r31, 0x0BBC
    43a0:	84 e0       	ldi	r24, 0x04	; 4
    43a2:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    43a4:	0e 94 9b 21 	call	0x4336	; 0x4336 <nrk_wait_until_next_period>
    return NRK_OK;
}
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	08 95       	ret

000043ac <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    43ac:	cf 93       	push	r28
    43ae:	df 93       	push	r29
    43b0:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    43b2:	0e 94 c6 1c 	call	0x398c	; 0x398c <nrk_stack_check>

    if (p == 0)
    43b6:	20 97       	sbiw	r28, 0x00	; 0
    43b8:	11 f4       	brne	.+4      	; 0x43be <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    43ba:	c1 e0       	ldi	r28, 0x01	; 1
    43bc:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    43be:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    43c2:	e0 91 bb 0b 	lds	r30, 0x0BBB
    43c6:	f0 91 bc 0b 	lds	r31, 0x0BBC
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    43ce:	d2 a7       	std	Z+42, r29	; 0x2a
    43d0:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    43d2:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_os_timer_get>
    43d6:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    43d8:	88 3f       	cpi	r24, 0xF8	; 248
    43da:	80 f4       	brcc	.+32     	; 0x43fc <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    43dc:	0e 94 2e 2b 	call	0x565c	; 0x565c <_nrk_get_next_wakeup>
    43e0:	2c 2f       	mov	r18, r28
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	2f 5f       	subi	r18, 0xFF	; 255
    43e6:	3f 4f       	sbci	r19, 0xFF	; 255
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	28 17       	cp	r18, r24
    43ec:	39 07       	cpc	r19, r25
    43ee:	34 f4       	brge	.+12     	; 0x43fc <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    43f0:	82 e0       	ldi	r24, 0x02	; 2
    43f2:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    43f4:	80 93 50 09 	sts	0x0950, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    43f8:	0e 94 32 2b 	call	0x5664	; 0x5664 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    43fc:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    4400:	0e 94 91 21 	call	0x4322	; 0x4322 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	08 95       	ret

0000440c <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    440c:	ef 92       	push	r14
    440e:	ff 92       	push	r15
    4410:	0f 93       	push	r16
    4412:	1f 93       	push	r17
    4414:	cf 93       	push	r28
    4416:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    4418:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    441c:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4420:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    4428:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_os_timer_get>
    442c:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    442e:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4432:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4436:	e8 2e       	mov	r14, r24
    4438:	f1 2c       	mov	r15, r1
    443a:	c7 01       	movw	r24, r14
    443c:	80 0f       	add	r24, r16
    443e:	91 1f       	adc	r25, r17
    4440:	a0 e0       	ldi	r26, 0x00	; 0
    4442:	b0 e0       	ldi	r27, 0x00	; 0
    4444:	85 8b       	std	Z+21, r24	; 0x15
    4446:	96 8b       	std	Z+22, r25	; 0x16
    4448:	a7 8b       	std	Z+23, r26	; 0x17
    444a:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    444c:	c8 3f       	cpi	r28, 0xF8	; 248
    444e:	78 f4       	brcc	.+30     	; 0x446e <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4450:	0e 94 2e 2b 	call	0x565c	; 0x565c <_nrk_get_next_wakeup>
    4454:	9f ef       	ldi	r25, 0xFF	; 255
    4456:	e9 1a       	sub	r14, r25
    4458:	f9 0a       	sbc	r15, r25
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	e8 16       	cp	r14, r24
    445e:	f9 06       	cpc	r15, r25
    4460:	34 f4       	brge	.+12     	; 0x446e <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    4462:	82 e0       	ldi	r24, 0x02	; 2
    4464:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4466:	80 93 50 09 	sts	0x0950, r24
            _nrk_set_next_wakeup (timer);
    446a:	0e 94 32 2b 	call	0x5664	; 0x5664 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    446e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4472:	0e 94 91 21 	call	0x4322	; 0x4322 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	cf 91       	pop	r28
    447a:	1f 91       	pop	r17
    447c:	0f 91       	pop	r16
    447e:	ff 90       	pop	r15
    4480:	ef 90       	pop	r14
    4482:	08 95       	ret

00004484 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    4484:	cf 93       	push	r28
    4486:	df 93       	push	r29
    4488:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    448a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    448e:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4492:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4496:	21 e0       	ldi	r18, 0x01	; 1
    4498:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    449a:	ce 01       	movw	r24, r28
    449c:	a0 e0       	ldi	r26, 0x00	; 0
    449e:	b0 e0       	ldi	r27, 0x00	; 0
    44a0:	85 8b       	std	Z+21, r24	; 0x15
    44a2:	96 8b       	std	Z+22, r25	; 0x16
    44a4:	a7 8b       	std	Z+23, r26	; 0x17
    44a6:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    44a8:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_os_timer_get>
    44ac:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    44ae:	88 3f       	cpi	r24, 0xF8	; 248
    44b0:	80 f4       	brcc	.+32     	; 0x44d2 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    44b2:	0e 94 2e 2b 	call	0x565c	; 0x565c <_nrk_get_next_wakeup>
    44b6:	2c 2f       	mov	r18, r28
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	2f 5f       	subi	r18, 0xFF	; 255
    44bc:	3f 4f       	sbci	r19, 0xFF	; 255
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	28 17       	cp	r18, r24
    44c2:	39 07       	cpc	r19, r25
    44c4:	34 f4       	brge	.+12     	; 0x44d2 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    44c6:	82 e0       	ldi	r24, 0x02	; 2
    44c8:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    44ca:	80 93 50 09 	sts	0x0950, r24
            _nrk_set_next_wakeup (timer);
    44ce:	0e 94 32 2b 	call	0x5664	; 0x5664 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    44d2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    44d6:	0e 94 91 21 	call	0x4322	; 0x4322 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    44da:	81 e0       	ldi	r24, 0x01	; 1
    44dc:	df 91       	pop	r29
    44de:	cf 91       	pop	r28
    44e0:	08 95       	ret

000044e2 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    44e2:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    44e4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    44e8:	e0 91 bb 0b 	lds	r30, 0x0BBB
    44ec:	f0 91 bc 0b 	lds	r31, 0x0BBC
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    44f4:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    44f6:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_os_timer_get>
    44fa:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    44fc:	88 3f       	cpi	r24, 0xF8	; 248
    44fe:	80 f4       	brcc	.+32     	; 0x4520 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4500:	0e 94 2e 2b 	call	0x565c	; 0x565c <_nrk_get_next_wakeup>
    4504:	2c 2f       	mov	r18, r28
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	2f 5f       	subi	r18, 0xFF	; 255
    450a:	3f 4f       	sbci	r19, 0xFF	; 255
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	28 17       	cp	r18, r24
    4510:	39 07       	cpc	r19, r25
    4512:	34 f4       	brge	.+12     	; 0x4520 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    4514:	82 e0       	ldi	r24, 0x02	; 2
    4516:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4518:	80 93 50 09 	sts	0x0950, r24
            _nrk_set_next_wakeup (timer);
    451c:	0e 94 32 2b 	call	0x5664	; 0x5664 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4520:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4524:	0e 94 91 21 	call	0x4322	; 0x4322 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	cf 91       	pop	r28
    452c:	08 95       	ret

0000452e <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    452e:	1f 93       	push	r17
    4530:	cf 93       	push	r28
    4532:	df 93       	push	r29
    4534:	cd b7       	in	r28, 0x3d	; 61
    4536:	de b7       	in	r29, 0x3e	; 62
    4538:	28 97       	sbiw	r28, 0x08	; 8
    453a:	0f b6       	in	r0, 0x3f	; 63
    453c:	f8 94       	cli
    453e:	de bf       	out	0x3e, r29	; 62
    4540:	0f be       	out	0x3f, r0	; 63
    4542:	cd bf       	out	0x3d, r28	; 61
    4544:	29 83       	std	Y+1, r18	; 0x01
    4546:	3a 83       	std	Y+2, r19	; 0x02
    4548:	4b 83       	std	Y+3, r20	; 0x03
    454a:	5c 83       	std	Y+4, r21	; 0x04
    454c:	6d 83       	std	Y+5, r22	; 0x05
    454e:	7e 83       	std	Y+6, r23	; 0x06
    4550:	8f 83       	std	Y+7, r24	; 0x07
    4552:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    4554:	0e 94 c6 1c 	call	0x398c	; 0x398c <nrk_stack_check>

    nrk_int_disable ();
    4558:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    455c:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4560:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    4568:	81 e0       	ldi	r24, 0x01	; 1
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	92 a7       	std	Z+42, r25	; 0x2a
    456e:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    4570:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_os_timer_get>
    4574:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    4576:	ce 01       	movw	r24, r28
    4578:	01 96       	adiw	r24, 0x01	; 1
    457a:	0e 94 66 25 	call	0x4acc	; 0x4acc <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    457e:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4582:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	81 0f       	add	r24, r17
    458c:	91 1d       	adc	r25, r1
    458e:	a1 1d       	adc	r26, r1
    4590:	b1 1d       	adc	r27, r1
    4592:	85 8b       	std	Z+21, r24	; 0x15
    4594:	96 8b       	std	Z+22, r25	; 0x16
    4596:	a7 8b       	std	Z+23, r26	; 0x17
    4598:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    459a:	18 3f       	cpi	r17, 0xF8	; 248
    459c:	80 f4       	brcc	.+32     	; 0x45be <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    459e:	0e 94 2e 2b 	call	0x565c	; 0x565c <_nrk_get_next_wakeup>
    45a2:	21 2f       	mov	r18, r17
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	2f 5f       	subi	r18, 0xFF	; 255
    45a8:	3f 4f       	sbci	r19, 0xFF	; 255
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	28 17       	cp	r18, r24
    45ae:	39 07       	cpc	r19, r25
    45b0:	34 f4       	brge	.+12     	; 0x45be <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    45b2:	82 e0       	ldi	r24, 0x02	; 2
    45b4:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    45b6:	80 93 50 09 	sts	0x0950, r24
            _nrk_set_next_wakeup (timer);
    45ba:	0e 94 32 2b 	call	0x5664	; 0x5664 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    45be:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    45c2:	0e 94 91 21 	call	0x4322	; 0x4322 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	28 96       	adiw	r28, 0x08	; 8
    45ca:	0f b6       	in	r0, 0x3f	; 63
    45cc:	f8 94       	cli
    45ce:	de bf       	out	0x3e, r29	; 62
    45d0:	0f be       	out	0x3f, r0	; 63
    45d2:	cd bf       	out	0x3d, r28	; 61
    45d4:	df 91       	pop	r29
    45d6:	cf 91       	pop	r28
    45d8:	1f 91       	pop	r17
    45da:	08 95       	ret

000045dc <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    45dc:	8f 92       	push	r8
    45de:	9f 92       	push	r9
    45e0:	af 92       	push	r10
    45e2:	bf 92       	push	r11
    45e4:	cf 92       	push	r12
    45e6:	df 92       	push	r13
    45e8:	ef 92       	push	r14
    45ea:	ff 92       	push	r15
    45ec:	0f 93       	push	r16
    45ee:	1f 93       	push	r17
    45f0:	cf 93       	push	r28
    45f2:	df 93       	push	r29
    45f4:	cd b7       	in	r28, 0x3d	; 61
    45f6:	de b7       	in	r29, 0x3e	; 62
    45f8:	60 97       	sbiw	r28, 0x10	; 16
    45fa:	0f b6       	in	r0, 0x3f	; 63
    45fc:	f8 94       	cli
    45fe:	de bf       	out	0x3e, r29	; 62
    4600:	0f be       	out	0x3f, r0	; 63
    4602:	cd bf       	out	0x3d, r28	; 61
    4604:	29 87       	std	Y+9, r18	; 0x09
    4606:	3a 87       	std	Y+10, r19	; 0x0a
    4608:	4b 87       	std	Y+11, r20	; 0x0b
    460a:	5c 87       	std	Y+12, r21	; 0x0c
    460c:	6d 87       	std	Y+13, r22	; 0x0d
    460e:	7e 87       	std	Y+14, r23	; 0x0e
    4610:	8f 87       	std	Y+15, r24	; 0x0f
    4612:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    4614:	ce 01       	movw	r24, r28
    4616:	01 96       	adiw	r24, 0x01	; 1
    4618:	0e 94 4a 23 	call	0x4694	; 0x4694 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    461c:	89 80       	ldd	r8, Y+1	; 0x01
    461e:	9a 80       	ldd	r9, Y+2	; 0x02
    4620:	ab 80       	ldd	r10, Y+3	; 0x03
    4622:	bc 80       	ldd	r11, Y+4	; 0x04
    4624:	cd 80       	ldd	r12, Y+5	; 0x05
    4626:	de 80       	ldd	r13, Y+6	; 0x06
    4628:	ef 80       	ldd	r14, Y+7	; 0x07
    462a:	f8 84       	ldd	r15, Y+8	; 0x08
    462c:	09 85       	ldd	r16, Y+9	; 0x09
    462e:	1a 85       	ldd	r17, Y+10	; 0x0a
    4630:	2b 85       	ldd	r18, Y+11	; 0x0b
    4632:	3c 85       	ldd	r19, Y+12	; 0x0c
    4634:	4d 85       	ldd	r20, Y+13	; 0x0d
    4636:	5e 85       	ldd	r21, Y+14	; 0x0e
    4638:	6f 85       	ldd	r22, Y+15	; 0x0f
    463a:	78 89       	ldd	r23, Y+16	; 0x10
    463c:	ce 01       	movw	r24, r28
    463e:	09 96       	adiw	r24, 0x09	; 9
    4640:	0e 94 a7 23 	call	0x474e	; 0x474e <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    4644:	8f 3f       	cpi	r24, 0xFF	; 255
    4646:	61 f0       	breq	.+24     	; 0x4660 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    4648:	29 85       	ldd	r18, Y+9	; 0x09
    464a:	3a 85       	ldd	r19, Y+10	; 0x0a
    464c:	4b 85       	ldd	r20, Y+11	; 0x0b
    464e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4650:	6d 85       	ldd	r22, Y+13	; 0x0d
    4652:	7e 85       	ldd	r23, Y+14	; 0x0e
    4654:	8f 85       	ldd	r24, Y+15	; 0x0f
    4656:	98 89       	ldd	r25, Y+16	; 0x10
    4658:	0e 94 97 22 	call	0x452e	; 0x452e <nrk_wait>

    return NRK_OK;
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	01 c0       	rjmp	.+2      	; 0x4662 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    4660:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    4662:	60 96       	adiw	r28, 0x10	; 16
    4664:	0f b6       	in	r0, 0x3f	; 63
    4666:	f8 94       	cli
    4668:	de bf       	out	0x3e, r29	; 62
    466a:	0f be       	out	0x3f, r0	; 63
    466c:	cd bf       	out	0x3d, r28	; 61
    466e:	df 91       	pop	r29
    4670:	cf 91       	pop	r28
    4672:	1f 91       	pop	r17
    4674:	0f 91       	pop	r16
    4676:	ff 90       	pop	r15
    4678:	ef 90       	pop	r14
    467a:	df 90       	pop	r13
    467c:	cf 90       	pop	r12
    467e:	bf 90       	pop	r11
    4680:	af 90       	pop	r10
    4682:	9f 90       	pop	r9
    4684:	8f 90       	pop	r8
    4686:	08 95       	ret

00004688 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    4688:	e0 91 bb 0b 	lds	r30, 0x0BBB
    468c:	f0 91 bc 0b 	lds	r31, 0x0BBC
}
    4690:	80 85       	ldd	r24, Z+8	; 0x08
    4692:	08 95       	ret

00004694 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
    469c:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    469e:	1c 82       	std	Y+4, r1	; 0x04
    46a0:	1d 82       	std	Y+5, r1	; 0x05
    46a2:	1e 82       	std	Y+6, r1	; 0x06
    46a4:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    46a6:	80 91 b2 0b 	lds	r24, 0x0BB2
    46aa:	90 91 b3 0b 	lds	r25, 0x0BB3
    46ae:	a0 91 b4 0b 	lds	r26, 0x0BB4
    46b2:	b0 91 b5 0b 	lds	r27, 0x0BB5
    46b6:	88 83       	st	Y, r24
    46b8:	99 83       	std	Y+1, r25	; 0x01
    46ba:	aa 83       	std	Y+2, r26	; 0x02
    46bc:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    46be:	80 91 b6 0b 	lds	r24, 0x0BB6
    46c2:	90 91 b7 0b 	lds	r25, 0x0BB7
    46c6:	a0 91 b8 0b 	lds	r26, 0x0BB8
    46ca:	b0 91 b9 0b 	lds	r27, 0x0BB9
    46ce:	8c 83       	std	Y+4, r24	; 0x04
    46d0:	9d 83       	std	Y+5, r25	; 0x05
    46d2:	ae 83       	std	Y+6, r26	; 0x06
    46d4:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    46d6:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_os_timer_get>
    46da:	a8 2f       	mov	r26, r24
    46dc:	b0 e0       	ldi	r27, 0x00	; 0
    46de:	23 eb       	ldi	r18, 0xB3	; 179
    46e0:	36 ee       	ldi	r19, 0xE6	; 230
    46e2:	4e e0       	ldi	r20, 0x0E	; 14
    46e4:	50 e0       	ldi	r21, 0x00	; 0
    46e6:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__muluhisi3>
    46ea:	0c 81       	ldd	r16, Y+4	; 0x04
    46ec:	1d 81       	ldd	r17, Y+5	; 0x05
    46ee:	2e 81       	ldd	r18, Y+6	; 0x06
    46f0:	3f 81       	ldd	r19, Y+7	; 0x07
    46f2:	dc 01       	movw	r26, r24
    46f4:	cb 01       	movw	r24, r22
    46f6:	80 0f       	add	r24, r16
    46f8:	91 1f       	adc	r25, r17
    46fa:	a2 1f       	adc	r26, r18
    46fc:	b3 1f       	adc	r27, r19
    46fe:	8c 83       	std	Y+4, r24	; 0x04
    4700:	9d 83       	std	Y+5, r25	; 0x05
    4702:	ae 83       	std	Y+6, r26	; 0x06
    4704:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    4706:	8c 81       	ldd	r24, Y+4	; 0x04
    4708:	9d 81       	ldd	r25, Y+5	; 0x05
    470a:	ae 81       	ldd	r26, Y+6	; 0x06
    470c:	bf 81       	ldd	r27, Y+7	; 0x07
    470e:	81 15       	cp	r24, r1
    4710:	2a ec       	ldi	r18, 0xCA	; 202
    4712:	92 07       	cpc	r25, r18
    4714:	2a e9       	ldi	r18, 0x9A	; 154
    4716:	a2 07       	cpc	r26, r18
    4718:	2b e3       	ldi	r18, 0x3B	; 59
    471a:	b2 07       	cpc	r27, r18
    471c:	98 f0       	brcs	.+38     	; 0x4744 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    471e:	9a 5c       	subi	r25, 0xCA	; 202
    4720:	aa 49       	sbci	r26, 0x9A	; 154
    4722:	bb 43       	sbci	r27, 0x3B	; 59
    4724:	8c 83       	std	Y+4, r24	; 0x04
    4726:	9d 83       	std	Y+5, r25	; 0x05
    4728:	ae 83       	std	Y+6, r26	; 0x06
    472a:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    472c:	88 81       	ld	r24, Y
    472e:	99 81       	ldd	r25, Y+1	; 0x01
    4730:	aa 81       	ldd	r26, Y+2	; 0x02
    4732:	bb 81       	ldd	r27, Y+3	; 0x03
    4734:	01 96       	adiw	r24, 0x01	; 1
    4736:	a1 1d       	adc	r26, r1
    4738:	b1 1d       	adc	r27, r1
    473a:	88 83       	st	Y, r24
    473c:	99 83       	std	Y+1, r25	; 0x01
    473e:	aa 83       	std	Y+2, r26	; 0x02
    4740:	bb 83       	std	Y+3, r27	; 0x03
    4742:	e1 cf       	rjmp	.-62     	; 0x4706 <nrk_time_get+0x72>
    }

}
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	1f 91       	pop	r17
    474a:	0f 91       	pop	r16
    474c:	08 95       	ret

0000474e <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    474e:	8f 92       	push	r8
    4750:	9f 92       	push	r9
    4752:	af 92       	push	r10
    4754:	bf 92       	push	r11
    4756:	cf 92       	push	r12
    4758:	df 92       	push	r13
    475a:	ef 92       	push	r14
    475c:	ff 92       	push	r15
    475e:	0f 93       	push	r16
    4760:	1f 93       	push	r17
    4762:	cf 93       	push	r28
    4764:	df 93       	push	r29
    4766:	cd b7       	in	r28, 0x3d	; 61
    4768:	de b7       	in	r29, 0x3e	; 62
    476a:	60 97       	sbiw	r28, 0x10	; 16
    476c:	0f b6       	in	r0, 0x3f	; 63
    476e:	f8 94       	cli
    4770:	de bf       	out	0x3e, r29	; 62
    4772:	0f be       	out	0x3f, r0	; 63
    4774:	cd bf       	out	0x3d, r28	; 61
    4776:	fc 01       	movw	r30, r24
    4778:	09 83       	std	Y+1, r16	; 0x01
    477a:	1a 83       	std	Y+2, r17	; 0x02
    477c:	2b 83       	std	Y+3, r18	; 0x03
    477e:	3c 83       	std	Y+4, r19	; 0x04
    4780:	4d 83       	std	Y+5, r20	; 0x05
    4782:	5e 83       	std	Y+6, r21	; 0x06
    4784:	6f 83       	std	Y+7, r22	; 0x07
    4786:	78 87       	std	Y+8, r23	; 0x08
    4788:	89 86       	std	Y+9, r8	; 0x09
    478a:	9a 86       	std	Y+10, r9	; 0x0a
    478c:	ab 86       	std	Y+11, r10	; 0x0b
    478e:	bc 86       	std	Y+12, r11	; 0x0c
    4790:	cd 86       	std	Y+13, r12	; 0x0d
    4792:	de 86       	std	Y+14, r13	; 0x0e
    4794:	ef 86       	std	Y+15, r14	; 0x0f
    4796:	f8 8a       	std	Y+16, r15	; 0x10
    4798:	09 81       	ldd	r16, Y+1	; 0x01
    479a:	1a 81       	ldd	r17, Y+2	; 0x02
    479c:	2b 81       	ldd	r18, Y+3	; 0x03
    479e:	3c 81       	ldd	r19, Y+4	; 0x04
    47a0:	4d 81       	ldd	r20, Y+5	; 0x05
    47a2:	5e 81       	ldd	r21, Y+6	; 0x06
    47a4:	6f 81       	ldd	r22, Y+7	; 0x07
    47a6:	78 85       	ldd	r23, Y+8	; 0x08
    47a8:	c9 84       	ldd	r12, Y+9	; 0x09
    47aa:	da 84       	ldd	r13, Y+10	; 0x0a
    47ac:	eb 84       	ldd	r14, Y+11	; 0x0b
    47ae:	fc 84       	ldd	r15, Y+12	; 0x0c
    47b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    47b4:	af 85       	ldd	r26, Y+15	; 0x0f
    47b6:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    47b8:	0c 15       	cp	r16, r12
    47ba:	1d 05       	cpc	r17, r13
    47bc:	2e 05       	cpc	r18, r14
    47be:	3f 05       	cpc	r19, r15
    47c0:	f0 f1       	brcs	.+124    	; 0x483e <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    47c2:	c0 16       	cp	r12, r16
    47c4:	d1 06       	cpc	r13, r17
    47c6:	e2 06       	cpc	r14, r18
    47c8:	f3 06       	cpc	r15, r19
    47ca:	91 f4       	brne	.+36     	; 0x47f0 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    47cc:	48 17       	cp	r20, r24
    47ce:	59 07       	cpc	r21, r25
    47d0:	6a 07       	cpc	r22, r26
    47d2:	7b 07       	cpc	r23, r27
    47d4:	a0 f1       	brcs	.+104    	; 0x483e <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    47d6:	48 1b       	sub	r20, r24
    47d8:	59 0b       	sbc	r21, r25
    47da:	6a 0b       	sbc	r22, r26
    47dc:	7b 0b       	sbc	r23, r27
    47de:	44 83       	std	Z+4, r20	; 0x04
    47e0:	55 83       	std	Z+5, r21	; 0x05
    47e2:	66 83       	std	Z+6, r22	; 0x06
    47e4:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    47e6:	10 82       	st	Z, r1
    47e8:	11 82       	std	Z+1, r1	; 0x01
    47ea:	12 82       	std	Z+2, r1	; 0x02
    47ec:	13 82       	std	Z+3, r1	; 0x03
    47ee:	25 c0       	rjmp	.+74     	; 0x483a <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    47f0:	48 17       	cp	r20, r24
    47f2:	59 07       	cpc	r21, r25
    47f4:	6a 07       	cpc	r22, r26
    47f6:	7b 07       	cpc	r23, r27
    47f8:	80 f4       	brcc	.+32     	; 0x481a <nrk_time_sub+0xcc>
{
	high.secs--;
    47fa:	01 50       	subi	r16, 0x01	; 1
    47fc:	11 09       	sbc	r17, r1
    47fe:	21 09       	sbc	r18, r1
    4800:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    4802:	0c 19       	sub	r16, r12
    4804:	1d 09       	sbc	r17, r13
    4806:	2e 09       	sbc	r18, r14
    4808:	3f 09       	sbc	r19, r15
    480a:	00 83       	st	Z, r16
    480c:	11 83       	std	Z+1, r17	; 0x01
    480e:	22 83       	std	Z+2, r18	; 0x02
    4810:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    4812:	56 53       	subi	r21, 0x36	; 54
    4814:	65 46       	sbci	r22, 0x65	; 101
    4816:	74 4c       	sbci	r23, 0xC4	; 196
    4818:	08 c0       	rjmp	.+16     	; 0x482a <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    481a:	0c 19       	sub	r16, r12
    481c:	1d 09       	sbc	r17, r13
    481e:	2e 09       	sbc	r18, r14
    4820:	3f 09       	sbc	r19, r15
    4822:	00 83       	st	Z, r16
    4824:	11 83       	std	Z+1, r17	; 0x01
    4826:	22 83       	std	Z+2, r18	; 0x02
    4828:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    482a:	48 1b       	sub	r20, r24
    482c:	59 0b       	sbc	r21, r25
    482e:	6a 0b       	sbc	r22, r26
    4830:	7b 0b       	sbc	r23, r27
    4832:	44 83       	std	Z+4, r20	; 0x04
    4834:	55 83       	std	Z+5, r21	; 0x05
    4836:	66 83       	std	Z+6, r22	; 0x06
    4838:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	01 c0       	rjmp	.+2      	; 0x4840 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    483e:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    4840:	60 96       	adiw	r28, 0x10	; 16
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	f8 94       	cli
    4846:	de bf       	out	0x3e, r29	; 62
    4848:	0f be       	out	0x3f, r0	; 63
    484a:	cd bf       	out	0x3d, r28	; 61
    484c:	df 91       	pop	r29
    484e:	cf 91       	pop	r28
    4850:	1f 91       	pop	r17
    4852:	0f 91       	pop	r16
    4854:	ff 90       	pop	r15
    4856:	ef 90       	pop	r14
    4858:	df 90       	pop	r13
    485a:	cf 90       	pop	r12
    485c:	bf 90       	pop	r11
    485e:	af 90       	pop	r10
    4860:	9f 90       	pop	r9
    4862:	8f 90       	pop	r8
    4864:	08 95       	ret

00004866 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    4866:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    4868:	44 81       	ldd	r20, Z+4	; 0x04
    486a:	55 81       	ldd	r21, Z+5	; 0x05
    486c:	66 81       	ldd	r22, Z+6	; 0x06
    486e:	77 81       	ldd	r23, Z+7	; 0x07
    4870:	41 15       	cp	r20, r1
    4872:	8a ec       	ldi	r24, 0xCA	; 202
    4874:	58 07       	cpc	r21, r24
    4876:	8a e9       	ldi	r24, 0x9A	; 154
    4878:	68 07       	cpc	r22, r24
    487a:	8b e3       	ldi	r24, 0x3B	; 59
    487c:	78 07       	cpc	r23, r24
    487e:	98 f0       	brcs	.+38     	; 0x48a6 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    4880:	5a 5c       	subi	r21, 0xCA	; 202
    4882:	6a 49       	sbci	r22, 0x9A	; 154
    4884:	7b 43       	sbci	r23, 0x3B	; 59
    4886:	44 83       	std	Z+4, r20	; 0x04
    4888:	55 83       	std	Z+5, r21	; 0x05
    488a:	66 83       	std	Z+6, r22	; 0x06
    488c:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    488e:	80 81       	ld	r24, Z
    4890:	91 81       	ldd	r25, Z+1	; 0x01
    4892:	a2 81       	ldd	r26, Z+2	; 0x02
    4894:	b3 81       	ldd	r27, Z+3	; 0x03
    4896:	01 96       	adiw	r24, 0x01	; 1
    4898:	a1 1d       	adc	r26, r1
    489a:	b1 1d       	adc	r27, r1
    489c:	80 83       	st	Z, r24
    489e:	91 83       	std	Z+1, r25	; 0x01
    48a0:	a2 83       	std	Z+2, r26	; 0x02
    48a2:	b3 83       	std	Z+3, r27	; 0x03
    48a4:	e1 cf       	rjmp	.-62     	; 0x4868 <nrk_time_compact_nanos+0x2>
    }
}
    48a6:	08 95       	ret

000048a8 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    48a8:	8f 92       	push	r8
    48aa:	9f 92       	push	r9
    48ac:	af 92       	push	r10
    48ae:	bf 92       	push	r11
    48b0:	cf 92       	push	r12
    48b2:	df 92       	push	r13
    48b4:	ef 92       	push	r14
    48b6:	ff 92       	push	r15
    48b8:	0f 93       	push	r16
    48ba:	1f 93       	push	r17
    48bc:	cf 93       	push	r28
    48be:	df 93       	push	r29
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	60 97       	sbiw	r28, 0x10	; 16
    48c6:	0f b6       	in	r0, 0x3f	; 63
    48c8:	f8 94       	cli
    48ca:	de bf       	out	0x3e, r29	; 62
    48cc:	0f be       	out	0x3f, r0	; 63
    48ce:	cd bf       	out	0x3d, r28	; 61
    48d0:	09 83       	std	Y+1, r16	; 0x01
    48d2:	1a 83       	std	Y+2, r17	; 0x02
    48d4:	2b 83       	std	Y+3, r18	; 0x03
    48d6:	3c 83       	std	Y+4, r19	; 0x04
    48d8:	4d 83       	std	Y+5, r20	; 0x05
    48da:	5e 83       	std	Y+6, r21	; 0x06
    48dc:	6f 83       	std	Y+7, r22	; 0x07
    48de:	78 87       	std	Y+8, r23	; 0x08
    48e0:	89 86       	std	Y+9, r8	; 0x09
    48e2:	9a 86       	std	Y+10, r9	; 0x0a
    48e4:	ab 86       	std	Y+11, r10	; 0x0b
    48e6:	bc 86       	std	Y+12, r11	; 0x0c
    48e8:	cd 86       	std	Y+13, r12	; 0x0d
    48ea:	de 86       	std	Y+14, r13	; 0x0e
    48ec:	ef 86       	std	Y+15, r14	; 0x0f
    48ee:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    48f0:	09 85       	ldd	r16, Y+9	; 0x09
    48f2:	1a 85       	ldd	r17, Y+10	; 0x0a
    48f4:	2b 85       	ldd	r18, Y+11	; 0x0b
    48f6:	3c 85       	ldd	r19, Y+12	; 0x0c
    48f8:	49 81       	ldd	r20, Y+1	; 0x01
    48fa:	5a 81       	ldd	r21, Y+2	; 0x02
    48fc:	6b 81       	ldd	r22, Y+3	; 0x03
    48fe:	7c 81       	ldd	r23, Y+4	; 0x04
    4900:	40 0f       	add	r20, r16
    4902:	51 1f       	adc	r21, r17
    4904:	62 1f       	adc	r22, r18
    4906:	73 1f       	adc	r23, r19
    4908:	fc 01       	movw	r30, r24
    490a:	40 83       	st	Z, r20
    490c:	51 83       	std	Z+1, r21	; 0x01
    490e:	62 83       	std	Z+2, r22	; 0x02
    4910:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    4912:	0d 85       	ldd	r16, Y+13	; 0x0d
    4914:	1e 85       	ldd	r17, Y+14	; 0x0e
    4916:	2f 85       	ldd	r18, Y+15	; 0x0f
    4918:	38 89       	ldd	r19, Y+16	; 0x10
    491a:	4d 81       	ldd	r20, Y+5	; 0x05
    491c:	5e 81       	ldd	r21, Y+6	; 0x06
    491e:	6f 81       	ldd	r22, Y+7	; 0x07
    4920:	78 85       	ldd	r23, Y+8	; 0x08
    4922:	40 0f       	add	r20, r16
    4924:	51 1f       	adc	r21, r17
    4926:	62 1f       	adc	r22, r18
    4928:	73 1f       	adc	r23, r19
    492a:	44 83       	std	Z+4, r20	; 0x04
    492c:	55 83       	std	Z+5, r21	; 0x05
    492e:	66 83       	std	Z+6, r22	; 0x06
    4930:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    4932:	0e 94 33 24 	call	0x4866	; 0x4866 <nrk_time_compact_nanos>
return NRK_OK;
}
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	60 96       	adiw	r28, 0x10	; 16
    493a:	0f b6       	in	r0, 0x3f	; 63
    493c:	f8 94       	cli
    493e:	de bf       	out	0x3e, r29	; 62
    4940:	0f be       	out	0x3f, r0	; 63
    4942:	cd bf       	out	0x3d, r28	; 61
    4944:	df 91       	pop	r29
    4946:	cf 91       	pop	r28
    4948:	1f 91       	pop	r17
    494a:	0f 91       	pop	r16
    494c:	ff 90       	pop	r15
    494e:	ef 90       	pop	r14
    4950:	df 90       	pop	r13
    4952:	cf 90       	pop	r12
    4954:	bf 90       	pop	r11
    4956:	af 90       	pop	r10
    4958:	9f 90       	pop	r9
    495a:	8f 90       	pop	r8
    495c:	08 95       	ret

0000495e <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    495e:	e2 eb       	ldi	r30, 0xB2	; 178
    4960:	fb e0       	ldi	r31, 0x0B	; 11
    4962:	60 83       	st	Z, r22
    4964:	71 83       	std	Z+1, r23	; 0x01
    4966:	82 83       	std	Z+2, r24	; 0x02
    4968:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    496a:	24 83       	std	Z+4, r18	; 0x04
    496c:	35 83       	std	Z+5, r19	; 0x05
    496e:	46 83       	std	Z+6, r20	; 0x06
    4970:	57 83       	std	Z+7, r21	; 0x07
    4972:	08 95       	ret

00004974 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    4974:	2f 92       	push	r2
    4976:	3f 92       	push	r3
    4978:	4f 92       	push	r4
    497a:	5f 92       	push	r5
    497c:	6f 92       	push	r6
    497e:	7f 92       	push	r7
    4980:	8f 92       	push	r8
    4982:	9f 92       	push	r9
    4984:	af 92       	push	r10
    4986:	bf 92       	push	r11
    4988:	cf 92       	push	r12
    498a:	df 92       	push	r13
    498c:	ef 92       	push	r14
    498e:	ff 92       	push	r15
    4990:	0f 93       	push	r16
    4992:	1f 93       	push	r17
    4994:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4996:	c0 80       	ld	r12, Z
    4998:	d1 80       	ldd	r13, Z+1	; 0x01
    499a:	e2 80       	ldd	r14, Z+2	; 0x02
    499c:	f3 80       	ldd	r15, Z+3	; 0x03
    499e:	c1 14       	cp	r12, r1
    49a0:	d1 04       	cpc	r13, r1
    49a2:	e1 04       	cpc	r14, r1
    49a4:	f1 04       	cpc	r15, r1
    49a6:	e1 f1       	breq	.+120    	; 0x4a20 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    49a8:	84 81       	ldd	r24, Z+4	; 0x04
    49aa:	95 81       	ldd	r25, Z+5	; 0x05
    49ac:	a6 81       	ldd	r26, Z+6	; 0x06
    49ae:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    49b0:	22 e4       	ldi	r18, 0x42	; 66
    49b2:	c2 16       	cp	r12, r18
    49b4:	d1 04       	cpc	r13, r1
    49b6:	e1 04       	cpc	r14, r1
    49b8:	f1 04       	cpc	r15, r1
    49ba:	f0 f5       	brcc	.+124    	; 0x4a38 <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    49bc:	1c 01       	movw	r2, r24
    49be:	2d 01       	movw	r4, r26
    49c0:	61 2c       	mov	r6, r1
    49c2:	71 2c       	mov	r7, r1
    49c4:	43 01       	movw	r8, r6
    49c6:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    49c8:	8e 2f       	mov	r24, r30
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	a0 e0       	ldi	r26, 0x00	; 0
    49ce:	b0 e0       	ldi	r27, 0x00	; 0
    49d0:	8c 15       	cp	r24, r12
    49d2:	9d 05       	cpc	r25, r13
    49d4:	ae 05       	cpc	r26, r14
    49d6:	bf 05       	cpc	r27, r15
    49d8:	88 f4       	brcc	.+34     	; 0x49fc <_nrk_time_to_ticks+0x88>
    49da:	91 01       	movw	r18, r2
    49dc:	a2 01       	movw	r20, r4
    49de:	b3 01       	movw	r22, r6
    49e0:	c4 01       	movw	r24, r8
    49e2:	36 53       	subi	r19, 0x36	; 54
    49e4:	45 46       	sbci	r20, 0x65	; 101
    49e6:	54 4c       	sbci	r21, 0xC4	; 196
    49e8:	6f 4f       	sbci	r22, 0xFF	; 255
    49ea:	7f 4f       	sbci	r23, 0xFF	; 255
    49ec:	8f 4f       	sbci	r24, 0xFF	; 255
    49ee:	9f 4f       	sbci	r25, 0xFF	; 255
    49f0:	19 01       	movw	r2, r18
    49f2:	2a 01       	movw	r4, r20
    49f4:	3b 01       	movw	r6, r22
    49f6:	4c 01       	movw	r8, r24
    49f8:	ef 5f       	subi	r30, 0xFF	; 255
    49fa:	e6 cf       	rjmp	.-52     	; 0x49c8 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    49fc:	83 eb       	ldi	r24, 0xB3	; 179
    49fe:	a8 2e       	mov	r10, r24
    4a00:	96 ee       	ldi	r25, 0xE6	; 230
    4a02:	b9 2e       	mov	r11, r25
    4a04:	2e e0       	ldi	r18, 0x0E	; 14
    4a06:	c2 2e       	mov	r12, r18
    4a08:	d1 2c       	mov	r13, r1
    4a0a:	e1 2c       	mov	r14, r1
    4a0c:	f1 2c       	mov	r15, r1
    4a0e:	00 e0       	ldi	r16, 0x00	; 0
    4a10:	10 e0       	ldi	r17, 0x00	; 0
    4a12:	91 01       	movw	r18, r2
    4a14:	a2 01       	movw	r20, r4
    4a16:	b3 01       	movw	r22, r6
    4a18:	c4 01       	movw	r24, r8
    4a1a:	0e 94 b5 30 	call	0x616a	; 0x616a <__udivdi3>
    4a1e:	0a c0       	rjmp	.+20     	; 0x4a34 <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4a20:	64 81       	ldd	r22, Z+4	; 0x04
    4a22:	75 81       	ldd	r23, Z+5	; 0x05
    4a24:	86 81       	ldd	r24, Z+6	; 0x06
    4a26:	97 81       	ldd	r25, Z+7	; 0x07
    4a28:	23 eb       	ldi	r18, 0xB3	; 179
    4a2a:	36 ee       	ldi	r19, 0xE6	; 230
    4a2c:	4e e0       	ldi	r20, 0x0E	; 14
    4a2e:	50 e0       	ldi	r21, 0x00	; 0
    4a30:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    4a34:	c9 01       	movw	r24, r18
    4a36:	02 c0       	rjmp	.+4      	; 0x4a3c <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4a3c:	1f 91       	pop	r17
    4a3e:	0f 91       	pop	r16
    4a40:	ff 90       	pop	r15
    4a42:	ef 90       	pop	r14
    4a44:	df 90       	pop	r13
    4a46:	cf 90       	pop	r12
    4a48:	bf 90       	pop	r11
    4a4a:	af 90       	pop	r10
    4a4c:	9f 90       	pop	r9
    4a4e:	8f 90       	pop	r8
    4a50:	7f 90       	pop	r7
    4a52:	6f 90       	pop	r6
    4a54:	5f 90       	pop	r5
    4a56:	4f 90       	pop	r4
    4a58:	3f 90       	pop	r3
    4a5a:	2f 90       	pop	r2
    4a5c:	08 95       	ret

00004a5e <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4a5e:	cf 92       	push	r12
    4a60:	df 92       	push	r13
    4a62:	ef 92       	push	r14
    4a64:	ff 92       	push	r15
    4a66:	cf 93       	push	r28
    4a68:	df 93       	push	r29
    4a6a:	cd b7       	in	r28, 0x3d	; 61
    4a6c:	de b7       	in	r29, 0x3e	; 62
    4a6e:	28 97       	sbiw	r28, 0x08	; 8
    4a70:	0f b6       	in	r0, 0x3f	; 63
    4a72:	f8 94       	cli
    4a74:	de bf       	out	0x3e, r29	; 62
    4a76:	0f be       	out	0x3f, r0	; 63
    4a78:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    4a7a:	6b 01       	movw	r12, r22
    4a7c:	7c 01       	movw	r14, r24
    4a7e:	2a e0       	ldi	r18, 0x0A	; 10
    4a80:	f6 94       	lsr	r15
    4a82:	e7 94       	ror	r14
    4a84:	d7 94       	ror	r13
    4a86:	c7 94       	ror	r12
    4a88:	2a 95       	dec	r18
    4a8a:	d1 f7       	brne	.-12     	; 0x4a80 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    4a8c:	c9 82       	std	Y+1, r12	; 0x01
    4a8e:	da 82       	std	Y+2, r13	; 0x02
    4a90:	eb 82       	std	Y+3, r14	; 0x03
    4a92:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    4a94:	9b 01       	movw	r18, r22
    4a96:	ac 01       	movw	r20, r24
    4a98:	33 70       	andi	r19, 0x03	; 3
    4a9a:	44 27       	eor	r20, r20
    4a9c:	55 27       	eor	r21, r21
    4a9e:	63 eb       	ldi	r22, 0xB3	; 179
    4aa0:	76 ee       	ldi	r23, 0xE6	; 230
    4aa2:	8e e0       	ldi	r24, 0x0E	; 14
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	0e 94 6d 30 	call	0x60da	; 0x60da <__mulsi3>

return t;
    4aaa:	2c 2d       	mov	r18, r12
    4aac:	3a 81       	ldd	r19, Y+2	; 0x02
    4aae:	4b 81       	ldd	r20, Y+3	; 0x03
    4ab0:	5c 81       	ldd	r21, Y+4	; 0x04
}
    4ab2:	28 96       	adiw	r28, 0x08	; 8
    4ab4:	0f b6       	in	r0, 0x3f	; 63
    4ab6:	f8 94       	cli
    4ab8:	de bf       	out	0x3e, r29	; 62
    4aba:	0f be       	out	0x3f, r0	; 63
    4abc:	cd bf       	out	0x3d, r28	; 61
    4abe:	df 91       	pop	r29
    4ac0:	cf 91       	pop	r28
    4ac2:	ff 90       	pop	r15
    4ac4:	ef 90       	pop	r14
    4ac6:	df 90       	pop	r13
    4ac8:	cf 90       	pop	r12
    4aca:	08 95       	ret

00004acc <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    4acc:	2f 92       	push	r2
    4ace:	3f 92       	push	r3
    4ad0:	4f 92       	push	r4
    4ad2:	5f 92       	push	r5
    4ad4:	6f 92       	push	r6
    4ad6:	7f 92       	push	r7
    4ad8:	8f 92       	push	r8
    4ada:	9f 92       	push	r9
    4adc:	af 92       	push	r10
    4ade:	bf 92       	push	r11
    4ae0:	cf 92       	push	r12
    4ae2:	df 92       	push	r13
    4ae4:	ef 92       	push	r14
    4ae6:	ff 92       	push	r15
    4ae8:	0f 93       	push	r16
    4aea:	1f 93       	push	r17
    4aec:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4aee:	c0 80       	ld	r12, Z
    4af0:	d1 80       	ldd	r13, Z+1	; 0x01
    4af2:	e2 80       	ldd	r14, Z+2	; 0x02
    4af4:	f3 80       	ldd	r15, Z+3	; 0x03
    4af6:	c1 14       	cp	r12, r1
    4af8:	d1 04       	cpc	r13, r1
    4afa:	e1 04       	cpc	r14, r1
    4afc:	f1 04       	cpc	r15, r1
    4afe:	b9 f1       	breq	.+110    	; 0x4b6e <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    4b00:	84 81       	ldd	r24, Z+4	; 0x04
    4b02:	95 81       	ldd	r25, Z+5	; 0x05
    4b04:	a6 81       	ldd	r26, Z+6	; 0x06
    4b06:	b7 81       	ldd	r27, Z+7	; 0x07
    4b08:	1c 01       	movw	r2, r24
    4b0a:	2d 01       	movw	r4, r26
    4b0c:	61 2c       	mov	r6, r1
    4b0e:	71 2c       	mov	r7, r1
    4b10:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4b12:	e0 e0       	ldi	r30, 0x00	; 0
    4b14:	8e 2f       	mov	r24, r30
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	a0 e0       	ldi	r26, 0x00	; 0
    4b1a:	b0 e0       	ldi	r27, 0x00	; 0
    4b1c:	8c 15       	cp	r24, r12
    4b1e:	9d 05       	cpc	r25, r13
    4b20:	ae 05       	cpc	r26, r14
    4b22:	bf 05       	cpc	r27, r15
    4b24:	88 f4       	brcc	.+34     	; 0x4b48 <_nrk_time_to_ticks_long+0x7c>
    4b26:	91 01       	movw	r18, r2
    4b28:	a2 01       	movw	r20, r4
    4b2a:	b3 01       	movw	r22, r6
    4b2c:	c4 01       	movw	r24, r8
    4b2e:	36 53       	subi	r19, 0x36	; 54
    4b30:	45 46       	sbci	r20, 0x65	; 101
    4b32:	54 4c       	sbci	r21, 0xC4	; 196
    4b34:	6f 4f       	sbci	r22, 0xFF	; 255
    4b36:	7f 4f       	sbci	r23, 0xFF	; 255
    4b38:	8f 4f       	sbci	r24, 0xFF	; 255
    4b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b3c:	19 01       	movw	r2, r18
    4b3e:	2a 01       	movw	r4, r20
    4b40:	3b 01       	movw	r6, r22
    4b42:	4c 01       	movw	r8, r24
    4b44:	ef 5f       	subi	r30, 0xFF	; 255
    4b46:	e6 cf       	rjmp	.-52     	; 0x4b14 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4b48:	83 eb       	ldi	r24, 0xB3	; 179
    4b4a:	a8 2e       	mov	r10, r24
    4b4c:	96 ee       	ldi	r25, 0xE6	; 230
    4b4e:	b9 2e       	mov	r11, r25
    4b50:	2e e0       	ldi	r18, 0x0E	; 14
    4b52:	c2 2e       	mov	r12, r18
    4b54:	d1 2c       	mov	r13, r1
    4b56:	e1 2c       	mov	r14, r1
    4b58:	f1 2c       	mov	r15, r1
    4b5a:	00 e0       	ldi	r16, 0x00	; 0
    4b5c:	10 e0       	ldi	r17, 0x00	; 0
    4b5e:	91 01       	movw	r18, r2
    4b60:	a2 01       	movw	r20, r4
    4b62:	b3 01       	movw	r22, r6
    4b64:	c4 01       	movw	r24, r8
    4b66:	0e 94 b5 30 	call	0x616a	; 0x616a <__udivdi3>
    4b6a:	ca 01       	movw	r24, r20
    4b6c:	0b c0       	rjmp	.+22     	; 0x4b84 <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4b6e:	64 81       	ldd	r22, Z+4	; 0x04
    4b70:	75 81       	ldd	r23, Z+5	; 0x05
    4b72:	86 81       	ldd	r24, Z+6	; 0x06
    4b74:	97 81       	ldd	r25, Z+7	; 0x07
    4b76:	23 eb       	ldi	r18, 0xB3	; 179
    4b78:	36 ee       	ldi	r19, 0xE6	; 230
    4b7a:	4e e0       	ldi	r20, 0x0E	; 14
    4b7c:	50 e0       	ldi	r21, 0x00	; 0
    4b7e:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    4b82:	ca 01       	movw	r24, r20
}
return ticks;
}
    4b84:	b9 01       	movw	r22, r18
    4b86:	1f 91       	pop	r17
    4b88:	0f 91       	pop	r16
    4b8a:	ff 90       	pop	r15
    4b8c:	ef 90       	pop	r14
    4b8e:	df 90       	pop	r13
    4b90:	cf 90       	pop	r12
    4b92:	bf 90       	pop	r11
    4b94:	af 90       	pop	r10
    4b96:	9f 90       	pop	r9
    4b98:	8f 90       	pop	r8
    4b9a:	7f 90       	pop	r7
    4b9c:	6f 90       	pop	r6
    4b9e:	5f 90       	pop	r5
    4ba0:	4f 90       	pop	r4
    4ba2:	3f 90       	pop	r3
    4ba4:	2f 90       	pop	r2
    4ba6:	08 95       	ret

00004ba8 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    4ba8:	c2 e0       	ldi	r28, 0x02	; 2
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4baa:	d1 e0       	ldi	r29, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    4bac:	0e 94 c6 1c 	call	0x398c	; 0x398c <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4bb0:	0e 94 2e 2b 	call	0x565c	; 0x565c <_nrk_get_next_wakeup>
    4bb4:	84 30       	cpi	r24, 0x04	; 4
    4bb6:	28 f4       	brcc	.+10     	; 0x4bc2 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4bb8:	d0 93 af 0b 	sts	0x0BAF, r29
	    nrk_idle();
    4bbc:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <nrk_idle>
    4bc0:	08 c0       	rjmp	.+16     	; 0x4bd2 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    4bc2:	8a e0       	ldi	r24, 0x0A	; 10
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	0e 94 46 2a 	call	0x548c	; 0x548c <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    4bca:	c0 93 af 0b 	sts	0x0BAF, r28
	    nrk_sleep();
    4bce:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4bd2:	80 91 fb 09 	lds	r24, 0x09FB
    4bd6:	85 35       	cpi	r24, 0x55	; 85
    4bd8:	19 f0       	breq	.+6      	; 0x4be0 <nrk_idle_task+0x38>
    4bda:	88 e0       	ldi	r24, 0x08	; 8
    4bdc:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4be0:	80 91 fe 40 	lds	r24, 0x40FE
    4be4:	85 35       	cpi	r24, 0x55	; 85
    4be6:	11 f3       	breq	.-60     	; 0x4bac <nrk_idle_task+0x4>
    4be8:	88 e0       	ldi	r24, 0x08	; 8
    4bea:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_error_add>
    4bee:	de cf       	rjmp	.-68     	; 0x4bac <nrk_idle_task+0x4>

00004bf0 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4bf0:	2f 92       	push	r2
    4bf2:	3f 92       	push	r3
    4bf4:	4f 92       	push	r4
    4bf6:	5f 92       	push	r5
    4bf8:	6f 92       	push	r6
    4bfa:	7f 92       	push	r7
    4bfc:	8f 92       	push	r8
    4bfe:	9f 92       	push	r9
    4c00:	af 92       	push	r10
    4c02:	bf 92       	push	r11
    4c04:	cf 92       	push	r12
    4c06:	df 92       	push	r13
    4c08:	ef 92       	push	r14
    4c0a:	ff 92       	push	r15
    4c0c:	0f 93       	push	r16
    4c0e:	1f 93       	push	r17
    4c10:	cf 93       	push	r28
    4c12:	df 93       	push	r29
    4c14:	00 d0       	rcall	.+0      	; 0x4c16 <_nrk_scheduler+0x26>
    4c16:	1f 92       	push	r1
    4c18:	cd b7       	in	r28, 0x3d	; 61
    4c1a:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    nrk_int_enable();   // this should be removed...  Not needed
    4c1c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    4c20:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <_nrk_precision_os_timer_reset>
    _nrk_high_speed_timer_reset();
    4c24:	0e 94 80 2a 	call	0x5500	; 0x5500 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    4c28:	0e 94 88 2a 	call	0x5510	; 0x5510 <_nrk_high_speed_timer_get>
    4c2c:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4c2e:	8a ef       	ldi	r24, 0xFA	; 250
    4c30:	0e 94 32 2b 	call	0x5664	; 0x5664 <_nrk_set_next_wakeup>
    next_wake=60000;
    // Safety zone starts here....


#ifdef NRK_WATCHDOG
    nrk_watchdog_reset();
    4c34:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <nrk_watchdog_reset>
#endif

#ifdef NRK_SW_WDT
    _nrk_sw_wdt_check();
    4c38:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <_nrk_sw_wdt_check>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4c3c:	b0 90 50 09 	lds	r11, 0x0950
    4c40:	ab 2d       	mov	r26, r11
    4c42:	b0 e0       	ldi	r27, 0x00	; 0
    4c44:	23 eb       	ldi	r18, 0xB3	; 179
    4c46:	36 ee       	ldi	r19, 0xE6	; 230
    4c48:	4e e0       	ldi	r20, 0x0E	; 14
    4c4a:	50 e0       	ldi	r21, 0x00	; 0
    4c4c:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__muluhisi3>
    4c50:	00 91 b6 0b 	lds	r16, 0x0BB6
    4c54:	10 91 b7 0b 	lds	r17, 0x0BB7
    4c58:	20 91 b8 0b 	lds	r18, 0x0BB8
    4c5c:	30 91 b9 0b 	lds	r19, 0x0BB9
    4c60:	6b 01       	movw	r12, r22
    4c62:	7c 01       	movw	r14, r24
    4c64:	c0 0e       	add	r12, r16
    4c66:	d1 1e       	adc	r13, r17
    4c68:	e2 1e       	adc	r14, r18
    4c6a:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4c6c:	c7 01       	movw	r24, r14
    4c6e:	b6 01       	movw	r22, r12
    4c70:	23 eb       	ldi	r18, 0xB3	; 179
    4c72:	36 ee       	ldi	r19, 0xE6	; 230
    4c74:	4e e0       	ldi	r20, 0x0E	; 14
    4c76:	50 e0       	ldi	r21, 0x00	; 0
    4c78:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    4c7c:	c6 1a       	sub	r12, r22
    4c7e:	d7 0a       	sbc	r13, r23
    4c80:	e8 0a       	sbc	r14, r24
    4c82:	f9 0a       	sbc	r15, r25
    4c84:	c0 92 b6 0b 	sts	0x0BB6, r12
    4c88:	d0 92 b7 0b 	sts	0x0BB7, r13
    4c8c:	e0 92 b8 0b 	sts	0x0BB8, r14
    4c90:	f0 92 b9 0b 	sts	0x0BB9, r15

#ifdef NRK_STATS_TRACKER
    if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
    4c94:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4c98:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4c9c:	80 85       	ldd	r24, Z+8	; 0x08
    4c9e:	81 11       	cpse	r24, r1
    4ca0:	30 c0       	rjmp	.+96     	; 0x4d02 <_nrk_scheduler+0x112>
    {
        if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
    4ca2:	80 91 af 0b 	lds	r24, 0x0BAF
    4ca6:	82 30       	cpi	r24, 0x02	; 2
    4ca8:	19 f4       	brne	.+6      	; 0x4cb0 <_nrk_scheduler+0xc0>
    4caa:	8b 2d       	mov	r24, r11
    4cac:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <_nrk_stats_sleep>
        _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    4cb0:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4cb4:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4cb8:	60 91 50 09 	lds	r22, 0x0950
    4cbc:	80 85       	ldd	r24, Z+8	; 0x08
    4cbe:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_nrk_stats_task_preempted>
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    4cc2:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4cc6:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4cca:	60 e0       	ldi	r22, 0x00	; 0
    4ccc:	80 85       	ldd	r24, Z+8	; 0x08
    4cce:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <_nrk_stats_task_suspend>
    4cd2:	80 91 b6 0b 	lds	r24, 0x0BB6
    4cd6:	90 91 b7 0b 	lds	r25, 0x0BB7
    4cda:	a0 91 b8 0b 	lds	r26, 0x0BB8
    4cde:	b0 91 b9 0b 	lds	r27, 0x0BB9
    4ce2:	00 91 b2 0b 	lds	r16, 0x0BB2
    4ce6:	10 91 b3 0b 	lds	r17, 0x0BB3
    4cea:	20 91 b4 0b 	lds	r18, 0x0BB4
    4cee:	30 91 b5 0b 	lds	r19, 0x0BB5

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4cf2:	43 eb       	ldi	r20, 0xB3	; 179
    4cf4:	84 2e       	mov	r8, r20
    4cf6:	46 ee       	ldi	r20, 0xE6	; 230
    4cf8:	94 2e       	mov	r9, r20
    4cfa:	4e e0       	ldi	r20, 0x0E	; 14
    4cfc:	a4 2e       	mov	r10, r20
    4cfe:	b1 2c       	mov	r11, r1
    4d00:	07 c0       	rjmp	.+14     	; 0x4d10 <_nrk_scheduler+0x120>
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    }
    else
    {
        if(nrk_cur_task_TCB->suspend_flag==1)
    4d02:	95 81       	ldd	r25, Z+5	; 0x05
            _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    4d04:	6b 2d       	mov	r22, r11
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    }
    else
    {
        if(nrk_cur_task_TCB->suspend_flag==1)
    4d06:	91 11       	cpse	r25, r1
    4d08:	e2 cf       	rjmp	.-60     	; 0x4cce <_nrk_scheduler+0xde>
            _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    4d0a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_nrk_stats_task_preempted>
    4d0e:	e1 cf       	rjmp	.-62     	; 0x4cd2 <_nrk_scheduler+0xe2>
    4d10:	68 01       	movw	r12, r16
    4d12:	79 01       	movw	r14, r18
    4d14:	4f ef       	ldi	r20, 0xFF	; 255
    4d16:	c4 1a       	sub	r12, r20
    4d18:	d4 0a       	sbc	r13, r20
    4d1a:	e4 0a       	sbc	r14, r20
    4d1c:	f4 0a       	sbc	r15, r20
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4d1e:	81 15       	cp	r24, r1
    4d20:	5a ec       	ldi	r21, 0xCA	; 202
    4d22:	95 07       	cpc	r25, r21
    4d24:	5a e9       	ldi	r21, 0x9A	; 154
    4d26:	a5 07       	cpc	r26, r21
    4d28:	5b e3       	ldi	r21, 0x3B	; 59
    4d2a:	b5 07       	cpc	r27, r21
    4d2c:	c8 f0       	brcs	.+50     	; 0x4d60 <_nrk_scheduler+0x170>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4d2e:	2c 01       	movw	r4, r24
    4d30:	3d 01       	movw	r6, r26
    4d32:	2a ec       	ldi	r18, 0xCA	; 202
    4d34:	52 1a       	sub	r5, r18
    4d36:	2a e9       	ldi	r18, 0x9A	; 154
    4d38:	62 0a       	sbc	r6, r18
    4d3a:	2b e3       	ldi	r18, 0x3B	; 59
    4d3c:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4d3e:	c3 01       	movw	r24, r6
    4d40:	b2 01       	movw	r22, r4
    4d42:	a5 01       	movw	r20, r10
    4d44:	94 01       	movw	r18, r8
    4d46:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    4d4a:	a3 01       	movw	r20, r6
    4d4c:	92 01       	movw	r18, r4
    4d4e:	26 1b       	sub	r18, r22
    4d50:	37 0b       	sbc	r19, r23
    4d52:	48 0b       	sbc	r20, r24
    4d54:	59 0b       	sbc	r21, r25
    4d56:	da 01       	movw	r26, r20
    4d58:	c9 01       	movw	r24, r18
    4d5a:	97 01       	movw	r18, r14
    4d5c:	86 01       	movw	r16, r12
    4d5e:	d8 cf       	rjmp	.-80     	; 0x4d10 <_nrk_scheduler+0x120>
    4d60:	80 93 b6 0b 	sts	0x0BB6, r24
    4d64:	90 93 b7 0b 	sts	0x0BB7, r25
    4d68:	a0 93 b8 0b 	sts	0x0BB8, r26
    4d6c:	b0 93 b9 0b 	sts	0x0BB9, r27
    4d70:	00 93 b2 0b 	sts	0x0BB2, r16
    4d74:	10 93 b3 0b 	sts	0x0BB3, r17
    4d78:	20 93 b4 0b 	sts	0x0BB4, r18
    4d7c:	30 93 b5 0b 	sts	0x0BB5, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4d80:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4d84:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4d88:	85 81       	ldd	r24, Z+5	; 0x05
    4d8a:	88 23       	and	r24, r24
    4d8c:	39 f1       	breq	.+78     	; 0x4ddc <_nrk_scheduler+0x1ec>
    4d8e:	81 85       	ldd	r24, Z+9	; 0x09
    4d90:	84 30       	cpi	r24, 0x04	; 4
    4d92:	21 f1       	breq	.+72     	; 0x4ddc <_nrk_scheduler+0x1ec>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    4d94:	87 81       	ldd	r24, Z+7	; 0x07
    4d96:	82 30       	cpi	r24, 0x02	; 2
    4d98:	29 f0       	breq	.+10     	; 0x4da4 <_nrk_scheduler+0x1b4>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4d9a:	88 23       	and	r24, r24
    4d9c:	41 f0       	breq	.+16     	; 0x4dae <_nrk_scheduler+0x1be>
    4d9e:	86 81       	ldd	r24, Z+6	; 0x06
    4da0:	81 11       	cpse	r24, r1
    4da2:	02 c0       	rjmp	.+4      	; 0x4da8 <_nrk_scheduler+0x1b8>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4da4:	85 e0       	ldi	r24, 0x05	; 5
    4da6:	01 c0       	rjmp	.+2      	; 0x4daa <_nrk_scheduler+0x1ba>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4da8:	83 e0       	ldi	r24, 0x03	; 3
    4daa:	81 87       	std	Z+9, r24	; 0x09
    4dac:	14 c0       	rjmp	.+40     	; 0x4dd6 <_nrk_scheduler+0x1e6>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4dae:	83 e0       	ldi	r24, 0x03	; 3
    4db0:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    4db2:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    4db4:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    4db6:	85 89       	ldd	r24, Z+21	; 0x15
    4db8:	96 89       	ldd	r25, Z+22	; 0x16
    4dba:	a7 89       	ldd	r26, Z+23	; 0x17
    4dbc:	b0 8d       	ldd	r27, Z+24	; 0x18
    4dbe:	89 2b       	or	r24, r25
    4dc0:	8a 2b       	or	r24, r26
    4dc2:	8b 2b       	or	r24, r27
    4dc4:	41 f4       	brne	.+16     	; 0x4dd6 <_nrk_scheduler+0x1e6>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    4dc6:	81 8d       	ldd	r24, Z+25	; 0x19
    4dc8:	92 8d       	ldd	r25, Z+26	; 0x1a
    4dca:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4dcc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4dce:	85 8b       	std	Z+21, r24	; 0x15
    4dd0:	96 8b       	std	Z+22, r25	; 0x16
    4dd2:	a7 8b       	std	Z+23, r26	; 0x17
    4dd4:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    4dd6:	80 85       	ldd	r24, Z+8	; 0x08
    4dd8:	0e 94 b9 20 	call	0x4172	; 0x4172 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    4ddc:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4de0:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4de4:	85 a1       	ldd	r24, Z+37	; 0x25
    4de6:	96 a1       	ldd	r25, Z+38	; 0x26
    4de8:	a7 a1       	ldd	r26, Z+39	; 0x27
    4dea:	b0 a5       	ldd	r27, Z+40	; 0x28
    4dec:	89 2b       	or	r24, r25
    4dee:	8a 2b       	or	r24, r26
    4df0:	8b 2b       	or	r24, r27
    4df2:	09 f4       	brne	.+2      	; 0x4df6 <_nrk_scheduler+0x206>
    4df4:	4e c0       	rjmp	.+156    	; 0x4e92 <_nrk_scheduler+0x2a2>
    4df6:	80 85       	ldd	r24, Z+8	; 0x08
    4df8:	88 23       	and	r24, r24
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <_nrk_scheduler+0x20e>
    4dfc:	4a c0       	rjmp	.+148    	; 0x4e92 <_nrk_scheduler+0x2a2>
    4dfe:	91 85       	ldd	r25, Z+9	; 0x09
    4e00:	94 30       	cpi	r25, 0x04	; 4
    4e02:	09 f4       	brne	.+2      	; 0x4e06 <_nrk_scheduler+0x216>
    4e04:	46 c0       	rjmp	.+140    	; 0x4e92 <_nrk_scheduler+0x2a2>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    4e06:	45 8d       	ldd	r20, Z+29	; 0x1d
    4e08:	56 8d       	ldd	r21, Z+30	; 0x1e
    4e0a:	67 8d       	ldd	r22, Z+31	; 0x1f
    4e0c:	70 a1       	ldd	r23, Z+32	; 0x20
    4e0e:	00 91 50 09 	lds	r16, 0x0950
    4e12:	10 e0       	ldi	r17, 0x00	; 0
    4e14:	20 e0       	ldi	r18, 0x00	; 0
    4e16:	30 e0       	ldi	r19, 0x00	; 0
    4e18:	40 17       	cp	r20, r16
    4e1a:	51 07       	cpc	r21, r17
    4e1c:	62 07       	cpc	r22, r18
    4e1e:	73 07       	cpc	r23, r19
    4e20:	98 f4       	brcc	.+38     	; 0x4e48 <_nrk_scheduler+0x258>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
    4e22:	0e 94 02 17 	call	0x2e04	; 0x2e04 <_nrk_stats_add_violation>
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    4e26:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4e2a:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4e2e:	60 85       	ldd	r22, Z+8	; 0x08
    4e30:	82 e0       	ldi	r24, 0x02	; 2
    4e32:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    4e36:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4e3a:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4e3e:	15 8e       	std	Z+29, r1	; 0x1d
    4e40:	16 8e       	std	Z+30, r1	; 0x1e
    4e42:	17 8e       	std	Z+31, r1	; 0x1f
    4e44:	10 a2       	std	Z+32, r1	; 0x20
    4e46:	08 c0       	rjmp	.+16     	; 0x4e58 <_nrk_scheduler+0x268>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4e48:	40 1b       	sub	r20, r16
    4e4a:	51 0b       	sbc	r21, r17
    4e4c:	62 0b       	sbc	r22, r18
    4e4e:	73 0b       	sbc	r23, r19
    4e50:	45 8f       	std	Z+29, r20	; 0x1d
    4e52:	56 8f       	std	Z+30, r21	; 0x1e
    4e54:	67 8f       	std	Z+31, r22	; 0x1f
    4e56:	70 a3       	std	Z+32, r23	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    4e58:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4e5c:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4e60:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    4e62:	85 8d       	ldd	r24, Z+29	; 0x1d
    4e64:	96 8d       	ldd	r25, Z+30	; 0x1e
    4e66:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4e68:	b0 a1       	ldd	r27, Z+32	; 0x20
    4e6a:	89 2b       	or	r24, r25
    4e6c:	8a 2b       	or	r24, r26
    4e6e:	8b 2b       	or	r24, r27
    4e70:	81 f4       	brne	.+32     	; 0x4e92 <_nrk_scheduler+0x2a2>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
    4e72:	81 2f       	mov	r24, r17
    4e74:	0e 94 02 17 	call	0x2e04	; 0x2e04 <_nrk_stats_add_violation>
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    4e78:	61 2f       	mov	r22, r17
    4e7a:	83 e0       	ldi	r24, 0x03	; 3
    4e7c:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4e80:	e0 91 bb 0b 	lds	r30, 0x0BBB
    4e84:	f0 91 bc 0b 	lds	r31, 0x0BBC
    4e88:	83 e0       	ldi	r24, 0x03	; 3
    4e8a:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    4e8c:	81 2f       	mov	r24, r17
    4e8e:	0e 94 b9 20 	call	0x4172	; 0x4172 <nrk_rem_from_readyQ>
    4e92:	87 ed       	ldi	r24, 0xD7	; 215
    4e94:	9a e0       	ldi	r25, 0x0A	; 10
    4e96:	9b 83       	std	Y+3, r25	; 0x03
    4e98:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4e9a:	00 e6       	ldi	r16, 0x60	; 96
    4e9c:	1a ee       	ldi	r17, 0xEA	; 234
    4e9e:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4ea0:	2a ef       	ldi	r18, 0xFA	; 250
    4ea2:	c2 2e       	mov	r12, r18
    4ea4:	d1 2c       	mov	r13, r1
    4ea6:	e1 2c       	mov	r14, r1
    4ea8:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4eaa:	81 2c       	mov	r8, r1
    4eac:	91 2c       	mov	r9, r1
    4eae:	54 01       	movw	r10, r8
    4eb0:	83 94       	inc	r8
    4eb2:	ea 81       	ldd	r30, Y+2	; 0x02
    4eb4:	fb 81       	ldd	r31, Y+3	; 0x03
    4eb6:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    4eb8:	80 81       	ld	r24, Z
    4eba:	8f 3f       	cpi	r24, 0xFF	; 255
    4ebc:	09 f4       	brne	.+2      	; 0x4ec0 <_nrk_scheduler+0x2d0>
    4ebe:	04 c1       	rjmp	.+520    	; 0x50c8 <_nrk_scheduler+0x4d8>
    4ec0:	ea 81       	ldd	r30, Y+2	; 0x02
    4ec2:	fb 81       	ldd	r31, Y+3	; 0x03
    4ec4:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    4ec6:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    4ec8:	88 23       	and	r24, r24
    4eca:	09 f4       	brne	.+2      	; 0x4ece <_nrk_scheduler+0x2de>
    4ecc:	67 c0       	rjmp	.+206    	; 0x4f9c <_nrk_scheduler+0x3ac>
    4ece:	ea 81       	ldd	r30, Y+2	; 0x02
    4ed0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ed2:	80 81       	ld	r24, Z
    4ed4:	84 30       	cpi	r24, 0x04	; 4
    4ed6:	09 f4       	brne	.+2      	; 0x4eda <_nrk_scheduler+0x2ea>
    4ed8:	61 c0       	rjmp	.+194    	; 0x4f9c <_nrk_scheduler+0x3ac>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    4eda:	44 84       	ldd	r4, Z+12	; 0x0c
    4edc:	55 84       	ldd	r5, Z+13	; 0x0d
    4ede:	66 84       	ldd	r6, Z+14	; 0x0e
    4ee0:	77 84       	ldd	r7, Z+15	; 0x0f
    4ee2:	60 91 50 09 	lds	r22, 0x0950
    4ee6:	70 e0       	ldi	r23, 0x00	; 0
    4ee8:	80 e0       	ldi	r24, 0x00	; 0
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	46 16       	cp	r4, r22
    4eee:	57 06       	cpc	r5, r23
    4ef0:	68 06       	cpc	r6, r24
    4ef2:	79 06       	cpc	r7, r25
    4ef4:	48 f0       	brcs	.+18     	; 0x4f08 <_nrk_scheduler+0x318>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    4ef6:	46 1a       	sub	r4, r22
    4ef8:	57 0a       	sbc	r5, r23
    4efa:	68 0a       	sbc	r6, r24
    4efc:	79 0a       	sbc	r7, r25
    4efe:	44 86       	std	Z+12, r4	; 0x0c
    4f00:	55 86       	std	Z+13, r5	; 0x0d
    4f02:	66 86       	std	Z+14, r6	; 0x0e
    4f04:	77 86       	std	Z+15, r7	; 0x0f
    4f06:	06 c0       	rjmp	.+12     	; 0x4f14 <_nrk_scheduler+0x324>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    4f08:	ea 81       	ldd	r30, Y+2	; 0x02
    4f0a:	fb 81       	ldd	r31, Y+3	; 0x03
    4f0c:	14 86       	std	Z+12, r1	; 0x0c
    4f0e:	15 86       	std	Z+13, r1	; 0x0d
    4f10:	16 86       	std	Z+14, r1	; 0x0e
    4f12:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4f14:	ea 81       	ldd	r30, Y+2	; 0x02
    4f16:	fb 81       	ldd	r31, Y+3	; 0x03
    4f18:	40 88       	ldd	r4, Z+16	; 0x10
    4f1a:	51 88       	ldd	r5, Z+17	; 0x11
    4f1c:	62 88       	ldd	r6, Z+18	; 0x12
    4f1e:	73 88       	ldd	r7, Z+19	; 0x13
    4f20:	46 16       	cp	r4, r22
    4f22:	57 06       	cpc	r5, r23
    4f24:	68 06       	cpc	r6, r24
    4f26:	79 06       	cpc	r7, r25
    4f28:	48 f0       	brcs	.+18     	; 0x4f3c <_nrk_scheduler+0x34c>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    4f2a:	46 1a       	sub	r4, r22
    4f2c:	57 0a       	sbc	r5, r23
    4f2e:	68 0a       	sbc	r6, r24
    4f30:	79 0a       	sbc	r7, r25
    4f32:	40 8a       	std	Z+16, r4	; 0x10
    4f34:	51 8a       	std	Z+17, r5	; 0x11
    4f36:	62 8a       	std	Z+18, r6	; 0x12
    4f38:	73 8a       	std	Z+19, r7	; 0x13
    4f3a:	1e c0       	rjmp	.+60     	; 0x4f78 <_nrk_scheduler+0x388>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    4f3c:	ea 81       	ldd	r30, Y+2	; 0x02
    4f3e:	fb 81       	ldd	r31, Y+3	; 0x03
    4f40:	20 8d       	ldd	r18, Z+24	; 0x18
    4f42:	31 8d       	ldd	r19, Z+25	; 0x19
    4f44:	42 8d       	ldd	r20, Z+26	; 0x1a
    4f46:	53 8d       	ldd	r21, Z+27	; 0x1b
    4f48:	62 17       	cp	r22, r18
    4f4a:	73 07       	cpc	r23, r19
    4f4c:	84 07       	cpc	r24, r20
    4f4e:	95 07       	cpc	r25, r21
    4f50:	58 f4       	brcc	.+22     	; 0x4f68 <_nrk_scheduler+0x378>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4f52:	29 01       	movw	r4, r18
    4f54:	3a 01       	movw	r6, r20
    4f56:	46 1a       	sub	r4, r22
    4f58:	57 0a       	sbc	r5, r23
    4f5a:	68 0a       	sbc	r6, r24
    4f5c:	79 0a       	sbc	r7, r25
    4f5e:	40 8a       	std	Z+16, r4	; 0x10
    4f60:	51 8a       	std	Z+17, r5	; 0x11
    4f62:	62 8a       	std	Z+18, r6	; 0x12
    4f64:	73 8a       	std	Z+19, r7	; 0x13
    4f66:	08 c0       	rjmp	.+16     	; 0x4f78 <_nrk_scheduler+0x388>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4f68:	0e 94 91 30 	call	0x6122	; 0x6122 <__udivmodsi4>
    4f6c:	ea 81       	ldd	r30, Y+2	; 0x02
    4f6e:	fb 81       	ldd	r31, Y+3	; 0x03
    4f70:	60 8b       	std	Z+16, r22	; 0x10
    4f72:	71 8b       	std	Z+17, r23	; 0x11
    4f74:	82 8b       	std	Z+18, r24	; 0x12
    4f76:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4f78:	ea 81       	ldd	r30, Y+2	; 0x02
    4f7a:	fb 81       	ldd	r31, Y+3	; 0x03
    4f7c:	80 89       	ldd	r24, Z+16	; 0x10
    4f7e:	91 89       	ldd	r25, Z+17	; 0x11
    4f80:	a2 89       	ldd	r26, Z+18	; 0x12
    4f82:	b3 89       	ldd	r27, Z+19	; 0x13
    4f84:	89 2b       	or	r24, r25
    4f86:	8a 2b       	or	r24, r26
    4f88:	8b 2b       	or	r24, r27
    4f8a:	41 f4       	brne	.+16     	; 0x4f9c <_nrk_scheduler+0x3ac>
    4f8c:	80 8d       	ldd	r24, Z+24	; 0x18
    4f8e:	91 8d       	ldd	r25, Z+25	; 0x19
    4f90:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4f92:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4f94:	80 8b       	std	Z+16, r24	; 0x10
    4f96:	91 8b       	std	Z+17, r25	; 0x11
    4f98:	a2 8b       	std	Z+18, r26	; 0x12
    4f9a:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    4f9c:	ea 81       	ldd	r30, Y+2	; 0x02
    4f9e:	fb 81       	ldd	r31, Y+3	; 0x03
    4fa0:	80 81       	ld	r24, Z
    4fa2:	83 30       	cpi	r24, 0x03	; 3
    4fa4:	09 f0       	breq	.+2      	; 0x4fa8 <_nrk_scheduler+0x3b8>
    4fa6:	90 c0       	rjmp	.+288    	; 0x50c8 <_nrk_scheduler+0x4d8>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    4fa8:	84 85       	ldd	r24, Z+12	; 0x0c
    4faa:	95 85       	ldd	r25, Z+13	; 0x0d
    4fac:	a6 85       	ldd	r26, Z+14	; 0x0e
    4fae:	b7 85       	ldd	r27, Z+15	; 0x0f
    4fb0:	89 2b       	or	r24, r25
    4fb2:	8a 2b       	or	r24, r26
    4fb4:	8b 2b       	or	r24, r27
    4fb6:	09 f0       	breq	.+2      	; 0x4fba <_nrk_scheduler+0x3ca>
    4fb8:	74 c0       	rjmp	.+232    	; 0x50a2 <_nrk_scheduler+0x4b2>
    4fba:	df 01       	movw	r26, r30
    4fbc:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4fbe:	8c 91       	ld	r24, X
    4fc0:	9f 01       	movw	r18, r30
    4fc2:	23 50       	subi	r18, 0x03	; 3
    4fc4:	31 09       	sbc	r19, r1
    4fc6:	88 23       	and	r24, r24
    4fc8:	a9 f0       	breq	.+42     	; 0x4ff4 <_nrk_scheduler+0x404>
    4fca:	f9 01       	movw	r30, r18
    4fcc:	80 81       	ld	r24, Z
    4fce:	88 23       	and	r24, r24
    4fd0:	89 f0       	breq	.+34     	; 0x4ff4 <_nrk_scheduler+0x404>
    4fd2:	b5 01       	movw	r22, r10
    4fd4:	a4 01       	movw	r20, r8
    4fd6:	00 90 ab 0b 	lds	r0, 0x0BAB
    4fda:	04 c0       	rjmp	.+8      	; 0x4fe4 <_nrk_scheduler+0x3f4>
    4fdc:	44 0f       	add	r20, r20
    4fde:	55 1f       	adc	r21, r21
    4fe0:	66 1f       	adc	r22, r22
    4fe2:	77 1f       	adc	r23, r23
    4fe4:	0a 94       	dec	r0
    4fe6:	d2 f7       	brpl	.-12     	; 0x4fdc <_nrk_scheduler+0x3ec>
    4fe8:	ea 81       	ldd	r30, Y+2	; 0x02
    4fea:	fb 81       	ldd	r31, Y+3	; 0x03
    4fec:	40 87       	std	Z+8, r20	; 0x08
    4fee:	51 87       	std	Z+9, r21	; 0x09
    4ff0:	62 87       	std	Z+10, r22	; 0x0a
    4ff2:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    4ff4:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    4ff6:	f9 01       	movw	r30, r18
    4ff8:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    4ffa:	ea 81       	ldd	r30, Y+2	; 0x02
    4ffc:	fb 81       	ldd	r31, Y+3	; 0x03
    4ffe:	a0 a1       	ldd	r26, Z+32	; 0x20
    5000:	b1 a1       	ldd	r27, Z+33	; 0x21
    5002:	a1 30       	cpi	r26, 0x01	; 1
    5004:	b1 05       	cpc	r27, r1
    5006:	19 f5       	brne	.+70     	; 0x504e <_nrk_scheduler+0x45e>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    5008:	84 8d       	ldd	r24, Z+28	; 0x1c
    500a:	95 8d       	ldd	r25, Z+29	; 0x1d
    500c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    500e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    5010:	84 8b       	std	Z+20, r24	; 0x14
    5012:	95 8b       	std	Z+21, r25	; 0x15
    5014:	a6 8b       	std	Z+22, r26	; 0x16
    5016:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    5018:	92 e0       	ldi	r25, 0x02	; 2
    501a:	49 2e       	mov	r4, r25
    501c:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    501e:	80 89       	ldd	r24, Z+16	; 0x10
    5020:	91 89       	ldd	r25, Z+17	; 0x11
    5022:	a2 89       	ldd	r26, Z+18	; 0x12
    5024:	b3 89       	ldd	r27, Z+19	; 0x13
    5026:	84 87       	std	Z+12, r24	; 0x0c
    5028:	95 87       	std	Z+13, r25	; 0x0d
    502a:	a6 87       	std	Z+14, r26	; 0x0e
    502c:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    502e:	80 8d       	ldd	r24, Z+24	; 0x18
    5030:	91 8d       	ldd	r25, Z+25	; 0x19
    5032:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5034:	b3 8d       	ldd	r27, Z+27	; 0x1b
    5036:	89 2b       	or	r24, r25
    5038:	8a 2b       	or	r24, r26
    503a:	8b 2b       	or	r24, r27
    503c:	21 f4       	brne	.+8      	; 0x5046 <_nrk_scheduler+0x456>
    503e:	c4 86       	std	Z+12, r12	; 0x0c
    5040:	d5 86       	std	Z+13, r13	; 0x0d
    5042:	e6 86       	std	Z+14, r14	; 0x0e
    5044:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    5046:	89 81       	ldd	r24, Y+1	; 0x01
    5048:	0e 94 09 20 	call	0x4012	; 0x4012 <nrk_add_to_readyQ>
    504c:	2a c0       	rjmp	.+84     	; 0x50a2 <_nrk_scheduler+0x4b2>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    504e:	ea 81       	ldd	r30, Y+2	; 0x02
    5050:	fb 81       	ldd	r31, Y+3	; 0x03
    5052:	44 8d       	ldd	r20, Z+28	; 0x1c
    5054:	55 8d       	ldd	r21, Z+29	; 0x1d
    5056:	66 8d       	ldd	r22, Z+30	; 0x1e
    5058:	77 8d       	ldd	r23, Z+31	; 0x1f
    505a:	44 8b       	std	Z+20, r20	; 0x14
    505c:	55 8b       	std	Z+21, r21	; 0x15
    505e:	66 8b       	std	Z+22, r22	; 0x16
    5060:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    5062:	40 8c       	ldd	r4, Z+24	; 0x18
    5064:	51 8c       	ldd	r5, Z+25	; 0x19
    5066:	62 8c       	ldd	r6, Z+26	; 0x1a
    5068:	73 8c       	ldd	r7, Z+27	; 0x1b
    506a:	11 97       	sbiw	r26, 0x01	; 1
    506c:	a3 01       	movw	r20, r6
    506e:	92 01       	movw	r18, r4
    5070:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__muluhisi3>
    5074:	64 87       	std	Z+12, r22	; 0x0c
    5076:	75 87       	std	Z+13, r23	; 0x0d
    5078:	86 87       	std	Z+14, r24	; 0x0e
    507a:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    507c:	60 8b       	std	Z+16, r22	; 0x10
    507e:	71 8b       	std	Z+17, r23	; 0x11
    5080:	82 8b       	std	Z+18, r24	; 0x12
    5082:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5084:	45 28       	or	r4, r5
    5086:	46 28       	or	r4, r6
    5088:	47 28       	or	r4, r7
    508a:	21 f4       	brne	.+8      	; 0x5094 <_nrk_scheduler+0x4a4>
    508c:	c4 86       	std	Z+12, r12	; 0x0c
    508e:	d5 86       	std	Z+13, r13	; 0x0d
    5090:	e6 86       	std	Z+14, r14	; 0x0e
    5092:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    5094:	44 24       	eor	r4, r4
    5096:	43 94       	inc	r4
    5098:	51 2c       	mov	r5, r1
    509a:	ea 81       	ldd	r30, Y+2	; 0x02
    509c:	fb 81       	ldd	r31, Y+3	; 0x03
    509e:	51 a2       	std	Z+33, r5	; 0x21
    50a0:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    50a2:	ea 81       	ldd	r30, Y+2	; 0x02
    50a4:	fb 81       	ldd	r31, Y+3	; 0x03
    50a6:	84 85       	ldd	r24, Z+12	; 0x0c
    50a8:	95 85       	ldd	r25, Z+13	; 0x0d
    50aa:	a6 85       	ldd	r26, Z+14	; 0x0e
    50ac:	b7 85       	ldd	r27, Z+15	; 0x0f
    50ae:	00 97       	sbiw	r24, 0x00	; 0
    50b0:	a1 05       	cpc	r26, r1
    50b2:	b1 05       	cpc	r27, r1
    50b4:	49 f0       	breq	.+18     	; 0x50c8 <_nrk_scheduler+0x4d8>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    50b6:	a8 01       	movw	r20, r16
    50b8:	60 e0       	ldi	r22, 0x00	; 0
    50ba:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    50bc:	84 17       	cp	r24, r20
    50be:	95 07       	cpc	r25, r21
    50c0:	a6 07       	cpc	r26, r22
    50c2:	b7 07       	cpc	r27, r23
    50c4:	08 f4       	brcc	.+2      	; 0x50c8 <_nrk_scheduler+0x4d8>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    50c6:	8c 01       	movw	r16, r24
    50c8:	f9 81       	ldd	r31, Y+1	; 0x01
    50ca:	ff 5f       	subi	r31, 0xFF	; 255
    50cc:	f9 83       	std	Y+1, r31	; 0x01
    50ce:	2a 81       	ldd	r18, Y+2	; 0x02
    50d0:	3b 81       	ldd	r19, Y+3	; 0x03
    50d2:	25 5d       	subi	r18, 0xD5	; 213
    50d4:	3f 4f       	sbci	r19, 0xFF	; 255
    50d6:	3b 83       	std	Y+3, r19	; 0x03
    50d8:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    50da:	f5 30       	cpi	r31, 0x05	; 5
    50dc:	09 f0       	breq	.+2      	; 0x50e0 <_nrk_scheduler+0x4f0>
    50de:	e9 ce       	rjmp	.-558    	; 0x4eb2 <_nrk_scheduler+0x2c2>
        }
    }


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
    50e0:	e0 91 bb 0b 	lds	r30, 0x0BBB
    50e4:	f0 91 bc 0b 	lds	r31, 0x0BBC
    50e8:	80 85       	ldd	r24, Z+8	; 0x08
    50ea:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_nrk_stats_task_start>
#endif
    task_ID = nrk_get_high_ready_task_ID();
    50ee:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <nrk_get_high_ready_task_ID>
    50f2:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    50f4:	3b e2       	ldi	r19, 0x2B	; 43
    50f6:	83 02       	muls	r24, r19
    50f8:	f0 01       	movw	r30, r0
    50fa:	11 24       	eor	r1, r1
    50fc:	e2 53       	subi	r30, 0x32	; 50
    50fe:	f5 4f       	sbci	r31, 0xF5	; 245
    5100:	22 85       	ldd	r18, Z+10	; 0x0a
    5102:	20 93 bd 0b 	sts	0x0BBD, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    5106:	f0 93 ad 0b 	sts	0x0BAD, r31
    510a:	e0 93 ac 0b 	sts	0x0BAC, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    510e:	88 23       	and	r24, r24
    5110:	f9 f0       	breq	.+62     	; 0x5150 <_nrk_scheduler+0x560>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    5112:	85 a1       	ldd	r24, Z+37	; 0x25
    5114:	96 a1       	ldd	r25, Z+38	; 0x26
    5116:	a7 a1       	ldd	r26, Z+39	; 0x27
    5118:	b0 a5       	ldd	r27, Z+40	; 0x28
    511a:	89 2b       	or	r24, r25
    511c:	8a 2b       	or	r24, r26
    511e:	8b 2b       	or	r24, r27
    5120:	99 f0       	breq	.+38     	; 0x5148 <_nrk_scheduler+0x558>
    5122:	85 8d       	ldd	r24, Z+29	; 0x1d
    5124:	96 8d       	ldd	r25, Z+30	; 0x1e
    5126:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5128:	b0 a1       	ldd	r27, Z+32	; 0x20
    512a:	8a 3f       	cpi	r24, 0xFA	; 250
    512c:	91 05       	cpc	r25, r1
    512e:	a1 05       	cpc	r26, r1
    5130:	b1 05       	cpc	r27, r1
    5132:	50 f4       	brcc	.+20     	; 0x5148 <_nrk_scheduler+0x558>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    5134:	a8 01       	movw	r20, r16
    5136:	60 e0       	ldi	r22, 0x00	; 0
    5138:	70 e0       	ldi	r23, 0x00	; 0
    513a:	84 17       	cp	r24, r20
    513c:	95 07       	cpc	r25, r21
    513e:	a6 07       	cpc	r26, r22
    5140:	b7 07       	cpc	r27, r23
    5142:	e8 f4       	brcc	.+58     	; 0x517e <_nrk_scheduler+0x58e>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    5144:	8c 01       	movw	r16, r24
    5146:	1b c0       	rjmp	.+54     	; 0x517e <_nrk_scheduler+0x58e>
    5148:	0b 3f       	cpi	r16, 0xFB	; 251
    514a:	11 05       	cpc	r17, r1
    514c:	c0 f0       	brcs	.+48     	; 0x517e <_nrk_scheduler+0x58e>
    514e:	12 c0       	rjmp	.+36     	; 0x5174 <_nrk_scheduler+0x584>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    5150:	04 30       	cpi	r16, 0x04	; 4
    5152:	11 05       	cpc	r17, r1
    5154:	a0 f0       	brcs	.+40     	; 0x517e <_nrk_scheduler+0x58e>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    5156:	c8 01       	movw	r24, r16
    5158:	03 97       	sbiw	r24, 0x03	; 3
    515a:	8a 3f       	cpi	r24, 0xFA	; 250
    515c:	91 05       	cpc	r25, r1
    515e:	38 f4       	brcc	.+14     	; 0x516e <_nrk_scheduler+0x57e>
    5160:	8c 01       	movw	r16, r24
    5162:	82 30       	cpi	r24, 0x02	; 2
    5164:	91 05       	cpc	r25, r1
    5166:	58 f4       	brcc	.+22     	; 0x517e <_nrk_scheduler+0x58e>
    5168:	02 e0       	ldi	r16, 0x02	; 2
    516a:	10 e0       	ldi	r17, 0x00	; 0
    516c:	08 c0       	rjmp	.+16     	; 0x517e <_nrk_scheduler+0x58e>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    516e:	0d 3f       	cpi	r16, 0xFD	; 253
    5170:	11 05       	cpc	r17, r1
    5172:	19 f0       	breq	.+6      	; 0x517a <_nrk_scheduler+0x58a>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    5174:	0a ef       	ldi	r16, 0xFA	; 250
    5176:	10 e0       	ldi	r17, 0x00	; 0
    5178:	02 c0       	rjmp	.+4      	; 0x517e <_nrk_scheduler+0x58e>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    517a:	07 ef       	ldi	r16, 0xF7	; 247
    517c:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    517e:	20 93 ae 0b 	sts	0x0BAE, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    5182:	f0 93 bc 0b 	sts	0x0BBC, r31
    5186:	e0 93 bb 0b 	sts	0x0BBB, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    518a:	00 93 50 09 	sts	0x0950, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    518e:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_os_timer_get>
    5192:	28 2f       	mov	r18, r24
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	2f 5f       	subi	r18, 0xFF	; 255
    5198:	3f 4f       	sbci	r19, 0xFF	; 255
    519a:	20 17       	cp	r18, r16
    519c:	31 07       	cpc	r19, r17
    519e:	40 f0       	brcs	.+16     	; 0x51b0 <_nrk_scheduler+0x5c0>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    51a0:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_os_timer_get>
    51a4:	08 2f       	mov	r16, r24
    51a6:	10 e0       	ldi	r17, 0x00	; 0
    51a8:	0e 5f       	subi	r16, 0xFE	; 254
    51aa:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    51ac:	00 93 50 09 	sts	0x0950, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    51b0:	f1 10       	cpse	r15, r1
    51b2:	10 92 af 0b 	sts	0x0BAF, r1

    _nrk_set_next_wakeup(next_wake);
    51b6:	80 2f       	mov	r24, r16
    51b8:	0e 94 32 2b 	call	0x5664	; 0x5664 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    51bc:	6c ed       	ldi	r22, 0xDC	; 220
    51be:	75 e0       	ldi	r23, 0x05	; 5
    51c0:	c1 01       	movw	r24, r2
    51c2:	0e 94 9a 2a 	call	0x5534	; 0x5534 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    51c6:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    51ca:	0f 90       	pop	r0
    51cc:	0f 90       	pop	r0
    51ce:	0f 90       	pop	r0
    51d0:	df 91       	pop	r29
    51d2:	cf 91       	pop	r28
    51d4:	1f 91       	pop	r17
    51d6:	0f 91       	pop	r16
    51d8:	ff 90       	pop	r15
    51da:	ef 90       	pop	r14
    51dc:	df 90       	pop	r13
    51de:	cf 90       	pop	r12
    51e0:	bf 90       	pop	r11
    51e2:	af 90       	pop	r10
    51e4:	9f 90       	pop	r9
    51e6:	8f 90       	pop	r8
    51e8:	7f 90       	pop	r7
    51ea:	6f 90       	pop	r6
    51ec:	5f 90       	pop	r5
    51ee:	4f 90       	pop	r4
    51f0:	3f 90       	pop	r3
    51f2:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    51f4:	0c 94 c2 2e 	jmp	0x5d84	; 0x5d84 <nrk_start_high_ready_task>

000051f8 <_nrk_sw_wdt_check>:
    51f8:	3f 92       	push	r3
    51fa:	4f 92       	push	r4
    51fc:	5f 92       	push	r5
    51fe:	6f 92       	push	r6
    5200:	7f 92       	push	r7
    5202:	8f 92       	push	r8
    5204:	9f 92       	push	r9
    5206:	af 92       	push	r10
    5208:	bf 92       	push	r11
    520a:	cf 92       	push	r12
    520c:	df 92       	push	r13
    520e:	ef 92       	push	r14
    5210:	ff 92       	push	r15
    5212:	0f 93       	push	r16
    5214:	1f 93       	push	r17
    5216:	cf 93       	push	r28
    5218:	df 93       	push	r29
    521a:	cd b7       	in	r28, 0x3d	; 61
    521c:	de b7       	in	r29, 0x3e	; 62
    521e:	60 97       	sbiw	r28, 0x10	; 16
    5220:	0f b6       	in	r0, 0x3f	; 63
    5222:	f8 94       	cli
    5224:	de bf       	out	0x3e, r29	; 62
    5226:	0f be       	out	0x3f, r0	; 63
    5228:	cd bf       	out	0x3d, r28	; 61
    522a:	ce 01       	movw	r24, r28
    522c:	09 96       	adiw	r24, 0x09	; 9
    522e:	0e 94 4a 23 	call	0x4694	; 0x4694 <nrk_time_get>
    5232:	8e eb       	ldi	r24, 0xBE	; 190
    5234:	48 2e       	mov	r4, r24
    5236:	8b e0       	ldi	r24, 0x0B	; 11
    5238:	58 2e       	mov	r5, r24
    523a:	61 2c       	mov	r6, r1
    523c:	71 2c       	mov	r7, r1
    523e:	93 e1       	ldi	r25, 0x13	; 19
    5240:	39 2e       	mov	r3, r25
    5242:	d2 01       	movw	r26, r4
    5244:	12 96       	adiw	r26, 0x02	; 2
    5246:	8c 91       	ld	r24, X
    5248:	81 30       	cpi	r24, 0x01	; 1
    524a:	51 f5       	brne	.+84     	; 0x52a0 <_nrk_sw_wdt_check+0xa8>
    524c:	36 9c       	mul	r3, r6
    524e:	f0 01       	movw	r30, r0
    5250:	37 9c       	mul	r3, r7
    5252:	f0 0d       	add	r31, r0
    5254:	11 24       	eor	r1, r1
    5256:	e7 53       	subi	r30, 0x37	; 55
    5258:	f4 4f       	sbci	r31, 0xF4	; 244
    525a:	89 84       	ldd	r8, Y+9	; 0x09
    525c:	9a 84       	ldd	r9, Y+10	; 0x0a
    525e:	ab 84       	ldd	r10, Y+11	; 0x0b
    5260:	bc 84       	ldd	r11, Y+12	; 0x0c
    5262:	cd 84       	ldd	r12, Y+13	; 0x0d
    5264:	de 84       	ldd	r13, Y+14	; 0x0e
    5266:	ef 84       	ldd	r14, Y+15	; 0x0f
    5268:	f8 88       	ldd	r15, Y+16	; 0x10
    526a:	00 81       	ld	r16, Z
    526c:	11 81       	ldd	r17, Z+1	; 0x01
    526e:	22 81       	ldd	r18, Z+2	; 0x02
    5270:	33 81       	ldd	r19, Z+3	; 0x03
    5272:	44 81       	ldd	r20, Z+4	; 0x04
    5274:	55 81       	ldd	r21, Z+5	; 0x05
    5276:	66 81       	ldd	r22, Z+6	; 0x06
    5278:	77 81       	ldd	r23, Z+7	; 0x07
    527a:	ce 01       	movw	r24, r28
    527c:	01 96       	adiw	r24, 0x01	; 1
    527e:	0e 94 a7 23 	call	0x474e	; 0x474e <nrk_time_sub>
    5282:	8f 3f       	cpi	r24, 0xFF	; 255
    5284:	69 f4       	brne	.+26     	; 0x52a0 <_nrk_sw_wdt_check+0xa8>
    5286:	66 2d       	mov	r22, r6
    5288:	85 e1       	ldi	r24, 0x15	; 21
    528a:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
    528e:	d2 01       	movw	r26, r4
    5290:	ed 91       	ld	r30, X+
    5292:	fc 91       	ld	r31, X
    5294:	30 97       	sbiw	r30, 0x00	; 0
    5296:	19 f4       	brne	.+6      	; 0x529e <_nrk_sw_wdt_check+0xa6>
    5298:	0e 94 ed 14 	call	0x29da	; 0x29da <nrk_halt>
    529c:	01 c0       	rjmp	.+2      	; 0x52a0 <_nrk_sw_wdt_check+0xa8>
    529e:	09 95       	icall
    52a0:	bf ef       	ldi	r27, 0xFF	; 255
    52a2:	6b 1a       	sub	r6, r27
    52a4:	7b 0a       	sbc	r7, r27
    52a6:	e3 e1       	ldi	r30, 0x13	; 19
    52a8:	4e 0e       	add	r4, r30
    52aa:	51 1c       	adc	r5, r1
    52ac:	f3 e0       	ldi	r31, 0x03	; 3
    52ae:	6f 16       	cp	r6, r31
    52b0:	71 04       	cpc	r7, r1
    52b2:	39 f6       	brne	.-114    	; 0x5242 <_nrk_sw_wdt_check+0x4a>
    52b4:	60 96       	adiw	r28, 0x10	; 16
    52b6:	0f b6       	in	r0, 0x3f	; 63
    52b8:	f8 94       	cli
    52ba:	de bf       	out	0x3e, r29	; 62
    52bc:	0f be       	out	0x3f, r0	; 63
    52be:	cd bf       	out	0x3d, r28	; 61
    52c0:	df 91       	pop	r29
    52c2:	cf 91       	pop	r28
    52c4:	1f 91       	pop	r17
    52c6:	0f 91       	pop	r16
    52c8:	ff 90       	pop	r15
    52ca:	ef 90       	pop	r14
    52cc:	df 90       	pop	r13
    52ce:	cf 90       	pop	r12
    52d0:	bf 90       	pop	r11
    52d2:	af 90       	pop	r10
    52d4:	9f 90       	pop	r9
    52d6:	8f 90       	pop	r8
    52d8:	7f 90       	pop	r7
    52da:	6f 90       	pop	r6
    52dc:	5f 90       	pop	r5
    52de:	4f 90       	pop	r4
    52e0:	3f 90       	pop	r3
    52e2:	08 95       	ret

000052e4 <_nrk_sw_wdt_init>:

void _nrk_sw_wdt_init()
{
    uint8_t i;
    for(i=0; i<NRK_MAX_SW_WDT; i++ )
        sw_wdts[i].active=0;
    52e4:	ee eb       	ldi	r30, 0xBE	; 190
    52e6:	fb e0       	ldi	r31, 0x0B	; 11
    52e8:	12 82       	std	Z+2, r1	; 0x02
    52ea:	15 8a       	std	Z+21, r1	; 0x15
    52ec:	10 a6       	std	Z+40, r1	; 0x28
    52ee:	08 95       	ret

000052f0 <nrk_sw_wdt_init>:
}

int8_t nrk_sw_wdt_init(uint8_t id, nrk_time_t *period, void *func)
{
    52f0:	cf 93       	push	r28
    52f2:	df 93       	push	r29
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    52f4:	83 30       	cpi	r24, 0x03	; 3
    52f6:	e0 f4       	brcc	.+56     	; 0x5330 <nrk_sw_wdt_init+0x40>
    sw_wdts[id].error_func=func;
    52f8:	93 e1       	ldi	r25, 0x13	; 19
    52fa:	89 9f       	mul	r24, r25
    52fc:	f0 01       	movw	r30, r0
    52fe:	11 24       	eor	r1, r1
    5300:	e2 54       	subi	r30, 0x42	; 66
    5302:	f4 4f       	sbci	r31, 0xF4	; 244
    5304:	51 83       	std	Z+1, r21	; 0x01
    5306:	40 83       	st	Z, r20
    sw_wdts[id].period.secs=period->secs;
    5308:	eb 01       	movw	r28, r22
    530a:	88 81       	ld	r24, Y
    530c:	99 81       	ldd	r25, Y+1	; 0x01
    530e:	aa 81       	ldd	r26, Y+2	; 0x02
    5310:	bb 81       	ldd	r27, Y+3	; 0x03
    5312:	83 83       	std	Z+3, r24	; 0x03
    5314:	94 83       	std	Z+4, r25	; 0x04
    5316:	a5 83       	std	Z+5, r26	; 0x05
    5318:	b6 83       	std	Z+6, r27	; 0x06
    sw_wdts[id].period.nano_secs=period->nano_secs;
    531a:	8c 81       	ldd	r24, Y+4	; 0x04
    531c:	9d 81       	ldd	r25, Y+5	; 0x05
    531e:	ae 81       	ldd	r26, Y+6	; 0x06
    5320:	bf 81       	ldd	r27, Y+7	; 0x07
    5322:	87 83       	std	Z+7, r24	; 0x07
    5324:	90 87       	std	Z+8, r25	; 0x08
    5326:	a1 87       	std	Z+9, r26	; 0x09
    5328:	b2 87       	std	Z+10, r27	; 0x0a
    sw_wdts[id].active=0;
    532a:	12 82       	std	Z+2, r1	; 0x02
    return NRK_OK;
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	01 c0       	rjmp	.+2      	; 0x5332 <nrk_sw_wdt_init+0x42>
        sw_wdts[i].active=0;
}

int8_t nrk_sw_wdt_init(uint8_t id, nrk_time_t *period, void *func)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    5330:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].error_func=func;
    sw_wdts[id].period.secs=period->secs;
    sw_wdts[id].period.nano_secs=period->nano_secs;
    sw_wdts[id].active=0;
    return NRK_OK;
}
    5332:	df 91       	pop	r29
    5334:	cf 91       	pop	r28
    5336:	08 95       	ret

00005338 <nrk_sw_wdt_update>:

int8_t nrk_sw_wdt_update(uint8_t id)
{
    5338:	cf 92       	push	r12
    533a:	df 92       	push	r13
    533c:	ef 92       	push	r14
    533e:	ff 92       	push	r15
    5340:	0f 93       	push	r16
    5342:	1f 93       	push	r17
    5344:	cf 93       	push	r28
    5346:	df 93       	push	r29
    5348:	cd b7       	in	r28, 0x3d	; 61
    534a:	de b7       	in	r29, 0x3e	; 62
    534c:	28 97       	sbiw	r28, 0x08	; 8
    534e:	0f b6       	in	r0, 0x3f	; 63
    5350:	f8 94       	cli
    5352:	de bf       	out	0x3e, r29	; 62
    5354:	0f be       	out	0x3f, r0	; 63
    5356:	cd bf       	out	0x3d, r28	; 61
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    5358:	83 30       	cpi	r24, 0x03	; 3
    535a:	a8 f5       	brcc	.+106    	; 0x53c6 <nrk_sw_wdt_update+0x8e>
    535c:	18 2f       	mov	r17, r24
    nrk_time_get(&now);
    535e:	ce 01       	movw	r24, r28
    5360:	01 96       	adiw	r24, 0x01	; 1
    5362:	0e 94 4a 23 	call	0x4694	; 0x4694 <nrk_time_get>
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    5366:	23 e1       	ldi	r18, 0x13	; 19
    5368:	12 9f       	mul	r17, r18
    536a:	c0 01       	movw	r24, r0
    536c:	11 24       	eor	r1, r1
    536e:	8c 01       	movw	r16, r24
    5370:	02 54       	subi	r16, 0x42	; 66
    5372:	14 4f       	sbci	r17, 0xF4	; 244
    5374:	f8 01       	movw	r30, r16
    5376:	c3 80       	ldd	r12, Z+3	; 0x03
    5378:	d4 80       	ldd	r13, Z+4	; 0x04
    537a:	e5 80       	ldd	r14, Z+5	; 0x05
    537c:	f6 80       	ldd	r15, Z+6	; 0x06
    537e:	49 81       	ldd	r20, Y+1	; 0x01
    5380:	5a 81       	ldd	r21, Y+2	; 0x02
    5382:	6b 81       	ldd	r22, Y+3	; 0x03
    5384:	7c 81       	ldd	r23, Y+4	; 0x04
    5386:	4c 0d       	add	r20, r12
    5388:	5d 1d       	adc	r21, r13
    538a:	6e 1d       	adc	r22, r14
    538c:	7f 1d       	adc	r23, r15
    538e:	43 87       	std	Z+11, r20	; 0x0b
    5390:	54 87       	std	Z+12, r21	; 0x0c
    5392:	65 87       	std	Z+13, r22	; 0x0d
    5394:	76 87       	std	Z+14, r23	; 0x0e
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    5396:	c7 80       	ldd	r12, Z+7	; 0x07
    5398:	d0 84       	ldd	r13, Z+8	; 0x08
    539a:	e1 84       	ldd	r14, Z+9	; 0x09
    539c:	f2 84       	ldd	r15, Z+10	; 0x0a
    539e:	4d 81       	ldd	r20, Y+5	; 0x05
    53a0:	5e 81       	ldd	r21, Y+6	; 0x06
    53a2:	6f 81       	ldd	r22, Y+7	; 0x07
    53a4:	78 85       	ldd	r23, Y+8	; 0x08
    53a6:	4c 0d       	add	r20, r12
    53a8:	5d 1d       	adc	r21, r13
    53aa:	6e 1d       	adc	r22, r14
    53ac:	7f 1d       	adc	r23, r15
    53ae:	47 87       	std	Z+15, r20	; 0x0f
    53b0:	50 8b       	std	Z+16, r21	; 0x10
    53b2:	61 8b       	std	Z+17, r22	; 0x11
    53b4:	72 8b       	std	Z+18, r23	; 0x12
    nrk_time_compact_nanos(&(sw_wdts[id].next_period));
    53b6:	87 53       	subi	r24, 0x37	; 55
    53b8:	94 4f       	sbci	r25, 0xF4	; 244
    53ba:	0e 94 33 24 	call	0x4866	; 0x4866 <nrk_time_compact_nanos>
    sw_wdts[id].active=1;
    53be:	81 e0       	ldi	r24, 0x01	; 1
    53c0:	f8 01       	movw	r30, r16
    53c2:	82 83       	std	Z+2, r24	; 0x02
    return NRK_OK;
    53c4:	01 c0       	rjmp	.+2      	; 0x53c8 <nrk_sw_wdt_update+0x90>
}

int8_t nrk_sw_wdt_update(uint8_t id)
{
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    53c6:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    nrk_time_compact_nanos(&(sw_wdts[id].next_period));
    sw_wdts[id].active=1;
    return NRK_OK;
}
    53c8:	28 96       	adiw	r28, 0x08	; 8
    53ca:	0f b6       	in	r0, 0x3f	; 63
    53cc:	f8 94       	cli
    53ce:	de bf       	out	0x3e, r29	; 62
    53d0:	0f be       	out	0x3f, r0	; 63
    53d2:	cd bf       	out	0x3d, r28	; 61
    53d4:	df 91       	pop	r29
    53d6:	cf 91       	pop	r28
    53d8:	1f 91       	pop	r17
    53da:	0f 91       	pop	r16
    53dc:	ff 90       	pop	r15
    53de:	ef 90       	pop	r14
    53e0:	df 90       	pop	r13
    53e2:	cf 90       	pop	r12
    53e4:	08 95       	ret

000053e6 <nrk_sw_wdt_start>:

int8_t nrk_sw_wdt_start(uint8_t id)
{
    53e6:	1f 93       	push	r17
    53e8:	cf 93       	push	r28
    53ea:	df 93       	push	r29
    53ec:	cd b7       	in	r28, 0x3d	; 61
    53ee:	de b7       	in	r29, 0x3e	; 62
    53f0:	28 97       	sbiw	r28, 0x08	; 8
    53f2:	0f b6       	in	r0, 0x3f	; 63
    53f4:	f8 94       	cli
    53f6:	de bf       	out	0x3e, r29	; 62
    53f8:	0f be       	out	0x3f, r0	; 63
    53fa:	cd bf       	out	0x3d, r28	; 61
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    53fc:	83 30       	cpi	r24, 0x03	; 3
    53fe:	70 f5       	brcc	.+92     	; 0x545c <nrk_sw_wdt_start+0x76>
    5400:	18 2f       	mov	r17, r24
    nrk_time_get(&now);
    5402:	ce 01       	movw	r24, r28
    5404:	01 96       	adiw	r24, 0x01	; 1
    5406:	0e 94 4a 23 	call	0x4694	; 0x4694 <nrk_time_get>
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    540a:	83 e1       	ldi	r24, 0x13	; 19
    540c:	18 9f       	mul	r17, r24
    540e:	f0 01       	movw	r30, r0
    5410:	11 24       	eor	r1, r1
    5412:	e2 54       	subi	r30, 0x42	; 66
    5414:	f4 4f       	sbci	r31, 0xF4	; 244
    5416:	43 81       	ldd	r20, Z+3	; 0x03
    5418:	54 81       	ldd	r21, Z+4	; 0x04
    541a:	65 81       	ldd	r22, Z+5	; 0x05
    541c:	76 81       	ldd	r23, Z+6	; 0x06
    541e:	89 81       	ldd	r24, Y+1	; 0x01
    5420:	9a 81       	ldd	r25, Y+2	; 0x02
    5422:	ab 81       	ldd	r26, Y+3	; 0x03
    5424:	bc 81       	ldd	r27, Y+4	; 0x04
    5426:	84 0f       	add	r24, r20
    5428:	95 1f       	adc	r25, r21
    542a:	a6 1f       	adc	r26, r22
    542c:	b7 1f       	adc	r27, r23
    542e:	83 87       	std	Z+11, r24	; 0x0b
    5430:	94 87       	std	Z+12, r25	; 0x0c
    5432:	a5 87       	std	Z+13, r26	; 0x0d
    5434:	b6 87       	std	Z+14, r27	; 0x0e
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    5436:	47 81       	ldd	r20, Z+7	; 0x07
    5438:	50 85       	ldd	r21, Z+8	; 0x08
    543a:	61 85       	ldd	r22, Z+9	; 0x09
    543c:	72 85       	ldd	r23, Z+10	; 0x0a
    543e:	8d 81       	ldd	r24, Y+5	; 0x05
    5440:	9e 81       	ldd	r25, Y+6	; 0x06
    5442:	af 81       	ldd	r26, Y+7	; 0x07
    5444:	b8 85       	ldd	r27, Y+8	; 0x08
    5446:	84 0f       	add	r24, r20
    5448:	95 1f       	adc	r25, r21
    544a:	a6 1f       	adc	r26, r22
    544c:	b7 1f       	adc	r27, r23
    544e:	87 87       	std	Z+15, r24	; 0x0f
    5450:	90 8b       	std	Z+16, r25	; 0x10
    5452:	a1 8b       	std	Z+17, r26	; 0x11
    5454:	b2 8b       	std	Z+18, r27	; 0x12
    sw_wdts[id].active=1;
    5456:	81 e0       	ldi	r24, 0x01	; 1
    5458:	82 83       	std	Z+2, r24	; 0x02

    return NRK_OK;
    545a:	01 c0       	rjmp	.+2      	; 0x545e <nrk_sw_wdt_start+0x78>
}

int8_t nrk_sw_wdt_start(uint8_t id)
{
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    545c:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    sw_wdts[id].active=1;

    return NRK_OK;
}
    545e:	28 96       	adiw	r28, 0x08	; 8
    5460:	0f b6       	in	r0, 0x3f	; 63
    5462:	f8 94       	cli
    5464:	de bf       	out	0x3e, r29	; 62
    5466:	0f be       	out	0x3f, r0	; 63
    5468:	cd bf       	out	0x3d, r28	; 61
    546a:	df 91       	pop	r29
    546c:	cf 91       	pop	r28
    546e:	1f 91       	pop	r17
    5470:	08 95       	ret

00005472 <nrk_sw_wdt_stop>:

int8_t nrk_sw_wdt_stop(uint8_t id)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    5472:	83 30       	cpi	r24, 0x03	; 3
    5474:	48 f4       	brcc	.+18     	; 0x5488 <nrk_sw_wdt_stop+0x16>
    sw_wdts[id].active=0;
    5476:	93 e1       	ldi	r25, 0x13	; 19
    5478:	89 9f       	mul	r24, r25
    547a:	f0 01       	movw	r30, r0
    547c:	11 24       	eor	r1, r1
    547e:	e2 54       	subi	r30, 0x42	; 66
    5480:	f4 4f       	sbci	r31, 0xF4	; 244
    5482:	12 82       	std	Z+2, r1	; 0x02
    return NRK_OK;
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	08 95       	ret
    return NRK_OK;
}

int8_t nrk_sw_wdt_stop(uint8_t id)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    5488:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].active=0;
    return NRK_OK;
}
    548a:	08 95       	ret

0000548c <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    54a4:	01 97       	sbiw	r24, 0x01	; 1
    54a6:	91 f7       	brne	.-28     	; 0x548c <nrk_spin_wait_us>

}
    54a8:	08 95       	ret

000054aa <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    54aa:	10 92 21 01 	sts	0x0121, r1
    54ae:	08 95       	ret

000054b0 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    54b0:	89 e0       	ldi	r24, 0x09	; 9
    54b2:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    54b6:	8d e8       	ldi	r24, 0x8D	; 141
    54b8:	9c e3       	ldi	r25, 0x3C	; 60
    54ba:	90 93 29 01 	sts	0x0129, r25
    54be:	80 93 28 01 	sts	0x0128, r24
    54c2:	08 95       	ret

000054c4 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    54c4:	10 92 25 01 	sts	0x0125, r1
    54c8:	10 92 24 01 	sts	0x0124, r1
    54cc:	08 95       	ret

000054ce <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    54ce:	cf 93       	push	r28
    54d0:	df 93       	push	r29
    54d2:	00 d0       	rcall	.+0      	; 0x54d4 <_nrk_precision_os_timer_get+0x6>
    54d4:	cd b7       	in	r28, 0x3d	; 61
    54d6:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    54d8:	80 91 24 01 	lds	r24, 0x0124
    54dc:	90 91 25 01 	lds	r25, 0x0125
    54e0:	9a 83       	std	Y+2, r25	; 0x02
    54e2:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    54e4:	89 81       	ldd	r24, Y+1	; 0x01
    54e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    54e8:	0f 90       	pop	r0
    54ea:	0f 90       	pop	r0
    54ec:	df 91       	pop	r29
    54ee:	cf 91       	pop	r28
    54f0:	08 95       	ret

000054f2 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    54f2:	10 92 81 00 	sts	0x0081, r1
    54f6:	08 95       	ret

000054f8 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    54f8:	81 e0       	ldi	r24, 0x01	; 1
    54fa:	80 93 81 00 	sts	0x0081, r24
    54fe:	08 95       	ret

00005500 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5500:	83 b5       	in	r24, 0x23	; 35
    5502:	81 60       	ori	r24, 0x01	; 1
    5504:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    5506:	10 92 85 00 	sts	0x0085, r1
    550a:	10 92 84 00 	sts	0x0084, r1
    550e:	08 95       	ret

00005510 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    5510:	cf 93       	push	r28
    5512:	df 93       	push	r29
    5514:	00 d0       	rcall	.+0      	; 0x5516 <_nrk_high_speed_timer_get+0x6>
    5516:	cd b7       	in	r28, 0x3d	; 61
    5518:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    551a:	80 91 84 00 	lds	r24, 0x0084
    551e:	90 91 85 00 	lds	r25, 0x0085
    5522:	9a 83       	std	Y+2, r25	; 0x02
    5524:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    5526:	89 81       	ldd	r24, Y+1	; 0x01
    5528:	9a 81       	ldd	r25, Y+2	; 0x02
}
    552a:	0f 90       	pop	r0
    552c:	0f 90       	pop	r0
    552e:	df 91       	pop	r29
    5530:	cf 91       	pop	r28
    5532:	08 95       	ret

00005534 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    5534:	cf 92       	push	r12
    5536:	df 92       	push	r13
    5538:	ef 92       	push	r14
    553a:	ff 92       	push	r15
    553c:	cf 93       	push	r28
    553e:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    5540:	ec 01       	movw	r28, r24
    5542:	cc 0f       	add	r28, r28
    5544:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    5546:	c9 37       	cpi	r28, 0x79	; 121
    5548:	8f ef       	ldi	r24, 0xFF	; 255
    554a:	d8 07       	cpc	r29, r24
    554c:	10 f0       	brcs	.+4      	; 0x5552 <nrk_high_speed_timer_wait+0x1e>
    554e:	c0 e0       	ldi	r28, 0x00	; 0
    5550:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    5552:	6b 01       	movw	r12, r22
    5554:	e1 2c       	mov	r14, r1
    5556:	f1 2c       	mov	r15, r1
    5558:	cc 0e       	add	r12, r28
    555a:	dd 1e       	adc	r13, r29
    555c:	e1 1c       	adc	r14, r1
    555e:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	c8 16       	cp	r12, r24
    5564:	d1 04       	cpc	r13, r1
    5566:	e8 06       	cpc	r14, r24
    5568:	f1 04       	cpc	r15, r1
    556a:	40 f0       	brcs	.+16     	; 0x557c <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    556c:	81 e0       	ldi	r24, 0x01	; 1
    556e:	e8 1a       	sub	r14, r24
    5570:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    5572:	0e 94 88 2a 	call	0x5510	; 0x5510 <_nrk_high_speed_timer_get>
    5576:	c8 17       	cp	r28, r24
    5578:	d9 07       	cpc	r29, r25
    557a:	d8 f3       	brcs	.-10     	; 0x5572 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    557c:	0e 94 88 2a 	call	0x5510	; 0x5510 <_nrk_high_speed_timer_get>
    5580:	8c 15       	cp	r24, r12
    5582:	9d 05       	cpc	r25, r13
    5584:	d8 f3       	brcs	.-10     	; 0x557c <nrk_high_speed_timer_wait+0x48>
}
    5586:	df 91       	pop	r29
    5588:	cf 91       	pop	r28
    558a:	ff 90       	pop	r15
    558c:	ef 90       	pop	r14
    558e:	df 90       	pop	r13
    5590:	cf 90       	pop	r12
    5592:	08 95       	ret

00005594 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    5594:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    5598:	e0 e7       	ldi	r30, 0x70	; 112
    559a:	f0 e0       	ldi	r31, 0x00	; 0
    559c:	80 81       	ld	r24, Z
    559e:	8d 7f       	andi	r24, 0xFD	; 253
    55a0:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    55a2:	80 81       	ld	r24, Z
    55a4:	8e 7f       	andi	r24, 0xFE	; 254
    55a6:	80 83       	st	Z, r24
    55a8:	08 95       	ret

000055aa <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    55aa:	80 93 b2 00 	sts	0x00B2, r24
    55ae:	08 95       	ret

000055b0 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    55b0:	e0 e7       	ldi	r30, 0x70	; 112
    55b2:	f0 e0       	ldi	r31, 0x00	; 0
    55b4:	80 81       	ld	r24, Z
    55b6:	83 60       	ori	r24, 0x03	; 3
    55b8:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    55ba:	83 e0       	ldi	r24, 0x03	; 3
    55bc:	80 93 b1 00 	sts	0x00B1, r24
    55c0:	08 95       	ret

000055c2 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    55c2:	83 b5       	in	r24, 0x23	; 35
    55c4:	82 60       	ori	r24, 0x02	; 2
    55c6:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    55c8:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    55cc:	10 92 ff 06 	sts	0x06FF, r1
    _nrk_prev_timer_val=0;
    55d0:	10 92 50 09 	sts	0x0950, r1
    55d4:	08 95       	ret

000055d6 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    55d6:	cf 93       	push	r28
    55d8:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    55da:	8e ef       	ldi	r24, 0xFE	; 254
    55dc:	80 93 50 09 	sts	0x0950, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    55e0:	80 e2       	ldi	r24, 0x20	; 32
    55e2:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    55e6:	80 91 50 09 	lds	r24, 0x0950
    55ea:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    55ee:	83 e0       	ldi	r24, 0x03	; 3
    55f0:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    55f2:	92 e0       	ldi	r25, 0x02	; 2
    55f4:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    55f8:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    55fc:	93 b5       	in	r25, 0x23	; 35
    55fe:	92 60       	ori	r25, 0x02	; 2
    5600:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    5602:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    5604:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    5606:	83 b5       	in	r24, 0x23	; 35
    5608:	82 60       	ori	r24, 0x02	; 2
    560a:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    560c:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    5610:	81 e0       	ldi	r24, 0x01	; 1
    5612:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    5616:	10 92 85 00 	sts	0x0085, r1
    561a:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    561e:	83 b5       	in	r24, 0x23	; 35
    5620:	82 60       	ori	r24, 0x02	; 2
    5622:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5624:	83 b5       	in	r24, 0x23	; 35
    5626:	81 60       	ori	r24, 0x01	; 1
    5628:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    562a:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    562e:	c4 e2       	ldi	r28, 0x24	; 36
    5630:	d1 e0       	ldi	r29, 0x01	; 1
    5632:	19 82       	std	Y+1, r1	; 0x01
    5634:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5636:	83 b5       	in	r24, 0x23	; 35
    5638:	82 60       	ori	r24, 0x02	; 2
    563a:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    563c:	83 b5       	in	r24, 0x23	; 35
    563e:	81 60       	ori	r24, 0x01	; 1
    5640:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    5642:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    5646:	19 82       	std	Y+1, r1	; 0x01
    5648:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    564a:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    564e:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    5652:	10 92 ff 06 	sts	0x06FF, r1
}
    5656:	df 91       	pop	r29
    5658:	cf 91       	pop	r28
    565a:	08 95       	ret

0000565c <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    565c:	80 91 b3 00 	lds	r24, 0x00B3
}
    5660:	8f 5f       	subi	r24, 0xFF	; 255
    5662:	08 95       	ret

00005664 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    5664:	81 50       	subi	r24, 0x01	; 1
    5666:	80 93 b3 00 	sts	0x00B3, r24
    566a:	08 95       	ret

0000566c <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    566c:	81 11       	cpse	r24, r1
    566e:	02 c0       	rjmp	.+4      	; 0x5674 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    5670:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    5674:	8f ef       	ldi	r24, 0xFF	; 255
    5676:	08 95       	ret

00005678 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5678:	81 11       	cpse	r24, r1
    567a:	06 c0       	rjmp	.+12     	; 0x5688 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    567c:	10 92 95 00 	sts	0x0095, r1
    5680:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	08 95       	ret
	}
return NRK_ERROR;
    5688:	8f ef       	ldi	r24, 0xFF	; 255
}
    568a:	08 95       	ret

0000568c <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    568c:	81 11       	cpse	r24, r1
    568e:	05 c0       	rjmp	.+10     	; 0x569a <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    5690:	80 91 94 00 	lds	r24, 0x0094
    5694:	90 91 95 00 	lds	r25, 0x0095
    5698:	08 95       	ret
	}
return 0;
    569a:	80 e0       	ldi	r24, 0x00	; 0
    569c:	90 e0       	ldi	r25, 0x00	; 0

}
    569e:	08 95       	ret

000056a0 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    56a0:	81 11       	cpse	r24, r1
    56a2:	05 c0       	rjmp	.+10     	; 0x56ae <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    56a4:	82 e0       	ldi	r24, 0x02	; 2
    56a6:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    56aa:	81 e0       	ldi	r24, 0x01	; 1
    56ac:	08 95       	ret
	}
return NRK_ERROR;
    56ae:	8f ef       	ldi	r24, 0xFF	; 255
}
    56b0:	08 95       	ret

000056b2 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    56b2:	81 11       	cpse	r24, r1
    56b4:	35 c0       	rjmp	.+106    	; 0x5720 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    56b6:	cb 01       	movw	r24, r22
    56b8:	01 97       	sbiw	r24, 0x01	; 1
    56ba:	05 97       	sbiw	r24, 0x05	; 5
    56bc:	10 f4       	brcc	.+4      	; 0x56c2 <nrk_timer_int_configure+0x10>
    56be:	60 93 4d 09 	sts	0x094D, r22
	TCCR3A = 0;  
    56c2:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    56c6:	88 e0       	ldi	r24, 0x08	; 8
    56c8:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    56cc:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    56d0:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    56d4:	30 93 f1 05 	sts	0x05F1, r19
    56d8:	20 93 f0 05 	sts	0x05F0, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    56dc:	80 91 4d 09 	lds	r24, 0x094D
    56e0:	81 30       	cpi	r24, 0x01	; 1
    56e2:	21 f4       	brne	.+8      	; 0x56ec <nrk_timer_int_configure+0x3a>
    56e4:	80 91 91 00 	lds	r24, 0x0091
    56e8:	81 60       	ori	r24, 0x01	; 1
    56ea:	11 c0       	rjmp	.+34     	; 0x570e <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    56ec:	82 30       	cpi	r24, 0x02	; 2
    56ee:	21 f4       	brne	.+8      	; 0x56f8 <nrk_timer_int_configure+0x46>
    56f0:	80 91 91 00 	lds	r24, 0x0091
    56f4:	82 60       	ori	r24, 0x02	; 2
    56f6:	0b c0       	rjmp	.+22     	; 0x570e <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    56f8:	83 30       	cpi	r24, 0x03	; 3
    56fa:	21 f4       	brne	.+8      	; 0x5704 <nrk_timer_int_configure+0x52>
    56fc:	80 91 91 00 	lds	r24, 0x0091
    5700:	83 60       	ori	r24, 0x03	; 3
    5702:	05 c0       	rjmp	.+10     	; 0x570e <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    5704:	84 30       	cpi	r24, 0x04	; 4
    5706:	31 f4       	brne	.+12     	; 0x5714 <nrk_timer_int_configure+0x62>
    5708:	80 91 91 00 	lds	r24, 0x0091
    570c:	84 60       	ori	r24, 0x04	; 4
    570e:	80 93 91 00 	sts	0x0091, r24
    5712:	08 c0       	rjmp	.+16     	; 0x5724 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    5714:	85 30       	cpi	r24, 0x05	; 5
    5716:	31 f4       	brne	.+12     	; 0x5724 <nrk_timer_int_configure+0x72>
    5718:	80 91 91 00 	lds	r24, 0x0091
    571c:	85 60       	ori	r24, 0x05	; 5
    571e:	f7 cf       	rjmp	.-18     	; 0x570e <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    5720:	8f ef       	ldi	r24, 0xFF	; 255
    5722:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    5724:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    5726:	08 95       	ret

00005728 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    5728:	80 91 b2 00 	lds	r24, 0x00B2
}
    572c:	08 95       	ret

0000572e <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    572e:	1f 92       	push	r1
    5730:	0f 92       	push	r0
    5732:	0f b6       	in	r0, 0x3f	; 63
    5734:	0f 92       	push	r0
    5736:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5738:	60 e0       	ldi	r22, 0x00	; 0
    573a:	8a e0       	ldi	r24, 0x0A	; 10
    573c:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
	while(1);
    5740:	ff cf       	rjmp	.-2      	; 0x5740 <__vector_default+0x12>

00005742 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    5742:	0f 92       	push	r0
    5744:	0f b6       	in	r0, 0x3f	; 63
    5746:	0f 92       	push	r0
    5748:	1f 92       	push	r1
    574a:	2f 92       	push	r2
    574c:	3f 92       	push	r3
    574e:	4f 92       	push	r4
    5750:	5f 92       	push	r5
    5752:	6f 92       	push	r6
    5754:	7f 92       	push	r7
    5756:	8f 92       	push	r8
    5758:	9f 92       	push	r9
    575a:	af 92       	push	r10
    575c:	bf 92       	push	r11
    575e:	cf 92       	push	r12
    5760:	df 92       	push	r13
    5762:	ef 92       	push	r14
    5764:	ff 92       	push	r15
    5766:	0f 93       	push	r16
    5768:	1f 93       	push	r17
    576a:	2f 93       	push	r18
    576c:	3f 93       	push	r19
    576e:	4f 93       	push	r20
    5770:	5f 93       	push	r21
    5772:	6f 93       	push	r22
    5774:	7f 93       	push	r23
    5776:	8f 93       	push	r24
    5778:	9f 93       	push	r25
    577a:	af 93       	push	r26
    577c:	bf 93       	push	r27
    577e:	cf 93       	push	r28
    5780:	df 93       	push	r29
    5782:	ef 93       	push	r30
    5784:	ff 93       	push	r31
    5786:	a0 91 bb 0b 	lds	r26, 0x0BBB
    578a:	b0 91 bc 0b 	lds	r27, 0x0BBC
    578e:	0d b6       	in	r0, 0x3d	; 61
    5790:	0d 92       	st	X+, r0
    5792:	0e b6       	in	r0, 0x3e	; 62
    5794:	0d 92       	st	X+, r0
    5796:	1f 92       	push	r1
    5798:	a0 91 b8 08 	lds	r26, 0x08B8
    579c:	b0 91 b9 08 	lds	r27, 0x08B9
    57a0:	1e 90       	ld	r1, -X
    57a2:	be bf       	out	0x3e, r27	; 62
    57a4:	ad bf       	out	0x3d, r26	; 61
    57a6:	08 95       	ret

000057a8 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    57a8:	1f 92       	push	r1
    57aa:	0f 92       	push	r0
    57ac:	0f b6       	in	r0, 0x3f	; 63
    57ae:	0f 92       	push	r0
    57b0:	11 24       	eor	r1, r1
    57b2:	0b b6       	in	r0, 0x3b	; 59
    57b4:	0f 92       	push	r0
    57b6:	2f 93       	push	r18
    57b8:	3f 93       	push	r19
    57ba:	4f 93       	push	r20
    57bc:	5f 93       	push	r21
    57be:	6f 93       	push	r22
    57c0:	7f 93       	push	r23
    57c2:	8f 93       	push	r24
    57c4:	9f 93       	push	r25
    57c6:	af 93       	push	r26
    57c8:	bf 93       	push	r27
    57ca:	ef 93       	push	r30
    57cc:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    57ce:	e0 91 f0 05 	lds	r30, 0x05F0
    57d2:	f0 91 f1 05 	lds	r31, 0x05F1
    57d6:	30 97       	sbiw	r30, 0x00	; 0
    57d8:	11 f0       	breq	.+4      	; 0x57de <__vector_32+0x36>
    57da:	09 95       	icall
    57dc:	04 c0       	rjmp	.+8      	; 0x57e6 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    57de:	60 e0       	ldi	r22, 0x00	; 0
    57e0:	8a e0       	ldi	r24, 0x0A	; 10
    57e2:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
	return;  	
}
    57e6:	ff 91       	pop	r31
    57e8:	ef 91       	pop	r30
    57ea:	bf 91       	pop	r27
    57ec:	af 91       	pop	r26
    57ee:	9f 91       	pop	r25
    57f0:	8f 91       	pop	r24
    57f2:	7f 91       	pop	r23
    57f4:	6f 91       	pop	r22
    57f6:	5f 91       	pop	r21
    57f8:	4f 91       	pop	r20
    57fa:	3f 91       	pop	r19
    57fc:	2f 91       	pop	r18
    57fe:	0f 90       	pop	r0
    5800:	0b be       	out	0x3b, r0	; 59
    5802:	0f 90       	pop	r0
    5804:	0f be       	out	0x3f, r0	; 63
    5806:	0f 90       	pop	r0
    5808:	1f 90       	pop	r1
    580a:	18 95       	reti

0000580c <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    580c:	1f 92       	push	r1
    580e:	0f 92       	push	r0
    5810:	0f b6       	in	r0, 0x3f	; 63
    5812:	0f 92       	push	r0
    5814:	11 24       	eor	r1, r1

	return;  	
} 
    5816:	0f 90       	pop	r0
    5818:	0f be       	out	0x3f, r0	; 63
    581a:	0f 90       	pop	r0
    581c:	1f 90       	pop	r1
    581e:	18 95       	reti

00005820 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    5820:	04 b6       	in	r0, 0x34	; 52
    5822:	03 fe       	sbrs	r0, 3
    5824:	02 c0       	rjmp	.+4      	; 0x582a <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    5826:	80 e1       	ldi	r24, 0x10	; 16
    5828:	01 c0       	rjmp	.+2      	; 0x582c <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    582a:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    582c:	04 b6       	in	r0, 0x34	; 52
    582e:	02 fe       	sbrs	r0, 2
    5830:	06 c0       	rjmp	.+12     	; 0x583e <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    5832:	94 b7       	in	r25, 0x34	; 52
    5834:	9b 7f       	andi	r25, 0xFB	; 251
    5836:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    5838:	04 b6       	in	r0, 0x34	; 52
    583a:	00 fe       	sbrs	r0, 0
		error|=0x04;
    583c:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    583e:	04 b6       	in	r0, 0x34	; 52
    5840:	01 fe       	sbrs	r0, 1
    5842:	05 c0       	rjmp	.+10     	; 0x584e <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    5844:	94 b7       	in	r25, 0x34	; 52
    5846:	9d 7f       	andi	r25, 0xFD	; 253
    5848:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    584a:	82 60       	ori	r24, 0x02	; 2
    584c:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    584e:	81 11       	cpse	r24, r1
    5850:	0c c0       	rjmp	.+24     	; 0x586a <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    5852:	04 b6       	in	r0, 0x34	; 52
    5854:	00 fe       	sbrs	r0, 0
    5856:	04 c0       	rjmp	.+8      	; 0x5860 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    5858:	94 b7       	in	r25, 0x34	; 52
    585a:	9e 7f       	andi	r25, 0xFE	; 254
    585c:	94 bf       	out	0x34, r25	; 52
    585e:	01 c0       	rjmp	.+2      	; 0x5862 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    5860:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    5862:	90 91 b0 00 	lds	r25, 0x00B0
    5866:	91 11       	cpse	r25, r1
    5868:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    586a:	08 95       	ret

0000586c <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    586c:	81 11       	cpse	r24, r1
    586e:	02 c0       	rjmp	.+4      	; 0x5874 <nrk_ext_int_enable+0x8>
    5870:	e8 9a       	sbi	0x1d, 0	; 29
    5872:	39 c0       	rjmp	.+114    	; 0x58e6 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    5874:	81 30       	cpi	r24, 0x01	; 1
    5876:	11 f4       	brne	.+4      	; 0x587c <nrk_ext_int_enable+0x10>
    5878:	e9 9a       	sbi	0x1d, 1	; 29
    587a:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    587c:	82 30       	cpi	r24, 0x02	; 2
    587e:	11 f4       	brne	.+4      	; 0x5884 <nrk_ext_int_enable+0x18>
    5880:	ea 9a       	sbi	0x1d, 2	; 29
    5882:	31 c0       	rjmp	.+98     	; 0x58e6 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    5884:	83 30       	cpi	r24, 0x03	; 3
    5886:	21 f4       	brne	.+8      	; 0x5890 <nrk_ext_int_enable+0x24>
    5888:	80 91 6b 00 	lds	r24, 0x006B
    588c:	81 60       	ori	r24, 0x01	; 1
    588e:	29 c0       	rjmp	.+82     	; 0x58e2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    5890:	84 30       	cpi	r24, 0x04	; 4
    5892:	21 f4       	brne	.+8      	; 0x589c <nrk_ext_int_enable+0x30>
    5894:	80 91 6b 00 	lds	r24, 0x006B
    5898:	82 60       	ori	r24, 0x02	; 2
    589a:	23 c0       	rjmp	.+70     	; 0x58e2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    589c:	85 30       	cpi	r24, 0x05	; 5
    589e:	21 f4       	brne	.+8      	; 0x58a8 <nrk_ext_int_enable+0x3c>
    58a0:	80 91 6b 00 	lds	r24, 0x006B
    58a4:	84 60       	ori	r24, 0x04	; 4
    58a6:	1d c0       	rjmp	.+58     	; 0x58e2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    58a8:	86 30       	cpi	r24, 0x06	; 6
    58aa:	21 f4       	brne	.+8      	; 0x58b4 <nrk_ext_int_enable+0x48>
    58ac:	80 91 6b 00 	lds	r24, 0x006B
    58b0:	88 60       	ori	r24, 0x08	; 8
    58b2:	17 c0       	rjmp	.+46     	; 0x58e2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    58b4:	87 30       	cpi	r24, 0x07	; 7
    58b6:	21 f4       	brne	.+8      	; 0x58c0 <nrk_ext_int_enable+0x54>
    58b8:	80 91 6b 00 	lds	r24, 0x006B
    58bc:	80 61       	ori	r24, 0x10	; 16
    58be:	11 c0       	rjmp	.+34     	; 0x58e2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    58c0:	88 30       	cpi	r24, 0x08	; 8
    58c2:	21 f4       	brne	.+8      	; 0x58cc <nrk_ext_int_enable+0x60>
    58c4:	80 91 6b 00 	lds	r24, 0x006B
    58c8:	80 62       	ori	r24, 0x20	; 32
    58ca:	0b c0       	rjmp	.+22     	; 0x58e2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    58cc:	89 30       	cpi	r24, 0x09	; 9
    58ce:	21 f4       	brne	.+8      	; 0x58d8 <nrk_ext_int_enable+0x6c>
    58d0:	80 91 6b 00 	lds	r24, 0x006B
    58d4:	80 64       	ori	r24, 0x40	; 64
    58d6:	05 c0       	rjmp	.+10     	; 0x58e2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    58d8:	8a 30       	cpi	r24, 0x0A	; 10
    58da:	39 f4       	brne	.+14     	; 0x58ea <nrk_ext_int_enable+0x7e>
    58dc:	80 91 6b 00 	lds	r24, 0x006B
    58e0:	80 68       	ori	r24, 0x80	; 128
    58e2:	80 93 6b 00 	sts	0x006B, r24
    58e6:	81 e0       	ldi	r24, 0x01	; 1
    58e8:	08 95       	ret
return NRK_ERROR;
    58ea:	8f ef       	ldi	r24, 0xFF	; 255
}
    58ec:	08 95       	ret

000058ee <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    58ee:	81 11       	cpse	r24, r1
    58f0:	02 c0       	rjmp	.+4      	; 0x58f6 <nrk_ext_int_disable+0x8>
    58f2:	e8 98       	cbi	0x1d, 0	; 29
    58f4:	39 c0       	rjmp	.+114    	; 0x5968 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    58f6:	81 30       	cpi	r24, 0x01	; 1
    58f8:	11 f4       	brne	.+4      	; 0x58fe <nrk_ext_int_disable+0x10>
    58fa:	e9 98       	cbi	0x1d, 1	; 29
    58fc:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    58fe:	82 30       	cpi	r24, 0x02	; 2
    5900:	11 f4       	brne	.+4      	; 0x5906 <nrk_ext_int_disable+0x18>
    5902:	e9 98       	cbi	0x1d, 1	; 29
    5904:	31 c0       	rjmp	.+98     	; 0x5968 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    5906:	83 30       	cpi	r24, 0x03	; 3
    5908:	21 f4       	brne	.+8      	; 0x5912 <nrk_ext_int_disable+0x24>
    590a:	80 91 6b 00 	lds	r24, 0x006B
    590e:	8e 7f       	andi	r24, 0xFE	; 254
    5910:	29 c0       	rjmp	.+82     	; 0x5964 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    5912:	84 30       	cpi	r24, 0x04	; 4
    5914:	21 f4       	brne	.+8      	; 0x591e <nrk_ext_int_disable+0x30>
    5916:	80 91 6b 00 	lds	r24, 0x006B
    591a:	8d 7f       	andi	r24, 0xFD	; 253
    591c:	23 c0       	rjmp	.+70     	; 0x5964 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    591e:	85 30       	cpi	r24, 0x05	; 5
    5920:	21 f4       	brne	.+8      	; 0x592a <nrk_ext_int_disable+0x3c>
    5922:	80 91 6b 00 	lds	r24, 0x006B
    5926:	8b 7f       	andi	r24, 0xFB	; 251
    5928:	1d c0       	rjmp	.+58     	; 0x5964 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    592a:	86 30       	cpi	r24, 0x06	; 6
    592c:	21 f4       	brne	.+8      	; 0x5936 <nrk_ext_int_disable+0x48>
    592e:	80 91 6b 00 	lds	r24, 0x006B
    5932:	87 7f       	andi	r24, 0xF7	; 247
    5934:	17 c0       	rjmp	.+46     	; 0x5964 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    5936:	87 30       	cpi	r24, 0x07	; 7
    5938:	21 f4       	brne	.+8      	; 0x5942 <nrk_ext_int_disable+0x54>
    593a:	80 91 6b 00 	lds	r24, 0x006B
    593e:	8f 7e       	andi	r24, 0xEF	; 239
    5940:	11 c0       	rjmp	.+34     	; 0x5964 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    5942:	88 30       	cpi	r24, 0x08	; 8
    5944:	21 f4       	brne	.+8      	; 0x594e <nrk_ext_int_disable+0x60>
    5946:	80 91 6b 00 	lds	r24, 0x006B
    594a:	8f 7d       	andi	r24, 0xDF	; 223
    594c:	0b c0       	rjmp	.+22     	; 0x5964 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    594e:	89 30       	cpi	r24, 0x09	; 9
    5950:	21 f4       	brne	.+8      	; 0x595a <nrk_ext_int_disable+0x6c>
    5952:	80 91 6b 00 	lds	r24, 0x006B
    5956:	8f 7b       	andi	r24, 0xBF	; 191
    5958:	05 c0       	rjmp	.+10     	; 0x5964 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    595a:	8a 30       	cpi	r24, 0x0A	; 10
    595c:	39 f4       	brne	.+14     	; 0x596c <nrk_ext_int_disable+0x7e>
    595e:	80 91 6b 00 	lds	r24, 0x006B
    5962:	8f 77       	andi	r24, 0x7F	; 127
    5964:	80 93 6b 00 	sts	0x006B, r24
    5968:	81 e0       	ldi	r24, 0x01	; 1
    596a:	08 95       	ret
return NRK_ERROR;
    596c:	8f ef       	ldi	r24, 0xFF	; 255
}
    596e:	08 95       	ret

00005970 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    5970:	81 11       	cpse	r24, r1
    5972:	26 c0       	rjmp	.+76     	; 0x59c0 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    5974:	50 93 19 0c 	sts	0x0C19, r21
    5978:	40 93 18 0c 	sts	0x0C18, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    597c:	61 11       	cpse	r22, r1
    597e:	04 c0       	rjmp	.+8      	; 0x5988 <nrk_ext_int_configure+0x18>
    5980:	80 91 69 00 	lds	r24, 0x0069
    5984:	8c 7f       	andi	r24, 0xFC	; 252
    5986:	3d c0       	rjmp	.+122    	; 0x5a02 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5988:	61 30       	cpi	r22, 0x01	; 1
    598a:	49 f4       	brne	.+18     	; 0x599e <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    598c:	80 91 69 00 	lds	r24, 0x0069
    5990:	8d 7f       	andi	r24, 0xFD	; 253
    5992:	80 93 69 00 	sts	0x0069, r24
    5996:	80 91 69 00 	lds	r24, 0x0069
    599a:	81 60       	ori	r24, 0x01	; 1
    599c:	32 c0       	rjmp	.+100    	; 0x5a02 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    599e:	62 30       	cpi	r22, 0x02	; 2
    59a0:	49 f4       	brne	.+18     	; 0x59b4 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    59a2:	80 91 69 00 	lds	r24, 0x0069
    59a6:	82 60       	ori	r24, 0x02	; 2
    59a8:	80 93 69 00 	sts	0x0069, r24
    59ac:	80 91 69 00 	lds	r24, 0x0069
    59b0:	8e 7f       	andi	r24, 0xFE	; 254
    59b2:	27 c0       	rjmp	.+78     	; 0x5a02 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    59b4:	63 30       	cpi	r22, 0x03	; 3
    59b6:	39 f5       	brne	.+78     	; 0x5a06 <nrk_ext_int_configure+0x96>
    59b8:	80 91 69 00 	lds	r24, 0x0069
    59bc:	83 60       	ori	r24, 0x03	; 3
    59be:	21 c0       	rjmp	.+66     	; 0x5a02 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    59c0:	81 30       	cpi	r24, 0x01	; 1
    59c2:	49 f5       	brne	.+82     	; 0x5a16 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    59c4:	50 93 17 0c 	sts	0x0C17, r21
    59c8:	40 93 16 0c 	sts	0x0C16, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    59cc:	61 11       	cpse	r22, r1
    59ce:	04 c0       	rjmp	.+8      	; 0x59d8 <nrk_ext_int_configure+0x68>
    59d0:	80 91 69 00 	lds	r24, 0x0069
    59d4:	83 7f       	andi	r24, 0xF3	; 243
    59d6:	15 c0       	rjmp	.+42     	; 0x5a02 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    59d8:	61 30       	cpi	r22, 0x01	; 1
    59da:	49 f4       	brne	.+18     	; 0x59ee <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    59dc:	80 91 69 00 	lds	r24, 0x0069
    59e0:	87 7f       	andi	r24, 0xF7	; 247
    59e2:	80 93 69 00 	sts	0x0069, r24
    59e6:	80 91 69 00 	lds	r24, 0x0069
    59ea:	84 60       	ori	r24, 0x04	; 4
    59ec:	0a c0       	rjmp	.+20     	; 0x5a02 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    59ee:	62 30       	cpi	r22, 0x02	; 2
    59f0:	61 f4       	brne	.+24     	; 0x5a0a <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    59f2:	80 91 69 00 	lds	r24, 0x0069
    59f6:	88 60       	ori	r24, 0x08	; 8
    59f8:	80 93 69 00 	sts	0x0069, r24
    59fc:	80 91 69 00 	lds	r24, 0x0069
    5a00:	8b 7f       	andi	r24, 0xFB	; 251
    5a02:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    5a06:	81 e0       	ldi	r24, 0x01	; 1
    5a08:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    5a0a:	63 30       	cpi	r22, 0x03	; 3
    5a0c:	e1 f7       	brne	.-8      	; 0x5a06 <nrk_ext_int_configure+0x96>
    5a0e:	80 91 69 00 	lds	r24, 0x0069
    5a12:	8c 60       	ori	r24, 0x0C	; 12
    5a14:	f6 cf       	rjmp	.-20     	; 0x5a02 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    5a16:	82 30       	cpi	r24, 0x02	; 2
    5a18:	31 f5       	brne	.+76     	; 0x5a66 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    5a1a:	50 93 1b 0c 	sts	0x0C1B, r21
    5a1e:	40 93 1a 0c 	sts	0x0C1A, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    5a22:	61 11       	cpse	r22, r1
    5a24:	04 c0       	rjmp	.+8      	; 0x5a2e <nrk_ext_int_configure+0xbe>
    5a26:	80 91 69 00 	lds	r24, 0x0069
    5a2a:	8f 7c       	andi	r24, 0xCF	; 207
    5a2c:	ea cf       	rjmp	.-44     	; 0x5a02 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5a2e:	61 30       	cpi	r22, 0x01	; 1
    5a30:	49 f4       	brne	.+18     	; 0x5a44 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    5a32:	80 91 69 00 	lds	r24, 0x0069
    5a36:	8f 7d       	andi	r24, 0xDF	; 223
    5a38:	80 93 69 00 	sts	0x0069, r24
    5a3c:	80 91 69 00 	lds	r24, 0x0069
    5a40:	80 61       	ori	r24, 0x10	; 16
    5a42:	df cf       	rjmp	.-66     	; 0x5a02 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5a44:	62 30       	cpi	r22, 0x02	; 2
    5a46:	49 f4       	brne	.+18     	; 0x5a5a <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    5a48:	80 91 69 00 	lds	r24, 0x0069
    5a4c:	80 62       	ori	r24, 0x20	; 32
    5a4e:	80 93 69 00 	sts	0x0069, r24
    5a52:	80 91 69 00 	lds	r24, 0x0069
    5a56:	8f 7e       	andi	r24, 0xEF	; 239
    5a58:	d4 cf       	rjmp	.-88     	; 0x5a02 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    5a5a:	63 30       	cpi	r22, 0x03	; 3
    5a5c:	a1 f6       	brne	.-88     	; 0x5a06 <nrk_ext_int_configure+0x96>
    5a5e:	80 91 69 00 	lds	r24, 0x0069
    5a62:	80 63       	ori	r24, 0x30	; 48
    5a64:	ce cf       	rjmp	.-100    	; 0x5a02 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    5a66:	83 50       	subi	r24, 0x03	; 3
    5a68:	88 30       	cpi	r24, 0x08	; 8
    5a6a:	50 f4       	brcc	.+20     	; 0x5a80 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    5a6c:	80 91 68 00 	lds	r24, 0x0068
    5a70:	81 60       	ori	r24, 0x01	; 1
    5a72:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    5a76:	50 93 1d 0c 	sts	0x0C1D, r21
    5a7a:	40 93 1c 0c 	sts	0x0C1C, r20
    5a7e:	c3 cf       	rjmp	.-122    	; 0x5a06 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    5a80:	8f ef       	ldi	r24, 0xFF	; 255
}
    5a82:	08 95       	ret

00005a84 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    5a84:	1f 92       	push	r1
    5a86:	0f 92       	push	r0
    5a88:	0f b6       	in	r0, 0x3f	; 63
    5a8a:	0f 92       	push	r0
    5a8c:	11 24       	eor	r1, r1
    5a8e:	0b b6       	in	r0, 0x3b	; 59
    5a90:	0f 92       	push	r0
    5a92:	2f 93       	push	r18
    5a94:	3f 93       	push	r19
    5a96:	4f 93       	push	r20
    5a98:	5f 93       	push	r21
    5a9a:	6f 93       	push	r22
    5a9c:	7f 93       	push	r23
    5a9e:	8f 93       	push	r24
    5aa0:	9f 93       	push	r25
    5aa2:	af 93       	push	r26
    5aa4:	bf 93       	push	r27
    5aa6:	ef 93       	push	r30
    5aa8:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    5aaa:	e0 91 1c 0c 	lds	r30, 0x0C1C
    5aae:	f0 91 1d 0c 	lds	r31, 0x0C1D
    5ab2:	30 97       	sbiw	r30, 0x00	; 0
    5ab4:	11 f0       	breq	.+4      	; 0x5aba <__vector_9+0x36>
    5ab6:	09 95       	icall
    5ab8:	04 c0       	rjmp	.+8      	; 0x5ac2 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5aba:	60 e0       	ldi	r22, 0x00	; 0
    5abc:	8a e0       	ldi	r24, 0x0A	; 10
    5abe:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
	return;  	
}
    5ac2:	ff 91       	pop	r31
    5ac4:	ef 91       	pop	r30
    5ac6:	bf 91       	pop	r27
    5ac8:	af 91       	pop	r26
    5aca:	9f 91       	pop	r25
    5acc:	8f 91       	pop	r24
    5ace:	7f 91       	pop	r23
    5ad0:	6f 91       	pop	r22
    5ad2:	5f 91       	pop	r21
    5ad4:	4f 91       	pop	r20
    5ad6:	3f 91       	pop	r19
    5ad8:	2f 91       	pop	r18
    5ada:	0f 90       	pop	r0
    5adc:	0b be       	out	0x3b, r0	; 59
    5ade:	0f 90       	pop	r0
    5ae0:	0f be       	out	0x3f, r0	; 63
    5ae2:	0f 90       	pop	r0
    5ae4:	1f 90       	pop	r1
    5ae6:	18 95       	reti

00005ae8 <__vector_1>:


SIGNAL(INT0_vect) {
    5ae8:	1f 92       	push	r1
    5aea:	0f 92       	push	r0
    5aec:	0f b6       	in	r0, 0x3f	; 63
    5aee:	0f 92       	push	r0
    5af0:	11 24       	eor	r1, r1
    5af2:	0b b6       	in	r0, 0x3b	; 59
    5af4:	0f 92       	push	r0
    5af6:	2f 93       	push	r18
    5af8:	3f 93       	push	r19
    5afa:	4f 93       	push	r20
    5afc:	5f 93       	push	r21
    5afe:	6f 93       	push	r22
    5b00:	7f 93       	push	r23
    5b02:	8f 93       	push	r24
    5b04:	9f 93       	push	r25
    5b06:	af 93       	push	r26
    5b08:	bf 93       	push	r27
    5b0a:	ef 93       	push	r30
    5b0c:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    5b0e:	e0 91 18 0c 	lds	r30, 0x0C18
    5b12:	f0 91 19 0c 	lds	r31, 0x0C19
    5b16:	30 97       	sbiw	r30, 0x00	; 0
    5b18:	11 f0       	breq	.+4      	; 0x5b1e <__vector_1+0x36>
    5b1a:	09 95       	icall
    5b1c:	04 c0       	rjmp	.+8      	; 0x5b26 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5b1e:	60 e0       	ldi	r22, 0x00	; 0
    5b20:	8a e0       	ldi	r24, 0x0A	; 10
    5b22:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
	return;  	
}
    5b26:	ff 91       	pop	r31
    5b28:	ef 91       	pop	r30
    5b2a:	bf 91       	pop	r27
    5b2c:	af 91       	pop	r26
    5b2e:	9f 91       	pop	r25
    5b30:	8f 91       	pop	r24
    5b32:	7f 91       	pop	r23
    5b34:	6f 91       	pop	r22
    5b36:	5f 91       	pop	r21
    5b38:	4f 91       	pop	r20
    5b3a:	3f 91       	pop	r19
    5b3c:	2f 91       	pop	r18
    5b3e:	0f 90       	pop	r0
    5b40:	0b be       	out	0x3b, r0	; 59
    5b42:	0f 90       	pop	r0
    5b44:	0f be       	out	0x3f, r0	; 63
    5b46:	0f 90       	pop	r0
    5b48:	1f 90       	pop	r1
    5b4a:	18 95       	reti

00005b4c <__vector_2>:

SIGNAL(INT1_vect) {
    5b4c:	1f 92       	push	r1
    5b4e:	0f 92       	push	r0
    5b50:	0f b6       	in	r0, 0x3f	; 63
    5b52:	0f 92       	push	r0
    5b54:	11 24       	eor	r1, r1
    5b56:	0b b6       	in	r0, 0x3b	; 59
    5b58:	0f 92       	push	r0
    5b5a:	2f 93       	push	r18
    5b5c:	3f 93       	push	r19
    5b5e:	4f 93       	push	r20
    5b60:	5f 93       	push	r21
    5b62:	6f 93       	push	r22
    5b64:	7f 93       	push	r23
    5b66:	8f 93       	push	r24
    5b68:	9f 93       	push	r25
    5b6a:	af 93       	push	r26
    5b6c:	bf 93       	push	r27
    5b6e:	ef 93       	push	r30
    5b70:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    5b72:	e0 91 16 0c 	lds	r30, 0x0C16
    5b76:	f0 91 17 0c 	lds	r31, 0x0C17
    5b7a:	30 97       	sbiw	r30, 0x00	; 0
    5b7c:	11 f0       	breq	.+4      	; 0x5b82 <__vector_2+0x36>
    5b7e:	09 95       	icall
    5b80:	04 c0       	rjmp	.+8      	; 0x5b8a <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5b82:	60 e0       	ldi	r22, 0x00	; 0
    5b84:	8a e0       	ldi	r24, 0x0A	; 10
    5b86:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
	return;  	
}
    5b8a:	ff 91       	pop	r31
    5b8c:	ef 91       	pop	r30
    5b8e:	bf 91       	pop	r27
    5b90:	af 91       	pop	r26
    5b92:	9f 91       	pop	r25
    5b94:	8f 91       	pop	r24
    5b96:	7f 91       	pop	r23
    5b98:	6f 91       	pop	r22
    5b9a:	5f 91       	pop	r21
    5b9c:	4f 91       	pop	r20
    5b9e:	3f 91       	pop	r19
    5ba0:	2f 91       	pop	r18
    5ba2:	0f 90       	pop	r0
    5ba4:	0b be       	out	0x3b, r0	; 59
    5ba6:	0f 90       	pop	r0
    5ba8:	0f be       	out	0x3f, r0	; 63
    5baa:	0f 90       	pop	r0
    5bac:	1f 90       	pop	r1
    5bae:	18 95       	reti

00005bb0 <__vector_3>:

SIGNAL(INT2_vect) {
    5bb0:	1f 92       	push	r1
    5bb2:	0f 92       	push	r0
    5bb4:	0f b6       	in	r0, 0x3f	; 63
    5bb6:	0f 92       	push	r0
    5bb8:	11 24       	eor	r1, r1
    5bba:	0b b6       	in	r0, 0x3b	; 59
    5bbc:	0f 92       	push	r0
    5bbe:	2f 93       	push	r18
    5bc0:	3f 93       	push	r19
    5bc2:	4f 93       	push	r20
    5bc4:	5f 93       	push	r21
    5bc6:	6f 93       	push	r22
    5bc8:	7f 93       	push	r23
    5bca:	8f 93       	push	r24
    5bcc:	9f 93       	push	r25
    5bce:	af 93       	push	r26
    5bd0:	bf 93       	push	r27
    5bd2:	ef 93       	push	r30
    5bd4:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    5bd6:	e0 91 1a 0c 	lds	r30, 0x0C1A
    5bda:	f0 91 1b 0c 	lds	r31, 0x0C1B
    5bde:	30 97       	sbiw	r30, 0x00	; 0
    5be0:	11 f0       	breq	.+4      	; 0x5be6 <__vector_3+0x36>
    5be2:	09 95       	icall
    5be4:	04 c0       	rjmp	.+8      	; 0x5bee <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5be6:	60 e0       	ldi	r22, 0x00	; 0
    5be8:	8a e0       	ldi	r24, 0x0A	; 10
    5bea:	0e 94 4e 1b 	call	0x369c	; 0x369c <nrk_kernel_error_add>
	return;  	
}
    5bee:	ff 91       	pop	r31
    5bf0:	ef 91       	pop	r30
    5bf2:	bf 91       	pop	r27
    5bf4:	af 91       	pop	r26
    5bf6:	9f 91       	pop	r25
    5bf8:	8f 91       	pop	r24
    5bfa:	7f 91       	pop	r23
    5bfc:	6f 91       	pop	r22
    5bfe:	5f 91       	pop	r21
    5c00:	4f 91       	pop	r20
    5c02:	3f 91       	pop	r19
    5c04:	2f 91       	pop	r18
    5c06:	0f 90       	pop	r0
    5c08:	0b be       	out	0x3b, r0	; 59
    5c0a:	0f 90       	pop	r0
    5c0c:	0f be       	out	0x3f, r0	; 63
    5c0e:	0f 90       	pop	r0
    5c10:	1f 90       	pop	r1
    5c12:	18 95       	reti

00005c14 <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5c14:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    5c16:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5c18:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    5c1a:	84 b7       	in	r24, 0x34	; 52
    5c1c:	87 7f       	andi	r24, 0xF7	; 247
    5c1e:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    5c20:	e0 e6       	ldi	r30, 0x60	; 96
    5c22:	f0 e0       	ldi	r31, 0x00	; 0
    5c24:	80 81       	ld	r24, Z
    5c26:	88 61       	ori	r24, 0x18	; 24
    5c28:	80 83       	st	Z, r24
	WDTCSR = 0;
    5c2a:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5c2c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    5c2e:	08 95       	ret

00005c30 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    5c30:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5c32:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5c34:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5c36:	84 b7       	in	r24, 0x34	; 52
    5c38:	87 7f       	andi	r24, 0xF7	; 247
    5c3a:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5c3c:	e0 e6       	ldi	r30, 0x60	; 96
    5c3e:	f0 e0       	ldi	r31, 0x00	; 0
    5c40:	80 81       	ld	r24, Z
    5c42:	88 61       	ori	r24, 0x18	; 24
    5c44:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    5c46:	8d e0       	ldi	r24, 0x0D	; 13
    5c48:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5c4a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    5c4c:	08 95       	ret

00005c4e <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5c4e:	04 b6       	in	r0, 0x34	; 52
    5c50:	03 fe       	sbrs	r0, 3
    5c52:	02 c0       	rjmp	.+4      	; 0x5c58 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    5c54:	8f ef       	ldi	r24, 0xFF	; 255
    5c56:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5c58:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    5c5a:	08 95       	ret

00005c5c <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5c5c:	a8 95       	wdr
    5c5e:	08 95       	ret

00005c60 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    5c60:	08 95       	ret

00005c62 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    5c62:	83 b7       	in	r24, 0x33	; 51
    5c64:	81 7f       	andi	r24, 0xF1	; 241
    5c66:	86 60       	ori	r24, 0x06	; 6
    5c68:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5c6a:	83 b7       	in	r24, 0x33	; 51
    5c6c:	81 60       	ori	r24, 0x01	; 1
    5c6e:	83 bf       	out	0x33, r24	; 51
    5c70:	88 95       	sleep
    5c72:	83 b7       	in	r24, 0x33	; 51
    5c74:	8e 7f       	andi	r24, 0xFE	; 254
    5c76:	83 bf       	out	0x33, r24	; 51
    5c78:	08 95       	ret

00005c7a <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    5c7a:	83 b7       	in	r24, 0x33	; 51
    5c7c:	81 7f       	andi	r24, 0xF1	; 241
    5c7e:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5c80:	83 b7       	in	r24, 0x33	; 51
    5c82:	81 60       	ori	r24, 0x01	; 1
    5c84:	83 bf       	out	0x33, r24	; 51
    5c86:	88 95       	sleep
    5c88:	83 b7       	in	r24, 0x33	; 51
    5c8a:	8e 7f       	andi	r24, 0xFE	; 254
    5c8c:	83 bf       	out	0x33, r24	; 51
    5c8e:	08 95       	ret

00005c90 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    5c90:	fc 01       	movw	r30, r24
    5c92:	76 83       	std	Z+6, r23	; 0x06
    5c94:	65 83       	std	Z+5, r22	; 0x05
    5c96:	08 95       	ret

00005c98 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    5c98:	ef 92       	push	r14
    5c9a:	ff 92       	push	r15
    5c9c:	0f 93       	push	r16
    5c9e:	1f 93       	push	r17
    5ca0:	cf 93       	push	r28
    5ca2:	df 93       	push	r29
    5ca4:	8c 01       	movw	r16, r24
    5ca6:	7b 01       	movw	r14, r22
    5ca8:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    5caa:	40 32       	cpi	r20, 0x20	; 32
    5cac:	51 05       	cpc	r21, r1
    5cae:	18 f4       	brcc	.+6      	; 0x5cb6 <nrk_task_set_stk+0x1e>
    5cb0:	81 e1       	ldi	r24, 0x11	; 17
    5cb2:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    5cb6:	21 97       	sbiw	r28, 0x01	; 1
    5cb8:	ce 0d       	add	r28, r14
    5cba:	df 1d       	adc	r29, r15
    5cbc:	f8 01       	movw	r30, r16
    5cbe:	d2 83       	std	Z+2, r29	; 0x02
    5cc0:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    5cc2:	f4 82       	std	Z+4, r15	; 0x04
    5cc4:	e3 82       	std	Z+3, r14	; 0x03

}
    5cc6:	df 91       	pop	r29
    5cc8:	cf 91       	pop	r28
    5cca:	1f 91       	pop	r17
    5ccc:	0f 91       	pop	r16
    5cce:	ff 90       	pop	r15
    5cd0:	ef 90       	pop	r14
    5cd2:	08 95       	ret

00005cd4 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    5cd4:	25 e5       	ldi	r18, 0x55	; 85
    5cd6:	fa 01       	movw	r30, r20
    5cd8:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    5cda:	fb 01       	movw	r30, r22
    5cdc:	32 97       	sbiw	r30, 0x02	; 2
    5cde:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    5ce0:	31 96       	adiw	r30, 0x01	; 1
    5ce2:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    5ce4:	33 97       	sbiw	r30, 0x03	; 3
    5ce6:	11 82       	std	Z+1, r1	; 0x01
    5ce8:	10 82       	st	Z, r1
    *(--stk) = 0;       
    5cea:	32 97       	sbiw	r30, 0x02	; 2
    5cec:	11 82       	std	Z+1, r1	; 0x01
    5cee:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5cf0:	32 97       	sbiw	r30, 0x02	; 2
    5cf2:	11 82       	std	Z+1, r1	; 0x01
    5cf4:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5cf6:	32 97       	sbiw	r30, 0x02	; 2
    5cf8:	11 82       	std	Z+1, r1	; 0x01
    5cfa:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5cfc:	32 97       	sbiw	r30, 0x02	; 2
    5cfe:	11 82       	std	Z+1, r1	; 0x01
    5d00:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5d02:	32 97       	sbiw	r30, 0x02	; 2
    5d04:	11 82       	std	Z+1, r1	; 0x01
    5d06:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5d08:	32 97       	sbiw	r30, 0x02	; 2
    5d0a:	11 82       	std	Z+1, r1	; 0x01
    5d0c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d0e:	32 97       	sbiw	r30, 0x02	; 2
    5d10:	11 82       	std	Z+1, r1	; 0x01
    5d12:	10 82       	st	Z, r1

    *(--stk) = 0; 
    5d14:	32 97       	sbiw	r30, 0x02	; 2
    5d16:	11 82       	std	Z+1, r1	; 0x01
    5d18:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d1a:	32 97       	sbiw	r30, 0x02	; 2
    5d1c:	11 82       	std	Z+1, r1	; 0x01
    5d1e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d20:	32 97       	sbiw	r30, 0x02	; 2
    5d22:	11 82       	std	Z+1, r1	; 0x01
    5d24:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d26:	32 97       	sbiw	r30, 0x02	; 2
    5d28:	11 82       	std	Z+1, r1	; 0x01
    5d2a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d2c:	32 97       	sbiw	r30, 0x02	; 2
    5d2e:	11 82       	std	Z+1, r1	; 0x01
    5d30:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d32:	32 97       	sbiw	r30, 0x02	; 2
    5d34:	11 82       	std	Z+1, r1	; 0x01
    5d36:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d38:	32 97       	sbiw	r30, 0x02	; 2
    5d3a:	11 82       	std	Z+1, r1	; 0x01
    5d3c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d3e:	32 97       	sbiw	r30, 0x02	; 2
    5d40:	11 82       	std	Z+1, r1	; 0x01
    5d42:	10 82       	st	Z, r1
    *(--stk) = 0;
    5d44:	cb 01       	movw	r24, r22
    5d46:	84 97       	sbiw	r24, 0x24	; 36
    5d48:	fc 01       	movw	r30, r24
    5d4a:	11 82       	std	Z+1, r1	; 0x01
    5d4c:	10 82       	st	Z, r1


    return ((void *)stk);
}
    5d4e:	08 95       	ret

00005d50 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    5d50:	85 e5       	ldi	r24, 0x55	; 85
    5d52:	80 93 fe 40 	sts	0x40FE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    5d56:	ee ef       	ldi	r30, 0xFE	; 254
    5d58:	f1 e4       	ldi	r31, 0x41	; 65
    5d5a:	f0 93 b9 08 	sts	0x08B9, r31
    5d5e:	e0 93 b8 08 	sts	0x08B8, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5d62:	8e e8       	ldi	r24, 0x8E	; 142
    5d64:	96 e1       	ldi	r25, 0x16	; 22
    5d66:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5d68:	80 93 ff 41 	sts	0x41FF, r24
    5d6c:	08 95       	ret

00005d6e <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5d6e:	8e e8       	ldi	r24, 0x8E	; 142
    5d70:	96 e1       	ldi	r25, 0x16	; 22
    5d72:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5d76:	80 93 ff 41 	sts	0x41FF, r24
    5d7a:	08 95       	ret

00005d7c <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    5d7c:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <_nrk_setup_timer>
  nrk_int_enable();  
    5d80:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <nrk_int_enable>

00005d84 <nrk_start_high_ready_task>:
    5d84:	a0 91 ac 0b 	lds	r26, 0x0BAC
    5d88:	b0 91 ad 0b 	lds	r27, 0x0BAD
    5d8c:	cd 91       	ld	r28, X+
    5d8e:	cd bf       	out	0x3d, r28	; 61
    5d90:	dd 91       	ld	r29, X+
    5d92:	de bf       	out	0x3e, r29	; 62
    5d94:	ff 91       	pop	r31
    5d96:	ef 91       	pop	r30
    5d98:	df 91       	pop	r29
    5d9a:	cf 91       	pop	r28
    5d9c:	bf 91       	pop	r27
    5d9e:	af 91       	pop	r26
    5da0:	9f 91       	pop	r25
    5da2:	8f 91       	pop	r24
    5da4:	7f 91       	pop	r23
    5da6:	6f 91       	pop	r22
    5da8:	5f 91       	pop	r21
    5daa:	4f 91       	pop	r20
    5dac:	3f 91       	pop	r19
    5dae:	2f 91       	pop	r18
    5db0:	1f 91       	pop	r17
    5db2:	0f 91       	pop	r16
    5db4:	ff 90       	pop	r15
    5db6:	ef 90       	pop	r14
    5db8:	df 90       	pop	r13
    5dba:	cf 90       	pop	r12
    5dbc:	bf 90       	pop	r11
    5dbe:	af 90       	pop	r10
    5dc0:	9f 90       	pop	r9
    5dc2:	8f 90       	pop	r8
    5dc4:	7f 90       	pop	r7
    5dc6:	6f 90       	pop	r6
    5dc8:	5f 90       	pop	r5
    5dca:	4f 90       	pop	r4
    5dcc:	3f 90       	pop	r3
    5dce:	2f 90       	pop	r2
    5dd0:	1f 90       	pop	r1
    5dd2:	0f 90       	pop	r0
    5dd4:	0f be       	out	0x3f, r0	; 63
    5dd6:	0f 90       	pop	r0
    5dd8:	18 95       	reti

00005dda <main>:
uint8_t rx_buf[TDMA_MAX_PKT_SIZE];
uint8_t tx_buf[TDMA_MAX_PKT_SIZE];

int main ()
{
  nrk_setup_ports ();
    5dda:	0e 94 9a 10 	call	0x2134	; 0x2134 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
    5dde:	80 e1       	ldi	r24, 0x10	; 16
    5de0:	90 e0       	ldi	r25, 0x00	; 0
    5de2:	0e 94 1e 14 	call	0x283c	; 0x283c <nrk_setup_uart>

  nrk_init ();
    5de6:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <nrk_init>

  nrk_led_clr (ORANGE_LED);
    5dea:	82 e0       	ldi	r24, 0x02	; 2
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	0e 94 b5 13 	call	0x276a	; 0x276a <nrk_led_clr>
  nrk_led_clr (BLUE_LED);
    5df2:	83 e0       	ldi	r24, 0x03	; 3
    5df4:	90 e0       	ldi	r25, 0x00	; 0
    5df6:	0e 94 b5 13 	call	0x276a	; 0x276a <nrk_led_clr>
  nrk_led_clr (GREEN_LED);
    5dfa:	81 e0       	ldi	r24, 0x01	; 1
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
    5dfe:	0e 94 b5 13 	call	0x276a	; 0x276a <nrk_led_clr>
  nrk_led_clr (RED_LED);
    5e02:	80 e0       	ldi	r24, 0x00	; 0
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	0e 94 b5 13 	call	0x276a	; 0x276a <nrk_led_clr>

  nrk_time_set (0, 0);
    5e0a:	20 e0       	ldi	r18, 0x00	; 0
    5e0c:	30 e0       	ldi	r19, 0x00	; 0
    5e0e:	a9 01       	movw	r20, r18
    5e10:	60 e0       	ldi	r22, 0x00	; 0
    5e12:	70 e0       	ldi	r23, 0x00	; 0
    5e14:	cb 01       	movw	r24, r22
    5e16:	0e 94 af 24 	call	0x495e	; 0x495e <nrk_time_set>
  nrk_create_taskset ();
    5e1a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <nrk_create_taskset>
  nrk_start ();
    5e1e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <nrk_start>

  return 0;
}
    5e22:	80 e0       	ldi	r24, 0x00	; 0
    5e24:	90 e0       	ldi	r25, 0x00	; 0
    5e26:	08 95       	ret

00005e28 <vfprintf>:
    5e28:	6f 92       	push	r6
    5e2a:	7f 92       	push	r7
    5e2c:	8f 92       	push	r8
    5e2e:	9f 92       	push	r9
    5e30:	af 92       	push	r10
    5e32:	bf 92       	push	r11
    5e34:	cf 92       	push	r12
    5e36:	df 92       	push	r13
    5e38:	ef 92       	push	r14
    5e3a:	ff 92       	push	r15
    5e3c:	0f 93       	push	r16
    5e3e:	1f 93       	push	r17
    5e40:	cf 93       	push	r28
    5e42:	df 93       	push	r29
    5e44:	cd b7       	in	r28, 0x3d	; 61
    5e46:	de b7       	in	r29, 0x3e	; 62
    5e48:	2c 97       	sbiw	r28, 0x0c	; 12
    5e4a:	0f b6       	in	r0, 0x3f	; 63
    5e4c:	f8 94       	cli
    5e4e:	de bf       	out	0x3e, r29	; 62
    5e50:	0f be       	out	0x3f, r0	; 63
    5e52:	cd bf       	out	0x3d, r28	; 61
    5e54:	6c 01       	movw	r12, r24
    5e56:	5b 01       	movw	r10, r22
    5e58:	7a 01       	movw	r14, r20
    5e5a:	fc 01       	movw	r30, r24
    5e5c:	17 82       	std	Z+7, r1	; 0x07
    5e5e:	16 82       	std	Z+6, r1	; 0x06
    5e60:	83 81       	ldd	r24, Z+3	; 0x03
    5e62:	81 ff       	sbrs	r24, 1
    5e64:	0e c1       	rjmp	.+540    	; 0x6082 <vfprintf+0x25a>
    5e66:	ce 01       	movw	r24, r28
    5e68:	01 96       	adiw	r24, 0x01	; 1
    5e6a:	4c 01       	movw	r8, r24
    5e6c:	f6 01       	movw	r30, r12
    5e6e:	03 81       	ldd	r16, Z+3	; 0x03
    5e70:	f5 01       	movw	r30, r10
    5e72:	03 fd       	sbrc	r16, 3
    5e74:	15 91       	lpm	r17, Z+
    5e76:	03 ff       	sbrs	r16, 3
    5e78:	11 91       	ld	r17, Z+
    5e7a:	5f 01       	movw	r10, r30
    5e7c:	11 23       	and	r17, r17
    5e7e:	09 f4       	brne	.+2      	; 0x5e82 <vfprintf+0x5a>
    5e80:	fc c0       	rjmp	.+504    	; 0x607a <vfprintf+0x252>
    5e82:	15 32       	cpi	r17, 0x25	; 37
    5e84:	49 f4       	brne	.+18     	; 0x5e98 <vfprintf+0x70>
    5e86:	03 fd       	sbrc	r16, 3
    5e88:	15 91       	lpm	r17, Z+
    5e8a:	03 ff       	sbrs	r16, 3
    5e8c:	11 91       	ld	r17, Z+
    5e8e:	5f 01       	movw	r10, r30
    5e90:	15 32       	cpi	r17, 0x25	; 37
    5e92:	11 f0       	breq	.+4      	; 0x5e98 <vfprintf+0x70>
    5e94:	20 e0       	ldi	r18, 0x00	; 0
    5e96:	1b c0       	rjmp	.+54     	; 0x5ece <vfprintf+0xa6>
    5e98:	b6 01       	movw	r22, r12
    5e9a:	81 2f       	mov	r24, r17
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	0e 94 94 31 	call	0x6328	; 0x6328 <fputc>
    5ea2:	37 01       	movw	r6, r14
    5ea4:	73 01       	movw	r14, r6
    5ea6:	e2 cf       	rjmp	.-60     	; 0x5e6c <vfprintf+0x44>
    5ea8:	11 23       	and	r17, r17
    5eaa:	09 f4       	brne	.+2      	; 0x5eae <vfprintf+0x86>
    5eac:	e6 c0       	rjmp	.+460    	; 0x607a <vfprintf+0x252>
    5eae:	61 2f       	mov	r22, r17
    5eb0:	70 e0       	ldi	r23, 0x00	; 0
    5eb2:	8d ed       	ldi	r24, 0xDD	; 221
    5eb4:	95 e0       	ldi	r25, 0x05	; 5
    5eb6:	2c 87       	std	Y+12, r18	; 0x0c
    5eb8:	0e 94 27 31 	call	0x624e	; 0x624e <strchr_P>
    5ebc:	2c 85       	ldd	r18, Y+12	; 0x0c
    5ebe:	89 2b       	or	r24, r25
    5ec0:	49 f0       	breq	.+18     	; 0x5ed4 <vfprintf+0xac>
    5ec2:	f5 01       	movw	r30, r10
    5ec4:	03 fd       	sbrc	r16, 3
    5ec6:	15 91       	lpm	r17, Z+
    5ec8:	03 ff       	sbrs	r16, 3
    5eca:	11 91       	ld	r17, Z+
    5ecc:	5f 01       	movw	r10, r30
    5ece:	27 ff       	sbrs	r18, 7
    5ed0:	eb cf       	rjmp	.-42     	; 0x5ea8 <vfprintf+0x80>
    5ed2:	09 c0       	rjmp	.+18     	; 0x5ee6 <vfprintf+0xbe>
    5ed4:	13 32       	cpi	r17, 0x23	; 35
    5ed6:	29 f0       	breq	.+10     	; 0x5ee2 <vfprintf+0xba>
    5ed8:	1c 36       	cpi	r17, 0x6C	; 108
    5eda:	09 f0       	breq	.+2      	; 0x5ede <vfprintf+0xb6>
    5edc:	d5 c0       	rjmp	.+426    	; 0x6088 <vfprintf+0x260>
    5ede:	20 68       	ori	r18, 0x80	; 128
    5ee0:	f0 cf       	rjmp	.-32     	; 0x5ec2 <vfprintf+0x9a>
    5ee2:	20 e1       	ldi	r18, 0x10	; 16
    5ee4:	ee cf       	rjmp	.-36     	; 0x5ec2 <vfprintf+0x9a>
    5ee6:	02 2f       	mov	r16, r18
    5ee8:	11 23       	and	r17, r17
    5eea:	09 f4       	brne	.+2      	; 0x5eee <vfprintf+0xc6>
    5eec:	c6 c0       	rjmp	.+396    	; 0x607a <vfprintf+0x252>
    5eee:	61 2f       	mov	r22, r17
    5ef0:	70 e0       	ldi	r23, 0x00	; 0
    5ef2:	86 ed       	ldi	r24, 0xD6	; 214
    5ef4:	95 e0       	ldi	r25, 0x05	; 5
    5ef6:	2c 87       	std	Y+12, r18	; 0x0c
    5ef8:	0e 94 27 31 	call	0x624e	; 0x624e <strchr_P>
    5efc:	2c 85       	ldd	r18, Y+12	; 0x0c
    5efe:	89 2b       	or	r24, r25
    5f00:	41 f0       	breq	.+16     	; 0x5f12 <vfprintf+0xea>
    5f02:	37 01       	movw	r6, r14
    5f04:	f4 e0       	ldi	r31, 0x04	; 4
    5f06:	6f 0e       	add	r6, r31
    5f08:	71 1c       	adc	r7, r1
    5f0a:	b6 01       	movw	r22, r12
    5f0c:	8f e3       	ldi	r24, 0x3F	; 63
    5f0e:	90 e0       	ldi	r25, 0x00	; 0
    5f10:	11 c0       	rjmp	.+34     	; 0x5f34 <vfprintf+0x10c>
    5f12:	13 36       	cpi	r17, 0x63	; 99
    5f14:	39 f0       	breq	.+14     	; 0x5f24 <vfprintf+0xfc>
    5f16:	13 37       	cpi	r17, 0x73	; 115
    5f18:	81 f0       	breq	.+32     	; 0x5f3a <vfprintf+0x112>
    5f1a:	13 35       	cpi	r17, 0x53	; 83
    5f1c:	19 f5       	brne	.+70     	; 0x5f64 <vfprintf+0x13c>
    5f1e:	02 2f       	mov	r16, r18
    5f20:	01 60       	ori	r16, 0x01	; 1
    5f22:	0b c0       	rjmp	.+22     	; 0x5f3a <vfprintf+0x112>
    5f24:	37 01       	movw	r6, r14
    5f26:	82 e0       	ldi	r24, 0x02	; 2
    5f28:	68 0e       	add	r6, r24
    5f2a:	71 1c       	adc	r7, r1
    5f2c:	b6 01       	movw	r22, r12
    5f2e:	f7 01       	movw	r30, r14
    5f30:	80 81       	ld	r24, Z
    5f32:	91 81       	ldd	r25, Z+1	; 0x01
    5f34:	0e 94 94 31 	call	0x6328	; 0x6328 <fputc>
    5f38:	b5 cf       	rjmp	.-150    	; 0x5ea4 <vfprintf+0x7c>
    5f3a:	37 01       	movw	r6, r14
    5f3c:	f2 e0       	ldi	r31, 0x02	; 2
    5f3e:	6f 0e       	add	r6, r31
    5f40:	71 1c       	adc	r7, r1
    5f42:	f7 01       	movw	r30, r14
    5f44:	e0 80       	ld	r14, Z
    5f46:	f1 80       	ldd	r15, Z+1	; 0x01
    5f48:	f7 01       	movw	r30, r14
    5f4a:	00 fd       	sbrc	r16, 0
    5f4c:	85 91       	lpm	r24, Z+
    5f4e:	00 ff       	sbrs	r16, 0
    5f50:	81 91       	ld	r24, Z+
    5f52:	7f 01       	movw	r14, r30
    5f54:	88 23       	and	r24, r24
    5f56:	09 f4       	brne	.+2      	; 0x5f5a <vfprintf+0x132>
    5f58:	a5 cf       	rjmp	.-182    	; 0x5ea4 <vfprintf+0x7c>
    5f5a:	b6 01       	movw	r22, r12
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	0e 94 94 31 	call	0x6328	; 0x6328 <fputc>
    5f62:	f2 cf       	rjmp	.-28     	; 0x5f48 <vfprintf+0x120>
    5f64:	14 36       	cpi	r17, 0x64	; 100
    5f66:	11 f0       	breq	.+4      	; 0x5f6c <vfprintf+0x144>
    5f68:	19 36       	cpi	r17, 0x69	; 105
    5f6a:	29 f5       	brne	.+74     	; 0x5fb6 <vfprintf+0x18e>
    5f6c:	37 01       	movw	r6, r14
    5f6e:	27 ff       	sbrs	r18, 7
    5f70:	09 c0       	rjmp	.+18     	; 0x5f84 <vfprintf+0x15c>
    5f72:	f4 e0       	ldi	r31, 0x04	; 4
    5f74:	6f 0e       	add	r6, r31
    5f76:	71 1c       	adc	r7, r1
    5f78:	f7 01       	movw	r30, r14
    5f7a:	60 81       	ld	r22, Z
    5f7c:	71 81       	ldd	r23, Z+1	; 0x01
    5f7e:	82 81       	ldd	r24, Z+2	; 0x02
    5f80:	93 81       	ldd	r25, Z+3	; 0x03
    5f82:	0a c0       	rjmp	.+20     	; 0x5f98 <vfprintf+0x170>
    5f84:	f2 e0       	ldi	r31, 0x02	; 2
    5f86:	6f 0e       	add	r6, r31
    5f88:	71 1c       	adc	r7, r1
    5f8a:	f7 01       	movw	r30, r14
    5f8c:	60 81       	ld	r22, Z
    5f8e:	71 81       	ldd	r23, Z+1	; 0x01
    5f90:	88 27       	eor	r24, r24
    5f92:	77 fd       	sbrc	r23, 7
    5f94:	80 95       	com	r24
    5f96:	98 2f       	mov	r25, r24
    5f98:	02 2f       	mov	r16, r18
    5f9a:	0f 7e       	andi	r16, 0xEF	; 239
    5f9c:	97 ff       	sbrs	r25, 7
    5f9e:	08 c0       	rjmp	.+16     	; 0x5fb0 <vfprintf+0x188>
    5fa0:	90 95       	com	r25
    5fa2:	80 95       	com	r24
    5fa4:	70 95       	com	r23
    5fa6:	61 95       	neg	r22
    5fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    5faa:	8f 4f       	sbci	r24, 0xFF	; 255
    5fac:	9f 4f       	sbci	r25, 0xFF	; 255
    5fae:	00 64       	ori	r16, 0x40	; 64
    5fb0:	2a e0       	ldi	r18, 0x0A	; 10
    5fb2:	30 e0       	ldi	r19, 0x00	; 0
    5fb4:	33 c0       	rjmp	.+102    	; 0x601c <vfprintf+0x1f4>
    5fb6:	10 37       	cpi	r17, 0x70	; 112
    5fb8:	99 f0       	breq	.+38     	; 0x5fe0 <vfprintf+0x1b8>
    5fba:	40 f4       	brcc	.+16     	; 0x5fcc <vfprintf+0x1a4>
    5fbc:	18 35       	cpi	r17, 0x58	; 88
    5fbe:	b1 f0       	breq	.+44     	; 0x5fec <vfprintf+0x1c4>
    5fc0:	1f 36       	cpi	r17, 0x6F	; 111
    5fc2:	09 f0       	breq	.+2      	; 0x5fc6 <vfprintf+0x19e>
    5fc4:	5a c0       	rjmp	.+180    	; 0x607a <vfprintf+0x252>
    5fc6:	28 e0       	ldi	r18, 0x08	; 8
    5fc8:	30 e0       	ldi	r19, 0x00	; 0
    5fca:	14 c0       	rjmp	.+40     	; 0x5ff4 <vfprintf+0x1cc>
    5fcc:	15 37       	cpi	r17, 0x75	; 117
    5fce:	19 f0       	breq	.+6      	; 0x5fd6 <vfprintf+0x1ae>
    5fd0:	18 37       	cpi	r17, 0x78	; 120
    5fd2:	41 f0       	breq	.+16     	; 0x5fe4 <vfprintf+0x1bc>
    5fd4:	52 c0       	rjmp	.+164    	; 0x607a <vfprintf+0x252>
    5fd6:	02 2f       	mov	r16, r18
    5fd8:	0f 7e       	andi	r16, 0xEF	; 239
    5fda:	2a e0       	ldi	r18, 0x0A	; 10
    5fdc:	30 e0       	ldi	r19, 0x00	; 0
    5fde:	0a c0       	rjmp	.+20     	; 0x5ff4 <vfprintf+0x1cc>
    5fe0:	02 2f       	mov	r16, r18
    5fe2:	00 61       	ori	r16, 0x10	; 16
    5fe4:	04 62       	ori	r16, 0x24	; 36
    5fe6:	20 e1       	ldi	r18, 0x10	; 16
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	04 c0       	rjmp	.+8      	; 0x5ff4 <vfprintf+0x1cc>
    5fec:	02 2f       	mov	r16, r18
    5fee:	04 60       	ori	r16, 0x04	; 4
    5ff0:	20 e1       	ldi	r18, 0x10	; 16
    5ff2:	32 e0       	ldi	r19, 0x02	; 2
    5ff4:	37 01       	movw	r6, r14
    5ff6:	07 ff       	sbrs	r16, 7
    5ff8:	09 c0       	rjmp	.+18     	; 0x600c <vfprintf+0x1e4>
    5ffa:	f4 e0       	ldi	r31, 0x04	; 4
    5ffc:	6f 0e       	add	r6, r31
    5ffe:	71 1c       	adc	r7, r1
    6000:	f7 01       	movw	r30, r14
    6002:	60 81       	ld	r22, Z
    6004:	71 81       	ldd	r23, Z+1	; 0x01
    6006:	82 81       	ldd	r24, Z+2	; 0x02
    6008:	93 81       	ldd	r25, Z+3	; 0x03
    600a:	08 c0       	rjmp	.+16     	; 0x601c <vfprintf+0x1f4>
    600c:	f2 e0       	ldi	r31, 0x02	; 2
    600e:	6f 0e       	add	r6, r31
    6010:	71 1c       	adc	r7, r1
    6012:	f7 01       	movw	r30, r14
    6014:	60 81       	ld	r22, Z
    6016:	71 81       	ldd	r23, Z+1	; 0x01
    6018:	80 e0       	ldi	r24, 0x00	; 0
    601a:	90 e0       	ldi	r25, 0x00	; 0
    601c:	a4 01       	movw	r20, r8
    601e:	0e 94 46 32 	call	0x648c	; 0x648c <__ultoa_invert>
    6022:	18 2f       	mov	r17, r24
    6024:	18 19       	sub	r17, r8
    6026:	06 ff       	sbrs	r16, 6
    6028:	05 c0       	rjmp	.+10     	; 0x6034 <vfprintf+0x20c>
    602a:	b6 01       	movw	r22, r12
    602c:	8d e2       	ldi	r24, 0x2D	; 45
    602e:	90 e0       	ldi	r25, 0x00	; 0
    6030:	0e 94 94 31 	call	0x6328	; 0x6328 <fputc>
    6034:	04 ff       	sbrs	r16, 4
    6036:	15 c0       	rjmp	.+42     	; 0x6062 <vfprintf+0x23a>
    6038:	fe 01       	movw	r30, r28
    603a:	e1 0f       	add	r30, r17
    603c:	f1 1d       	adc	r31, r1
    603e:	80 81       	ld	r24, Z
    6040:	80 33       	cpi	r24, 0x30	; 48
    6042:	79 f0       	breq	.+30     	; 0x6062 <vfprintf+0x23a>
    6044:	b6 01       	movw	r22, r12
    6046:	80 e3       	ldi	r24, 0x30	; 48
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	0e 94 94 31 	call	0x6328	; 0x6328 <fputc>
    604e:	02 ff       	sbrs	r16, 2
    6050:	08 c0       	rjmp	.+16     	; 0x6062 <vfprintf+0x23a>
    6052:	00 72       	andi	r16, 0x20	; 32
    6054:	80 2f       	mov	r24, r16
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	b6 01       	movw	r22, r12
    605a:	88 5a       	subi	r24, 0xA8	; 168
    605c:	9f 4f       	sbci	r25, 0xFF	; 255
    605e:	0e 94 94 31 	call	0x6328	; 0x6328 <fputc>
    6062:	11 50       	subi	r17, 0x01	; 1
    6064:	f4 01       	movw	r30, r8
    6066:	e1 0f       	add	r30, r17
    6068:	f1 1d       	adc	r31, r1
    606a:	80 81       	ld	r24, Z
    606c:	b6 01       	movw	r22, r12
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	0e 94 94 31 	call	0x6328	; 0x6328 <fputc>
    6074:	11 11       	cpse	r17, r1
    6076:	f5 cf       	rjmp	.-22     	; 0x6062 <vfprintf+0x23a>
    6078:	15 cf       	rjmp	.-470    	; 0x5ea4 <vfprintf+0x7c>
    607a:	f6 01       	movw	r30, r12
    607c:	86 81       	ldd	r24, Z+6	; 0x06
    607e:	97 81       	ldd	r25, Z+7	; 0x07
    6080:	05 c0       	rjmp	.+10     	; 0x608c <vfprintf+0x264>
    6082:	8f ef       	ldi	r24, 0xFF	; 255
    6084:	9f ef       	ldi	r25, 0xFF	; 255
    6086:	02 c0       	rjmp	.+4      	; 0x608c <vfprintf+0x264>
    6088:	02 2f       	mov	r16, r18
    608a:	31 cf       	rjmp	.-414    	; 0x5eee <vfprintf+0xc6>
    608c:	2c 96       	adiw	r28, 0x0c	; 12
    608e:	0f b6       	in	r0, 0x3f	; 63
    6090:	f8 94       	cli
    6092:	de bf       	out	0x3e, r29	; 62
    6094:	0f be       	out	0x3f, r0	; 63
    6096:	cd bf       	out	0x3d, r28	; 61
    6098:	df 91       	pop	r29
    609a:	cf 91       	pop	r28
    609c:	1f 91       	pop	r17
    609e:	0f 91       	pop	r16
    60a0:	ff 90       	pop	r15
    60a2:	ef 90       	pop	r14
    60a4:	df 90       	pop	r13
    60a6:	cf 90       	pop	r12
    60a8:	bf 90       	pop	r11
    60aa:	af 90       	pop	r10
    60ac:	9f 90       	pop	r9
    60ae:	8f 90       	pop	r8
    60b0:	7f 90       	pop	r7
    60b2:	6f 90       	pop	r6
    60b4:	08 95       	ret

000060b6 <__usmulhisi3>:
    60b6:	0e 94 18 31 	call	0x6230	; 0x6230 <__umulhisi3>

000060ba <__usmulhisi3_tail>:
    60ba:	b7 ff       	sbrs	r27, 7
    60bc:	08 95       	ret
    60be:	82 1b       	sub	r24, r18
    60c0:	93 0b       	sbc	r25, r19
    60c2:	08 95       	ret

000060c4 <__muluhisi3>:
    60c4:	0e 94 18 31 	call	0x6230	; 0x6230 <__umulhisi3>
    60c8:	a5 9f       	mul	r26, r21
    60ca:	90 0d       	add	r25, r0
    60cc:	b4 9f       	mul	r27, r20
    60ce:	90 0d       	add	r25, r0
    60d0:	a4 9f       	mul	r26, r20
    60d2:	80 0d       	add	r24, r0
    60d4:	91 1d       	adc	r25, r1
    60d6:	11 24       	eor	r1, r1
    60d8:	08 95       	ret

000060da <__mulsi3>:
    60da:	db 01       	movw	r26, r22
    60dc:	8f 93       	push	r24
    60de:	9f 93       	push	r25
    60e0:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__muluhisi3>
    60e4:	bf 91       	pop	r27
    60e6:	af 91       	pop	r26
    60e8:	a2 9f       	mul	r26, r18
    60ea:	80 0d       	add	r24, r0
    60ec:	91 1d       	adc	r25, r1
    60ee:	a3 9f       	mul	r26, r19
    60f0:	90 0d       	add	r25, r0
    60f2:	b2 9f       	mul	r27, r18
    60f4:	90 0d       	add	r25, r0
    60f6:	11 24       	eor	r1, r1
    60f8:	08 95       	ret

000060fa <__udivmodhi4>:
    60fa:	aa 1b       	sub	r26, r26
    60fc:	bb 1b       	sub	r27, r27
    60fe:	51 e1       	ldi	r21, 0x11	; 17
    6100:	07 c0       	rjmp	.+14     	; 0x6110 <__udivmodhi4_ep>

00006102 <__udivmodhi4_loop>:
    6102:	aa 1f       	adc	r26, r26
    6104:	bb 1f       	adc	r27, r27
    6106:	a6 17       	cp	r26, r22
    6108:	b7 07       	cpc	r27, r23
    610a:	10 f0       	brcs	.+4      	; 0x6110 <__udivmodhi4_ep>
    610c:	a6 1b       	sub	r26, r22
    610e:	b7 0b       	sbc	r27, r23

00006110 <__udivmodhi4_ep>:
    6110:	88 1f       	adc	r24, r24
    6112:	99 1f       	adc	r25, r25
    6114:	5a 95       	dec	r21
    6116:	a9 f7       	brne	.-22     	; 0x6102 <__udivmodhi4_loop>
    6118:	80 95       	com	r24
    611a:	90 95       	com	r25
    611c:	bc 01       	movw	r22, r24
    611e:	cd 01       	movw	r24, r26
    6120:	08 95       	ret

00006122 <__udivmodsi4>:
    6122:	a1 e2       	ldi	r26, 0x21	; 33
    6124:	1a 2e       	mov	r1, r26
    6126:	aa 1b       	sub	r26, r26
    6128:	bb 1b       	sub	r27, r27
    612a:	fd 01       	movw	r30, r26
    612c:	0d c0       	rjmp	.+26     	; 0x6148 <__udivmodsi4_ep>

0000612e <__udivmodsi4_loop>:
    612e:	aa 1f       	adc	r26, r26
    6130:	bb 1f       	adc	r27, r27
    6132:	ee 1f       	adc	r30, r30
    6134:	ff 1f       	adc	r31, r31
    6136:	a2 17       	cp	r26, r18
    6138:	b3 07       	cpc	r27, r19
    613a:	e4 07       	cpc	r30, r20
    613c:	f5 07       	cpc	r31, r21
    613e:	20 f0       	brcs	.+8      	; 0x6148 <__udivmodsi4_ep>
    6140:	a2 1b       	sub	r26, r18
    6142:	b3 0b       	sbc	r27, r19
    6144:	e4 0b       	sbc	r30, r20
    6146:	f5 0b       	sbc	r31, r21

00006148 <__udivmodsi4_ep>:
    6148:	66 1f       	adc	r22, r22
    614a:	77 1f       	adc	r23, r23
    614c:	88 1f       	adc	r24, r24
    614e:	99 1f       	adc	r25, r25
    6150:	1a 94       	dec	r1
    6152:	69 f7       	brne	.-38     	; 0x612e <__udivmodsi4_loop>
    6154:	60 95       	com	r22
    6156:	70 95       	com	r23
    6158:	80 95       	com	r24
    615a:	90 95       	com	r25
    615c:	9b 01       	movw	r18, r22
    615e:	ac 01       	movw	r20, r24
    6160:	bd 01       	movw	r22, r26
    6162:	cf 01       	movw	r24, r30
    6164:	08 95       	ret

00006166 <__umoddi3>:
    6166:	68 94       	set
    6168:	01 c0       	rjmp	.+2      	; 0x616c <__udivdi3_umoddi3>

0000616a <__udivdi3>:
    616a:	e8 94       	clt

0000616c <__udivdi3_umoddi3>:
    616c:	8f 92       	push	r8
    616e:	9f 92       	push	r9
    6170:	cf 93       	push	r28
    6172:	df 93       	push	r29
    6174:	0e 94 c1 30 	call	0x6182	; 0x6182 <__udivmod64>
    6178:	df 91       	pop	r29
    617a:	cf 91       	pop	r28
    617c:	9f 90       	pop	r9
    617e:	8f 90       	pop	r8
    6180:	08 95       	ret

00006182 <__udivmod64>:
    6182:	88 24       	eor	r8, r8
    6184:	99 24       	eor	r9, r9
    6186:	f4 01       	movw	r30, r8
    6188:	e4 01       	movw	r28, r8
    618a:	b0 e4       	ldi	r27, 0x40	; 64
    618c:	9f 93       	push	r25
    618e:	aa 27       	eor	r26, r26
    6190:	9a 15       	cp	r25, r10
    6192:	8b 04       	cpc	r8, r11
    6194:	9c 04       	cpc	r9, r12
    6196:	ed 05       	cpc	r30, r13
    6198:	fe 05       	cpc	r31, r14
    619a:	cf 05       	cpc	r28, r15
    619c:	d0 07       	cpc	r29, r16
    619e:	a1 07       	cpc	r26, r17
    61a0:	98 f4       	brcc	.+38     	; 0x61c8 <__udivmod64+0x46>
    61a2:	ad 2f       	mov	r26, r29
    61a4:	dc 2f       	mov	r29, r28
    61a6:	cf 2f       	mov	r28, r31
    61a8:	fe 2f       	mov	r31, r30
    61aa:	e9 2d       	mov	r30, r9
    61ac:	98 2c       	mov	r9, r8
    61ae:	89 2e       	mov	r8, r25
    61b0:	98 2f       	mov	r25, r24
    61b2:	87 2f       	mov	r24, r23
    61b4:	76 2f       	mov	r23, r22
    61b6:	65 2f       	mov	r22, r21
    61b8:	54 2f       	mov	r21, r20
    61ba:	43 2f       	mov	r20, r19
    61bc:	32 2f       	mov	r19, r18
    61be:	22 27       	eor	r18, r18
    61c0:	b8 50       	subi	r27, 0x08	; 8
    61c2:	31 f7       	brne	.-52     	; 0x6190 <__udivmod64+0xe>
    61c4:	bf 91       	pop	r27
    61c6:	27 c0       	rjmp	.+78     	; 0x6216 <__udivmod64+0x94>
    61c8:	1b 2e       	mov	r1, r27
    61ca:	bf 91       	pop	r27
    61cc:	bb 27       	eor	r27, r27
    61ce:	22 0f       	add	r18, r18
    61d0:	33 1f       	adc	r19, r19
    61d2:	44 1f       	adc	r20, r20
    61d4:	55 1f       	adc	r21, r21
    61d6:	66 1f       	adc	r22, r22
    61d8:	77 1f       	adc	r23, r23
    61da:	88 1f       	adc	r24, r24
    61dc:	99 1f       	adc	r25, r25
    61de:	88 1c       	adc	r8, r8
    61e0:	99 1c       	adc	r9, r9
    61e2:	ee 1f       	adc	r30, r30
    61e4:	ff 1f       	adc	r31, r31
    61e6:	cc 1f       	adc	r28, r28
    61e8:	dd 1f       	adc	r29, r29
    61ea:	aa 1f       	adc	r26, r26
    61ec:	bb 1f       	adc	r27, r27
    61ee:	8a 14       	cp	r8, r10
    61f0:	9b 04       	cpc	r9, r11
    61f2:	ec 05       	cpc	r30, r12
    61f4:	fd 05       	cpc	r31, r13
    61f6:	ce 05       	cpc	r28, r14
    61f8:	df 05       	cpc	r29, r15
    61fa:	a0 07       	cpc	r26, r16
    61fc:	b1 07       	cpc	r27, r17
    61fe:	48 f0       	brcs	.+18     	; 0x6212 <__udivmod64+0x90>
    6200:	8a 18       	sub	r8, r10
    6202:	9b 08       	sbc	r9, r11
    6204:	ec 09       	sbc	r30, r12
    6206:	fd 09       	sbc	r31, r13
    6208:	ce 09       	sbc	r28, r14
    620a:	df 09       	sbc	r29, r15
    620c:	a0 0b       	sbc	r26, r16
    620e:	b1 0b       	sbc	r27, r17
    6210:	21 60       	ori	r18, 0x01	; 1
    6212:	1a 94       	dec	r1
    6214:	e1 f6       	brne	.-72     	; 0x61ce <__udivmod64+0x4c>
    6216:	2e f4       	brtc	.+10     	; 0x6222 <__udivmod64+0xa0>
    6218:	94 01       	movw	r18, r8
    621a:	af 01       	movw	r20, r30
    621c:	be 01       	movw	r22, r28
    621e:	cd 01       	movw	r24, r26
    6220:	00 0c       	add	r0, r0
    6222:	08 95       	ret

00006224 <__tablejump2__>:
    6224:	ee 0f       	add	r30, r30
    6226:	ff 1f       	adc	r31, r31

00006228 <__tablejump__>:
    6228:	05 90       	lpm	r0, Z+
    622a:	f4 91       	lpm	r31, Z
    622c:	e0 2d       	mov	r30, r0
    622e:	09 94       	ijmp

00006230 <__umulhisi3>:
    6230:	a2 9f       	mul	r26, r18
    6232:	b0 01       	movw	r22, r0
    6234:	b3 9f       	mul	r27, r19
    6236:	c0 01       	movw	r24, r0
    6238:	a3 9f       	mul	r26, r19
    623a:	70 0d       	add	r23, r0
    623c:	81 1d       	adc	r24, r1
    623e:	11 24       	eor	r1, r1
    6240:	91 1d       	adc	r25, r1
    6242:	b2 9f       	mul	r27, r18
    6244:	70 0d       	add	r23, r0
    6246:	81 1d       	adc	r24, r1
    6248:	11 24       	eor	r1, r1
    624a:	91 1d       	adc	r25, r1
    624c:	08 95       	ret

0000624e <strchr_P>:
    624e:	fc 01       	movw	r30, r24
    6250:	05 90       	lpm	r0, Z+
    6252:	06 16       	cp	r0, r22
    6254:	21 f0       	breq	.+8      	; 0x625e <strchr_P+0x10>
    6256:	00 20       	and	r0, r0
    6258:	d9 f7       	brne	.-10     	; 0x6250 <strchr_P+0x2>
    625a:	c0 01       	movw	r24, r0
    625c:	08 95       	ret
    625e:	31 97       	sbiw	r30, 0x01	; 1
    6260:	cf 01       	movw	r24, r30
    6262:	08 95       	ret

00006264 <memcpy>:
    6264:	fb 01       	movw	r30, r22
    6266:	dc 01       	movw	r26, r24
    6268:	02 c0       	rjmp	.+4      	; 0x626e <memcpy+0xa>
    626a:	01 90       	ld	r0, Z+
    626c:	0d 92       	st	X+, r0
    626e:	41 50       	subi	r20, 0x01	; 1
    6270:	50 40       	sbci	r21, 0x00	; 0
    6272:	d8 f7       	brcc	.-10     	; 0x626a <memcpy+0x6>
    6274:	08 95       	ret

00006276 <strncmp>:
    6276:	fb 01       	movw	r30, r22
    6278:	dc 01       	movw	r26, r24
    627a:	41 50       	subi	r20, 0x01	; 1
    627c:	50 40       	sbci	r21, 0x00	; 0
    627e:	30 f0       	brcs	.+12     	; 0x628c <strncmp+0x16>
    6280:	8d 91       	ld	r24, X+
    6282:	01 90       	ld	r0, Z+
    6284:	80 19       	sub	r24, r0
    6286:	19 f4       	brne	.+6      	; 0x628e <strncmp+0x18>
    6288:	00 20       	and	r0, r0
    628a:	b9 f7       	brne	.-18     	; 0x627a <strncmp+0x4>
    628c:	88 1b       	sub	r24, r24
    628e:	99 0b       	sbc	r25, r25
    6290:	08 95       	ret

00006292 <fdevopen>:
    6292:	0f 93       	push	r16
    6294:	1f 93       	push	r17
    6296:	cf 93       	push	r28
    6298:	df 93       	push	r29
    629a:	00 97       	sbiw	r24, 0x00	; 0
    629c:	31 f4       	brne	.+12     	; 0x62aa <fdevopen+0x18>
    629e:	61 15       	cp	r22, r1
    62a0:	71 05       	cpc	r23, r1
    62a2:	19 f4       	brne	.+6      	; 0x62aa <fdevopen+0x18>
    62a4:	80 e0       	ldi	r24, 0x00	; 0
    62a6:	90 e0       	ldi	r25, 0x00	; 0
    62a8:	3a c0       	rjmp	.+116    	; 0x631e <fdevopen+0x8c>
    62aa:	8b 01       	movw	r16, r22
    62ac:	ec 01       	movw	r28, r24
    62ae:	6e e0       	ldi	r22, 0x0E	; 14
    62b0:	70 e0       	ldi	r23, 0x00	; 0
    62b2:	81 e0       	ldi	r24, 0x01	; 1
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	0e 94 ba 32 	call	0x6574	; 0x6574 <calloc>
    62ba:	fc 01       	movw	r30, r24
    62bc:	00 97       	sbiw	r24, 0x00	; 0
    62be:	91 f3       	breq	.-28     	; 0x62a4 <fdevopen+0x12>
    62c0:	80 e8       	ldi	r24, 0x80	; 128
    62c2:	83 83       	std	Z+3, r24	; 0x03
    62c4:	01 15       	cp	r16, r1
    62c6:	11 05       	cpc	r17, r1
    62c8:	71 f0       	breq	.+28     	; 0x62e6 <fdevopen+0x54>
    62ca:	13 87       	std	Z+11, r17	; 0x0b
    62cc:	02 87       	std	Z+10, r16	; 0x0a
    62ce:	81 e8       	ldi	r24, 0x81	; 129
    62d0:	83 83       	std	Z+3, r24	; 0x03
    62d2:	80 91 1e 0c 	lds	r24, 0x0C1E
    62d6:	90 91 1f 0c 	lds	r25, 0x0C1F
    62da:	89 2b       	or	r24, r25
    62dc:	21 f4       	brne	.+8      	; 0x62e6 <fdevopen+0x54>
    62de:	f0 93 1f 0c 	sts	0x0C1F, r31
    62e2:	e0 93 1e 0c 	sts	0x0C1E, r30
    62e6:	20 97       	sbiw	r28, 0x00	; 0
    62e8:	c9 f0       	breq	.+50     	; 0x631c <fdevopen+0x8a>
    62ea:	d1 87       	std	Z+9, r29	; 0x09
    62ec:	c0 87       	std	Z+8, r28	; 0x08
    62ee:	83 81       	ldd	r24, Z+3	; 0x03
    62f0:	82 60       	ori	r24, 0x02	; 2
    62f2:	83 83       	std	Z+3, r24	; 0x03
    62f4:	80 91 20 0c 	lds	r24, 0x0C20
    62f8:	90 91 21 0c 	lds	r25, 0x0C21
    62fc:	89 2b       	or	r24, r25
    62fe:	71 f4       	brne	.+28     	; 0x631c <fdevopen+0x8a>
    6300:	f0 93 21 0c 	sts	0x0C21, r31
    6304:	e0 93 20 0c 	sts	0x0C20, r30
    6308:	80 91 22 0c 	lds	r24, 0x0C22
    630c:	90 91 23 0c 	lds	r25, 0x0C23
    6310:	89 2b       	or	r24, r25
    6312:	21 f4       	brne	.+8      	; 0x631c <fdevopen+0x8a>
    6314:	f0 93 23 0c 	sts	0x0C23, r31
    6318:	e0 93 22 0c 	sts	0x0C22, r30
    631c:	cf 01       	movw	r24, r30
    631e:	df 91       	pop	r29
    6320:	cf 91       	pop	r28
    6322:	1f 91       	pop	r17
    6324:	0f 91       	pop	r16
    6326:	08 95       	ret

00006328 <fputc>:
    6328:	0f 93       	push	r16
    632a:	1f 93       	push	r17
    632c:	cf 93       	push	r28
    632e:	df 93       	push	r29
    6330:	fb 01       	movw	r30, r22
    6332:	23 81       	ldd	r18, Z+3	; 0x03
    6334:	21 fd       	sbrc	r18, 1
    6336:	03 c0       	rjmp	.+6      	; 0x633e <fputc+0x16>
    6338:	8f ef       	ldi	r24, 0xFF	; 255
    633a:	9f ef       	ldi	r25, 0xFF	; 255
    633c:	28 c0       	rjmp	.+80     	; 0x638e <fputc+0x66>
    633e:	22 ff       	sbrs	r18, 2
    6340:	16 c0       	rjmp	.+44     	; 0x636e <fputc+0x46>
    6342:	46 81       	ldd	r20, Z+6	; 0x06
    6344:	57 81       	ldd	r21, Z+7	; 0x07
    6346:	24 81       	ldd	r18, Z+4	; 0x04
    6348:	35 81       	ldd	r19, Z+5	; 0x05
    634a:	42 17       	cp	r20, r18
    634c:	53 07       	cpc	r21, r19
    634e:	44 f4       	brge	.+16     	; 0x6360 <fputc+0x38>
    6350:	a0 81       	ld	r26, Z
    6352:	b1 81       	ldd	r27, Z+1	; 0x01
    6354:	9d 01       	movw	r18, r26
    6356:	2f 5f       	subi	r18, 0xFF	; 255
    6358:	3f 4f       	sbci	r19, 0xFF	; 255
    635a:	31 83       	std	Z+1, r19	; 0x01
    635c:	20 83       	st	Z, r18
    635e:	8c 93       	st	X, r24
    6360:	26 81       	ldd	r18, Z+6	; 0x06
    6362:	37 81       	ldd	r19, Z+7	; 0x07
    6364:	2f 5f       	subi	r18, 0xFF	; 255
    6366:	3f 4f       	sbci	r19, 0xFF	; 255
    6368:	37 83       	std	Z+7, r19	; 0x07
    636a:	26 83       	std	Z+6, r18	; 0x06
    636c:	10 c0       	rjmp	.+32     	; 0x638e <fputc+0x66>
    636e:	eb 01       	movw	r28, r22
    6370:	09 2f       	mov	r16, r25
    6372:	18 2f       	mov	r17, r24
    6374:	00 84       	ldd	r0, Z+8	; 0x08
    6376:	f1 85       	ldd	r31, Z+9	; 0x09
    6378:	e0 2d       	mov	r30, r0
    637a:	09 95       	icall
    637c:	89 2b       	or	r24, r25
    637e:	e1 f6       	brne	.-72     	; 0x6338 <fputc+0x10>
    6380:	8e 81       	ldd	r24, Y+6	; 0x06
    6382:	9f 81       	ldd	r25, Y+7	; 0x07
    6384:	01 96       	adiw	r24, 0x01	; 1
    6386:	9f 83       	std	Y+7, r25	; 0x07
    6388:	8e 83       	std	Y+6, r24	; 0x06
    638a:	81 2f       	mov	r24, r17
    638c:	90 2f       	mov	r25, r16
    638e:	df 91       	pop	r29
    6390:	cf 91       	pop	r28
    6392:	1f 91       	pop	r17
    6394:	0f 91       	pop	r16
    6396:	08 95       	ret

00006398 <printf>:
    6398:	cf 93       	push	r28
    639a:	df 93       	push	r29
    639c:	cd b7       	in	r28, 0x3d	; 61
    639e:	de b7       	in	r29, 0x3e	; 62
    63a0:	ae 01       	movw	r20, r28
    63a2:	4b 5f       	subi	r20, 0xFB	; 251
    63a4:	5f 4f       	sbci	r21, 0xFF	; 255
    63a6:	fa 01       	movw	r30, r20
    63a8:	61 91       	ld	r22, Z+
    63aa:	71 91       	ld	r23, Z+
    63ac:	af 01       	movw	r20, r30
    63ae:	80 91 20 0c 	lds	r24, 0x0C20
    63b2:	90 91 21 0c 	lds	r25, 0x0C21
    63b6:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <vfprintf>
    63ba:	df 91       	pop	r29
    63bc:	cf 91       	pop	r28
    63be:	08 95       	ret

000063c0 <putchar>:
    63c0:	60 91 20 0c 	lds	r22, 0x0C20
    63c4:	70 91 21 0c 	lds	r23, 0x0C21
    63c8:	0c 94 94 31 	jmp	0x6328	; 0x6328 <fputc>

000063cc <puts>:
    63cc:	0f 93       	push	r16
    63ce:	1f 93       	push	r17
    63d0:	cf 93       	push	r28
    63d2:	df 93       	push	r29
    63d4:	e0 91 20 0c 	lds	r30, 0x0C20
    63d8:	f0 91 21 0c 	lds	r31, 0x0C21
    63dc:	23 81       	ldd	r18, Z+3	; 0x03
    63de:	21 ff       	sbrs	r18, 1
    63e0:	1b c0       	rjmp	.+54     	; 0x6418 <puts+0x4c>
    63e2:	8c 01       	movw	r16, r24
    63e4:	d0 e0       	ldi	r29, 0x00	; 0
    63e6:	c0 e0       	ldi	r28, 0x00	; 0
    63e8:	f8 01       	movw	r30, r16
    63ea:	81 91       	ld	r24, Z+
    63ec:	8f 01       	movw	r16, r30
    63ee:	60 91 20 0c 	lds	r22, 0x0C20
    63f2:	70 91 21 0c 	lds	r23, 0x0C21
    63f6:	db 01       	movw	r26, r22
    63f8:	18 96       	adiw	r26, 0x08	; 8
    63fa:	ed 91       	ld	r30, X+
    63fc:	fc 91       	ld	r31, X
    63fe:	19 97       	sbiw	r26, 0x09	; 9
    6400:	88 23       	and	r24, r24
    6402:	31 f0       	breq	.+12     	; 0x6410 <puts+0x44>
    6404:	09 95       	icall
    6406:	89 2b       	or	r24, r25
    6408:	79 f3       	breq	.-34     	; 0x63e8 <puts+0x1c>
    640a:	df ef       	ldi	r29, 0xFF	; 255
    640c:	cf ef       	ldi	r28, 0xFF	; 255
    640e:	ec cf       	rjmp	.-40     	; 0x63e8 <puts+0x1c>
    6410:	8a e0       	ldi	r24, 0x0A	; 10
    6412:	09 95       	icall
    6414:	89 2b       	or	r24, r25
    6416:	19 f0       	breq	.+6      	; 0x641e <puts+0x52>
    6418:	8f ef       	ldi	r24, 0xFF	; 255
    641a:	9f ef       	ldi	r25, 0xFF	; 255
    641c:	02 c0       	rjmp	.+4      	; 0x6422 <puts+0x56>
    641e:	8d 2f       	mov	r24, r29
    6420:	9c 2f       	mov	r25, r28
    6422:	df 91       	pop	r29
    6424:	cf 91       	pop	r28
    6426:	1f 91       	pop	r17
    6428:	0f 91       	pop	r16
    642a:	08 95       	ret

0000642c <sprintf>:
    642c:	0f 93       	push	r16
    642e:	1f 93       	push	r17
    6430:	cf 93       	push	r28
    6432:	df 93       	push	r29
    6434:	cd b7       	in	r28, 0x3d	; 61
    6436:	de b7       	in	r29, 0x3e	; 62
    6438:	2e 97       	sbiw	r28, 0x0e	; 14
    643a:	0f b6       	in	r0, 0x3f	; 63
    643c:	f8 94       	cli
    643e:	de bf       	out	0x3e, r29	; 62
    6440:	0f be       	out	0x3f, r0	; 63
    6442:	cd bf       	out	0x3d, r28	; 61
    6444:	0d 89       	ldd	r16, Y+21	; 0x15
    6446:	1e 89       	ldd	r17, Y+22	; 0x16
    6448:	86 e0       	ldi	r24, 0x06	; 6
    644a:	8c 83       	std	Y+4, r24	; 0x04
    644c:	1a 83       	std	Y+2, r17	; 0x02
    644e:	09 83       	std	Y+1, r16	; 0x01
    6450:	8f ef       	ldi	r24, 0xFF	; 255
    6452:	9f e7       	ldi	r25, 0x7F	; 127
    6454:	9e 83       	std	Y+6, r25	; 0x06
    6456:	8d 83       	std	Y+5, r24	; 0x05
    6458:	ae 01       	movw	r20, r28
    645a:	47 5e       	subi	r20, 0xE7	; 231
    645c:	5f 4f       	sbci	r21, 0xFF	; 255
    645e:	6f 89       	ldd	r22, Y+23	; 0x17
    6460:	78 8d       	ldd	r23, Y+24	; 0x18
    6462:	ce 01       	movw	r24, r28
    6464:	01 96       	adiw	r24, 0x01	; 1
    6466:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <vfprintf>
    646a:	2f 81       	ldd	r18, Y+7	; 0x07
    646c:	38 85       	ldd	r19, Y+8	; 0x08
    646e:	f8 01       	movw	r30, r16
    6470:	e2 0f       	add	r30, r18
    6472:	f3 1f       	adc	r31, r19
    6474:	10 82       	st	Z, r1
    6476:	2e 96       	adiw	r28, 0x0e	; 14
    6478:	0f b6       	in	r0, 0x3f	; 63
    647a:	f8 94       	cli
    647c:	de bf       	out	0x3e, r29	; 62
    647e:	0f be       	out	0x3f, r0	; 63
    6480:	cd bf       	out	0x3d, r28	; 61
    6482:	df 91       	pop	r29
    6484:	cf 91       	pop	r28
    6486:	1f 91       	pop	r17
    6488:	0f 91       	pop	r16
    648a:	08 95       	ret

0000648c <__ultoa_invert>:
    648c:	fa 01       	movw	r30, r20
    648e:	aa 27       	eor	r26, r26
    6490:	28 30       	cpi	r18, 0x08	; 8
    6492:	51 f1       	breq	.+84     	; 0x64e8 <__ultoa_invert+0x5c>
    6494:	20 31       	cpi	r18, 0x10	; 16
    6496:	81 f1       	breq	.+96     	; 0x64f8 <__ultoa_invert+0x6c>
    6498:	e8 94       	clt
    649a:	6f 93       	push	r22
    649c:	6e 7f       	andi	r22, 0xFE	; 254
    649e:	6e 5f       	subi	r22, 0xFE	; 254
    64a0:	7f 4f       	sbci	r23, 0xFF	; 255
    64a2:	8f 4f       	sbci	r24, 0xFF	; 255
    64a4:	9f 4f       	sbci	r25, 0xFF	; 255
    64a6:	af 4f       	sbci	r26, 0xFF	; 255
    64a8:	b1 e0       	ldi	r27, 0x01	; 1
    64aa:	3e d0       	rcall	.+124    	; 0x6528 <__ultoa_invert+0x9c>
    64ac:	b4 e0       	ldi	r27, 0x04	; 4
    64ae:	3c d0       	rcall	.+120    	; 0x6528 <__ultoa_invert+0x9c>
    64b0:	67 0f       	add	r22, r23
    64b2:	78 1f       	adc	r23, r24
    64b4:	89 1f       	adc	r24, r25
    64b6:	9a 1f       	adc	r25, r26
    64b8:	a1 1d       	adc	r26, r1
    64ba:	68 0f       	add	r22, r24
    64bc:	79 1f       	adc	r23, r25
    64be:	8a 1f       	adc	r24, r26
    64c0:	91 1d       	adc	r25, r1
    64c2:	a1 1d       	adc	r26, r1
    64c4:	6a 0f       	add	r22, r26
    64c6:	71 1d       	adc	r23, r1
    64c8:	81 1d       	adc	r24, r1
    64ca:	91 1d       	adc	r25, r1
    64cc:	a1 1d       	adc	r26, r1
    64ce:	20 d0       	rcall	.+64     	; 0x6510 <__ultoa_invert+0x84>
    64d0:	09 f4       	brne	.+2      	; 0x64d4 <__ultoa_invert+0x48>
    64d2:	68 94       	set
    64d4:	3f 91       	pop	r19
    64d6:	2a e0       	ldi	r18, 0x0A	; 10
    64d8:	26 9f       	mul	r18, r22
    64da:	11 24       	eor	r1, r1
    64dc:	30 19       	sub	r19, r0
    64de:	30 5d       	subi	r19, 0xD0	; 208
    64e0:	31 93       	st	Z+, r19
    64e2:	de f6       	brtc	.-74     	; 0x649a <__ultoa_invert+0xe>
    64e4:	cf 01       	movw	r24, r30
    64e6:	08 95       	ret
    64e8:	46 2f       	mov	r20, r22
    64ea:	47 70       	andi	r20, 0x07	; 7
    64ec:	40 5d       	subi	r20, 0xD0	; 208
    64ee:	41 93       	st	Z+, r20
    64f0:	b3 e0       	ldi	r27, 0x03	; 3
    64f2:	0f d0       	rcall	.+30     	; 0x6512 <__ultoa_invert+0x86>
    64f4:	c9 f7       	brne	.-14     	; 0x64e8 <__ultoa_invert+0x5c>
    64f6:	f6 cf       	rjmp	.-20     	; 0x64e4 <__ultoa_invert+0x58>
    64f8:	46 2f       	mov	r20, r22
    64fa:	4f 70       	andi	r20, 0x0F	; 15
    64fc:	40 5d       	subi	r20, 0xD0	; 208
    64fe:	4a 33       	cpi	r20, 0x3A	; 58
    6500:	18 f0       	brcs	.+6      	; 0x6508 <__ultoa_invert+0x7c>
    6502:	49 5d       	subi	r20, 0xD9	; 217
    6504:	31 fd       	sbrc	r19, 1
    6506:	40 52       	subi	r20, 0x20	; 32
    6508:	41 93       	st	Z+, r20
    650a:	02 d0       	rcall	.+4      	; 0x6510 <__ultoa_invert+0x84>
    650c:	a9 f7       	brne	.-22     	; 0x64f8 <__ultoa_invert+0x6c>
    650e:	ea cf       	rjmp	.-44     	; 0x64e4 <__ultoa_invert+0x58>
    6510:	b4 e0       	ldi	r27, 0x04	; 4
    6512:	a6 95       	lsr	r26
    6514:	97 95       	ror	r25
    6516:	87 95       	ror	r24
    6518:	77 95       	ror	r23
    651a:	67 95       	ror	r22
    651c:	ba 95       	dec	r27
    651e:	c9 f7       	brne	.-14     	; 0x6512 <__ultoa_invert+0x86>
    6520:	00 97       	sbiw	r24, 0x00	; 0
    6522:	61 05       	cpc	r22, r1
    6524:	71 05       	cpc	r23, r1
    6526:	08 95       	ret
    6528:	9b 01       	movw	r18, r22
    652a:	ac 01       	movw	r20, r24
    652c:	0a 2e       	mov	r0, r26
    652e:	06 94       	lsr	r0
    6530:	57 95       	ror	r21
    6532:	47 95       	ror	r20
    6534:	37 95       	ror	r19
    6536:	27 95       	ror	r18
    6538:	ba 95       	dec	r27
    653a:	c9 f7       	brne	.-14     	; 0x652e <__ultoa_invert+0xa2>
    653c:	62 0f       	add	r22, r18
    653e:	73 1f       	adc	r23, r19
    6540:	84 1f       	adc	r24, r20
    6542:	95 1f       	adc	r25, r21
    6544:	a0 1d       	adc	r26, r0
    6546:	08 95       	ret

00006548 <__eerd_byte_m128rfa1>:
    6548:	f9 99       	sbic	0x1f, 1	; 31
    654a:	fe cf       	rjmp	.-4      	; 0x6548 <__eerd_byte_m128rfa1>
    654c:	92 bd       	out	0x22, r25	; 34
    654e:	81 bd       	out	0x21, r24	; 33
    6550:	f8 9a       	sbi	0x1f, 0	; 31
    6552:	99 27       	eor	r25, r25
    6554:	80 b5       	in	r24, 0x20	; 32
    6556:	08 95       	ret

00006558 <__eewr_byte_m128rfa1>:
    6558:	26 2f       	mov	r18, r22

0000655a <__eewr_r18_m128rfa1>:
    655a:	f9 99       	sbic	0x1f, 1	; 31
    655c:	fe cf       	rjmp	.-4      	; 0x655a <__eewr_r18_m128rfa1>
    655e:	1f ba       	out	0x1f, r1	; 31
    6560:	92 bd       	out	0x22, r25	; 34
    6562:	81 bd       	out	0x21, r24	; 33
    6564:	20 bd       	out	0x20, r18	; 32
    6566:	0f b6       	in	r0, 0x3f	; 63
    6568:	f8 94       	cli
    656a:	fa 9a       	sbi	0x1f, 2	; 31
    656c:	f9 9a       	sbi	0x1f, 1	; 31
    656e:	0f be       	out	0x3f, r0	; 63
    6570:	01 96       	adiw	r24, 0x01	; 1
    6572:	08 95       	ret

00006574 <calloc>:
    6574:	0f 93       	push	r16
    6576:	1f 93       	push	r17
    6578:	cf 93       	push	r28
    657a:	df 93       	push	r29
    657c:	86 9f       	mul	r24, r22
    657e:	80 01       	movw	r16, r0
    6580:	87 9f       	mul	r24, r23
    6582:	10 0d       	add	r17, r0
    6584:	96 9f       	mul	r25, r22
    6586:	10 0d       	add	r17, r0
    6588:	11 24       	eor	r1, r1
    658a:	c8 01       	movw	r24, r16
    658c:	0e 94 d6 32 	call	0x65ac	; 0x65ac <malloc>
    6590:	ec 01       	movw	r28, r24
    6592:	00 97       	sbiw	r24, 0x00	; 0
    6594:	29 f0       	breq	.+10     	; 0x65a0 <calloc+0x2c>
    6596:	a8 01       	movw	r20, r16
    6598:	60 e0       	ldi	r22, 0x00	; 0
    659a:	70 e0       	ldi	r23, 0x00	; 0
    659c:	0e 94 03 34 	call	0x6806	; 0x6806 <memset>
    65a0:	ce 01       	movw	r24, r28
    65a2:	df 91       	pop	r29
    65a4:	cf 91       	pop	r28
    65a6:	1f 91       	pop	r17
    65a8:	0f 91       	pop	r16
    65aa:	08 95       	ret

000065ac <malloc>:
    65ac:	cf 93       	push	r28
    65ae:	df 93       	push	r29
    65b0:	82 30       	cpi	r24, 0x02	; 2
    65b2:	91 05       	cpc	r25, r1
    65b4:	10 f4       	brcc	.+4      	; 0x65ba <malloc+0xe>
    65b6:	82 e0       	ldi	r24, 0x02	; 2
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	e0 91 26 0c 	lds	r30, 0x0C26
    65be:	f0 91 27 0c 	lds	r31, 0x0C27
    65c2:	20 e0       	ldi	r18, 0x00	; 0
    65c4:	30 e0       	ldi	r19, 0x00	; 0
    65c6:	c0 e0       	ldi	r28, 0x00	; 0
    65c8:	d0 e0       	ldi	r29, 0x00	; 0
    65ca:	30 97       	sbiw	r30, 0x00	; 0
    65cc:	11 f1       	breq	.+68     	; 0x6612 <malloc+0x66>
    65ce:	40 81       	ld	r20, Z
    65d0:	51 81       	ldd	r21, Z+1	; 0x01
    65d2:	48 17       	cp	r20, r24
    65d4:	59 07       	cpc	r21, r25
    65d6:	c0 f0       	brcs	.+48     	; 0x6608 <malloc+0x5c>
    65d8:	48 17       	cp	r20, r24
    65da:	59 07       	cpc	r21, r25
    65dc:	61 f4       	brne	.+24     	; 0x65f6 <malloc+0x4a>
    65de:	82 81       	ldd	r24, Z+2	; 0x02
    65e0:	93 81       	ldd	r25, Z+3	; 0x03
    65e2:	20 97       	sbiw	r28, 0x00	; 0
    65e4:	19 f0       	breq	.+6      	; 0x65ec <malloc+0x40>
    65e6:	9b 83       	std	Y+3, r25	; 0x03
    65e8:	8a 83       	std	Y+2, r24	; 0x02
    65ea:	2b c0       	rjmp	.+86     	; 0x6642 <malloc+0x96>
    65ec:	90 93 27 0c 	sts	0x0C27, r25
    65f0:	80 93 26 0c 	sts	0x0C26, r24
    65f4:	26 c0       	rjmp	.+76     	; 0x6642 <malloc+0x96>
    65f6:	21 15       	cp	r18, r1
    65f8:	31 05       	cpc	r19, r1
    65fa:	19 f0       	breq	.+6      	; 0x6602 <malloc+0x56>
    65fc:	42 17       	cp	r20, r18
    65fe:	53 07       	cpc	r21, r19
    6600:	18 f4       	brcc	.+6      	; 0x6608 <malloc+0x5c>
    6602:	9a 01       	movw	r18, r20
    6604:	be 01       	movw	r22, r28
    6606:	df 01       	movw	r26, r30
    6608:	ef 01       	movw	r28, r30
    660a:	02 80       	ldd	r0, Z+2	; 0x02
    660c:	f3 81       	ldd	r31, Z+3	; 0x03
    660e:	e0 2d       	mov	r30, r0
    6610:	dc cf       	rjmp	.-72     	; 0x65ca <malloc+0x1e>
    6612:	21 15       	cp	r18, r1
    6614:	31 05       	cpc	r19, r1
    6616:	09 f1       	breq	.+66     	; 0x665a <malloc+0xae>
    6618:	28 1b       	sub	r18, r24
    661a:	39 0b       	sbc	r19, r25
    661c:	24 30       	cpi	r18, 0x04	; 4
    661e:	31 05       	cpc	r19, r1
    6620:	90 f4       	brcc	.+36     	; 0x6646 <malloc+0x9a>
    6622:	12 96       	adiw	r26, 0x02	; 2
    6624:	8d 91       	ld	r24, X+
    6626:	9c 91       	ld	r25, X
    6628:	13 97       	sbiw	r26, 0x03	; 3
    662a:	61 15       	cp	r22, r1
    662c:	71 05       	cpc	r23, r1
    662e:	21 f0       	breq	.+8      	; 0x6638 <malloc+0x8c>
    6630:	fb 01       	movw	r30, r22
    6632:	93 83       	std	Z+3, r25	; 0x03
    6634:	82 83       	std	Z+2, r24	; 0x02
    6636:	04 c0       	rjmp	.+8      	; 0x6640 <malloc+0x94>
    6638:	90 93 27 0c 	sts	0x0C27, r25
    663c:	80 93 26 0c 	sts	0x0C26, r24
    6640:	fd 01       	movw	r30, r26
    6642:	32 96       	adiw	r30, 0x02	; 2
    6644:	44 c0       	rjmp	.+136    	; 0x66ce <malloc+0x122>
    6646:	fd 01       	movw	r30, r26
    6648:	e2 0f       	add	r30, r18
    664a:	f3 1f       	adc	r31, r19
    664c:	81 93       	st	Z+, r24
    664e:	91 93       	st	Z+, r25
    6650:	22 50       	subi	r18, 0x02	; 2
    6652:	31 09       	sbc	r19, r1
    6654:	2d 93       	st	X+, r18
    6656:	3c 93       	st	X, r19
    6658:	3a c0       	rjmp	.+116    	; 0x66ce <malloc+0x122>
    665a:	20 91 24 0c 	lds	r18, 0x0C24
    665e:	30 91 25 0c 	lds	r19, 0x0C25
    6662:	23 2b       	or	r18, r19
    6664:	41 f4       	brne	.+16     	; 0x6676 <malloc+0xca>
    6666:	20 91 12 02 	lds	r18, 0x0212
    666a:	30 91 13 02 	lds	r19, 0x0213
    666e:	30 93 25 0c 	sts	0x0C25, r19
    6672:	20 93 24 0c 	sts	0x0C24, r18
    6676:	20 91 10 02 	lds	r18, 0x0210
    667a:	30 91 11 02 	lds	r19, 0x0211
    667e:	21 15       	cp	r18, r1
    6680:	31 05       	cpc	r19, r1
    6682:	41 f4       	brne	.+16     	; 0x6694 <malloc+0xe8>
    6684:	2d b7       	in	r18, 0x3d	; 61
    6686:	3e b7       	in	r19, 0x3e	; 62
    6688:	40 91 14 02 	lds	r20, 0x0214
    668c:	50 91 15 02 	lds	r21, 0x0215
    6690:	24 1b       	sub	r18, r20
    6692:	35 0b       	sbc	r19, r21
    6694:	e0 91 24 0c 	lds	r30, 0x0C24
    6698:	f0 91 25 0c 	lds	r31, 0x0C25
    669c:	e2 17       	cp	r30, r18
    669e:	f3 07       	cpc	r31, r19
    66a0:	a0 f4       	brcc	.+40     	; 0x66ca <malloc+0x11e>
    66a2:	2e 1b       	sub	r18, r30
    66a4:	3f 0b       	sbc	r19, r31
    66a6:	28 17       	cp	r18, r24
    66a8:	39 07       	cpc	r19, r25
    66aa:	78 f0       	brcs	.+30     	; 0x66ca <malloc+0x11e>
    66ac:	ac 01       	movw	r20, r24
    66ae:	4e 5f       	subi	r20, 0xFE	; 254
    66b0:	5f 4f       	sbci	r21, 0xFF	; 255
    66b2:	24 17       	cp	r18, r20
    66b4:	35 07       	cpc	r19, r21
    66b6:	48 f0       	brcs	.+18     	; 0x66ca <malloc+0x11e>
    66b8:	4e 0f       	add	r20, r30
    66ba:	5f 1f       	adc	r21, r31
    66bc:	50 93 25 0c 	sts	0x0C25, r21
    66c0:	40 93 24 0c 	sts	0x0C24, r20
    66c4:	81 93       	st	Z+, r24
    66c6:	91 93       	st	Z+, r25
    66c8:	02 c0       	rjmp	.+4      	; 0x66ce <malloc+0x122>
    66ca:	e0 e0       	ldi	r30, 0x00	; 0
    66cc:	f0 e0       	ldi	r31, 0x00	; 0
    66ce:	cf 01       	movw	r24, r30
    66d0:	df 91       	pop	r29
    66d2:	cf 91       	pop	r28
    66d4:	08 95       	ret

000066d6 <free>:
    66d6:	0f 93       	push	r16
    66d8:	1f 93       	push	r17
    66da:	cf 93       	push	r28
    66dc:	df 93       	push	r29
    66de:	00 97       	sbiw	r24, 0x00	; 0
    66e0:	09 f4       	brne	.+2      	; 0x66e4 <free+0xe>
    66e2:	8c c0       	rjmp	.+280    	; 0x67fc <free+0x126>
    66e4:	fc 01       	movw	r30, r24
    66e6:	32 97       	sbiw	r30, 0x02	; 2
    66e8:	13 82       	std	Z+3, r1	; 0x03
    66ea:	12 82       	std	Z+2, r1	; 0x02
    66ec:	00 91 26 0c 	lds	r16, 0x0C26
    66f0:	10 91 27 0c 	lds	r17, 0x0C27
    66f4:	01 15       	cp	r16, r1
    66f6:	11 05       	cpc	r17, r1
    66f8:	81 f4       	brne	.+32     	; 0x671a <free+0x44>
    66fa:	20 81       	ld	r18, Z
    66fc:	31 81       	ldd	r19, Z+1	; 0x01
    66fe:	82 0f       	add	r24, r18
    6700:	93 1f       	adc	r25, r19
    6702:	20 91 24 0c 	lds	r18, 0x0C24
    6706:	30 91 25 0c 	lds	r19, 0x0C25
    670a:	28 17       	cp	r18, r24
    670c:	39 07       	cpc	r19, r25
    670e:	79 f5       	brne	.+94     	; 0x676e <free+0x98>
    6710:	f0 93 25 0c 	sts	0x0C25, r31
    6714:	e0 93 24 0c 	sts	0x0C24, r30
    6718:	71 c0       	rjmp	.+226    	; 0x67fc <free+0x126>
    671a:	d8 01       	movw	r26, r16
    671c:	40 e0       	ldi	r20, 0x00	; 0
    671e:	50 e0       	ldi	r21, 0x00	; 0
    6720:	ae 17       	cp	r26, r30
    6722:	bf 07       	cpc	r27, r31
    6724:	50 f4       	brcc	.+20     	; 0x673a <free+0x64>
    6726:	12 96       	adiw	r26, 0x02	; 2
    6728:	2d 91       	ld	r18, X+
    672a:	3c 91       	ld	r19, X
    672c:	13 97       	sbiw	r26, 0x03	; 3
    672e:	ad 01       	movw	r20, r26
    6730:	21 15       	cp	r18, r1
    6732:	31 05       	cpc	r19, r1
    6734:	09 f1       	breq	.+66     	; 0x6778 <free+0xa2>
    6736:	d9 01       	movw	r26, r18
    6738:	f3 cf       	rjmp	.-26     	; 0x6720 <free+0x4a>
    673a:	9d 01       	movw	r18, r26
    673c:	da 01       	movw	r26, r20
    673e:	33 83       	std	Z+3, r19	; 0x03
    6740:	22 83       	std	Z+2, r18	; 0x02
    6742:	60 81       	ld	r22, Z
    6744:	71 81       	ldd	r23, Z+1	; 0x01
    6746:	86 0f       	add	r24, r22
    6748:	97 1f       	adc	r25, r23
    674a:	82 17       	cp	r24, r18
    674c:	93 07       	cpc	r25, r19
    674e:	69 f4       	brne	.+26     	; 0x676a <free+0x94>
    6750:	ec 01       	movw	r28, r24
    6752:	28 81       	ld	r18, Y
    6754:	39 81       	ldd	r19, Y+1	; 0x01
    6756:	26 0f       	add	r18, r22
    6758:	37 1f       	adc	r19, r23
    675a:	2e 5f       	subi	r18, 0xFE	; 254
    675c:	3f 4f       	sbci	r19, 0xFF	; 255
    675e:	31 83       	std	Z+1, r19	; 0x01
    6760:	20 83       	st	Z, r18
    6762:	8a 81       	ldd	r24, Y+2	; 0x02
    6764:	9b 81       	ldd	r25, Y+3	; 0x03
    6766:	93 83       	std	Z+3, r25	; 0x03
    6768:	82 83       	std	Z+2, r24	; 0x02
    676a:	45 2b       	or	r20, r21
    676c:	29 f4       	brne	.+10     	; 0x6778 <free+0xa2>
    676e:	f0 93 27 0c 	sts	0x0C27, r31
    6772:	e0 93 26 0c 	sts	0x0C26, r30
    6776:	42 c0       	rjmp	.+132    	; 0x67fc <free+0x126>
    6778:	13 96       	adiw	r26, 0x03	; 3
    677a:	fc 93       	st	X, r31
    677c:	ee 93       	st	-X, r30
    677e:	12 97       	sbiw	r26, 0x02	; 2
    6780:	ed 01       	movw	r28, r26
    6782:	49 91       	ld	r20, Y+
    6784:	59 91       	ld	r21, Y+
    6786:	9e 01       	movw	r18, r28
    6788:	24 0f       	add	r18, r20
    678a:	35 1f       	adc	r19, r21
    678c:	e2 17       	cp	r30, r18
    678e:	f3 07       	cpc	r31, r19
    6790:	71 f4       	brne	.+28     	; 0x67ae <free+0xd8>
    6792:	80 81       	ld	r24, Z
    6794:	91 81       	ldd	r25, Z+1	; 0x01
    6796:	84 0f       	add	r24, r20
    6798:	95 1f       	adc	r25, r21
    679a:	02 96       	adiw	r24, 0x02	; 2
    679c:	11 96       	adiw	r26, 0x01	; 1
    679e:	9c 93       	st	X, r25
    67a0:	8e 93       	st	-X, r24
    67a2:	82 81       	ldd	r24, Z+2	; 0x02
    67a4:	93 81       	ldd	r25, Z+3	; 0x03
    67a6:	13 96       	adiw	r26, 0x03	; 3
    67a8:	9c 93       	st	X, r25
    67aa:	8e 93       	st	-X, r24
    67ac:	12 97       	sbiw	r26, 0x02	; 2
    67ae:	e0 e0       	ldi	r30, 0x00	; 0
    67b0:	f0 e0       	ldi	r31, 0x00	; 0
    67b2:	d8 01       	movw	r26, r16
    67b4:	12 96       	adiw	r26, 0x02	; 2
    67b6:	8d 91       	ld	r24, X+
    67b8:	9c 91       	ld	r25, X
    67ba:	13 97       	sbiw	r26, 0x03	; 3
    67bc:	00 97       	sbiw	r24, 0x00	; 0
    67be:	19 f0       	breq	.+6      	; 0x67c6 <free+0xf0>
    67c0:	f8 01       	movw	r30, r16
    67c2:	8c 01       	movw	r16, r24
    67c4:	f6 cf       	rjmp	.-20     	; 0x67b2 <free+0xdc>
    67c6:	8d 91       	ld	r24, X+
    67c8:	9c 91       	ld	r25, X
    67ca:	98 01       	movw	r18, r16
    67cc:	2e 5f       	subi	r18, 0xFE	; 254
    67ce:	3f 4f       	sbci	r19, 0xFF	; 255
    67d0:	82 0f       	add	r24, r18
    67d2:	93 1f       	adc	r25, r19
    67d4:	20 91 24 0c 	lds	r18, 0x0C24
    67d8:	30 91 25 0c 	lds	r19, 0x0C25
    67dc:	28 17       	cp	r18, r24
    67de:	39 07       	cpc	r19, r25
    67e0:	69 f4       	brne	.+26     	; 0x67fc <free+0x126>
    67e2:	30 97       	sbiw	r30, 0x00	; 0
    67e4:	29 f4       	brne	.+10     	; 0x67f0 <free+0x11a>
    67e6:	10 92 27 0c 	sts	0x0C27, r1
    67ea:	10 92 26 0c 	sts	0x0C26, r1
    67ee:	02 c0       	rjmp	.+4      	; 0x67f4 <free+0x11e>
    67f0:	13 82       	std	Z+3, r1	; 0x03
    67f2:	12 82       	std	Z+2, r1	; 0x02
    67f4:	10 93 25 0c 	sts	0x0C25, r17
    67f8:	00 93 24 0c 	sts	0x0C24, r16
    67fc:	df 91       	pop	r29
    67fe:	cf 91       	pop	r28
    6800:	1f 91       	pop	r17
    6802:	0f 91       	pop	r16
    6804:	08 95       	ret

00006806 <memset>:
    6806:	dc 01       	movw	r26, r24
    6808:	01 c0       	rjmp	.+2      	; 0x680c <memset+0x6>
    680a:	6d 93       	st	X+, r22
    680c:	41 50       	subi	r20, 0x01	; 1
    680e:	50 40       	sbci	r21, 0x00	; 0
    6810:	e0 f7       	brcc	.-8      	; 0x680a <memset+0x4>
    6812:	08 95       	ret

00006814 <_exit>:
    6814:	f8 94       	cli

00006816 <__stop_program>:
    6816:	ff cf       	rjmp	.-2      	; 0x6816 <__stop_program>
